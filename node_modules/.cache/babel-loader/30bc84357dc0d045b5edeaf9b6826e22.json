{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/TopBar/TopBar.tsx\";\nimport { Button, Flex, FlexItem } from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\nimport { useEffect, useRef, useState } from 'react';\nimport styles from './TopBar.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Top bar used to display:\n *  -> errors (e.g. Keycloak error)\n *  -> warnings\n *  -> info (e.g. announcements)\n *\n * It is possible to close the top bar. In that case, also information about its closed state will be stored in session storage.\n * (So page can be refreshed wihout reopening top bar.)\n * But: if children (inner text) is changed, top bar wil reopen.\n *\n * @param topBarClass - class to style top bar with\n * @param icon - icon displayed on the left side next to the top bar text\n */\nexport const TopBar = _ref => {\n  let {\n    children,\n    topBarClass,\n    icon\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(true);\n  const firstRender = useRef(true);\n  useEffect(() => {\n    const topBarState = window.sessionStorage.getItem(topBarClass);\n    setIsOpen(topBarState !== 'closed');\n  }, [topBarClass]);\n  useEffect(() => {\n    if (!firstRender.current) {\n      window.sessionStorage.setItem(topBarClass, 'open');\n      setIsOpen(true);\n    } else {\n      firstRender.current = false;\n    }\n  }, [children, topBarClass]);\n  return isOpen && children ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${styles['top-bar']} ${styles[topBarClass]}`,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: {\n        default: 'justifyContentSpaceBetween'\n      },\n      children: [/*#__PURE__*/_jsxDEV(FlexItem, {\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          spaceItems: {\n            default: 'spaceItemsSm'\n          },\n          children: [/*#__PURE__*/_jsxDEV(FlexItem, {\n            children: icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FlexItem, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: children\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 24\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlexItem, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            setIsOpen(false);\n            window.sessionStorage.setItem(topBarClass, 'closed');\n          },\n          variant: \"plain\",\n          children: /*#__PURE__*/_jsxDEV(TimesIcon, {\n            className: styles['close-icon']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this) : null;\n};","map":{"version":3,"names":["Button","Flex","FlexItem","TimesIcon","useEffect","useRef","useState","styles","TopBar","children","topBarClass","icon","isOpen","setIsOpen","firstRender","topBarState","window","sessionStorage","getItem","current","setItem","default"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/TopBar/TopBar.tsx"],"sourcesContent":["import { Button, Flex, FlexItem } from '@patternfly/react-core';\nimport { TimesIcon } from '@patternfly/react-icons';\nimport { useEffect, useRef, useState } from 'react';\n\nimport styles from './TopBar.module.css';\n\ninterface ITopBarProps {\n  topBarClass: string;\n  icon: any;\n}\n\n/**\n * Top bar used to display:\n *  -> errors (e.g. Keycloak error)\n *  -> warnings\n *  -> info (e.g. announcements)\n *\n * It is possible to close the top bar. In that case, also information about its closed state will be stored in session storage.\n * (So page can be refreshed wihout reopening top bar.)\n * But: if children (inner text) is changed, top bar wil reopen.\n *\n * @param topBarClass - class to style top bar with\n * @param icon - icon displayed on the left side next to the top bar text\n */\nexport const TopBar = ({ children, topBarClass, icon }: React.PropsWithChildren<ITopBarProps>) => {\n  const [isOpen, setIsOpen] = useState<boolean>(true);\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    const topBarState = window.sessionStorage.getItem(topBarClass);\n    setIsOpen(topBarState !== 'closed');\n  }, [topBarClass]);\n\n  useEffect(() => {\n    if (!firstRender.current) {\n      window.sessionStorage.setItem(topBarClass, 'open');\n      setIsOpen(true);\n    } else {\n      firstRender.current = false;\n    }\n  }, [children, topBarClass]);\n\n  return isOpen && children ? (\n    <div className={`${styles['top-bar']} ${styles[topBarClass]}`}>\n      <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n        <FlexItem>\n          <Flex spaceItems={{ default: 'spaceItemsSm' }}>\n            <FlexItem>{icon}</FlexItem>\n            <FlexItem>{<div>{children}</div>}</FlexItem>\n          </Flex>\n        </FlexItem>\n        <FlexItem>\n          <Button\n            onClick={() => {\n              setIsOpen(false);\n              window.sessionStorage.setItem(topBarClass, 'closed');\n            }}\n            variant=\"plain\"\n          >\n            <TimesIcon className={styles['close-icon']} />\n          </Button>\n        </FlexItem>\n      </Flex>\n    </div>\n  ) : null;\n};\n"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAuC,wBAAvC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAG,QAA4E;EAAA,IAA3E;IAAEC,QAAF;IAAYC,WAAZ;IAAyBC;EAAzB,CAA2E;EAChG,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAU,IAAV,CAApC;EACA,MAAMQ,WAAW,GAAGT,MAAM,CAAC,IAAD,CAA1B;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMW,WAAW,GAAGC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8BR,WAA9B,CAApB;IACAG,SAAS,CAACE,WAAW,KAAK,QAAjB,CAAT;EACD,CAHQ,EAGN,CAACL,WAAD,CAHM,CAAT;EAKAN,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,WAAW,CAACK,OAAjB,EAA0B;MACxBH,MAAM,CAACC,cAAP,CAAsBG,OAAtB,CAA8BV,WAA9B,EAA2C,MAA3C;MACAG,SAAS,CAAC,IAAD,CAAT;IACD,CAHD,MAGO;MACLC,WAAW,CAACK,OAAZ,GAAsB,KAAtB;IACD;EACF,CAPQ,EAON,CAACV,QAAD,EAAWC,WAAX,CAPM,CAAT;EASA,OAAOE,MAAM,IAAIH,QAAV,gBACL;IAAK,SAAS,EAAG,GAAEF,MAAM,CAAC,SAAD,CAAY,IAAGA,MAAM,CAACG,WAAD,CAAc,EAA5D;IAAA,uBACE,QAAC,IAAD;MAAM,cAAc,EAAE;QAAEW,OAAO,EAAE;MAAX,CAAtB;MAAA,wBACE,QAAC,QAAD;QAAA,uBACE,QAAC,IAAD;UAAM,UAAU,EAAE;YAAEA,OAAO,EAAE;UAAX,CAAlB;UAAA,wBACE,QAAC,QAAD;YAAA,UAAWV;UAAX;YAAA;YAAA;YAAA;UAAA,QADF,eAEE,QAAC,QAAD;YAAA,uBAAW;cAAA,UAAMF;YAAN;cAAA;cAAA;cAAA;YAAA;UAAX;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,eAOE,QAAC,QAAD;QAAA,uBACE,QAAC,MAAD;UACE,OAAO,EAAE,MAAM;YACbI,SAAS,CAAC,KAAD,CAAT;YACAG,MAAM,CAACC,cAAP,CAAsBG,OAAtB,CAA8BV,WAA9B,EAA2C,QAA3C;UACD,CAJH;UAKE,OAAO,EAAC,OALV;UAAA,uBAOE,QAAC,SAAD;YAAW,SAAS,EAAEH,MAAM,CAAC,YAAD;UAA5B;YAAA;YAAA;YAAA;UAAA;QAPF;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADK,GAsBH,IAtBJ;AAuBD,CAzCM"},"metadata":{},"sourceType":"module"}