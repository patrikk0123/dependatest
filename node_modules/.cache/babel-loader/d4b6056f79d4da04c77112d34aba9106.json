{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\n/* eslint-disable no-console */\n\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport { css } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { TooltipArrow } from './TooltipArrow';\nimport { KEY_CODES } from '../../helpers/constants';\nimport tooltipMaxWidth from '@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth';\nimport { Popper, getOpacityTransition } from '../../helpers/Popper/Popper';\nexport var TooltipPosition;\n\n(function (TooltipPosition) {\n  TooltipPosition[\"auto\"] = \"auto\";\n  TooltipPosition[\"top\"] = \"top\";\n  TooltipPosition[\"bottom\"] = \"bottom\";\n  TooltipPosition[\"left\"] = \"left\";\n  TooltipPosition[\"right\"] = \"right\";\n  TooltipPosition[\"topStart\"] = \"top-start\";\n  TooltipPosition[\"topEnd\"] = \"top-end\";\n  TooltipPosition[\"bottomStart\"] = \"bottom-start\";\n  TooltipPosition[\"bottomEnd\"] = \"bottom-end\";\n  TooltipPosition[\"leftStart\"] = \"left-start\";\n  TooltipPosition[\"leftEnd\"] = \"left-end\";\n  TooltipPosition[\"rightStart\"] = \"right-start\";\n  TooltipPosition[\"rightEnd\"] = \"right-end\";\n})(TooltipPosition || (TooltipPosition = {})); // id for associating trigger with the content aria-describedby or aria-labelledby\n\n\nvar pfTooltipIdCounter = 1;\nexport var Tooltip = function Tooltip(_a) {\n  var bodyContent = _a.content,\n      _a$position = _a.position,\n      position = _a$position === void 0 ? 'top' : _a$position,\n      _a$trigger = _a.trigger,\n      trigger = _a$trigger === void 0 ? 'mouseenter focus' : _a$trigger,\n      _a$isVisible = _a.isVisible,\n      isVisible = _a$isVisible === void 0 ? false : _a$isVisible,\n      _a$isContentLeftAlign = _a.isContentLeftAligned,\n      isContentLeftAligned = _a$isContentLeftAlign === void 0 ? false : _a$isContentLeftAlign,\n      _a$enableFlip = _a.enableFlip,\n      enableFlip = _a$enableFlip === void 0 ? true : _a$enableFlip,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$entryDelay = _a.entryDelay,\n      entryDelay = _a$entryDelay === void 0 ? 300 : _a$entryDelay,\n      _a$exitDelay = _a.exitDelay,\n      exitDelay = _a$exitDelay === void 0 ? 300 : _a$exitDelay,\n      _a$appendTo = _a.appendTo,\n      appendTo = _a$appendTo === void 0 ? function () {\n    return document.body;\n  } : _a$appendTo,\n      _a$zIndex = _a.zIndex,\n      zIndex = _a$zIndex === void 0 ? 9999 : _a$zIndex,\n      _a$maxWidth = _a.maxWidth,\n      maxWidth = _a$maxWidth === void 0 ? tooltipMaxWidth.value : _a$maxWidth,\n      _a$distance = _a.distance,\n      distance = _a$distance === void 0 ? 15 : _a$distance,\n      _a$aria = _a.aria,\n      aria = _a$aria === void 0 ? 'describedby' : _a$aria,\n      _a$flipBehavior = _a.flipBehavior,\n      flipBehavior = _a$flipBehavior === void 0 ? ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'] : _a$flipBehavior,\n      _a$id = _a.id,\n      id = _a$id === void 0 ? \"pf-tooltip-\".concat(pfTooltipIdCounter++) : _a$id,\n      children = _a.children,\n      _a$animationDuration = _a.animationDuration,\n      animationDuration = _a$animationDuration === void 0 ? 300 : _a$animationDuration,\n      reference = _a.reference,\n      _a$ariaLive = _a['aria-live'],\n      ariaLive = _a$ariaLive === void 0 ? reference ? 'polite' : 'off' : _a$ariaLive,\n      boundary = _a.boundary,\n      isAppLauncher = _a.isAppLauncher,\n      tippyProps = _a.tippyProps,\n      rest = __rest(_a, [\"content\", \"position\", \"trigger\", \"isVisible\", \"isContentLeftAligned\", \"enableFlip\", \"className\", \"entryDelay\", \"exitDelay\", \"appendTo\", \"zIndex\", \"maxWidth\", \"distance\", \"aria\", \"flipBehavior\", \"id\", \"children\", \"animationDuration\", \"reference\", 'aria-live', \"boundary\", \"isAppLauncher\", \"tippyProps\"]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    boundary !== undefined && console.warn('The Tooltip boundary prop has been deprecated. If you want to constrain the popper to a specific element use the appendTo prop instead.');\n    isAppLauncher !== undefined && console.warn('The Tooltip isAppLauncher prop has been deprecated and is no longer used.');\n    tippyProps !== undefined && console.warn('The Tooltip tippyProps prop has been deprecated and is no longer used.');\n  } // could make this a prop in the future (true | false | 'toggle')\n\n\n  var hideOnClick = true;\n  var triggerOnMouseenter = trigger.includes('mouseenter');\n  var triggerOnFocus = trigger.includes('focus');\n  var triggerOnClick = trigger.includes('click');\n  var triggerManually = trigger === 'manual';\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState(0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      opacity = _React$useState4[0],\n      setOpacity = _React$useState4[1];\n\n  var transitionTimerRef = React.useRef(null);\n  var showTimerRef = React.useRef(null);\n  var hideTimerRef = React.useRef(null);\n\n  var clearTimeouts = function clearTimeouts(timeoutRefs) {\n    timeoutRefs.forEach(function (ref) {\n      if (ref.current) {\n        clearTimeout(ref.current);\n      }\n    });\n  }; // Cancel all timers on unmount\n\n\n  React.useEffect(function () {\n    return function () {\n      clearTimeouts([transitionTimerRef, hideTimerRef, showTimerRef]);\n    };\n  }, []);\n\n  var onDocumentKeyDown = function onDocumentKeyDown(event) {\n    if (!triggerManually) {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY && visible) {\n        hide();\n      }\n    }\n  };\n\n  var onTriggerEnter = function onTriggerEnter(event) {\n    if (event.keyCode === KEY_CODES.ENTER) {\n      if (!visible) {\n        show();\n      } else {\n        hide();\n      }\n    }\n  };\n\n  React.useEffect(function () {\n    if (isVisible) {\n      show();\n    } else {\n      hide();\n    }\n  }, [isVisible]);\n\n  var show = function show() {\n    clearTimeouts([transitionTimerRef, hideTimerRef]);\n    showTimerRef.current = setTimeout(function () {\n      setVisible(true);\n      setOpacity(1);\n    }, entryDelay);\n  };\n\n  var hide = function hide() {\n    clearTimeouts([showTimerRef]);\n    hideTimerRef.current = setTimeout(function () {\n      setOpacity(0);\n      transitionTimerRef.current = setTimeout(function () {\n        return setVisible(false);\n      }, animationDuration);\n    }, exitDelay);\n  };\n\n  var positionModifiers = {\n    top: styles.modifiers.top,\n    bottom: styles.modifiers.bottom,\n    left: styles.modifiers.left,\n    right: styles.modifiers.right,\n    'top-start': styles.modifiers.topLeft,\n    'top-end': styles.modifiers.topRight,\n    'bottom-start': styles.modifiers.bottomLeft,\n    'bottom-end': styles.modifiers.bottomRight,\n    'left-start': styles.modifiers.leftTop,\n    'left-end': styles.modifiers.leftBottom,\n    'right-start': styles.modifiers.rightTop,\n    'right-end': styles.modifiers.rightBottom\n  };\n  var hasCustomMaxWidth = maxWidth !== tooltipMaxWidth.value;\n  var content = React.createElement(\"div\", Object.assign({\n    \"aria-live\": ariaLive,\n    className: css(styles.tooltip, className),\n    role: \"tooltip\",\n    id: id,\n    style: {\n      maxWidth: hasCustomMaxWidth ? maxWidth : null,\n      opacity: opacity,\n      transition: getOpacityTransition(animationDuration)\n    }\n  }, rest), React.createElement(TooltipArrow, null), React.createElement(TooltipContent, {\n    isLeftAligned: isContentLeftAligned\n  }, bodyContent));\n\n  var onDocumentClick = function onDocumentClick(event, triggerElement) {\n    // event.currentTarget = document\n    // event.target could be triggerElement or something else\n    if (hideOnClick === true) {\n      // hide on inside the toggle as well as on outside clicks\n      if (visible) {\n        hide();\n      } else if (event.target === triggerElement) {\n        show();\n      }\n    } else if (hideOnClick === 'toggle' && event.target === triggerElement) {\n      // prevent outside clicks from hiding but allow it to still be toggled on toggle click\n      if (visible) {\n        hide();\n      } else {\n        show();\n      }\n    } else if (hideOnClick === false && !visible && event.target === triggerElement) {\n      show();\n    }\n  };\n\n  var addAriaToTrigger = function addAriaToTrigger() {\n    if (aria === 'describedby' && children && children.props && !children.props['aria-describedby']) {\n      return React.cloneElement(children, {\n        'aria-describedby': id\n      });\n    } else if (aria === 'labelledby' && children.props && !children.props['aria-labelledby']) {\n      return React.cloneElement(children, {\n        'aria-labelledby': id\n      });\n    }\n\n    return children;\n  };\n\n  return React.createElement(Popper, {\n    trigger: aria !== 'none' && visible ? addAriaToTrigger() : children,\n    reference: reference,\n    popper: content,\n    popperMatchesTriggerWidth: false,\n    appendTo: appendTo,\n    isVisible: visible,\n    positionModifiers: positionModifiers,\n    distance: distance,\n    placement: position,\n    onMouseEnter: triggerOnMouseenter && show,\n    onMouseLeave: triggerOnMouseenter && hide,\n    onPopperMouseEnter: triggerOnMouseenter && show,\n    onPopperMouseLeave: triggerOnMouseenter && hide,\n    onFocus: triggerOnFocus && show,\n    onBlur: triggerOnFocus && hide,\n    onDocumentClick: triggerOnClick && onDocumentClick,\n    onDocumentKeyDown: triggerManually ? null : onDocumentKeyDown,\n    onTriggerEnter: triggerManually ? null : onTriggerEnter,\n    enableFlip: enableFlip,\n    zIndex: zIndex,\n    flipBehavior: flipBehavior\n  });\n};\nTooltip.displayName = 'Tooltip';","map":{"version":3,"mappings":"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","names":["React","styles","css","TooltipContent","TooltipArrow","KEY_CODES","tooltipMaxWidth","Popper","getOpacityTransition","TooltipPosition","pfTooltipIdCounter","Tooltip","_a","bodyContent","content","position","trigger","isVisible","isContentLeftAligned","enableFlip","className","entryDelay","exitDelay","appendTo","document","body","zIndex","maxWidth","value","distance","aria","flipBehavior","id","children","animationDuration","reference","ariaLive","boundary","isAppLauncher","tippyProps","rest","__rest","process","env","NODE_ENV","undefined","console","warn","hideOnClick","triggerOnMouseenter","includes","triggerOnFocus","triggerOnClick","triggerManually","useState","visible","setVisible","opacity","setOpacity","transitionTimerRef","useRef","showTimerRef","hideTimerRef","clearTimeouts","timeoutRefs","forEach","ref","current","clearTimeout","useEffect","onDocumentKeyDown","event","keyCode","ESCAPE_KEY","hide","onTriggerEnter","ENTER","show","setTimeout","positionModifiers","top","modifiers","bottom","left","right","topLeft","topRight","bottomLeft","bottomRight","leftTop","leftBottom","rightTop","rightBottom","hasCustomMaxWidth","tooltip","role","style","transition","isLeftAligned","onDocumentClick","triggerElement","target","addAriaToTrigger","props","cloneElement","popper","popperMatchesTriggerWidth","placement","onMouseEnter","onMouseLeave","onPopperMouseEnter","onPopperMouseLeave","onFocus","onBlur","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["/* eslint-disable no-console */\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tooltip/tooltip';\nimport { css } from '@patternfly/react-styles';\nimport { TooltipContent } from './TooltipContent';\nimport { TooltipArrow } from './TooltipArrow';\nimport { KEY_CODES } from '../../helpers/constants';\nimport tooltipMaxWidth from '@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth';\nimport { ReactElement } from 'react';\nimport { Popper, getOpacityTransition } from '../../helpers/Popper/Popper';\nimport { Props as TippyProps } from '../../helpers/Popper/DeprecatedTippyTypes';\n\nexport enum TooltipPosition {\n  auto = 'auto',\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right',\n  topStart = 'top-start',\n  topEnd = 'top-end',\n  bottomStart = 'bottom-start',\n  bottomEnd = 'bottom-end',\n  leftStart = 'left-start',\n  leftEnd = 'left-end',\n  rightStart = 'right-start',\n  rightEnd = 'right-end'\n}\n\nexport interface TooltipProps extends Omit<React.HTMLProps<HTMLDivElement>, 'content'> {\n  /** The element to append the tooltip to, defaults to body */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /**\n   * aria-labelledby or aria-describedby for tooltip.\n   * The trigger will be cloned to add the aria attribute, and the corresponding id in the form of 'pf-tooltip-#' is added to the content container.\n   * If you don't want that or prefer to add the aria attribute yourself on the trigger, set aria to 'none'.\n   */\n  aria?: 'describedby' | 'labelledby' | 'none';\n  /**\n   * Determines whether the tooltip is an aria-live region. If the reference prop is passed in the\n   * default behavior is 'polite' in order to ensure the tooltip contents is announced to\n   * assistive technologies. Otherwise the default behavior is 'off'.\n   */\n  'aria-live'?: 'off' | 'polite';\n  /**\n   * The reference element to which the Tooltip is relatively placed to.\n   * If you cannot wrap the reference with the Tooltip, you can use the reference prop instead.\n   * Usage: <Tooltip><Button>Reference</Button></Tooltip>\n   */\n  children?: ReactElement<any>;\n  /**\n   * The reference element to which the Tooltip is relatively placed to.\n   * If you can wrap the reference with the Tooltip, you can use the children prop instead.\n   * Usage: <Tooltip reference={() => document.getElementById('reference-element')} />\n   */\n  reference?: HTMLElement | (() => HTMLElement) | React.RefObject<any>;\n  /** Tooltip additional class */\n  className?: string;\n  /** Tooltip content */\n  content: React.ReactNode;\n  /** Distance of the tooltip to its target, defaults to 15 */\n  distance?: number;\n  /** If true, tries to keep the tooltip in view by flipping it if necessary */\n  enableFlip?: boolean;\n  /** Delay in ms before the tooltip appears */\n  entryDelay?: number;\n  /** Delay in ms before the tooltip disappears, Avoid passing in a value of \"0\", as users should\n   * be given ample time to move their mouse from the trigger to the tooltip content without the content\n   * being hidden.\n   */\n  exitDelay?: number;\n  /**\n   * The desired position to flip the tooltip to if the initial position is not possible.\n   * By setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.\n   * You can also pass an array of positions that determines the flip order. It should contain the initial position\n   * followed by alternative positions if that position is unavailable.\n   * Example: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to\n   * ['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\n   * space to the right, so it finally shows the tooltip on the left.\n   */\n  flipBehavior?:\n    | 'flip'\n    | (\n        | 'top'\n        | 'bottom'\n        | 'left'\n        | 'right'\n        | 'top-start'\n        | 'top-end'\n        | 'bottom-start'\n        | 'bottom-end'\n        | 'left-start'\n        | 'left-end'\n        | 'right-start'\n        | 'right-end'\n      )[];\n  /** Maximum width of the tooltip (default 18.75rem) */\n  maxWidth?: string;\n  /**\n   * Tooltip position. Note: With 'enableFlip' set to true,\n   * it will change the position if there is not enough space for the starting position.\n   * The behavior of where it flips to can be controlled through the flipBehavior prop.\n   * The 'auto' position chooses the side with the most space.\n   * The 'auto' position requires the 'enableFlip' prop to be true.\n   */\n  position?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /**\n   * Tooltip trigger: click, mouseenter, focus, manual\n   * Set to manual to trigger tooltip programmatically (through the isVisible prop)\n   */\n  trigger?: string;\n  /** Flag to indicate that the text content is left aligned */\n  isContentLeftAligned?: boolean;\n  /** value for visibility when trigger is 'manual' */\n  isVisible?: boolean;\n  /** z-index of the tooltip */\n  zIndex?: number;\n  /** id of the tooltip */\n  id?: string;\n  /** CSS fade transition animation duration */\n  animationDuration?: number;\n  /** @deprecated - no longer used. if you want to constrain the popper to a specific element use the appendTo prop instead */\n  boundary?: 'scrollParent' | 'window' | 'viewport' | HTMLElement;\n  /** @deprecated - no longer used */\n  isAppLauncher?: boolean;\n  /** @deprecated - no longer used */\n  tippyProps?: Partial<TippyProps>;\n}\n\n// id for associating trigger with the content aria-describedby or aria-labelledby\nlet pfTooltipIdCounter = 1;\n\nexport const Tooltip: React.FunctionComponent<TooltipProps> = ({\n  content: bodyContent,\n  position = 'top',\n  trigger = 'mouseenter focus',\n  isVisible = false,\n  isContentLeftAligned = false,\n  enableFlip = true,\n  className = '',\n  entryDelay = 300,\n  exitDelay = 300,\n  appendTo = () => document.body,\n  zIndex = 9999,\n  maxWidth = tooltipMaxWidth.value,\n  distance = 15,\n  aria = 'describedby',\n  // For every initial starting position, there are 3 escape positions\n  flipBehavior = ['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom'],\n  id = `pf-tooltip-${pfTooltipIdCounter++}`,\n  children,\n  animationDuration = 300,\n  reference,\n  'aria-live': ariaLive = reference ? 'polite' : 'off',\n  boundary,\n  isAppLauncher,\n  tippyProps,\n  ...rest\n}: TooltipProps) => {\n  if (process.env.NODE_ENV !== 'production') {\n    boundary !== undefined &&\n      console.warn(\n        'The Tooltip boundary prop has been deprecated. If you want to constrain the popper to a specific element use the appendTo prop instead.'\n      );\n    isAppLauncher !== undefined &&\n      console.warn('The Tooltip isAppLauncher prop has been deprecated and is no longer used.');\n    tippyProps !== undefined && console.warn('The Tooltip tippyProps prop has been deprecated and is no longer used.');\n  }\n  // could make this a prop in the future (true | false | 'toggle')\n  const hideOnClick = true;\n  const triggerOnMouseenter = trigger.includes('mouseenter');\n  const triggerOnFocus = trigger.includes('focus');\n  const triggerOnClick = trigger.includes('click');\n  const triggerManually = trigger === 'manual';\n  const [visible, setVisible] = React.useState(false);\n  const [opacity, setOpacity] = React.useState(0);\n  const transitionTimerRef = React.useRef(null);\n  const showTimerRef = React.useRef(null);\n  const hideTimerRef = React.useRef(null);\n\n  const clearTimeouts = (timeoutRefs: React.RefObject<any>[]) => {\n    timeoutRefs.forEach(ref => {\n      if (ref.current) {\n        clearTimeout(ref.current);\n      }\n    });\n  };\n\n  // Cancel all timers on unmount\n  React.useEffect(\n    () => () => {\n      clearTimeouts([transitionTimerRef, hideTimerRef, showTimerRef]);\n    },\n    []\n  );\n\n  const onDocumentKeyDown = (event: KeyboardEvent) => {\n    if (!triggerManually) {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY && visible) {\n        hide();\n      }\n    }\n  };\n  const onTriggerEnter = (event: KeyboardEvent) => {\n    if (event.keyCode === KEY_CODES.ENTER) {\n      if (!visible) {\n        show();\n      } else {\n        hide();\n      }\n    }\n  };\n  React.useEffect(() => {\n    if (isVisible) {\n      show();\n    } else {\n      hide();\n    }\n  }, [isVisible]);\n  const show = () => {\n    clearTimeouts([transitionTimerRef, hideTimerRef]);\n    showTimerRef.current = setTimeout(() => {\n      setVisible(true);\n      setOpacity(1);\n    }, entryDelay);\n  };\n  const hide = () => {\n    clearTimeouts([showTimerRef]);\n    hideTimerRef.current = setTimeout(() => {\n      setOpacity(0);\n      transitionTimerRef.current = setTimeout(() => setVisible(false), animationDuration);\n    }, exitDelay);\n  };\n  const positionModifiers = {\n    top: styles.modifiers.top,\n    bottom: styles.modifiers.bottom,\n    left: styles.modifiers.left,\n    right: styles.modifiers.right,\n    'top-start': styles.modifiers.topLeft,\n    'top-end': styles.modifiers.topRight,\n    'bottom-start': styles.modifiers.bottomLeft,\n    'bottom-end': styles.modifiers.bottomRight,\n    'left-start': styles.modifiers.leftTop,\n    'left-end': styles.modifiers.leftBottom,\n    'right-start': styles.modifiers.rightTop,\n    'right-end': styles.modifiers.rightBottom\n  };\n  const hasCustomMaxWidth = maxWidth !== tooltipMaxWidth.value;\n  const content = (\n    <div\n      aria-live={ariaLive}\n      className={css(styles.tooltip, className)}\n      role=\"tooltip\"\n      id={id}\n      style={{\n        maxWidth: hasCustomMaxWidth ? maxWidth : null,\n        opacity,\n        transition: getOpacityTransition(animationDuration)\n      }}\n      {...rest}\n    >\n      <TooltipArrow />\n      <TooltipContent isLeftAligned={isContentLeftAligned}>{bodyContent}</TooltipContent>\n    </div>\n  );\n\n  const onDocumentClick = (event: MouseEvent, triggerElement: HTMLElement) => {\n    // event.currentTarget = document\n    // event.target could be triggerElement or something else\n    if (hideOnClick === true) {\n      // hide on inside the toggle as well as on outside clicks\n      if (visible) {\n        hide();\n      } else if (event.target === triggerElement) {\n        show();\n      }\n    } else if (hideOnClick === 'toggle' && event.target === triggerElement) {\n      // prevent outside clicks from hiding but allow it to still be toggled on toggle click\n      if (visible) {\n        hide();\n      } else {\n        show();\n      }\n    } else if (hideOnClick === false && !visible && event.target === triggerElement) {\n      show();\n    }\n  };\n\n  const addAriaToTrigger = () => {\n    if (aria === 'describedby' && children && children.props && !children.props['aria-describedby']) {\n      return React.cloneElement(children, { 'aria-describedby': id });\n    } else if (aria === 'labelledby' && children.props && !children.props['aria-labelledby']) {\n      return React.cloneElement(children, { 'aria-labelledby': id });\n    }\n    return children;\n  };\n\n  return (\n    <Popper\n      trigger={aria !== 'none' && visible ? addAriaToTrigger() : children}\n      reference={reference}\n      popper={content}\n      popperMatchesTriggerWidth={false}\n      appendTo={appendTo}\n      isVisible={visible}\n      positionModifiers={positionModifiers}\n      distance={distance}\n      placement={position}\n      onMouseEnter={triggerOnMouseenter && show}\n      onMouseLeave={triggerOnMouseenter && hide}\n      onPopperMouseEnter={triggerOnMouseenter && show}\n      onPopperMouseLeave={triggerOnMouseenter && hide}\n      onFocus={triggerOnFocus && show}\n      onBlur={triggerOnFocus && hide}\n      onDocumentClick={triggerOnClick && onDocumentClick}\n      onDocumentKeyDown={triggerManually ? null : onDocumentKeyDown}\n      onTriggerEnter={triggerManually ? null : onTriggerEnter}\n      enableFlip={enableFlip}\n      zIndex={zIndex}\n      flipBehavior={flipBehavior}\n    />\n  );\n};\nTooltip.displayName = 'Tooltip';\n"]},"metadata":{},"sourceType":"module"}