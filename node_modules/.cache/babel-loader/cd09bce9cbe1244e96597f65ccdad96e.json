{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx\";\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute equality to current filter text value (=like= operator)\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param onSelect - function to be called when option is selected (value is passed in)\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param shouldDisplayDescription - should options display description? (if any)\n */\nexport const SearchSelect = _ref => {\n  let {\n    fetchCallback,\n    attribute,\n    onSelect,\n    delay = 200,\n    pageSize = 20,\n    shouldDisplayDescription = false\n  } = _ref;\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState([]); // data downloaded on first load\n\n  const [defaultData, setDefaultData] = useState([]); // currenyly selected option\n\n  const [selected, setSelected] = useState(); // loading state\n\n  const [loading, setLoading] = useState(false);\n  const [isSelectOpen, setIsSelectOpen] = useState(false); // used to fetch data after delay\n\n  const timeout = useRef();\n  const selectRef = useRef();\n  const lastAbortController = useRef(); // fetch data and save them\n  // if filterText string is empty, default data are saved\n\n  const fetchData = useCallback(function () {\n    var _lastAbortController$;\n\n    let filterText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const requstConfig = {\n      params: {\n        pageSize\n      }\n    };\n\n    if (filterText) {\n      requstConfig.params.q = `${attribute}=like=\"%${filterText}%\"`;\n    } // abort previous request\n\n\n    (_lastAbortController$ = lastAbortController.current) === null || _lastAbortController$ === void 0 ? void 0 : _lastAbortController$.abort(); // create abort signal for new request\n\n    lastAbortController.current = new AbortController();\n    requstConfig.signal = lastAbortController.current.signal;\n    setLoading(true);\n    fetchCallback(requstConfig).then(response => {\n      const data = response.data.content;\n      setCurrentData(data);\n      if (filterText === '') setDefaultData(data);\n      setLoading(false);\n    }).catch(e => {\n      console.log(e);\n    });\n  }, [fetchCallback, attribute, pageSize]); // load first / default data\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]); // filtering of select\n\n  const filterSelect = value => {\n    // if text filter changed, unselect\n    clearSelection();\n    clearTimeout(timeout === null || timeout === void 0 ? void 0 : timeout.current);\n\n    if (value !== '') {\n      timeout.current = setTimeout(() => fetchData(value), delay);\n    } else {\n      var _lastAbortController$2;\n\n      // if filter is empty string, just set default options\n      setCurrentData(defaultData);\n      (_lastAbortController$2 = lastAbortController.current) === null || _lastAbortController$2 === void 0 ? void 0 : _lastAbortController$2.abort();\n    }\n  }; // selecting and option\n\n\n  const onSelectInner = (event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelect();else {\n      if (event) {\n        // do this only when select option is clicked\n        // (for some reason, this function is called also on blur)\n        setCurrentData([]);\n        fetchData(selection);\n        onSelect(selection);\n      }\n\n      setSelected(selection);\n      setIsSelectOpen(false);\n    }\n  }; // if anything was selected, unselect it\n\n\n  const clearSelection = () => {\n    if (selected) {\n      setSelected(undefined);\n      onSelect('');\n    }\n  }; // on clear, set default values\n\n\n  const clearSelect = () => {\n    setCurrentData(defaultData);\n    setIsSelectOpen(false);\n    clearSelection();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    variant: SelectVariant.typeahead,\n    onToggle: isOpen => {\n      setIsSelectOpen(isOpen);\n    },\n    onTypeaheadInputChanged: filterSelect,\n    onSelect: onSelectInner,\n    onFilter: () => {\n      // filtering is not done here\n      return undefined;\n    },\n    loadingVariant: loading ? 'spinner' : undefined,\n    onClear: clearSelect,\n    selections: selected,\n    isOpen: isSelectOpen,\n    isInputValuePersisted: true,\n    isInputFilterPersisted: true,\n    ref: selectRef,\n    children: currentData.map((option, index) => /*#__PURE__*/_jsxDEV(SelectOption, {\n      value: option[attribute],\n      description: shouldDisplayDescription && option['description']\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Select","SelectOption","SelectVariant","useCallback","useEffect","useRef","useState","SearchSelect","fetchCallback","attribute","onSelect","delay","pageSize","shouldDisplayDescription","currentData","setCurrentData","defaultData","setDefaultData","selected","setSelected","loading","setLoading","isSelectOpen","setIsSelectOpen","timeout","selectRef","lastAbortController","fetchData","filterText","requstConfig","params","q","current","abort","AbortController","signal","then","response","data","content","catch","e","console","log","filterSelect","value","clearSelection","clearTimeout","setTimeout","onSelectInner","event","selection","isPlaceholder","clearSelect","undefined","typeahead","isOpen","map","option","index"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx"],"sourcesContent":["import { Select, SelectOption, SelectOptionObject, SelectVariant } from '@patternfly/react-core';\nimport { AxiosRequestConfig } from 'axios';\nimport { MutableRefObject, useCallback, useEffect, useRef, useState } from 'react';\n\ninterface ISearchSelectProps {\n  fetchCallback: (requstConfig: AxiosRequestConfig) => any;\n  attribute: string;\n  onSelect: Function;\n  delay?: number;\n  pageSize?: number;\n  shouldDisplayDescription?: boolean;\n}\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute equality to current filter text value (=like= operator)\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param onSelect - function to be called when option is selected (value is passed in)\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param shouldDisplayDescription - should options display description? (if any)\n */\nexport const SearchSelect = ({\n  fetchCallback,\n  attribute,\n  onSelect,\n  delay = 200,\n  pageSize = 20,\n  shouldDisplayDescription = false,\n}: ISearchSelectProps) => {\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState<any[]>([]);\n  // data downloaded on first load\n  const [defaultData, setDefaultData] = useState<any[]>([]);\n  // currenyly selected option\n  const [selected, setSelected] = useState<string | undefined>();\n\n  // loading state\n  const [loading, setLoading] = useState<boolean>(false);\n  const [isSelectOpen, setIsSelectOpen] = useState<boolean>(false);\n\n  // used to fetch data after delay\n  const timeout = useRef<NodeJS.Timeout>();\n  const selectRef = useRef() as MutableRefObject<Select>;\n\n  const lastAbortController = useRef<AbortController>();\n\n  // fetch data and save them\n  // if filterText string is empty, default data are saved\n  const fetchData = useCallback(\n    (filterText: string = '') => {\n      const requstConfig: AxiosRequestConfig = { params: { pageSize } };\n      if (filterText) {\n        requstConfig.params.q = `${attribute}=like=\"%${filterText}%\"`;\n      }\n\n      // abort previous request\n      lastAbortController.current?.abort();\n      // create abort signal for new request\n      lastAbortController.current = new AbortController();\n      requstConfig.signal = lastAbortController.current.signal;\n\n      setLoading(true);\n\n      fetchCallback(requstConfig)\n        .then((response: any) => {\n          const data = response.data.content;\n          setCurrentData(data);\n          if (filterText === '') setDefaultData(data);\n          setLoading(false);\n        })\n        .catch((e: any) => {\n          console.log(e);\n        });\n    },\n    [fetchCallback, attribute, pageSize]\n  );\n\n  // load first / default data\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // filtering of select\n  const filterSelect = (value: string) => {\n    // if text filter changed, unselect\n    clearSelection();\n\n    clearTimeout(timeout?.current);\n    if (value !== '') {\n      timeout.current = setTimeout(() => fetchData(value), delay);\n    } else {\n      // if filter is empty string, just set default options\n      setCurrentData(defaultData);\n      lastAbortController.current?.abort();\n    }\n  };\n\n  // selecting and option\n  const onSelectInner = (\n    event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject,\n    isPlaceholder: boolean | undefined\n  ) => {\n    if (isPlaceholder) clearSelect();\n    else {\n      if (event) {\n        // do this only when select option is clicked\n        // (for some reason, this function is called also on blur)\n        setCurrentData([]);\n        fetchData(selection as string);\n        onSelect(selection);\n      }\n      setSelected(selection as string);\n      setIsSelectOpen(false);\n    }\n  };\n\n  // if anything was selected, unselect it\n  const clearSelection = () => {\n    if (selected) {\n      setSelected(undefined);\n      onSelect('');\n    }\n  };\n\n  // on clear, set default values\n  const clearSelect = () => {\n    setCurrentData(defaultData);\n    setIsSelectOpen(false);\n    clearSelection();\n  };\n\n  return (\n    <Select\n      variant={SelectVariant.typeahead}\n      onToggle={(isOpen: boolean) => {\n        setIsSelectOpen(isOpen);\n      }}\n      onTypeaheadInputChanged={filterSelect}\n      onSelect={onSelectInner}\n      onFilter={() => {\n        // filtering is not done here\n        return undefined;\n      }}\n      loadingVariant={loading ? 'spinner' : undefined}\n      onClear={clearSelect}\n      selections={selected}\n      isOpen={isSelectOpen}\n      isInputValuePersisted={true}\n      isInputFilterPersisted={true}\n      ref={selectRef}\n    >\n      {currentData.map((option: any, index: number) => (\n        <SelectOption key={index} value={option[attribute]} description={shouldDisplayDescription && option['description']} />\n      ))}\n    </Select>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}