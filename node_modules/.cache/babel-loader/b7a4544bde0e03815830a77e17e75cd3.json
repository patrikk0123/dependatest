{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tile/tile';\nimport { css } from '@patternfly/react-styles';\nexport const Tile = _a => {\n  var {\n    children,\n    title,\n    icon,\n    isStacked,\n    isSelected,\n    isDisabled,\n    isDisplayLarge,\n    className\n  } = _a,\n      props = __rest(_a, [\"children\", \"title\", \"icon\", \"isStacked\", \"isSelected\", \"isDisabled\", \"isDisplayLarge\", \"className\"]);\n\n  return React.createElement(\"div\", Object.assign({\n    role: \"option\",\n    \"aria-selected\": isSelected\n  }, isDisabled && {\n    'aria-disabled': isDisabled\n  }, {\n    className: css(styles.tile, isSelected && styles.modifiers.selected, isDisabled && styles.modifiers.disabled, isDisplayLarge && styles.modifiers.displayLg, className),\n    tabIndex: 0\n  }, props), React.createElement(\"div\", {\n    className: css(styles.tileHeader, isStacked && styles.modifiers.stacked)\n  }, icon && React.createElement(\"div\", {\n    className: css(styles.tileIcon)\n  }, icon), React.createElement(\"div\", {\n    className: css(styles.tileTitle)\n  }, title)), children && React.createElement(\"div\", {\n    className: css(styles.tileBody)\n  }, children));\n};\nTile.displayName = 'Tile';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,mDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAqBA,OAAO,MAAMC,IAAI,GAAwCC,EAAD,IAUxC;MAVyC;IACvDC,QADuD;IAEvDC,KAFuD;IAGvDC,IAHuD;IAIvDC,SAJuD;IAKvDC,UALuD;IAMvDC,UANuD;IAOvDC,cAPuD;IAQvDC;EARuD,IAQ9CR;MACNS,KAAK,cAT+C,qGAS/C;;EACO,OACfb;IACEc,IAAI,EAAC,QADP;IACe,iBACEL;EAFjB,GAGOC,UAAU,IAAI;IAAE,iBAAiBA;EAAnB,CAHrB,EAGqD;IACnDE,SAAS,EAAEV,GAAG,CACZD,MAAM,CAACc,IADK,EAEZN,UAAU,IAAIR,MAAM,CAACe,SAAP,CAAiBC,QAFnB,EAGZP,UAAU,IAAIT,MAAM,CAACe,SAAP,CAAiBE,QAHnB,EAIZP,cAAc,IAAIV,MAAM,CAACe,SAAP,CAAiBG,SAJvB,EAKZP,SALY,CADqC;IAQnDQ,QAAQ,EAAE;EARyC,CAHrD,EAYMP,KAZN,GAcEb;IAAKY,SAAS,EAAEV,GAAG,CAACD,MAAM,CAACoB,UAAR,EAAoBb,SAAS,IAAIP,MAAM,CAACe,SAAP,CAAiBM,OAAlD;EAAnB,GACGf,IAAI,IAAIP;IAAKY,SAAS,EAAEV,GAAG,CAACD,MAAM,CAACsB,QAAR;EAAnB,GAAuChB,IAAvC,CADX,EAEEP;IAAKY,SAAS,EAAEV,GAAG,CAACD,MAAM,CAACuB,SAAR;EAAnB,GAAwClB,KAAxC,CAFF,CAdF,EAkBGD,QAAQ,IAAIL;IAAKY,SAAS,EAAEV,GAAG,CAACD,MAAM,CAACwB,QAAR;EAAnB,GAAuCpB,QAAvC,CAlBf,CADe;AAqBhB,CA/BM;AAgCPF,IAAI,CAACuB,WAAL,GAAmB,MAAnB","names":["React","styles","css","Tile","_a","children","title","icon","isStacked","isSelected","isDisabled","isDisplayLarge","className","props","role","tile","modifiers","selected","disabled","displayLg","tabIndex","tileHeader","stacked","tileIcon","tileTitle","tileBody","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Tile/Tile.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tile/tile';\nimport { css } from '@patternfly/react-styles';\n\nexport interface TileProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the banner */\n  children?: React.ReactNode;\n  /** Additional classes added to the banner */\n  className?: string;\n  /** Title of the tile */\n  title: string;\n  /** Icon in the tile title */\n  icon?: React.ReactNode;\n  /** Flag indicating if the tile is selected */\n  isSelected?: boolean;\n  /** Flag indicating if the tile is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if the tile header is stacked */\n  isStacked?: boolean;\n  /** Flag indicating if the stacked tile icon is large */\n  isDisplayLarge?: boolean;\n}\n\nexport const Tile: React.FunctionComponent<TileProps> = ({\n  children,\n  title,\n  icon,\n  isStacked,\n  isSelected,\n  isDisabled,\n  isDisplayLarge,\n  className,\n  ...props\n}: TileProps) => (\n  <div\n    role=\"option\"\n    aria-selected={isSelected}\n    {...(isDisabled && { 'aria-disabled': isDisabled })}\n    className={css(\n      styles.tile,\n      isSelected && styles.modifiers.selected,\n      isDisabled && styles.modifiers.disabled,\n      isDisplayLarge && styles.modifiers.displayLg,\n      className\n    )}\n    tabIndex={0}\n    {...props}\n  >\n    <div className={css(styles.tileHeader, isStacked && styles.modifiers.stacked)}>\n      {icon && <div className={css(styles.tileIcon)}>{icon}</div>}\n      <div className={css(styles.tileTitle)}>{title}</div>\n    </div>\n    {children && <div className={css(styles.tileBody)}>{children}</div>}\n  </div>\n);\nTile.displayName = 'Tile';\n"]},"metadata":{},"sourceType":"module"}