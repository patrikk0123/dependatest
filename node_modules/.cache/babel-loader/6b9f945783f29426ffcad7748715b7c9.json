{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select } from '@patternfly/react-core';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nexport const EditableSelectInputCell = _ref => {\n  let {\n    value,\n    rowIndex,\n    cellIndex,\n    onSelect = () => {},\n    clearSelection,\n    isOpen = false,\n    onToggle = () => {},\n    selections = [''],\n    options = [],\n    props\n  } = _ref;\n\n  const onSelectHandler = (event, newValue, isPlaceholder) => {\n    onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n  };\n\n  const onClear = event => {\n    clearSelection(rowIndex, cellIndex, event);\n  };\n\n  const select = React.createElement(Select, Object.assign({}, props.editableSelectProps, {\n    onSelect: onSelectHandler\n  }, clearSelection && {\n    onClear\n  }, {\n    isOpen: isOpen,\n    onToggle: onToggle,\n    selections: selections\n  }), options);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: inlineStyles.inlineEditValue\n  }, Array.isArray(value) ? value.join(', ') : value), React.createElement(\"div\", {\n    className: inlineStyles.inlineEditInput\n  }, select, React.createElement(\"div\", {\n    className: css(formStyles.formHelperText, formStyles.modifiers.error),\n    \"aria-live\": \"polite\"\n  }, props.errorText)));\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,MAAT,QAA2C,wBAA3C;AACA,OAAOC,YAAP,MAAyB,gEAAzB;AACA,OAAOC,UAAP,MAAuB,mDAAvB;AAgCA,OAAO,MAAMC,uBAAuB,GAAsD,QAW3D;EAAA,IAX4D;IACzFC,KADyF;IAEzFC,QAFyF;IAGzFC,SAHyF;IAIzFC,QAAQ,GAAG,MAAK,CAAG,CAJsE;IAKzFC,cALyF;IAMzFC,MAAM,GAAG,KANgF;IAOzFC,QAAQ,GAAG,MAAK,CAAG,CAPsE;IAQzFC,UAAU,GAAG,CAAC,EAAD,CAR4E;IASzFC,OAAO,GAAG,EAT+E;IAUzFC;EAVyF,CAW5D;;EAC7B,MAAMC,eAAe,GAAG,CACtBC,KADsB,EAEtBC,QAFsB,EAGtBC,aAHsB,KAIpB;IACFV,QAAQ,CAACS,QAAD,EAAWD,KAAX,EAAkBV,QAAlB,EAA4BC,SAA5B,EAAuCW,aAAvC,CAAR;EACD,CAND;;EAQA,MAAMC,OAAO,GAAIH,KAAD,IAA4B;IAC1CP,cAAc,CAACH,QAAD,EAAWC,SAAX,EAAsBS,KAAtB,CAAd;EACD,CAFD;;EAIA,MAAMI,MAAM,GACVrB,oBAACE,MAAD,EAAOoB,kBACDP,KAAK,CAACQ,mBADL,EACwB;IAC7Bd,QAAQ,EAAEO;EADmB,CADxB,EAGAN,cAAc,IAAI;IAAEU;EAAF,CAHlB,EAG8B;IACnCT,MAAM,EAAEA,MAD2B;IAEnCC,QAAQ,EAAEA,QAFyB;IAGnCC,UAAU,EAAEA;EAHuB,CAH9B,CAAP,EAQGC,OARH,CADF;EAaA,OACEd,oBAACA,KAAK,CAACwB,QAAP,EAAe,IAAf,EACExB;IAAKyB,SAAS,EAAEtB,YAAY,CAACuB;EAA7B,GAA+CC,KAAK,CAACC,OAAN,CAActB,KAAd,IAAuBA,KAAK,CAACuB,IAAN,CAAW,IAAX,CAAvB,GAA0CvB,KAAzF,CADF,EAEEN;IAAKyB,SAAS,EAAEtB,YAAY,CAAC2B;EAA7B,GACGT,MADH,EAEErB;IAAKyB,SAAS,EAAExB,GAAG,CAACG,UAAU,CAAC2B,cAAZ,EAA4B3B,UAAU,CAAC4B,SAAX,CAAqBC,KAAjD,CAAnB;IAA0E,aAAY;EAAtF,GACGlB,KAAK,CAACmB,SADT,CAFF,CAFF,CADF;AAWD,CAhDM;AAiDP7B,uBAAuB,CAAC8B,WAAxB,GAAsC,yBAAtC","names":["React","css","Select","inlineStyles","formStyles","EditableSelectInputCell","value","rowIndex","cellIndex","onSelect","clearSelection","isOpen","onToggle","selections","options","props","onSelectHandler","event","newValue","isPlaceholder","onClear","select","Object","editableSelectProps","Fragment","className","inlineEditValue","Array","isArray","join","inlineEditInput","formHelperText","modifiers","error","errorText","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/EditableSelectInputCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Select, SelectOptionObject } from '@patternfly/react-core';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { EditableSelectInputProps } from './base';\n\nexport interface IEditableSelectInputCell extends Omit<React.HTMLProps<HTMLElement | HTMLDivElement>, 'onSelect'> {\n  /** Row index of this select input cell */\n  rowIndex: number;\n  /** Cell index of this select input cell */\n  cellIndex: number;\n  /** Props to build the select component */\n  props: EditableSelectInputProps;\n  /** Event handler which fires when user selects an option in this cell */\n  onSelect: (\n    newValue: string | SelectOptionObject,\n    event: React.MouseEvent | React.ChangeEvent,\n    rowIndex: number,\n    cellIndex: number,\n    isPlaceholder?: boolean\n  ) => void;\n  /** Options to display in the expandable select menu */\n  options?: React.ReactElement[];\n  /** Flag indicating the select input is disabled */\n  isDisabled?: boolean;\n  /** Current selected options to display as the read only value of the table cell */\n  selections?: string | SelectOptionObject | (string | SelectOptionObject)[];\n  /** Flag indicating the select menu is open */\n  isOpen?: boolean;\n  /** Event handler which fires when the select toggle is toggled */\n  onToggle?: (isExpanded: boolean) => void;\n  /** Event handler which fires when the user clears the selections */\n  clearSelection?: (rowIndex: number, cellIndex: number, event?: React.MouseEvent) => void;\n}\n\nexport const EditableSelectInputCell: React.FunctionComponent<IEditableSelectInputCell> = ({\n  value,\n  rowIndex,\n  cellIndex,\n  onSelect = () => {},\n  clearSelection,\n  isOpen = false,\n  onToggle = () => {},\n  selections = [''],\n  options = [] as React.ReactElement[],\n  props\n}: IEditableSelectInputCell) => {\n  const onSelectHandler = (\n    event: React.MouseEvent | React.ChangeEvent,\n    newValue: string | SelectOptionObject,\n    isPlaceholder: boolean\n  ) => {\n    onSelect(newValue, event, rowIndex, cellIndex, isPlaceholder);\n  };\n\n  const onClear = (event: React.MouseEvent) => {\n    clearSelection(rowIndex, cellIndex, event);\n  };\n\n  const select = (\n    <Select\n      {...props.editableSelectProps}\n      onSelect={onSelectHandler}\n      {...(clearSelection && { onClear })}\n      isOpen={isOpen}\n      onToggle={onToggle}\n      selections={selections}\n    >\n      {options}\n    </Select>\n  );\n\n  return (\n    <React.Fragment>\n      <div className={inlineStyles.inlineEditValue}>{Array.isArray(value) ? value.join(', ') : value}</div>\n      <div className={inlineStyles.inlineEditInput}>\n        {select}\n        <div className={css(formStyles.formHelperText, formStyles.modifiers.error)} aria-live=\"polite\">\n          {props.errorText}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\nEditableSelectInputCell.displayName = 'EditableSelectInputCell';\n"]},"metadata":{},"sourceType":"module"}