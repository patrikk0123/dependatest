{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nexport var MenuToggleBase = /*#__PURE__*/function (_React$Component) {\n  _inherits(MenuToggleBase, _React$Component);\n\n  var _super = _createSuper(MenuToggleBase);\n\n  function MenuToggleBase() {\n    var _this;\n\n    _classCallCheck(this, MenuToggleBase);\n\n    _this = _super.apply(this, arguments);\n    _this.displayName = 'MenuToggleBase';\n    return _this;\n  }\n\n  _createClass(MenuToggleBase, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          className = _a.className,\n          icon = _a.icon,\n          badge = _a.badge,\n          isExpanded = _a.isExpanded,\n          isDisabled = _a.isDisabled,\n          isFullHeight = _a.isFullHeight,\n          isFullWidth = _a.isFullWidth,\n          variant = _a.variant,\n          innerRef = _a.innerRef,\n          props = __rest(_a, [\"children\", \"className\", \"icon\", \"badge\", \"isExpanded\", \"isDisabled\", \"isFullHeight\", \"isFullWidth\", \"variant\", \"innerRef\"]);\n\n      var isPlain = variant === 'plain';\n      var isPlainText = variant === 'plainText';\n      var content = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n        className: css(styles.menuToggleIcon)\n      }, icon), React.createElement(\"span\", {\n        className: \"pf-c-menu-toggle__text\"\n      }, children), badge && React.createElement(\"span\", {\n        className: css(styles.menuToggleCount)\n      }, badge), React.createElement(\"span\", {\n        className: css(styles.menuToggleControls)\n      }, React.createElement(\"span\", {\n        className: css(styles.menuToggleToggleIcon)\n      }, React.createElement(CaretDownIcon, {\n        \"aria-hidden\": true\n      }))));\n      return React.createElement(\"button\", Object.assign({\n        className: css(styles.menuToggle, isExpanded && styles.modifiers.expanded, variant === 'primary' && styles.modifiers.primary, variant === 'secondary' && styles.modifiers.secondary, (isPlain || isPlainText) && styles.modifiers.plain, isPlainText && styles.modifiers.text, isFullHeight && styles.modifiers.fullHeight, isFullWidth && styles.modifiers.fullWidth, className),\n        type: \"button\",\n        \"aria-expanded\": false,\n        ref: innerRef\n      }, isExpanded && {\n        'aria-expanded': true\n      }, isDisabled && {\n        disabled: true\n      }, props), isPlain && children, !isPlain && content);\n    }\n  }]);\n\n  return MenuToggleBase;\n}(React.Component);\nMenuToggleBase.defaultProps = {\n  className: '',\n  isExpanded: false,\n  isDisabled: false,\n  isFullWidth: false,\n  isFullHeight: false,\n  variant: 'default'\n};\nexport var MenuToggle = React.forwardRef(function (props, ref) {\n  return React.createElement(MenuToggleBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nMenuToggle.displayName = 'MenuToggle';","map":{"version":3,"mappings":"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","names":["React","styles","css","CaretDownIcon","MenuToggleBase","props","children","_a","className","icon","badge","isExpanded","isDisabled","isFullHeight","isFullWidth","variant","innerRef","__rest","isPlain","isPlainText","content","Fragment","menuToggleIcon","menuToggleCount","menuToggleControls","menuToggleToggleIcon","menuToggle","modifiers","expanded","primary","secondary","plain","text","fullHeight","fullWidth","type","ref","disabled","Component","MenuToggle","forwardRef","Object","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/MenuToggle/MenuToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { BadgeProps } from '../Badge';\n\nexport interface MenuToggleProps\n  extends Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, 'ref'> {\n  /** Content rendered inside the toggle */\n  children?: React.ReactNode;\n  /** Additional classes added to the toggle */\n  className?: string;\n  /** Flag indicating the toggle has expanded styling */\n  isExpanded?: boolean;\n  /** Flag indicating the toggle is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating the toggle is full height */\n  isFullHeight?: boolean;\n  /** Flag indicating the toggle takes up the full width of its parent */\n  isFullWidth?: boolean;\n  /** Variant styles of the menu toggle */\n  variant?: 'default' | 'plain' | 'primary' | 'plainText' | 'secondary';\n  /** Optional icon rendered inside the toggle, before the children content */\n  icon?: React.ReactNode;\n  /** Optional badge rendered inside the toggle, after the children content */\n  badge?: BadgeProps | React.ReactNode;\n  /** Forwarded ref */\n  innerRef?: React.Ref<HTMLButtonElement>;\n}\n\nexport class MenuToggleBase extends React.Component<MenuToggleProps> {\n  displayName = 'MenuToggleBase';\n  static defaultProps = {\n    className: '',\n    isExpanded: false,\n    isDisabled: false,\n    isFullWidth: false,\n    isFullHeight: false,\n    variant: 'default'\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      icon,\n      badge,\n      isExpanded,\n      isDisabled,\n      isFullHeight,\n      isFullWidth,\n      variant,\n      innerRef,\n      ...props\n    } = this.props;\n\n    const isPlain = variant === 'plain';\n    const isPlainText = variant === 'plainText';\n\n    const content = (\n      <React.Fragment>\n        {icon && <span className={css(styles.menuToggleIcon)}>{icon}</span>}\n        <span className=\"pf-c-menu-toggle__text\">{children}</span>\n        {badge && <span className={css(styles.menuToggleCount)}>{badge}</span>}\n        <span className={css(styles.menuToggleControls)}>\n          <span className={css(styles.menuToggleToggleIcon)}>\n            <CaretDownIcon aria-hidden />\n          </span>\n        </span>\n      </React.Fragment>\n    );\n    return (\n      <button\n        className={css(\n          styles.menuToggle,\n          isExpanded && styles.modifiers.expanded,\n          variant === 'primary' && styles.modifiers.primary,\n          variant === 'secondary' && styles.modifiers.secondary,\n          (isPlain || isPlainText) && styles.modifiers.plain,\n          isPlainText && styles.modifiers.text,\n          isFullHeight && styles.modifiers.fullHeight,\n          isFullWidth && styles.modifiers.fullWidth,\n          className\n        )}\n        type=\"button\"\n        aria-expanded={false}\n        ref={innerRef}\n        {...(isExpanded && { 'aria-expanded': true })}\n        {...(isDisabled && { disabled: true })}\n        {...props}\n      >\n        {isPlain && children}\n        {!isPlain && content}\n      </button>\n    );\n  }\n}\n\nexport const MenuToggle = React.forwardRef((props: MenuToggleProps, ref: React.Ref<HTMLButtonElement>) => (\n  <MenuToggleBase innerRef={ref} {...props} />\n));\n\nMenuToggle.displayName = 'MenuToggle';\n"]},"metadata":{},"sourceType":"module"}