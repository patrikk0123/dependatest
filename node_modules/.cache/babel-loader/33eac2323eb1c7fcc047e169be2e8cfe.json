{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport globalBreakpointXl from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\nimport { Drawer, DrawerContent, DrawerContentBody, DrawerPanelContent } from '../Drawer';\nimport { PageGroup } from './PageGroup';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nimport { getBreakpoint } from '../../helpers/util';\nexport var PageLayouts;\n\n(function (PageLayouts) {\n  PageLayouts[\"vertical\"] = \"vertical\";\n  PageLayouts[\"horizontal\"] = \"horizontal\";\n})(PageLayouts || (PageLayouts = {}));\n\nexport const pageContextDefaults = {\n  isManagedSidebar: false,\n  isNavOpen: false,\n  onNavToggle: () => null,\n  width: null,\n  getBreakpoint\n};\nexport const PageContext = React.createContext(pageContextDefaults);\nexport const PageContextProvider = PageContext.Provider;\nexport const PageContextConsumer = PageContext.Consumer;\nexport class Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mainRef = React.createRef();\n    this.pageRef = React.createRef();\n\n    this.observer = () => {};\n\n    this.getWindowWidth = () => {\n      if (canUseDOM) {\n        return this.pageRef.current ? this.pageRef.current.clientWidth : window.innerWidth;\n      } else {\n        return 1200;\n      }\n    };\n\n    this.isMobile = () => // eslint-disable-next-line radix\n    this.getWindowWidth() < Number.parseInt(globalBreakpointXl.value, 10);\n\n    this.resize = () => {\n      const {\n        onPageResize\n      } = this.props;\n      const mobileView = this.isMobile();\n\n      if (onPageResize) {\n        onPageResize({\n          mobileView,\n          windowSize: this.getWindowWidth()\n        });\n      }\n\n      if (mobileView !== this.state.mobileView) {\n        this.setState({\n          mobileView\n        });\n      }\n\n      this.pageRef.current && this.setState({\n        width: this.pageRef.current.clientWidth\n      });\n    };\n\n    this.handleResize = debounce(this.resize, 250);\n\n    this.handleMainClick = () => {\n      if (this.isMobile() && this.state.mobileIsNavOpen && this.mainRef.current) {\n        this.setState({\n          mobileIsNavOpen: false\n        });\n      }\n    };\n\n    this.onNavToggleMobile = () => {\n      this.setState(prevState => ({\n        mobileIsNavOpen: !prevState.mobileIsNavOpen\n      }));\n    };\n\n    this.onNavToggleDesktop = () => {\n      this.setState(prevState => ({\n        desktopIsNavOpen: !prevState.desktopIsNavOpen\n      }));\n    };\n\n    const {\n      isManagedSidebar,\n      defaultManagedSidebarIsOpen\n    } = props;\n    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false,\n      width: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      isManagedSidebar,\n      onPageResize\n    } = this.props;\n\n    if (isManagedSidebar || onPageResize) {\n      this.observer = getResizeObserver(this.pageRef.current, this.handleResize);\n      const currentRef = this.mainRef.current;\n\n      if (currentRef) {\n        currentRef.addEventListener('mousedown', this.handleMainClick);\n        currentRef.addEventListener('touchstart', this.handleMainClick);\n      } // Initial check if should be shown\n\n\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      isManagedSidebar,\n      onPageResize\n    } = this.props;\n\n    if (isManagedSidebar || onPageResize) {\n      this.observer();\n      const currentRef = this.mainRef.current;\n\n      if (currentRef) {\n        currentRef.removeEventListener('mousedown', this.handleMainClick);\n        currentRef.removeEventListener('touchstart', this.handleMainClick);\n      }\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      breadcrumb,\n      isBreadcrumbWidthLimited,\n      className,\n      children,\n      header,\n      sidebar,\n      notificationDrawer,\n      isNotificationDrawerExpanded,\n      onNotificationDrawerExpand,\n      isTertiaryNavWidthLimited,\n      skipToContent,\n      role,\n      mainContainerId,\n      isManagedSidebar,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      defaultManagedSidebarIsOpen,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onPageResize,\n      getBreakpoint,\n      mainAriaLabel,\n      mainTabIndex,\n      tertiaryNav,\n      isTertiaryNavGrouped,\n      isBreadcrumbGrouped,\n      additionalGroupedContent,\n      groupProps\n    } = _a,\n          rest = __rest(_a, [\"breadcrumb\", \"isBreadcrumbWidthLimited\", \"className\", \"children\", \"header\", \"sidebar\", \"notificationDrawer\", \"isNotificationDrawerExpanded\", \"onNotificationDrawerExpand\", \"isTertiaryNavWidthLimited\", \"skipToContent\", \"role\", \"mainContainerId\", \"isManagedSidebar\", \"defaultManagedSidebarIsOpen\", \"onPageResize\", \"getBreakpoint\", \"mainAriaLabel\", \"mainTabIndex\", \"tertiaryNav\", \"isTertiaryNavGrouped\", \"isBreadcrumbGrouped\", \"additionalGroupedContent\", \"groupProps\"]);\n\n    const {\n      mobileView,\n      mobileIsNavOpen,\n      desktopIsNavOpen,\n      width\n    } = this.state;\n    const context = {\n      isManagedSidebar,\n      onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n      isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen,\n      width,\n      getBreakpoint\n    };\n    let nav = null;\n\n    if (tertiaryNav && isTertiaryNavWidthLimited) {\n      nav = React.createElement(\"div\", {\n        className: css(styles.pageMainNav, styles.modifiers.limitWidth)\n      }, React.createElement(\"div\", {\n        className: css(styles.pageMainBody)\n      }, tertiaryNav));\n    } else if (tertiaryNav) {\n      nav = React.createElement(\"div\", {\n        className: css(styles.pageMainNav)\n      }, tertiaryNav);\n    }\n\n    let crumb = null;\n\n    if (breadcrumb && isBreadcrumbWidthLimited) {\n      crumb = React.createElement(\"section\", {\n        className: css(styles.pageMainBreadcrumb, styles.modifiers.limitWidth)\n      }, React.createElement(\"div\", {\n        className: css(styles.pageMainBody)\n      }, breadcrumb));\n    } else if (breadcrumb) {\n      crumb = React.createElement(\"section\", {\n        className: css(styles.pageMainBreadcrumb)\n      }, breadcrumb);\n    }\n\n    const isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;\n    const group = isGrouped ? React.createElement(PageGroup, Object.assign({}, groupProps), isTertiaryNavGrouped && nav, isBreadcrumbGrouped && crumb, additionalGroupedContent) : null;\n    const main = React.createElement(\"main\", {\n      ref: this.mainRef,\n      role: role,\n      id: mainContainerId,\n      className: css(styles.pageMain),\n      tabIndex: mainTabIndex,\n      \"aria-label\": mainAriaLabel\n    }, group, !isTertiaryNavGrouped && nav, !isBreadcrumbGrouped && crumb, children);\n    const panelContent = React.createElement(DrawerPanelContent, null, notificationDrawer);\n    return React.createElement(PageContextProvider, {\n      value: context\n    }, React.createElement(\"div\", Object.assign({\n      ref: this.pageRef\n    }, rest, {\n      className: css(styles.page, width !== null && 'pf-m-resize-observer', width !== null && `pf-m-breakpoint-${getBreakpoint(width)}`, className)\n    }), skipToContent, header, sidebar, notificationDrawer && React.createElement(\"div\", {\n      className: css(styles.pageDrawer)\n    }, React.createElement(Drawer, {\n      isExpanded: isNotificationDrawerExpanded,\n      onExpand: onNotificationDrawerExpand\n    }, React.createElement(DrawerContent, {\n      panelContent: panelContent\n    }, React.createElement(DrawerContentBody, null, main)))), !notificationDrawer && main));\n  }\n\n}\nPage.displayName = 'Page';\nPage.defaultProps = {\n  isManagedSidebar: false,\n  isBreadcrumbWidthLimited: false,\n  defaultManagedSidebarIsOpen: true,\n  onPageResize: () => null,\n  mainTabIndex: -1,\n  isNotificationDrawerExpanded: false,\n  onNotificationDrawerExpand: () => null,\n  getBreakpoint\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","globalBreakpointXl","debounce","canUseDOM","Drawer","DrawerContent","DrawerContentBody","DrawerPanelContent","PageGroup","getResizeObserver","getBreakpoint","PageLayouts","pageContextDefaults","isManagedSidebar","isNavOpen","onNavToggle","width","PageContext","createContext","PageContextProvider","Provider","PageContextConsumer","Consumer","Page","Component","constructor","props","createRef","pageRef","current","clientWidth","window","innerWidth","getWindowWidth","Number","parseInt","value","onPageResize","mobileView","isMobile","windowSize","state","setState","resize","mobileIsNavOpen","mainRef","prevState","desktopIsNavOpen","defaultManagedSidebarIsOpen","managedSidebarOpen","componentDidMount","observer","handleResize","currentRef","addEventListener","handleMainClick","componentWillUnmount","removeEventListener","render","_a","breadcrumb","isBreadcrumbWidthLimited","className","children","header","sidebar","notificationDrawer","isNotificationDrawerExpanded","onNotificationDrawerExpand","isTertiaryNavWidthLimited","skipToContent","role","mainContainerId","mainAriaLabel","mainTabIndex","tertiaryNav","isTertiaryNavGrouped","isBreadcrumbGrouped","additionalGroupedContent","groupProps","rest","context","onNavToggleMobile","onNavToggleDesktop","nav","pageMainNav","modifiers","limitWidth","pageMainBody","crumb","pageMainBreadcrumb","isGrouped","group","Object","main","ref","id","pageMain","tabIndex","panelContent","page","pageDrawer","isExpanded","onExpand"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Page/Page.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport globalBreakpointXl from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\nimport { Drawer, DrawerContent, DrawerContentBody, DrawerPanelContent } from '../Drawer';\nimport { PageGroup, PageGroupProps } from './PageGroup';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nimport { getBreakpoint } from '../../helpers/util';\n\nexport enum PageLayouts {\n  vertical = 'vertical',\n  horizontal = 'horizontal'\n}\n\nexport interface PageContextProps {\n  isManagedSidebar: boolean;\n  onNavToggle: () => void;\n  isNavOpen: boolean;\n  width: number;\n  getBreakpoint: (width: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n}\nexport const pageContextDefaults: PageContextProps = {\n  isManagedSidebar: false,\n  isNavOpen: false,\n  onNavToggle: () => null,\n  width: null,\n  getBreakpoint\n};\nexport const PageContext = React.createContext<PageContextProps>(pageContextDefaults);\n\nexport const PageContextProvider = PageContext.Provider;\nexport const PageContextConsumer = PageContext.Consumer;\n\nexport interface PageProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the main section of the page layout (e.g. <PageSection />) */\n  children?: React.ReactNode;\n  /** Additional classes added to the page layout */\n  className?: string;\n  /** Header component (e.g. <PageHeader />) */\n  header?: React.ReactNode;\n  /** Sidebar component for a side nav (e.g. <PageSidebar />) */\n  sidebar?: React.ReactNode;\n  /** Notification drawer component for an optional notification drawer (e.g. <NotificationDrawer />) */\n  notificationDrawer?: React.ReactNode;\n  /** Flag indicating Notification drawer in expanded */\n  isNotificationDrawerExpanded?: boolean;\n  /** Flag indicating if breadcrumb width should be limited */\n  isBreadcrumbWidthLimited?: boolean;\n  /** Callback when notification drawer panel is finished expanding. */\n  onNotificationDrawerExpand?: () => void;\n  /** Skip to content component for the page */\n  skipToContent?: React.ReactElement;\n  /** Sets the value for role on the <main> element */\n  role?: string;\n  /** an id to use for the [role=\"main\"] element */\n  mainContainerId?: string;\n  /** tabIndex to use for the [role=\"main\"] element, null to unset it */\n  mainTabIndex?: number | null;\n  /**\n   * If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component\n   */\n  isManagedSidebar?: boolean;\n  /** Flag indicating if tertiary nav width should be limited */\n  isTertiaryNavWidthLimited?: boolean;\n  /**\n   * If true, the managed sidebar is initially open for desktop view\n   */\n  defaultManagedSidebarIsOpen?: boolean;\n  /**\n   * Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px\n   * Returns object { mobileView: boolean, windowSize: number }\n   */\n  onPageResize?: (object: any) => void;\n  /**\n   * The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\n   * You can override the default getBreakpoint function to return breakpoints at different sizes than the default\n   * You can view the default getBreakpoint function here:\n   * https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts\n   */\n  getBreakpoint?: (width: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Breadcrumb component for the page */\n  breadcrumb?: React.ReactNode;\n  /** Tertiary nav component for the page */\n  tertiaryNav?: React.ReactNode;\n  /** Accessible label, can be used to name main section */\n  mainAriaLabel?: string;\n  /** Flag indicating if the tertiaryNav should be in a group */\n  isTertiaryNavGrouped?: boolean;\n  /** Flag indicating if the breadcrumb should be in a group */\n  isBreadcrumbGrouped?: boolean;\n  /** Additional content of the group */\n  additionalGroupedContent?: React.ReactNode;\n  /** Additional props of the group */\n  groupProps?: PageGroupProps;\n}\n\nexport interface PageState {\n  desktopIsNavOpen: boolean;\n  mobileIsNavOpen: boolean;\n  mobileView: boolean;\n  width: number;\n}\n\nexport class Page extends React.Component<PageProps, PageState> {\n  static displayName = 'Page';\n  static defaultProps: PageProps = {\n    isManagedSidebar: false,\n    isBreadcrumbWidthLimited: false,\n    defaultManagedSidebarIsOpen: true,\n    onPageResize: (): void => null,\n    mainTabIndex: -1,\n    isNotificationDrawerExpanded: false,\n    onNotificationDrawerExpand: () => null,\n    getBreakpoint\n  };\n  mainRef = React.createRef<HTMLDivElement>();\n  pageRef = React.createRef<HTMLDivElement>();\n  observer: any = () => {};\n\n  constructor(props: PageProps) {\n    super(props);\n\n    const { isManagedSidebar, defaultManagedSidebarIsOpen } = props;\n    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false,\n      width: null\n    };\n  }\n\n  componentDidMount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer = getResizeObserver(this.pageRef.current, this.handleResize);\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.addEventListener('mousedown', this.handleMainClick);\n        currentRef.addEventListener('touchstart', this.handleMainClick);\n      }\n      // Initial check if should be shown\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer();\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.removeEventListener('mousedown', this.handleMainClick);\n        currentRef.removeEventListener('touchstart', this.handleMainClick);\n      }\n    }\n  }\n\n  getWindowWidth = () => {\n    if (canUseDOM) {\n      return this.pageRef.current ? this.pageRef.current.clientWidth : window.innerWidth;\n    } else {\n      return 1200;\n    }\n  };\n\n  isMobile = () =>\n    // eslint-disable-next-line radix\n    this.getWindowWidth() < Number.parseInt(globalBreakpointXl.value, 10);\n\n  resize = () => {\n    const { onPageResize } = this.props;\n    const mobileView = this.isMobile();\n    if (onPageResize) {\n      onPageResize({ mobileView, windowSize: this.getWindowWidth() });\n    }\n    if (mobileView !== this.state.mobileView) {\n      this.setState({ mobileView });\n    }\n    this.pageRef.current && this.setState({ width: this.pageRef.current.clientWidth });\n  };\n\n  handleResize = debounce(this.resize, 250);\n\n  handleMainClick = () => {\n    if (this.isMobile() && this.state.mobileIsNavOpen && this.mainRef.current) {\n      this.setState({ mobileIsNavOpen: false });\n    }\n  };\n\n  onNavToggleMobile = () => {\n    this.setState(prevState => ({\n      mobileIsNavOpen: !prevState.mobileIsNavOpen\n    }));\n  };\n\n  onNavToggleDesktop = () => {\n    this.setState(prevState => ({\n      desktopIsNavOpen: !prevState.desktopIsNavOpen\n    }));\n  };\n\n  render() {\n    const {\n      breadcrumb,\n      isBreadcrumbWidthLimited,\n      className,\n      children,\n      header,\n      sidebar,\n      notificationDrawer,\n      isNotificationDrawerExpanded,\n      onNotificationDrawerExpand,\n      isTertiaryNavWidthLimited,\n      skipToContent,\n      role,\n      mainContainerId,\n      isManagedSidebar,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      defaultManagedSidebarIsOpen,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onPageResize,\n      getBreakpoint,\n      mainAriaLabel,\n      mainTabIndex,\n      tertiaryNav,\n      isTertiaryNavGrouped,\n      isBreadcrumbGrouped,\n      additionalGroupedContent,\n      groupProps,\n      ...rest\n    } = this.props;\n    const { mobileView, mobileIsNavOpen, desktopIsNavOpen, width } = this.state;\n\n    const context = {\n      isManagedSidebar,\n      onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n      isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen,\n      width,\n      getBreakpoint\n    };\n\n    let nav = null;\n    if (tertiaryNav && isTertiaryNavWidthLimited) {\n      nav = (\n        <div className={css(styles.pageMainNav, styles.modifiers.limitWidth)}>\n          <div className={css(styles.pageMainBody)}>{tertiaryNav}</div>\n        </div>\n      );\n    } else if (tertiaryNav) {\n      nav = <div className={css(styles.pageMainNav)}>{tertiaryNav}</div>;\n    }\n\n    let crumb = null;\n    if (breadcrumb && isBreadcrumbWidthLimited) {\n      crumb = (\n        <section className={css(styles.pageMainBreadcrumb, styles.modifiers.limitWidth)}>\n          <div className={css(styles.pageMainBody)}>{breadcrumb}</div>\n        </section>\n      );\n    } else if (breadcrumb) {\n      crumb = <section className={css(styles.pageMainBreadcrumb)}>{breadcrumb}</section>;\n    }\n\n    const isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;\n\n    const group = isGrouped ? (\n      <PageGroup {...groupProps}>\n        {isTertiaryNavGrouped && nav}\n        {isBreadcrumbGrouped && crumb}\n        {additionalGroupedContent}\n      </PageGroup>\n    ) : null;\n\n    const main = (\n      <main\n        ref={this.mainRef}\n        role={role}\n        id={mainContainerId}\n        className={css(styles.pageMain)}\n        tabIndex={mainTabIndex}\n        aria-label={mainAriaLabel}\n      >\n        {group}\n        {!isTertiaryNavGrouped && nav}\n        {!isBreadcrumbGrouped && crumb}\n        {children}\n      </main>\n    );\n\n    const panelContent = <DrawerPanelContent>{notificationDrawer}</DrawerPanelContent>;\n\n    return (\n      <PageContextProvider value={context}>\n        <div\n          ref={this.pageRef}\n          {...rest}\n          className={css(\n            styles.page,\n            width !== null && 'pf-m-resize-observer',\n            width !== null && `pf-m-breakpoint-${getBreakpoint(width)}`,\n            className\n          )}\n        >\n          {skipToContent}\n          {header}\n          {sidebar}\n          {notificationDrawer && (\n            <div className={css(styles.pageDrawer)}>\n              <Drawer isExpanded={isNotificationDrawerExpanded} onExpand={onNotificationDrawerExpand}>\n                <DrawerContent panelContent={panelContent}>\n                  <DrawerContentBody>{main}</DrawerContentBody>\n                </DrawerContent>\n              </Drawer>\n            </div>\n          )}\n          {!notificationDrawer && main}\n        </div>\n      </PageContextProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}