{"ast":null,"code":"import _toConsumableArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nexport var BodyRow = /*#__PURE__*/function (_React$Component) {\n  _inherits(BodyRow, _React$Component);\n\n  var _super = _createSuper(BodyRow);\n\n  function BodyRow() {\n    _classCallCheck(this, BodyRow);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BodyRow, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      var _this$props = this.props,\n          columns = _this$props.columns,\n          rowData = _this$props.rowData; // Check for row based override.\n\n      var renderers = nextProps.renderers;\n\n      if (renderers && renderers.row && renderers.row.shouldComponentUpdate) {\n        if (typeof renderers.row.shouldComponentUpdate === 'function') {\n          return renderers.row.shouldComponentUpdate.call(this, nextProps, {}, {});\n        }\n\n        return true;\n      }\n\n      return !(columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          columns = _this$props2.columns,\n          renderers = _this$props2.renderers,\n          onRow = _this$props2.onRow,\n          rowKey = _this$props2.rowKey,\n          rowIndex = _this$props2.rowIndex,\n          rowData = _this$props2.rowData;\n      return React.createElement(renderers.row, onRow(rowData, {\n        rowIndex: rowIndex,\n        rowKey: rowKey\n      }), columns.map(function (column, columnIndex) {\n        var property = column.property,\n            cell = column.cell,\n            props = column.props;\n        var evaluatedProperty = property || cell && cell.property;\n\n        var _ref = cell || {},\n            _ref$transforms = _ref.transforms,\n            transforms = _ref$transforms === void 0 ? [] : _ref$transforms,\n            _ref$formatters = _ref.formatters,\n            formatters = _ref$formatters === void 0 ? [] : _ref$formatters;\n\n        var extraParameters = {\n          columnIndex: columnIndex,\n          property: evaluatedProperty,\n          column: column,\n          rowData: rowData,\n          rowIndex: rowIndex,\n          rowKey: rowKey\n        };\n        var transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n\n        if (!transformed) {\n          // eslint-disable-next-line no-console\n          console.warn('Table.Body - Failed to receive a transformed result');\n        }\n\n        var additionalFormaters = [];\n\n        if (rowData[evaluatedProperty]) {\n          additionalFormaters = rowData[evaluatedProperty].formatters;\n        }\n\n        return React.createElement(renderers.cell, Object.assign({\n          key: \"col-\".concat(columnIndex, \"-row-\").concat(rowIndex)\n        }, mergeProps(props, cell && cell.props, transformed)), !rowData.fullWidth && transformed.children || evaluateFormatters([].concat(_toConsumableArray(formatters), _toConsumableArray(additionalFormaters)))(rowData[\"_\".concat(evaluatedProperty)] || rowData[evaluatedProperty], extraParameters));\n      }));\n    }\n  }]);\n\n  return BodyRow;\n}(React.Component);\nBodyRow.displayName = 'BodyRow';\nBodyRow.defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onRow: function onRow() {\n    return {};\n  }\n};","map":{"version":3,"mappings":"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","names":["isEqual","React","columnsAreEqual","evaluateFormatters","evaluateTransforms","mergeProps","BodyRow","nextProps","props","columns","rowData","renderers","row","shouldComponentUpdate","call","onRow","rowKey","rowIndex","createElement","map","column","columnIndex","property","cell","evaluatedProperty","transforms","formatters","extraParameters","transformed","console","warn","additionalFormaters","Object","key","fullWidth","children","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/base/body-row.tsx"],"sourcesContent":["/**\n * body-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport { columnsAreEqual } from './columns-are-equal';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { createElementType, formatterValueType, ColumnType, ColumnsType, RowType, RendererType } from './types';\n\nexport interface BodyRowProps {\n  columns: ColumnsType;\n  renderers: RendererType;\n  onRow?: Function;\n  rowIndex: number;\n  rowData: RowType;\n  rowKey: string;\n}\n\nexport class BodyRow extends React.Component<BodyRowProps, {}> {\n  static displayName = 'BodyRow';\n  static defaultProps = {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRow: (...args: any) => ({})\n  };\n\n  shouldComponentUpdate(nextProps: BodyRowProps) {\n    const { columns, rowData } = this.props;\n\n    // Check for row based override.\n    const { renderers } = nextProps;\n\n    if (renderers && renderers.row && (renderers.row as React.Component).shouldComponentUpdate) {\n      if (typeof (renderers.row as React.Component).shouldComponentUpdate === 'function') {\n        return (renderers.row as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n\n      return true;\n    }\n\n    return !(columnsAreEqual(columns, nextProps.columns) && isEqual(rowData, nextProps.rowData));\n  }\n  render() {\n    const { columns, renderers, onRow, rowKey, rowIndex, rowData } = this.props;\n\n    return React.createElement(\n      renderers.row as createElementType,\n      onRow(rowData, { rowIndex, rowKey }),\n      (columns as []).map((column: ColumnType, columnIndex: number) => {\n        const { property, cell, props } = column;\n        const evaluatedProperty = (property || (cell && cell.property)) as string;\n        const { transforms = [], formatters = [] } = cell || {};\n        const extraParameters = {\n          columnIndex,\n          property: evaluatedProperty,\n          column,\n          rowData,\n          rowIndex,\n          rowKey\n        };\n        const transformed = evaluateTransforms(transforms, rowData[evaluatedProperty], extraParameters);\n\n        if (!transformed) {\n          // eslint-disable-next-line no-console\n          console.warn('Table.Body - Failed to receive a transformed result');\n        }\n\n        let additionalFormaters = [];\n        if (rowData[evaluatedProperty]) {\n          additionalFormaters = rowData[evaluatedProperty].formatters;\n        }\n\n        return React.createElement(\n          renderers.cell as createElementType,\n          {\n            key: `col-${columnIndex}-row-${rowIndex}`,\n            ...mergeProps(props, cell && cell.props, transformed)\n          },\n          (!rowData.fullWidth && transformed.children) ||\n            evaluateFormatters([...formatters, ...additionalFormaters])(\n              rowData[`_${evaluatedProperty}`] || (rowData[evaluatedProperty] as formatterValueType),\n              extraParameters\n            )\n        );\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}