{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/TextInputGroup/text-input-group';\nimport { css } from '@patternfly/react-styles';\nimport { TextInputGroupContext } from './TextInputGroup';\nexport const TextInputGroupMain = _a => {\n  var {\n    children,\n    className,\n    icon,\n    type = 'text',\n    hint,\n    onChange = () => undefined,\n    onFocus,\n    onBlur,\n    'aria-label': ariaLabel = 'Type to filter',\n    value: inputValue,\n    placeholder: inputPlaceHolder,\n    innerRef\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"icon\", \"type\", \"hint\", \"onChange\", \"onFocus\", \"onBlur\", 'aria-label', \"value\", \"placeholder\", \"innerRef\"]);\n\n  const {\n    isDisabled\n  } = React.useContext(TextInputGroupContext);\n  const textInputGroupInputInputRef = innerRef || React.useRef(null);\n\n  const handleChange = event => {\n    onChange(event.currentTarget.value, event);\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.textInputGroupMain, icon && styles.modifiers.icon, className)\n  }, props), children, React.createElement(\"span\", {\n    className: css(styles.textInputGroupText)\n  }, hint && React.createElement(\"input\", {\n    className: css(styles.textInputGroupTextInput, styles.modifiers.hint),\n    type: \"text\",\n    disabled: true,\n    \"aria-hidden\": \"true\",\n    value: hint\n  }), icon && React.createElement(\"span\", {\n    className: css(styles.textInputGroupIcon)\n  }, icon), React.createElement(\"input\", {\n    ref: textInputGroupInputInputRef,\n    type: type,\n    className: css(styles.textInputGroupTextInput),\n    \"aria-label\": ariaLabel,\n    disabled: isDisabled,\n    onChange: handleChange,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    value: inputValue || '',\n    placeholder: inputPlaceHolder\n  })));\n};\nTextInputGroupMain.displayName = 'TextInputGroupMain';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,yEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AAwCA,OAAO,MAAMC,kBAAkB,GAAsDC,EAAD,IActD;MAduD;IACnFC,QADmF;IAEnFC,SAFmF;IAGnFC,IAHmF;IAInFC,IAAI,GAAG,MAJ4E;IAKnFC,IALmF;IAMnFC,QAAQ,GAAG,MAAWC,SAN6D;IAOnFC,OAPmF;IAQnFC,MARmF;IASnF,cAAcC,SAAS,GAAG,gBATyD;IAUnFC,KAAK,EAAEC,UAV4E;IAWnFC,WAAW,EAAEC,gBAXsE;IAYnFC;EAZmF,IAY3Ef;MACLgB,KAAK,cAb2E,oIAa3E;;EAER,MAAM;IAAEC;EAAF,IAAiBtB,KAAK,CAACuB,UAAN,CAAiBpB,qBAAjB,CAAvB;EACA,MAAMqB,2BAA2B,GAAGJ,QAAQ,IAAIpB,KAAK,CAACyB,MAAN,CAAa,IAAb,CAAhD;;EAEA,MAAMC,YAAY,GAAIC,KAAD,IAA6C;IAChEhB,QAAQ,CAACgB,KAAK,CAACC,aAAN,CAAoBZ,KAArB,EAA4BW,KAA5B,CAAR;EACD,CAFD;;EAIA,OACE3B;IAAKO,SAAS,EAAEL,GAAG,CAACD,MAAM,CAAC4B,kBAAR,EAA4BrB,IAAI,IAAIP,MAAM,CAAC6B,SAAP,CAAiBtB,IAArD,EAA2DD,SAA3D;EAAnB,GAA8Fc,KAA9F,GACGf,QADH,EAEEN;IAAMO,SAAS,EAAEL,GAAG,CAACD,MAAM,CAAC8B,kBAAR;EAApB,GACGrB,IAAI,IACHV;IACEO,SAAS,EAAEL,GAAG,CAACD,MAAM,CAAC+B,uBAAR,EAAiC/B,MAAM,CAAC6B,SAAP,CAAiBpB,IAAlD,CADhB;IAEED,IAAI,EAAC,MAFP;IAGEwB,QAAQ,MAHV;IAGU,eACI,MAJd;IAKEjB,KAAK,EAAEN;EALT,EAFJ,EAUGF,IAAI,IAAIR;IAAMO,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACiC,kBAAR;EAApB,GAAkD1B,IAAlD,CAVX,EAWER;IACEmC,GAAG,EAAEX,2BADP;IAEEf,IAAI,EAAEA,IAFR;IAGEF,SAAS,EAAEL,GAAG,CAACD,MAAM,CAAC+B,uBAAR,CAHhB;IAGgD,cAClCjB,SAJd;IAKEkB,QAAQ,EAAEX,UALZ;IAMEX,QAAQ,EAAEe,YANZ;IAOEb,OAAO,EAAEA,OAPX;IAQEC,MAAM,EAAEA,MARV;IASEE,KAAK,EAAEC,UAAU,IAAI,EATvB;IAUEC,WAAW,EAAEC;EAVf,EAXF,CAFF,CADF;AA6BD,CAnDM;AAqDPf,kBAAkB,CAACgC,WAAnB,GAAiC,oBAAjC","names":["React","styles","css","TextInputGroupContext","TextInputGroupMain","_a","children","className","icon","type","hint","onChange","undefined","onFocus","onBlur","ariaLabel","value","inputValue","placeholder","inputPlaceHolder","innerRef","props","isDisabled","useContext","textInputGroupInputInputRef","useRef","handleChange","event","currentTarget","textInputGroupMain","modifiers","textInputGroupText","textInputGroupTextInput","disabled","textInputGroupIcon","ref","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/TextInputGroup/TextInputGroupMain.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/TextInputGroup/text-input-group';\nimport { css } from '@patternfly/react-styles';\nimport { TextInputGroupContext } from './TextInputGroup';\n\nexport interface TextInputGroupMainProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Content rendered inside the text input group main div */\n  children?: React.ReactNode;\n  /** Additional classes applied to the text input group main container */\n  className?: string;\n  /** Icon to be shown on the left side of the text input group main container */\n  icon?: React.ReactNode;\n  /** Type that the input accepts. */\n  type?:\n    | 'text'\n    | 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'month'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'time'\n    | 'url';\n  /** Suggestion that will show up like a placeholder even with text in the input */\n  hint?: string;\n  /** Callback for when there is a change in the input field*/\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Callback for when the input field is focused*/\n  onFocus?: (event?: any) => void;\n  /** Callback for when focus is lost on the input field*/\n  onBlur?: (event?: any) => void;\n  /** Accessibility label for the input */\n  'aria-label'?: string;\n  /** Value for the input */\n  value?: string | number;\n  /** Placeholder value for the input */\n  placeholder?: string;\n  /** @hide A reference object to attach to the input box */\n  innerRef?: React.RefObject<any>;\n}\n\nexport const TextInputGroupMain: React.FunctionComponent<TextInputGroupMainProps> = ({\n  children,\n  className,\n  icon,\n  type = 'text',\n  hint,\n  onChange = (): any => undefined,\n  onFocus,\n  onBlur,\n  'aria-label': ariaLabel = 'Type to filter',\n  value: inputValue,\n  placeholder: inputPlaceHolder,\n  innerRef,\n  ...props\n}: TextInputGroupMainProps) => {\n  const { isDisabled } = React.useContext(TextInputGroupContext);\n  const textInputGroupInputInputRef = innerRef || React.useRef(null);\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    onChange(event.currentTarget.value, event);\n  };\n\n  return (\n    <div className={css(styles.textInputGroupMain, icon && styles.modifiers.icon, className)} {...props}>\n      {children}\n      <span className={css(styles.textInputGroupText)}>\n        {hint && (\n          <input\n            className={css(styles.textInputGroupTextInput, styles.modifiers.hint)}\n            type=\"text\"\n            disabled\n            aria-hidden=\"true\"\n            value={hint}\n          />\n        )}\n        {icon && <span className={css(styles.textInputGroupIcon)}>{icon}</span>}\n        <input\n          ref={textInputGroupInputInputRef}\n          type={type}\n          className={css(styles.textInputGroupTextInput)}\n          aria-label={ariaLabel}\n          disabled={isDisabled}\n          onChange={handleChange}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          value={inputValue || ''}\n          placeholder={inputPlaceHolder}\n        />\n      </span>\n    </div>\n  );\n};\n\nTextInputGroupMain.displayName = 'TextInputGroupMain';\n"]},"metadata":{},"sourceType":"module"}