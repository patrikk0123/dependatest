{"ast":null,"code":"import getOppositePlacement from '../utils/getOppositePlacement';\nimport getBasePlacement from '../utils/getBasePlacement';\nimport getOppositeVariationPlacement from '../utils/getOppositeVariationPlacement';\nimport detectOverflow from '../utils/detectOverflow';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\nimport { bottom, top, start, right, left, auto } from '../enums';\nimport getVariation from '../utils/getVariation';\n/**\n * @param placement\n */\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n/**\n *\n */\n\n\nfunction flip(_ref) {\n  let {\n    state,\n    options,\n    name\n  } = _ref;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  const {\n    mainAxis: checkMainAxis = true,\n    altAxis: checkAltAxis = true,\n    fallbackPlacements: specifiedFallbackPlacements,\n    padding,\n    boundary,\n    rootBoundary,\n    altBoundary,\n    flipVariations = true,\n    allowedAutoPlacements\n  } = options;\n  const preferredPlacement = state.options.placement;\n  const basePlacement = getBasePlacement(preferredPlacement);\n  const isBasePlacement = basePlacement === preferredPlacement;\n  const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  const placements = [preferredPlacement, ...fallbackPlacements].reduce((acc, placement) => acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n    placement,\n    boundary,\n    rootBoundary,\n    padding,\n    flipVariations,\n    allowedAutoPlacements\n  }) : placement), []);\n  const referenceRect = state.rects.reference;\n  const popperRect = state.rects.popper;\n  const checksMap = new Map();\n  let makeFallbackChecks = true;\n  let firstFittingPlacement = placements[0];\n\n  for (let i = 0; i < placements.length; i++) {\n    const placement = placements[i];\n    const basePlacement = getBasePlacement(placement);\n    const isStartVariation = getVariation(placement) === start;\n    const isVertical = [top, bottom].indexOf(basePlacement) >= 0;\n    const len = isVertical ? 'width' : 'height';\n    const overflow = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      altBoundary,\n      padding\n    });\n    let mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    const altVariationSide = getOppositePlacement(mainVariationSide);\n    const checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(check => check)) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases â€“ research later\n    const numberOfChecks = flipVariations ? 3 : 1;\n\n    for (let i = numberOfChecks; i > 0; i--) {\n      const fittingPlacement = placements.find(placement => {\n        const checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, i).every(check => check);\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        break;\n      }\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n}\n\nexport default {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n};","map":{"version":3,"mappings":"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","names":["getOppositePlacement","getBasePlacement","getOppositeVariationPlacement","detectOverflow","computeAutoPlacement","bottom","top","start","right","left","auto","getVariation","getExpandedFallbackPlacements","placement","oppositePlacement","flip","state","options","name","modifiersData","_skip","mainAxis","checkMainAxis","altAxis","checkAltAxis","fallbackPlacements","specifiedFallbackPlacements","padding","boundary","rootBoundary","altBoundary","flipVariations","allowedAutoPlacements","preferredPlacement","basePlacement","isBasePlacement","placements","reduce","acc","concat","referenceRect","rects","reference","popperRect","popper","checksMap","Map","makeFallbackChecks","firstFittingPlacement","i","length","isStartVariation","isVertical","indexOf","len","overflow","mainVariationSide","altVariationSide","checks","push","every","check","set","numberOfChecks","fittingPlacement","find","get","slice","reset","enabled","phase","fn","requiresIfExists","data"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/modifiers/flip.ts"],"sourcesContent":["// @ts-nocheck\nimport { Placement, Boundary, RootBoundary } from '../enums';\nimport { ModifierArguments, Modifier, Padding } from '../types';\nimport getOppositePlacement from '../utils/getOppositePlacement';\nimport getBasePlacement from '../utils/getBasePlacement';\nimport getOppositeVariationPlacement from '../utils/getOppositeVariationPlacement';\nimport detectOverflow from '../utils/detectOverflow';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\nimport { bottom, top, start, right, left, auto } from '../enums';\nimport getVariation from '../utils/getVariation';\n\n// eslint-disable-next-line import/no-unused-modules\nexport interface Options {\n  mainAxis: boolean;\n  altAxis: boolean;\n  fallbackPlacements: Placement[];\n  padding: Padding;\n  boundary: Boundary;\n  rootBoundary: RootBoundary;\n  altBoundary: boolean;\n  flipVariations: boolean;\n  allowedAutoPlacements: Placement[];\n}\n\n/**\n * @param placement\n */\nfunction getExpandedFallbackPlacements(placement: Placement): Placement[] {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  const oppositePlacement = getOppositePlacement(placement);\n\n  return [\n    getOppositeVariationPlacement(placement),\n    oppositePlacement,\n    getOppositeVariationPlacement(oppositePlacement)\n  ];\n}\n\n/**\n *\n */\nfunction flip({ state, options, name }: ModifierArguments<Options>) {\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  const {\n    mainAxis: checkMainAxis = true,\n    altAxis: checkAltAxis = true,\n    fallbackPlacements: specifiedFallbackPlacements,\n    padding,\n    boundary,\n    rootBoundary,\n    altBoundary,\n    flipVariations = true,\n    allowedAutoPlacements\n  } = options;\n\n  const preferredPlacement = state.options.placement;\n  const basePlacement = getBasePlacement(preferredPlacement);\n  const isBasePlacement = basePlacement === preferredPlacement;\n\n  const fallbackPlacements =\n    specifiedFallbackPlacements ||\n    (isBasePlacement || !flipVariations\n      ? [getOppositePlacement(preferredPlacement)]\n      : getExpandedFallbackPlacements(preferredPlacement));\n\n  const placements = [preferredPlacement, ...fallbackPlacements].reduce(\n    (acc, placement) =>\n      acc.concat(\n        getBasePlacement(placement) === auto\n          ? computeAutoPlacement(state, {\n              placement,\n              boundary,\n              rootBoundary,\n              padding,\n              flipVariations,\n              allowedAutoPlacements\n            })\n          : placement\n      ),\n    []\n  );\n\n  const referenceRect = state.rects.reference;\n  const popperRect = state.rects.popper;\n\n  const checksMap = new Map();\n  let makeFallbackChecks = true;\n  let firstFittingPlacement = placements[0];\n\n  for (let i = 0; i < placements.length; i++) {\n    const placement = placements[i];\n    const basePlacement = getBasePlacement(placement);\n    const isStartVariation = getVariation(placement) === start;\n    const isVertical = [top, bottom].indexOf(basePlacement) >= 0;\n    const len = isVertical ? 'width' : 'height';\n\n    const overflow = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      altBoundary,\n      padding\n    });\n\n    let mainVariationSide: any = isVertical ? (isStartVariation ? right : left) : isStartVariation ? bottom : top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    const altVariationSide: any = getOppositePlacement(mainVariationSide);\n\n    const checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(check => check)) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases â€“ research later\n    const numberOfChecks = flipVariations ? 3 : 1;\n\n    for (let i = numberOfChecks; i > 0; i--) {\n      const fittingPlacement = placements.find(placement => {\n        const checks = checksMap.get(placement);\n        if (checks) {\n          return checks.slice(0, i).every(check => check);\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        break;\n      }\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport type FlipModifier = Modifier<'flip', Options>;\nexport default {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: { _skip: false }\n} as FlipModifier;\n"]},"metadata":{},"sourceType":"module"}