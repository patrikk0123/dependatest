{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util'; // Recursively find JumpLinkItems and return an array of all their scrollNodes\n\nvar getScrollItems = function getScrollItems(children, res) {\n  React.Children.forEach(children, function (child) {\n    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n      var scrollNode = child.props.node || child.props.href;\n\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)));\n        } else {\n          res.push(document.querySelector(scrollNode));\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\n\nfunction isResponsive(jumpLinks) {\n  // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return jumpLinks && getComputedStyle(jumpLinks).getPropertyValue(cssToggleDisplayVar.name).includes('block');\n}\n\nexport var JumpLinks = function JumpLinks(_a) {\n  var isCentered = _a.isCentered,\n      isVertical = _a.isVertical,\n      children = _a.children,\n      label = _a.label,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? typeof label === 'string' ? label : null : _a$ariaLabel,\n      scrollableSelector = _a.scrollableSelector,\n      _a$activeIndex = _a.activeIndex,\n      activeIndexProp = _a$activeIndex === void 0 ? 0 : _a$activeIndex,\n      _a$offset = _a.offset,\n      offset = _a$offset === void 0 ? 0 : _a$offset,\n      expandable = _a.expandable,\n      _a$isExpanded = _a.isExpanded,\n      isExpandedProp = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      _a$alwaysShowLabel = _a.alwaysShowLabel,\n      alwaysShowLabel = _a$alwaysShowLabel === void 0 ? true : _a$alwaysShowLabel,\n      _a$toggleAriaLabel = _a.toggleAriaLabel,\n      toggleAriaLabel = _a$toggleAriaLabel === void 0 ? 'Toggle jump links' : _a$toggleAriaLabel,\n      className = _a.className,\n      props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\", \"offset\", \"expandable\", \"isExpanded\", \"alwaysShowLabel\", \"toggleAriaLabel\", \"className\"]);\n\n  var hasScrollSpy = Boolean(scrollableSelector);\n\n  var _React$useState = React.useState(hasScrollSpy ? getScrollItems(children, []) : []),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      scrollItems = _React$useState2[0],\n      setScrollItems = _React$useState2[1];\n\n  var _React$useState3 = React.useState(activeIndexProp),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      activeIndex = _React$useState4[0],\n      setActiveIndex = _React$useState4[1];\n\n  var _React$useState5 = React.useState(isExpandedProp),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isExpanded = _React$useState6[0],\n      setIsExpanded = _React$useState6[1]; // Boolean to disable scroll listener from overriding active state of clicked jumplink\n\n\n  var isLinkClicked = React.useRef(false); // Allow expanding to be controlled for a niche use case\n\n  React.useEffect(function () {\n    return setIsExpanded(isExpandedProp);\n  }, [isExpandedProp]);\n  var navRef = React.useRef();\n  var scrollableElement;\n  var scrollSpy = React.useCallback(function () {\n    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n\n    if (isLinkClicked.current) {\n      isLinkClicked.current = false;\n      return;\n    }\n\n    var scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n    window.requestAnimationFrame(function () {\n      var newScrollItems = scrollItems; // Items might have rendered after this component. Do a quick refresh.\n\n      if (!newScrollItems[0] || newScrollItems.includes(null)) {\n        newScrollItems = getScrollItems(children, []);\n        setScrollItems(newScrollItems);\n      }\n\n      var scrollElements = newScrollItems.map(function (e, index) {\n        return {\n          y: e ? e.offsetTop : null,\n          index: index\n        };\n      }).filter(function (_ref) {\n        var y = _ref.y;\n        return y !== null;\n      }).sort(function (e1, e2) {\n        return e2.y - e1.y;\n      });\n\n      var _iterator = _createForOfIteratorHelper(scrollElements),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _step.value,\n              y = _step$value.y,\n              index = _step$value.index;\n\n          if (scrollPosition >= y) {\n            return setActiveIndex(index);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n  React.useEffect(function () {\n    scrollableElement = document.querySelector(scrollableSelector);\n\n    if (!(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n\n    scrollableElement.addEventListener('scroll', scrollSpy);\n    return function () {\n      return scrollableElement.removeEventListener('scroll', scrollSpy);\n    };\n  }, [scrollableSelector, scrollSpy]);\n  React.useEffect(function () {\n    scrollSpy();\n  }, []);\n  var jumpLinkIndex = 0;\n\n  var cloneChildren = function cloneChildren(children) {\n    return !hasScrollSpy ? children : React.Children.map(children, function (child) {\n      if (child.type === JumpLinksItem) {\n        var _child$props = child.props,\n            onClickProp = _child$props.onClick,\n            isActiveProp = _child$props.isActive;\n        var itemIndex = jumpLinkIndex++;\n        var scrollItem = scrollItems[itemIndex];\n        return React.cloneElement(child, {\n          onClick: function onClick(ev) {\n            isLinkClicked.current = true; // Items might have rendered after this component. Do a quick refresh.\n\n            var newScrollItems;\n\n            if (!scrollItem) {\n              newScrollItems = getScrollItems(children, []);\n              setScrollItems(newScrollItems);\n            }\n\n            var newScrollItem = scrollItem || newScrollItems[itemIndex];\n\n            if (newScrollItem) {\n              // we have to support scrolling to an offset due to sticky sidebar\n              var _scrollableElement = document.querySelector(scrollableSelector);\n\n              if (_scrollableElement instanceof HTMLElement) {\n                if (isResponsive(navRef.current)) {\n                  // Remove class immediately so we can get collapsed height\n                  if (navRef.current) {\n                    navRef.current.classList.remove(styles.modifiers.expanded);\n                  }\n\n                  var stickyParent = navRef.current && navRef.current.parentElement;\n\n                  while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                    stickyParent = stickyParent.parentElement;\n                  }\n\n                  setIsExpanded(false);\n\n                  if (stickyParent) {\n                    offset += stickyParent.scrollHeight;\n                  }\n                }\n\n                _scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n              }\n\n              newScrollItem.focus();\n              ev.preventDefault();\n              setActiveIndex(itemIndex);\n            }\n\n            if (onClickProp) {\n              onClickProp(ev);\n            }\n          },\n          isActive: isActiveProp || activeIndex === itemIndex,\n          children: cloneChildren(child.props.children)\n        });\n      } else if (child.type === React.Fragment) {\n        return cloneChildren(child.props.children);\n      } else if (child.type === JumpLinksList) {\n        return React.cloneElement(child, {\n          children: cloneChildren(child.props.children)\n        });\n      }\n\n      return child;\n    });\n  };\n\n  return React.createElement(\"nav\", Object.assign({\n    className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical, formatBreakpointMods(expandable, styles), isExpanded && styles.modifiers.expanded, className),\n    \"aria-label\": ariaLabel,\n    ref: navRef\n  }, props), React.createElement(\"div\", {\n    className: styles.jumpLinksMain\n  }, React.createElement(\"div\", {\n    className: css('pf-c-jump-links__header')\n  }, expandable && React.createElement(\"div\", {\n    className: styles.jumpLinksToggle\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    onClick: function onClick() {\n      return setIsExpanded(!isExpanded);\n    },\n    \"aria-label\": toggleAriaLabel,\n    \"aria-expanded\": isExpanded\n  }, React.createElement(\"span\", {\n    className: styles.jumpLinksToggleIcon\n  }, React.createElement(AngleRightIcon, null)), label && React.createElement(\"span\", {\n    className: css(styles.jumpLinksToggleText)\n  }, \" \", label, \" \"))), label && alwaysShowLabel && React.createElement(\"div\", {\n    className: css(styles.jumpLinksLabel)\n  }, label)), React.createElement(\"ul\", {\n    className: styles.jumpLinksList\n  }, cloneChildren(children))));\n};\nJumpLinks.displayName = 'JumpLinks';","map":{"version":3,"mappings":"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","names":["React","css","styles","sidebarStyles","JumpLinksItem","JumpLinksList","formatBreakpointMods","Button","AngleRightIcon","cssToggleDisplayVar","canUseDOM","getScrollItems","children","res","Children","forEach","child","document","getElementById","querySelector","type","scrollNode","props","node","href","startsWith","push","substr","HTMLElement","Fragment","includes","isResponsive","jumpLinks","getComputedStyle","getPropertyValue","name","JumpLinks","_a","isCentered","isVertical","label","ariaLabel","scrollableSelector","activeIndex","activeIndexProp","offset","expandable","isExpanded","isExpandedProp","alwaysShowLabel","toggleAriaLabel","className","__rest","hasScrollSpy","Boolean","useState","scrollItems","setScrollItems","setActiveIndex","setIsExpanded","isLinkClicked","useRef","useEffect","navRef","scrollableElement","scrollSpy","useCallback","current","scrollPosition","Math","ceil","scrollTop","window","requestAnimationFrame","newScrollItems","scrollElements","map","e","index","y","offsetTop","filter","sort","e1","e2","addEventListener","removeEventListener","jumpLinkIndex","cloneChildren","onClickProp","onClick","isActiveProp","isActive","itemIndex","scrollItem","cloneElement","ev","newScrollItem","classList","remove","modifiers","expanded","stickyParent","parentElement","contains","sticky","scrollHeight","scrollTo","focus","preventDefault","center","vertical","ref","jumpLinksMain","jumpLinksToggle","variant","jumpLinksToggleIcon","jumpLinksToggleText","jumpLinksLabel","jumpLinksList","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/JumpLinks/JumpLinks.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem, JumpLinksItemProps } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util';\n\nexport interface JumpLinksProps extends Omit<React.HTMLProps<HTMLElement>, 'label'> {\n  /** Whether to center children. */\n  isCentered?: boolean;\n  /** Whether the layout of children is vertical or horizontal. */\n  isVertical?: boolean;\n  /** Label to add to nav element. */\n  label?: React.ReactNode;\n  /** Flag to always show the label when using `expandable` */\n  alwaysShowLabel?: boolean;\n  /** Aria-label to add to nav element. Defaults to label. */\n  'aria-label'?: string;\n  /** Selector for the scrollable element to spy on. Not passing a selector disables spying. */\n  scrollableSelector?: string;\n  /** The index of the child Jump link to make active. */\n  activeIndex?: number;\n  /** Children nodes */\n  children?: React.ReactNode;\n  /** Offset to add to `scrollPosition`, potentially for a masthead which content scrolls under. */\n  offset?: number;\n  /** When to collapse/expand at different breakpoints */\n  expandable?: {\n    default?: 'expandable' | 'nonExpandable';\n    sm?: 'expandable' | 'nonExpandable';\n    md?: 'expandable' | 'nonExpandable';\n    lg?: 'expandable' | 'nonExpandable';\n    xl?: 'expandable' | 'nonExpandable';\n    '2xl'?: 'expandable' | 'nonExpandable';\n  };\n  /** On mobile whether or not the JumpLinks starts out expanded */\n  isExpanded?: boolean;\n  /** Aria label for expandable toggle */\n  toggleAriaLabel?: string;\n  /** Class for nav */\n  className?: string;\n}\n\n// Recursively find JumpLinkItems and return an array of all their scrollNodes\nconst getScrollItems = (children: React.ReactNode, res: HTMLElement[]) => {\n  React.Children.forEach(children, (child: any) => {\n    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n      const scrollNode = child.props.node || child.props.href;\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)) as HTMLElement);\n        } else {\n          res.push(document.querySelector(scrollNode) as HTMLElement);\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\n\nfunction isResponsive(jumpLinks: HTMLElement) {\n  // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return (\n    jumpLinks &&\n    getComputedStyle(jumpLinks)\n      .getPropertyValue(cssToggleDisplayVar.name)\n      .includes('block')\n  );\n}\n\nexport const JumpLinks: React.FunctionComponent<JumpLinksProps> = ({\n  isCentered,\n  isVertical,\n  children,\n  label,\n  'aria-label': ariaLabel = typeof label === 'string' ? label : null,\n  scrollableSelector,\n  activeIndex: activeIndexProp = 0,\n  offset = 0,\n  expandable,\n  isExpanded: isExpandedProp = false,\n  alwaysShowLabel = true,\n  toggleAriaLabel = 'Toggle jump links',\n  className,\n  ...props\n}: JumpLinksProps) => {\n  const hasScrollSpy = Boolean(scrollableSelector);\n  const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n  const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n  const [isExpanded, setIsExpanded] = React.useState(isExpandedProp);\n  // Boolean to disable scroll listener from overriding active state of clicked jumplink\n  const isLinkClicked = React.useRef(false);\n  // Allow expanding to be controlled for a niche use case\n  React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n  const navRef = React.useRef<HTMLElement>();\n\n  let scrollableElement: HTMLElement;\n\n  const scrollSpy = React.useCallback(() => {\n    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    if (isLinkClicked.current) {\n      isLinkClicked.current = false;\n      return;\n    }\n    const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n    window.requestAnimationFrame(() => {\n      let newScrollItems = scrollItems;\n      // Items might have rendered after this component. Do a quick refresh.\n      if (!newScrollItems[0] || newScrollItems.includes(null)) {\n        newScrollItems = getScrollItems(children, []);\n        setScrollItems(newScrollItems);\n      }\n      const scrollElements = newScrollItems\n        .map((e, index) => ({\n          y: e ? e.offsetTop : null,\n          index\n        }))\n        .filter(({ y }) => y !== null)\n        .sort((e1, e2) => e2.y - e1.y);\n      for (const { y, index } of scrollElements) {\n        if (scrollPosition >= y) {\n          return setActiveIndex(index);\n        }\n      }\n    });\n  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n\n  React.useEffect(() => {\n    scrollableElement = document.querySelector(scrollableSelector) as HTMLElement;\n    if (!(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    scrollableElement.addEventListener('scroll', scrollSpy);\n\n    return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n  }, [scrollableSelector, scrollSpy]);\n\n  React.useEffect(() => {\n    scrollSpy();\n  }, []);\n\n  let jumpLinkIndex = 0;\n  const cloneChildren = (children: React.ReactNode): React.ReactNode =>\n    !hasScrollSpy\n      ? children\n      : React.Children.map(children, (child: any) => {\n          if (child.type === JumpLinksItem) {\n            const { onClick: onClickProp, isActive: isActiveProp } = child.props;\n            const itemIndex = jumpLinkIndex++;\n            const scrollItem = scrollItems[itemIndex];\n            return React.cloneElement(child as React.ReactElement<JumpLinksItemProps>, {\n              onClick(ev: React.MouseEvent<HTMLAnchorElement>) {\n                isLinkClicked.current = true;\n                // Items might have rendered after this component. Do a quick refresh.\n                let newScrollItems;\n                if (!scrollItem) {\n                  newScrollItems = getScrollItems(children, []);\n                  setScrollItems(newScrollItems);\n                }\n                const newScrollItem = scrollItem || newScrollItems[itemIndex];\n\n                if (newScrollItem) {\n                  // we have to support scrolling to an offset due to sticky sidebar\n                  const scrollableElement = document.querySelector(scrollableSelector) as HTMLElement;\n                  if (scrollableElement instanceof HTMLElement) {\n                    if (isResponsive(navRef.current)) {\n                      // Remove class immediately so we can get collapsed height\n                      if (navRef.current) {\n                        navRef.current.classList.remove(styles.modifiers.expanded);\n                      }\n                      let stickyParent = navRef.current && navRef.current.parentElement;\n                      while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                        stickyParent = stickyParent.parentElement;\n                      }\n                      setIsExpanded(false);\n                      if (stickyParent) {\n                        offset += stickyParent.scrollHeight;\n                      }\n                    }\n                    scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n                  }\n                  newScrollItem.focus();\n                  ev.preventDefault();\n                  setActiveIndex(itemIndex);\n                }\n                if (onClickProp) {\n                  onClickProp(ev);\n                }\n              },\n              isActive: isActiveProp || activeIndex === itemIndex,\n              children: cloneChildren(child.props.children)\n            });\n          } else if (child.type === React.Fragment) {\n            return cloneChildren(child.props.children);\n          } else if (child.type === JumpLinksList) {\n            return React.cloneElement(child, { children: cloneChildren(child.props.children) });\n          }\n          return child;\n        });\n\n  return (\n    <nav\n      className={css(\n        styles.jumpLinks,\n        isCentered && styles.modifiers.center,\n        isVertical && styles.modifiers.vertical,\n        formatBreakpointMods(expandable, styles),\n        isExpanded && styles.modifiers.expanded,\n        className\n      )}\n      aria-label={ariaLabel}\n      ref={navRef}\n      {...props}\n    >\n      <div className={styles.jumpLinksMain}>\n        <div className={css('pf-c-jump-links__header')}>\n          {expandable && (\n            <div className={styles.jumpLinksToggle}>\n              <Button\n                variant=\"plain\"\n                onClick={() => setIsExpanded(!isExpanded)}\n                aria-label={toggleAriaLabel}\n                aria-expanded={isExpanded}\n              >\n                <span className={styles.jumpLinksToggleIcon}>\n                  <AngleRightIcon />\n                </span>\n                {label && <span className={css(styles.jumpLinksToggleText)}> {label} </span>}\n              </Button>\n            </div>\n          )}\n          {label && alwaysShowLabel && <div className={css(styles.jumpLinksLabel)}>{label}</div>}\n        </div>\n        <ul className={styles.jumpLinksList}>{cloneChildren(children)}</ul>\n      </div>\n    </nav>\n  );\n};\nJumpLinks.displayName = 'JumpLinks';\n"]},"metadata":{},"sourceType":"module"}