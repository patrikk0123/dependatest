{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nimport { PageContext } from '../Page/Page';\nexport var ToolbarContent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarContent, _React$Component);\n\n  var _super = _createSuper(ToolbarContent);\n\n  function ToolbarContent() {\n    var _this;\n\n    _classCallCheck(this, ToolbarContent);\n\n    _this = _super.apply(this, arguments);\n    _this.expandableContentRef = React.createRef();\n    _this.chipContainerRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(ToolbarContent, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          isExpanded = _a.isExpanded,\n          toolbarId = _a.toolbarId,\n          visibility = _a.visibility,\n          visiblity = _a.visiblity,\n          alignment = _a.alignment,\n          clearAllFilters = _a.clearAllFilters,\n          showClearFiltersButton = _a.showClearFiltersButton,\n          clearFiltersButtonText = _a.clearFiltersButtonText,\n          props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"toolbarId\", \"visibility\", \"visiblity\", \"alignment\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\"]);\n\n      if (visiblity !== undefined) {\n        // eslint-disable-next-line no-console\n        console.warn('The ToolbarContent visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n      }\n\n      return React.createElement(PageContext.Consumer, null, function (_ref) {\n        var width = _ref.width,\n            getBreakpoint = _ref.getBreakpoint;\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.toolbarContent, formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), className)\n        }, props), React.createElement(ToolbarContext.Consumer, null, function (_ref2) {\n          var clearAllFiltersContext = _ref2.clearAllFilters,\n              clearFiltersButtonContext = _ref2.clearFiltersButtonText,\n              showClearFiltersButtonContext = _ref2.showClearFiltersButton,\n              toolbarIdContext = _ref2.toolbarId;\n          var expandableContentId = \"\".concat(toolbarId || toolbarIdContext, \"-expandable-content-\").concat(ToolbarContent.currentId++);\n          return React.createElement(ToolbarContentContext.Provider, {\n            value: {\n              expandableContentRef: _this2.expandableContentRef,\n              expandableContentId: expandableContentId,\n              chipContainerRef: _this2.chipContainerRef\n            }\n          }, React.createElement(\"div\", {\n            className: css(styles.toolbarContentSection)\n          }, children), React.createElement(ToolbarExpandableContent, {\n            id: expandableContentId,\n            isExpanded: isExpanded,\n            expandableContentRef: _this2.expandableContentRef,\n            chipContainerRef: _this2.chipContainerRef,\n            clearAllFilters: clearAllFilters || clearAllFiltersContext,\n            showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext,\n            clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext\n          }));\n        }));\n      });\n    }\n  }]);\n\n  return ToolbarContent;\n}(React.Component);\nToolbarContent.displayName = 'ToolbarContent';\nToolbarContent.currentId = 0;\nToolbarContent.defaultProps = {\n  isExpanded: false,\n  showClearFiltersButton: false\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","ToolbarContentContext","ToolbarContext","formatBreakpointMods","ToolbarExpandableContent","PageContext","ToolbarContent","createRef","props","className","_a","children","isExpanded","toolbarId","visibility","visiblity","alignment","clearAllFilters","showClearFiltersButton","clearFiltersButtonText","__rest","undefined","console","warn","Consumer","width","getBreakpoint","toolbarContent","clearAllFiltersContext","clearFiltersButtonContext","showClearFiltersButtonContext","toolbarIdContext","expandableContentId","currentId","Provider","value","expandableContentRef","chipContainerRef","toolbarContentSection","id","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nimport { PageContext } from '../Page/Page';\n\nexport interface ToolbarContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the data toolbar content row */\n  className?: string;\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Content to be rendered as children of the content row */\n  children?: React.ReactNode;\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** Optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Flag indicating that the clear all filters button should be visible */\n  showClearFiltersButton?: boolean;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Id of the parent Toolbar component */\n  toolbarId?: string;\n}\n\nexport class ToolbarContent extends React.Component<ToolbarContentProps> {\n  static displayName = 'ToolbarContent';\n  private expandableContentRef = React.createRef<HTMLDivElement>();\n  private chipContainerRef = React.createRef<HTMLDivElement>();\n  private static currentId = 0;\n\n  static defaultProps: ToolbarContentProps = {\n    isExpanded: false,\n    showClearFiltersButton: false\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      isExpanded,\n      toolbarId,\n      visibility,\n      visiblity,\n      alignment,\n      clearAllFilters,\n      showClearFiltersButton,\n      clearFiltersButtonText,\n      ...props\n    } = this.props;\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarContent visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <div\n            className={css(\n              styles.toolbarContent,\n              formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n              formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n              className\n            )}\n            {...props}\n          >\n            <ToolbarContext.Consumer>\n              {({\n                clearAllFilters: clearAllFiltersContext,\n                clearFiltersButtonText: clearFiltersButtonContext,\n                showClearFiltersButton: showClearFiltersButtonContext,\n                toolbarId: toolbarIdContext\n              }) => {\n                const expandableContentId = `${toolbarId ||\n                  toolbarIdContext}-expandable-content-${ToolbarContent.currentId++}`;\n                return (\n                  <ToolbarContentContext.Provider\n                    value={{\n                      expandableContentRef: this.expandableContentRef,\n                      expandableContentId,\n                      chipContainerRef: this.chipContainerRef\n                    }}\n                  >\n                    <div className={css(styles.toolbarContentSection)}>{children}</div>\n                    <ToolbarExpandableContent\n                      id={expandableContentId}\n                      isExpanded={isExpanded}\n                      expandableContentRef={this.expandableContentRef}\n                      chipContainerRef={this.chipContainerRef}\n                      clearAllFilters={clearAllFilters || clearAllFiltersContext}\n                      showClearFiltersButton={showClearFiltersButton || showClearFiltersButtonContext}\n                      clearFiltersButtonText={clearFiltersButtonText || clearFiltersButtonContext}\n                    />\n                  </ToolbarContentContext.Provider>\n                );\n              }}\n            </ToolbarContext.Consumer>\n          </div>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}