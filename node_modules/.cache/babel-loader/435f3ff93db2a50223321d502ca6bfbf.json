{"ast":null,"code":"import _classCallCheck from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";import*as WebConfigAPI from'../services/WebConfigService';import{Keycloak}from'../services/keycloakHolder';/**\n * Enum with possible authentication roles in keycloak.\n *\n */export var AUTH_ROLE;/**\n * Class managing authentication functionality.\n */(function(AUTH_ROLE){AUTH_ROLE[\"Admin\"]=\"admin\";AUTH_ROLE[\"User\"]=\"user\";AUTH_ROLE[\"System\"]=\"system-user\";AUTH_ROLE[\"Power\"]=\"power-user\";})(AUTH_ROLE||(AUTH_ROLE={}));var KeycloakService=/*#__PURE__*/function(){//We can't get KeycloakInstance type because of dynamic loading of keycloak library\n// Default: 24 Hours\nfunction KeycloakService(){_classCallCheck(this,KeycloakService);this.keycloakAuth=void 0;this.KEYCLOAK_TOKEN_MIN_EXP=86400;this.isKeycloakInitialized=void 0;this.isKeycloakInitialized=this.init();}/**\n   * Initialize keycloak and create instance.\n   *\n   * @returns Promise\n   */_createClass(KeycloakService,[{key:\"init\",value:function init(){var _this=this;var keycloakConfig=WebConfigAPI.getWebConfig().keycloak;this.keycloakAuth=new Keycloak({url:keycloakConfig.url,realm:keycloakConfig.realm,clientId:keycloakConfig.clientId});return new Promise(function(resolve,reject){_this.keycloakAuth.init({onLoad:'check-sso'}).then(function(){resolve('success');}).catch(function(errorData){reject(errorData);});});}/**\n   * Returns promise of keycloak initialization.\n   *\n   * @returns Promise\n   */},{key:\"isInitialized\",value:function isInitialized(){return this.isKeycloakInitialized;}/**\n   * Returns if user is authenticated.\n   *\n   * @returns true if user is authenticated, otherwise returns false.\n   */},{key:\"isAuthenticated\",value:function isAuthenticated(){return this.keycloakAuth.authenticated;}/**\n   * Initiate login process in keycloak.\n   *\n   * @returns Promise\n   */},{key:\"login\",value:function login(){return this.keycloakAuth.login();}/**\n   * Initiate logout process in keycloak.\n   *\n   * @param redirectUri - uri to redirect after logout\n   */},{key:\"logout\",value:function logout(redirectUri){this.keycloakAuth.logout({redirectUri:redirectUri});}/**\n   * Gets keycloak token.\n   *\n   * @returns String with token if user is logged in or returns undefined when not.\n   */},{key:\"getToken\",value:function getToken(){this.updateToken().then(function(isTokenRefreshed){if(isTokenRefreshed){console.log('Token refreshed.');}else{//console.log('Token not refreshed, valid for: \\n' + this.getTokenValidity()); //dev purpose, too much spam\n}}).catch(function(){throw new Error('Failed to refresh token');});return this.keycloakAuth.token;}},{key:\"getTokenValidity\",value:function getTokenValidity(){if(!this.keycloakAuth.tokenParsed){return'Not authenticated';}var validity='Token Expires:\\t\\t'+new Date((this.keycloakAuth.tokenParsed.exp+this.keycloakAuth.timeSkew)*1000).toLocaleString()+'\\n';validity+='Token Expires in:\\t'+Math.round(this.keycloakAuth.tokenParsed.exp+this.keycloakAuth.timeSkew-new Date().getTime()/1000)+' seconds\\n';if(this.keycloakAuth.refreshTokenParsed){validity+='Refresh Token Expires:\\t'+new Date((this.keycloakAuth.refreshTokenParsed.exp+this.keycloakAuth.timeSkew)*1000).toLocaleString()+'\\n';validity+='Refresh Expires in:\\t'+Math.round(this.keycloakAuth.refreshTokenParsed.exp+this.keycloakAuth.timeSkew-new Date().getTime()/1000)+' seconds';}return validity;}},{key:\"isTokenExpired\",value:function isTokenExpired(){return this.keycloakAuth.isTokenExpired(this.KEYCLOAK_TOKEN_MIN_EXP);}},{key:\"updateToken\",value:function updateToken(){return this.keycloakAuth.updateToken(this.KEYCLOAK_TOKEN_MIN_EXP);}/**\n   * Gets user name from keycloak.\n   *\n   * @returns String with username if user is logged in or returns undefined when not.\n   */},{key:\"getUser\",value:function getUser(){var _this$keycloakAuth$id;return(_this$keycloakAuth$id=this.keycloakAuth.idTokenParsed)===null||_this$keycloakAuth$id===void 0?void 0:_this$keycloakAuth$id.preferred_username;}/**\n   * Checks if user has required auth role.\n   *\n   * @param role AUTH_ROLE\n   * @returns true when user is logged in and has required role for access, otherwise return false.\n   */},{key:\"hasRealmRole\",value:function hasRealmRole(role){return this.keycloakAuth.hasRealmRole(role);}}]);return KeycloakService;}();/**\n * Instance of KeycloakService providing group of Keycloak related API operations.\n */export var keycloakService=new KeycloakService();","map":{"version":3,"names":["WebConfigAPI","Keycloak","AUTH_ROLE","KeycloakService","keycloakAuth","KEYCLOAK_TOKEN_MIN_EXP","isKeycloakInitialized","init","keycloakConfig","getWebConfig","keycloak","url","realm","clientId","Promise","resolve","reject","onLoad","then","catch","errorData","authenticated","login","redirectUri","logout","updateToken","isTokenRefreshed","console","log","Error","token","tokenParsed","validity","Date","exp","timeSkew","toLocaleString","Math","round","getTime","refreshTokenParsed","isTokenExpired","idTokenParsed","preferred_username","role","hasRealmRole","keycloakService"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/services/keycloakService.ts"],"sourcesContent":["import * as WebConfigAPI from '../services/WebConfigService';\nimport { Keycloak } from '../services/keycloakHolder';\n/**\n * Enum with possible authentication roles in keycloak.\n *\n */\nexport enum AUTH_ROLE {\n  Admin = 'admin',\n  User = 'user',\n  System = 'system-user',\n  Power = 'power-user',\n}\n\n/**\n * Class managing authentication functionality.\n */\nclass KeycloakService {\n  //We can't get KeycloakInstance type because of dynamic loading of keycloak library\n  private keycloakAuth: any;\n\n  private KEYCLOAK_TOKEN_MIN_EXP = 86400; // Default: 24 Hours\n\n  private isKeycloakInitialized;\n\n  constructor() {\n    this.isKeycloakInitialized = this.init();\n  }\n\n  /**\n   * Initialize keycloak and create instance.\n   *\n   * @returns Promise\n   */\n  private init(): Promise<any> {\n    const keycloakConfig = WebConfigAPI.getWebConfig().keycloak;\n\n    this.keycloakAuth = new Keycloak({\n      url: keycloakConfig.url,\n      realm: keycloakConfig.realm,\n      clientId: keycloakConfig.clientId,\n    });\n\n    return new Promise((resolve, reject) => {\n      this.keycloakAuth\n        .init({ onLoad: 'check-sso' })\n        .then(() => {\n          resolve('success');\n        })\n        .catch((errorData: any) => {\n          reject(errorData);\n        });\n    });\n  }\n  /**\n   * Returns promise of keycloak initialization.\n   *\n   * @returns Promise\n   */\n  public isInitialized(): Promise<any> {\n    return this.isKeycloakInitialized;\n  }\n  /**\n   * Returns if user is authenticated.\n   *\n   * @returns true if user is authenticated, otherwise returns false.\n   */\n  public isAuthenticated(): boolean {\n    return this.keycloakAuth.authenticated!;\n  }\n\n  /**\n   * Initiate login process in keycloak.\n   *\n   * @returns Promise\n   */\n  public login(): Promise<any> {\n    return this.keycloakAuth.login();\n  }\n\n  /**\n   * Initiate logout process in keycloak.\n   *\n   * @param redirectUri - uri to redirect after logout\n   */\n  public logout(redirectUri?: String): void {\n    this.keycloakAuth.logout({ redirectUri });\n  }\n\n  /**\n   * Gets keycloak token.\n   *\n   * @returns String with token if user is logged in or returns undefined when not.\n   */\n  public getToken(): String {\n    this.updateToken()\n      .then((isTokenRefreshed: boolean) => {\n        if (isTokenRefreshed) {\n          console.log('Token refreshed.');\n        } else {\n          //console.log('Token not refreshed, valid for: \\n' + this.getTokenValidity()); //dev purpose, too much spam\n        }\n      })\n      .catch(() => {\n        throw new Error('Failed to refresh token');\n      });\n\n    return this.keycloakAuth.token;\n  }\n\n  public getTokenValidity(): String {\n    if (!this.keycloakAuth.tokenParsed) {\n      return 'Not authenticated';\n    }\n\n    let validity =\n      'Token Expires:\\t\\t' +\n      new Date((this.keycloakAuth.tokenParsed.exp + this.keycloakAuth.timeSkew) * 1000).toLocaleString() +\n      '\\n';\n    validity +=\n      'Token Expires in:\\t' +\n      Math.round(this.keycloakAuth.tokenParsed.exp + this.keycloakAuth.timeSkew - new Date().getTime() / 1000) +\n      ' seconds\\n';\n\n    if (this.keycloakAuth.refreshTokenParsed) {\n      validity +=\n        'Refresh Token Expires:\\t' +\n        new Date((this.keycloakAuth.refreshTokenParsed.exp + this.keycloakAuth.timeSkew) * 1000).toLocaleString() +\n        '\\n';\n      validity +=\n        'Refresh Expires in:\\t' +\n        Math.round(this.keycloakAuth.refreshTokenParsed.exp + this.keycloakAuth.timeSkew - new Date().getTime() / 1000) +\n        ' seconds';\n    }\n\n    return validity;\n  }\n\n  public isTokenExpired(): boolean {\n    return this.keycloakAuth.isTokenExpired(this.KEYCLOAK_TOKEN_MIN_EXP);\n  }\n\n  public updateToken(): Promise<boolean> {\n    return this.keycloakAuth.updateToken(this.KEYCLOAK_TOKEN_MIN_EXP);\n  }\n\n  /**\n   * Gets user name from keycloak.\n   *\n   * @returns String with username if user is logged in or returns undefined when not.\n   */\n  public getUser(): String {\n    return this.keycloakAuth.idTokenParsed?.preferred_username;\n  }\n\n  /**\n   * Checks if user has required auth role.\n   *\n   * @param role AUTH_ROLE\n   * @returns true when user is logged in and has required role for access, otherwise return false.\n   */\n  public hasRealmRole(role: AUTH_ROLE): boolean {\n    return this.keycloakAuth.hasRealmRole(role);\n  }\n}\n/**\n * Instance of KeycloakService providing group of Keycloak related API operations.\n */\nexport const keycloakService = new KeycloakService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}