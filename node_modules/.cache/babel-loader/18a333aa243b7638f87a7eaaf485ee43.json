{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Slider/slider';\nimport { css } from '@patternfly/react-styles';\nimport { SliderStep } from './SliderStep';\nimport { InputGroup, InputGroupText } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Tooltip } from '../Tooltip';\n\nconst getPercentage = (current, max) => 100 * current / max;\n\nexport const Slider = _a => {\n  var {\n    className,\n    value = 0,\n    customSteps,\n    areCustomStepsContinuous = false,\n    isDisabled = false,\n    isInputVisible = false,\n    inputValue = 0,\n    inputLabel,\n    inputAriaLabel = 'Slider value input',\n    thumbAriaLabel = 'Value',\n    hasTooltipOverThumb = false,\n    inputPosition = 'right',\n    onChange,\n    leftActions,\n    rightActions,\n    step = 1,\n    min = 0,\n    max = 100,\n    showTicks = false,\n    showBoundaries = true,\n    'aria-describedby': ariaDescribedby,\n    'aria-labelledby': ariaLabelledby\n  } = _a,\n      props = __rest(_a, [\"className\", \"value\", \"customSteps\", \"areCustomStepsContinuous\", \"isDisabled\", \"isInputVisible\", \"inputValue\", \"inputLabel\", \"inputAriaLabel\", \"thumbAriaLabel\", \"hasTooltipOverThumb\", \"inputPosition\", \"onChange\", \"leftActions\", \"rightActions\", \"step\", \"min\", \"max\", \"showTicks\", \"showBoundaries\", 'aria-describedby', 'aria-labelledby']);\n\n  const sliderRailRef = React.useRef();\n  const thumbRef = React.useRef();\n  const [localValue, setValue] = useState(value);\n  const [localInputValue, setLocalInputValue] = useState(inputValue);\n  React.useEffect(() => {\n    setValue(value);\n  }, [value]);\n  React.useEffect(() => {\n    setLocalInputValue(inputValue);\n  }, [inputValue]);\n  let diff = 0;\n  let snapValue; // calculate style value percentage\n\n  const stylePercent = (localValue - min) * 100 / (max - min);\n  const style = {\n    '--pf-c-slider--value': `${stylePercent}%`\n  };\n  const widthChars = React.useMemo(() => localInputValue.toString().length, [localInputValue]);\n  const inputStyle = {\n    '--pf-c-slider__value--c-form-control--width-chars': widthChars\n  };\n\n  const onChangeHandler = value => {\n    setLocalInputValue(Number(value));\n  };\n\n  const handleKeyPressOnInput = event => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      if (onChange) {\n        onChange(localValue, localInputValue, setLocalInputValue);\n      }\n    }\n  };\n\n  const onInputFocus = e => {\n    e.stopPropagation();\n  };\n\n  const onThumbClick = () => {\n    thumbRef.current.focus();\n  };\n\n  const onBlur = () => {\n    if (onChange) {\n      onChange(localValue, localInputValue, setLocalInputValue);\n    }\n  };\n\n  const findAriaTextValue = () => {\n    if (!areCustomStepsContinuous && customSteps) {\n      const matchingStep = customSteps.find(stepObj => stepObj.value === localValue);\n\n      if (matchingStep) {\n        return matchingStep.label;\n      }\n    } // For continuous steps default to showing 2 decimals in tooltip\n    // Consider making it configurable via a property\n\n\n    return Number(Number(localValue).toFixed(2)).toString();\n  };\n\n  const handleThumbDragEnd = () => {\n    document.removeEventListener('mousemove', callbackThumbMove);\n    document.removeEventListener('mouseup', callbackThumbUp);\n    document.removeEventListener('touchmove', callbackThumbMove);\n    document.removeEventListener('touchend', callbackThumbUp);\n    document.removeEventListener('touchcancel', callbackThumbUp);\n  };\n\n  const handleMouseDown = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    diff = e.clientX - thumbRef.current.getBoundingClientRect().left;\n    document.addEventListener('mousemove', callbackThumbMove);\n    document.addEventListener('mouseup', callbackThumbUp);\n  };\n\n  const handleTouchStart = e => {\n    e.stopPropagation();\n    diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;\n    document.addEventListener('touchmove', callbackThumbMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackThumbUp);\n    document.addEventListener('touchcancel', callbackThumbUp);\n  };\n\n  const onSliderRailClick = e => {\n    handleThumbMove(e);\n\n    if (snapValue && !areCustomStepsContinuous) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n\n      if (onChange) {\n        onChange(snapValue);\n      }\n    }\n  };\n\n  const handleThumbMove = e => {\n    if (e.type === 'touchmove') {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n\n    const clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n    let newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;\n    const end = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;\n    const start = 0;\n\n    if (newPosition < start) {\n      newPosition = 0;\n    }\n\n    if (newPosition > end) {\n      newPosition = end;\n    }\n\n    const newPercentage = getPercentage(newPosition, end);\n    thumbRef.current.style.setProperty('--pf-c-slider--value', `${newPercentage}%`); // convert percentage to value\n\n    const newValue = Math.round((newPercentage * (max - min) / 100 + min) * 100) / 100;\n    setValue(newValue);\n\n    if (!customSteps) {\n      // snap to new value if not custom steps\n      snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n    }\n    /* If custom steps are discrete, snap to closest step value */\n\n\n    if (!areCustomStepsContinuous && customSteps) {\n      let percentage = newPercentage;\n\n      if (customSteps[customSteps.length - 1].value !== 100) {\n        percentage = newPercentage * (max - min) / 100 + min;\n      }\n\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value >= percentage);\n\n      if (customSteps[stepIndex].value === percentage) {\n        snapValue = customSteps[stepIndex].value;\n      } else {\n        const midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;\n\n        if (midpoint > percentage) {\n          snapValue = customSteps[stepIndex - 1].value;\n        } else {\n          snapValue = customSteps[stepIndex].value;\n        }\n      }\n\n      setValue(snapValue);\n    } // Call onchange callback\n\n\n    if (onChange) {\n      if (snapValue !== undefined) {\n        onChange(snapValue);\n      } else {\n        onChange(newValue);\n      }\n    }\n  };\n\n  const callbackThumbMove = React.useCallback(handleThumbMove, [min, max, customSteps, onChange]);\n  const callbackThumbUp = React.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);\n\n  const handleThumbKeys = e => {\n    const key = e.key;\n\n    if (key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      return;\n    }\n\n    e.preventDefault();\n    let newValue = localValue;\n\n    if (!areCustomStepsContinuous && customSteps) {\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value === localValue);\n\n      if (key === 'ArrowRight') {\n        if (stepIndex + 1 < customSteps.length) {\n          {\n            newValue = customSteps[stepIndex + 1].value;\n          }\n        }\n      } else if (key === 'ArrowLeft') {\n        if (stepIndex - 1 >= 0) {\n          newValue = customSteps[stepIndex - 1].value;\n        }\n      }\n    } else {\n      if (key === 'ArrowRight') {\n        newValue = localValue + step <= max ? localValue + step : max;\n      } else if (key === 'ArrowLeft') {\n        newValue = localValue - step >= min ? localValue - step : min;\n      }\n    }\n\n    if (newValue !== localValue) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${newValue}%`);\n      setValue(newValue);\n\n      if (onChange) {\n        onChange(newValue);\n      }\n    }\n  };\n\n  const displayInput = () => {\n    const textInput = React.createElement(TextInput, {\n      className: css(styles.formControl),\n      isDisabled: isDisabled,\n      type: \"number\",\n      value: localInputValue,\n      \"aria-label\": inputAriaLabel,\n      onKeyDown: handleKeyPressOnInput,\n      onChange: onChangeHandler,\n      onClick: onInputFocus,\n      onFocus: onInputFocus,\n      onBlur: onBlur\n    });\n\n    if (inputLabel) {\n      return React.createElement(InputGroup, null, textInput, React.createElement(InputGroupText, {\n        variant: \"plain\"\n      }, \" \", inputLabel));\n    } else {\n      return textInput;\n    }\n  };\n\n  const getStepValue = (val, min, max) => (val - min) * 100 / (max - min);\n\n  const buildSteps = () => {\n    const builtSteps = [];\n\n    for (let i = min; i <= max; i = i + step) {\n      const stepValue = getStepValue(i, min, max); // If we boundaries but not ticks just generate the needed steps\n      // so that we don't pullute them DOM with empty divs\n\n      if (!showTicks && showBoundaries && i !== min && i !== max) {\n        continue;\n      }\n\n      builtSteps.push(React.createElement(SliderStep, {\n        key: i,\n        value: stepValue,\n        label: i.toString(),\n        isTickHidden: !showTicks,\n        isLabelHidden: (i === min || i === max) && showBoundaries ? false : true,\n        isActive: i <= localValue\n      }));\n    }\n\n    return builtSteps;\n  };\n\n  const thumbComponent = React.createElement(\"div\", {\n    className: css(styles.sliderThumb),\n    ref: thumbRef,\n    tabIndex: isDisabled ? -1 : 0,\n    role: \"slider\",\n    \"aria-valuemin\": customSteps ? customSteps[0].value : min,\n    \"aria-valuemax\": customSteps ? customSteps[customSteps.length - 1].value : max,\n    \"aria-valuenow\": localValue,\n    \"aria-valuetext\": findAriaTextValue(),\n    \"aria-label\": thumbAriaLabel,\n    \"aria-disabled\": isDisabled,\n    \"aria-describedby\": ariaDescribedby,\n    \"aria-labelledby\": ariaLabelledby,\n    onMouseDown: !isDisabled ? handleMouseDown : null,\n    onTouchStart: !isDisabled ? handleTouchStart : null,\n    onKeyDown: !isDisabled ? handleThumbKeys : null,\n    onClick: !isDisabled ? onThumbClick : null\n  });\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.slider, className, isDisabled && styles.modifiers.disabled),\n    style: Object.assign(Object.assign({}, style), inputStyle)\n  }, props), leftActions && React.createElement(\"div\", {\n    className: css(styles.sliderActions)\n  }, leftActions), React.createElement(\"div\", {\n    className: css(styles.sliderMain)\n  }, React.createElement(\"div\", {\n    className: css(styles.sliderRail),\n    ref: sliderRailRef,\n    onClick: !isDisabled ? onSliderRailClick : null\n  }, React.createElement(\"div\", {\n    className: css(styles.sliderRailTrack)\n  })), customSteps && React.createElement(\"div\", {\n    className: css(styles.sliderSteps),\n    \"aria-hidden\": \"true\"\n  }, customSteps.map(stepObj => {\n    const minValue = customSteps[0].value;\n    const maxValue = customSteps[customSteps.length - 1].value;\n    const stepValue = getStepValue(stepObj.value, minValue, maxValue);\n    return React.createElement(SliderStep, {\n      key: stepObj.value,\n      value: stepValue,\n      label: stepObj.label,\n      isLabelHidden: stepObj.isLabelHidden,\n      isActive: stepObj.value <= localValue\n    });\n  })), !customSteps && (showTicks || showBoundaries) && React.createElement(\"div\", {\n    className: css(styles.sliderSteps),\n    \"aria-hidden\": \"true\"\n  }, buildSteps()), hasTooltipOverThumb ? React.createElement(Tooltip, {\n    entryDelay: 0,\n    content: findAriaTextValue()\n  }, thumbComponent) : thumbComponent, isInputVisible && inputPosition === 'aboveThumb' && React.createElement(\"div\", {\n    className: css(styles.sliderValue, styles.modifiers.floating)\n  }, displayInput())), isInputVisible && inputPosition === 'right' && React.createElement(\"div\", {\n    className: css(styles.sliderValue)\n  }, displayInput()), rightActions && React.createElement(\"div\", {\n    className: css(styles.sliderActions)\n  }, rightActions));\n};\nSlider.displayName = 'Slider';","map":{"version":3,"mappings":"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","names":["React","useState","styles","css","SliderStep","InputGroup","InputGroupText","TextInput","Tooltip","getPercentage","current","max","Slider","_a","className","value","customSteps","areCustomStepsContinuous","isDisabled","isInputVisible","inputValue","inputLabel","inputAriaLabel","thumbAriaLabel","hasTooltipOverThumb","inputPosition","onChange","leftActions","rightActions","step","min","showTicks","showBoundaries","ariaDescribedby","ariaLabelledby","props","sliderRailRef","useRef","thumbRef","localValue","setValue","localInputValue","setLocalInputValue","useEffect","diff","snapValue","stylePercent","style","widthChars","useMemo","toString","length","inputStyle","onChangeHandler","Number","handleKeyPressOnInput","event","key","preventDefault","onInputFocus","e","stopPropagation","onThumbClick","focus","onBlur","findAriaTextValue","matchingStep","find","stepObj","label","toFixed","handleThumbDragEnd","document","removeEventListener","callbackThumbMove","callbackThumbUp","handleMouseDown","clientX","getBoundingClientRect","left","addEventListener","handleTouchStart","touches","passive","onSliderRailClick","handleThumbMove","setProperty","type","stopImmediatePropagation","clientPosition","newPosition","end","offsetWidth","start","newPercentage","newValue","Math","round","percentage","stepIndex","findIndex","midpoint","undefined","useCallback","handleThumbKeys","displayInput","textInput","formControl","onKeyDown","onClick","onFocus","variant","getStepValue","val","buildSteps","builtSteps","i","stepValue","push","isTickHidden","isLabelHidden","isActive","thumbComponent","sliderThumb","ref","tabIndex","role","onMouseDown","onTouchStart","slider","modifiers","disabled","sliderActions","sliderMain","sliderRail","sliderRailTrack","sliderSteps","map","minValue","maxValue","entryDelay","content","sliderValue","floating","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Slider/Slider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Slider/slider';\nimport { css } from '@patternfly/react-styles';\nimport { SliderStep } from './SliderStep';\nimport { InputGroup, InputGroupText } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Tooltip } from '../Tooltip';\n\nexport interface SliderStepObject {\n  /** Value of the step. This value is a percentage of the slider where the  tick is drawn. */\n  value: number;\n  /** The display label for the step value. This is also used for the aria-valuetext */\n  label: string;\n  /** Flag to hide the label */\n  isLabelHidden?: boolean;\n}\n\nexport interface SliderProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Additional classes added to the spinner. */\n  className?: string;\n  /** Current value  */\n  value?: number;\n  /** Flag indicating if the slider is is discrete for custom steps.  This will cause the slider to snap to the closest value. */\n  areCustomStepsContinuous?: boolean;\n  /** Adds disabled styling and disables the slider and the input component is present */\n  isDisabled?: boolean;\n  /** The step interval*/\n  step?: number;\n  /** Minimum permitted value */\n  min?: number;\n  /** The maximum permitted value */\n  max?: number;\n  /** Flag to indicate if boundaries should be shown for slider that does not have custom steps */\n  showBoundaries?: boolean;\n  /** Flag to indicate if ticks should be shown for slider that does not have custom steps  */\n  showTicks?: boolean;\n  /** Array of custom slider step objects (value and label of each step) for the slider. */\n  customSteps?: SliderStepObject[];\n  /** Flag to show value input field */\n  isInputVisible?: boolean;\n  /** Value displayed in the input field */\n  inputValue?: number;\n  /** Aria label for the input field */\n  inputAriaLabel?: string;\n  /* Aria label for the thumb */\n  thumbAriaLabel?: string;\n  /* Adds a tooltip over the thumb containing the current value */\n  hasTooltipOverThumb?: boolean;\n  /** Label that is place after the input field */\n  inputLabel?: string | number;\n  /** Position of the input */\n  inputPosition?: 'aboveThumb' | 'right';\n  /** Value change callback. This is called when the slider value changes */\n  onChange?: (\n    value: number,\n    inputValue?: number,\n    setLocalInputValue?: React.Dispatch<React.SetStateAction<number>>\n  ) => void;\n  /** Actions placed to the left of the slider */\n  leftActions?: React.ReactNode;\n  /** Actions placed to the right of the slider */\n  rightActions?: React.ReactNode;\n  /** One or more id's to use for the slider thumb description */\n  'aria-describedby'?: string;\n  /** One or more id's to use for the slider thumb label */\n  'aria-labelledby'?: string;\n}\n\nconst getPercentage = (current: number, max: number) => (100 * current) / max;\n\nexport const Slider: React.FunctionComponent<SliderProps> = ({\n  className,\n  value = 0,\n  customSteps,\n  areCustomStepsContinuous = false,\n  isDisabled = false,\n  isInputVisible = false,\n  inputValue = 0,\n  inputLabel,\n  inputAriaLabel = 'Slider value input',\n  thumbAriaLabel = 'Value',\n  hasTooltipOverThumb = false,\n  inputPosition = 'right',\n  onChange,\n  leftActions,\n  rightActions,\n  step = 1,\n  min = 0,\n  max = 100,\n  showTicks = false,\n  showBoundaries = true,\n  'aria-describedby': ariaDescribedby,\n  'aria-labelledby': ariaLabelledby,\n  ...props\n}: SliderProps) => {\n  const sliderRailRef = React.useRef<HTMLDivElement>();\n  const thumbRef = React.useRef<HTMLDivElement>();\n\n  const [localValue, setValue] = useState(value);\n  const [localInputValue, setLocalInputValue] = useState(inputValue);\n\n  React.useEffect(() => {\n    setValue(value);\n  }, [value]);\n\n  React.useEffect(() => {\n    setLocalInputValue(inputValue);\n  }, [inputValue]);\n\n  let diff = 0;\n  let snapValue: number;\n\n  // calculate style value percentage\n  const stylePercent = ((localValue - min) * 100) / (max - min);\n  const style = { '--pf-c-slider--value': `${stylePercent}%` } as React.CSSProperties;\n  const widthChars = React.useMemo(() => localInputValue.toString().length, [localInputValue]);\n  const inputStyle = { '--pf-c-slider__value--c-form-control--width-chars': widthChars } as React.CSSProperties;\n\n  const onChangeHandler = (value: string) => {\n    setLocalInputValue(Number(value));\n  };\n\n  const handleKeyPressOnInput = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      if (onChange) {\n        onChange(localValue, localInputValue, setLocalInputValue);\n      }\n    }\n  };\n\n  const onInputFocus = (e: any) => {\n    e.stopPropagation();\n  };\n\n  const onThumbClick = () => {\n    thumbRef.current.focus();\n  };\n\n  const onBlur = () => {\n    if (onChange) {\n      onChange(localValue, localInputValue, setLocalInputValue);\n    }\n  };\n\n  const findAriaTextValue = () => {\n    if (!areCustomStepsContinuous && customSteps) {\n      const matchingStep = customSteps.find(stepObj => stepObj.value === localValue);\n      if (matchingStep) {\n        return matchingStep.label;\n      }\n    }\n    // For continuous steps default to showing 2 decimals in tooltip\n    // Consider making it configurable via a property\n    return Number(Number(localValue).toFixed(2)).toString();\n  };\n\n  const handleThumbDragEnd = () => {\n    document.removeEventListener('mousemove', callbackThumbMove);\n    document.removeEventListener('mouseup', callbackThumbUp);\n    document.removeEventListener('touchmove', callbackThumbMove);\n    document.removeEventListener('touchend', callbackThumbUp);\n    document.removeEventListener('touchcancel', callbackThumbUp);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    diff = e.clientX - thumbRef.current.getBoundingClientRect().left;\n\n    document.addEventListener('mousemove', callbackThumbMove);\n    document.addEventListener('mouseup', callbackThumbUp);\n  };\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.stopPropagation();\n\n    diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;\n\n    document.addEventListener('touchmove', callbackThumbMove, { passive: false });\n    document.addEventListener('touchend', callbackThumbUp);\n    document.addEventListener('touchcancel', callbackThumbUp);\n  };\n\n  const onSliderRailClick = (e: any) => {\n    handleThumbMove(e);\n    if (snapValue && !areCustomStepsContinuous) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n      if (onChange) {\n        onChange(snapValue);\n      }\n    }\n  };\n\n  const handleThumbMove = (e: any) => {\n    if (e.type === 'touchmove') {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n\n    const clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;\n\n    let newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;\n\n    const end = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;\n\n    const start = 0;\n\n    if (newPosition < start) {\n      newPosition = 0;\n    }\n\n    if (newPosition > end) {\n      newPosition = end;\n    }\n\n    const newPercentage = getPercentage(newPosition, end);\n\n    thumbRef.current.style.setProperty('--pf-c-slider--value', `${newPercentage}%`);\n    // convert percentage to value\n    const newValue = Math.round(((newPercentage * (max - min)) / 100 + min) * 100) / 100;\n    setValue(newValue);\n\n    if (!customSteps) {\n      // snap to new value if not custom steps\n      snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${snapValue}%`);\n      setValue(snapValue);\n    }\n\n    /* If custom steps are discrete, snap to closest step value */\n    if (!areCustomStepsContinuous && customSteps) {\n      let percentage = newPercentage;\n      if (customSteps[customSteps.length - 1].value !== 100) {\n        percentage = (newPercentage * (max - min)) / 100 + min;\n      }\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value >= percentage);\n      if (customSteps[stepIndex].value === percentage) {\n        snapValue = customSteps[stepIndex].value;\n      } else {\n        const midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;\n        if (midpoint > percentage) {\n          snapValue = customSteps[stepIndex - 1].value;\n        } else {\n          snapValue = customSteps[stepIndex].value;\n        }\n      }\n      setValue(snapValue);\n    }\n\n    // Call onchange callback\n    if (onChange) {\n      if (snapValue !== undefined) {\n        onChange(snapValue);\n      } else {\n        onChange(newValue);\n      }\n    }\n  };\n\n  const callbackThumbMove = React.useCallback(handleThumbMove, [min, max, customSteps, onChange]);\n  const callbackThumbUp = React.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);\n\n  const handleThumbKeys = (e: React.KeyboardEvent) => {\n    const key = e.key;\n    if (key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      return;\n    }\n    e.preventDefault();\n    let newValue: number = localValue;\n    if (!areCustomStepsContinuous && customSteps) {\n      const stepIndex = customSteps.findIndex(stepObj => stepObj.value === localValue);\n      if (key === 'ArrowRight') {\n        if (stepIndex + 1 < customSteps.length) {\n          {\n            newValue = customSteps[stepIndex + 1].value;\n          }\n        }\n      } else if (key === 'ArrowLeft') {\n        if (stepIndex - 1 >= 0) {\n          newValue = customSteps[stepIndex - 1].value;\n        }\n      }\n    } else {\n      if (key === 'ArrowRight') {\n        newValue = localValue + step <= max ? localValue + step : max;\n      } else if (key === 'ArrowLeft') {\n        newValue = localValue - step >= min ? localValue - step : min;\n      }\n    }\n\n    if (newValue !== localValue) {\n      thumbRef.current.style.setProperty('--pf-c-slider--value', `${newValue}%`);\n      setValue(newValue);\n      if (onChange) {\n        onChange(newValue);\n      }\n    }\n  };\n\n  const displayInput = () => {\n    const textInput = (\n      <TextInput\n        className={css(styles.formControl)}\n        isDisabled={isDisabled}\n        type=\"number\"\n        value={localInputValue}\n        aria-label={inputAriaLabel}\n        onKeyDown={handleKeyPressOnInput}\n        onChange={onChangeHandler}\n        onClick={onInputFocus}\n        onFocus={onInputFocus}\n        onBlur={onBlur}\n      />\n    );\n    if (inputLabel) {\n      return (\n        <InputGroup>\n          {textInput}\n          <InputGroupText variant=\"plain\"> {inputLabel}</InputGroupText>\n        </InputGroup>\n      );\n    } else {\n      return textInput;\n    }\n  };\n\n  const getStepValue = (val: number, min: number, max: number) => ((val - min) * 100) / (max - min);\n  const buildSteps = () => {\n    const builtSteps = [];\n    for (let i = min; i <= max; i = i + step) {\n      const stepValue = getStepValue(i, min, max);\n\n      // If we boundaries but not ticks just generate the needed steps\n      // so that we don't pullute them DOM with empty divs\n      if (!showTicks && showBoundaries && i !== min && i !== max) {\n        continue;\n      }\n\n      builtSteps.push(\n        <SliderStep\n          key={i}\n          value={stepValue}\n          label={i.toString()}\n          isTickHidden={!showTicks}\n          isLabelHidden={(i === min || i === max) && showBoundaries ? false : true}\n          isActive={i <= localValue}\n        />\n      );\n    }\n    return builtSteps;\n  };\n\n  const thumbComponent = (\n    <div\n      className={css(styles.sliderThumb)}\n      ref={thumbRef}\n      tabIndex={isDisabled ? -1 : 0}\n      role=\"slider\"\n      aria-valuemin={customSteps ? customSteps[0].value : min}\n      aria-valuemax={customSteps ? customSteps[customSteps.length - 1].value : max}\n      aria-valuenow={localValue}\n      aria-valuetext={findAriaTextValue()}\n      aria-label={thumbAriaLabel}\n      aria-disabled={isDisabled}\n      aria-describedby={ariaDescribedby}\n      aria-labelledby={ariaLabelledby}\n      onMouseDown={!isDisabled ? handleMouseDown : null}\n      onTouchStart={!isDisabled ? handleTouchStart : null}\n      onKeyDown={!isDisabled ? handleThumbKeys : null}\n      onClick={!isDisabled ? onThumbClick : null}\n    />\n  );\n\n  return (\n    <div\n      className={css(styles.slider, className, isDisabled && styles.modifiers.disabled)}\n      style={{ ...style, ...inputStyle }}\n      {...props}\n    >\n      {leftActions && <div className={css(styles.sliderActions)}>{leftActions}</div>}\n      <div className={css(styles.sliderMain)}>\n        <div className={css(styles.sliderRail)} ref={sliderRailRef} onClick={!isDisabled ? onSliderRailClick : null}>\n          <div className={css(styles.sliderRailTrack)} />\n        </div>\n        {customSteps && (\n          <div className={css(styles.sliderSteps)} aria-hidden=\"true\">\n            {customSteps.map(stepObj => {\n              const minValue = customSteps[0].value;\n              const maxValue = customSteps[customSteps.length - 1].value;\n              const stepValue = getStepValue(stepObj.value, minValue, maxValue);\n\n              return (\n                <SliderStep\n                  key={stepObj.value}\n                  value={stepValue}\n                  label={stepObj.label}\n                  isLabelHidden={stepObj.isLabelHidden}\n                  isActive={stepObj.value <= localValue}\n                />\n              );\n            })}\n          </div>\n        )}\n        {!customSteps && (showTicks || showBoundaries) && (\n          <div className={css(styles.sliderSteps)} aria-hidden=\"true\">\n            {buildSteps()}\n          </div>\n        )}\n        {hasTooltipOverThumb ? (\n          <Tooltip entryDelay={0} content={findAriaTextValue()}>\n            {thumbComponent}\n          </Tooltip>\n        ) : (\n          thumbComponent\n        )}\n        {isInputVisible && inputPosition === 'aboveThumb' && (\n          <div className={css(styles.sliderValue, styles.modifiers.floating)}>{displayInput()}</div>\n        )}\n      </div>\n      {isInputVisible && inputPosition === 'right' && <div className={css(styles.sliderValue)}>{displayInput()}</div>}\n      {rightActions && <div className={css(styles.sliderActions)}>{rightActions}</div>}\n    </div>\n  );\n};\nSlider.displayName = 'Slider';\n"]},"metadata":{},"sourceType":"module"}