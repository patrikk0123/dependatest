{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps } from '../../helpers';\nexport class ChipGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.headingRef = React.createRef();\n\n    this.toggleCollapse = () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen,\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      }));\n    };\n\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n    });\n  }\n\n  renderLabel(id) {\n    const {\n      categoryName,\n      tooltipPosition\n    } = this.props;\n    const {\n      isTooltipVisible\n    } = this.state;\n    return isTooltipVisible ? React.createElement(Tooltip, {\n      position: tooltipPosition,\n      content: categoryName\n    }, React.createElement(\"span\", {\n      tabIndex: 0,\n      ref: this.headingRef,\n      className: css(styles.chipGroupLabel)\n    }, React.createElement(\"span\", {\n      id: id\n    }, categoryName))) : React.createElement(\"span\", {\n      ref: this.headingRef,\n      className: css(styles.chipGroupLabel),\n      id: id\n    }, categoryName);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      onOverflowChipClick,\n      numChips,\n      expandedText,\n      collapsedText,\n      ouiaId,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition\n    } = _a,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"onOverflowChipClick\", \"numChips\", \"expandedText\", \"collapsedText\", \"ouiaId\", \"defaultIsOpen\", \"tooltipPosition\"]);\n\n    const {\n      isOpen\n    } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText, {\n      remaining: React.Children.count(children) - numChips\n    });\n\n    const renderChipGroup = id => {\n      const chipArray = !isOpen ? React.Children.toArray(children).slice(0, numChips) : React.Children.toArray(children);\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.chipGroup, className, categoryName && styles.modifiers.category),\n        role: \"group\"\n      }, categoryName && {\n        'aria-labelledby': id\n      }, !categoryName && {\n        'aria-label': ariaLabel\n      }, getOUIAProps(ChipGroup.displayName, ouiaId)), React.createElement(\"div\", {\n        className: css(styles.chipGroupMain)\n      }, categoryName && this.renderLabel(id), React.createElement(\"ul\", Object.assign({\n        className: css(styles.chipGroupList)\n      }, categoryName && {\n        'aria-labelledby': id\n      }, !categoryName && {\n        'aria-label': ariaLabel\n      }, {\n        role: \"list\"\n      }, rest), chipArray.map((child, i) => React.createElement(\"li\", {\n        className: css(styles.chipGroupListItem),\n        key: i\n      }, child)), numChildren > numChips && React.createElement(\"li\", {\n        className: css(styles.chipGroupListItem)\n      }, React.createElement(Chip, {\n        isOverflowChip: true,\n        onClick: event => {\n          this.toggleCollapse();\n          onOverflowChipClick(event);\n        },\n        component: \"button\"\n      }, isOpen ? expandedText : collapsedTextResult)))), isClosable && React.createElement(\"div\", {\n        className: css(styles.chipGroupClose)\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        \"aria-label\": closeBtnAriaLabel,\n        onClick: onClick,\n        id: `remove_group_${id}`,\n        \"aria-labelledby\": `remove_group_${id} ${id}`,\n        ouiaId: ouiaId || closeBtnAriaLabel\n      }, React.createElement(TimesCircleIcon, {\n        \"aria-hidden\": \"true\"\n      }))));\n    };\n\n    return numChildren === 0 ? null : React.createElement(GenerateId, null, randomId => renderChipGroup(this.props.id || randomId));\n  }\n\n}\nChipGroup.displayName = 'ChipGroup';\nChipGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numChips: 3,\n  isClosable: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: _e => undefined,\n  onOverflowChipClick: _e => undefined,\n  closeBtnAriaLabel: 'Close chip group',\n  tooltipPosition: 'top',\n  'aria-label': 'Chip group category'\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","Button","Chip","Tooltip","TimesCircleIcon","fillTemplate","GenerateId","getOUIAProps","ChipGroup","Component","constructor","props","createRef","setState","prevState","isOpen","isTooltipVisible","Boolean","headingRef","current","offsetWidth","scrollWidth","state","defaultIsOpen","componentDidMount","renderLabel","id","categoryName","tooltipPosition","position","content","tabIndex","ref","className","chipGroupLabel","render","_a","children","isClosable","closeBtnAriaLabel","ariaLabel","onClick","onOverflowChipClick","numChips","expandedText","collapsedText","ouiaId","rest","numChildren","Children","count","collapsedTextResult","remaining","renderChipGroup","chipArray","toArray","slice","chipGroup","modifiers","category","role","displayName","chipGroupMain","chipGroupList","map","child","i","chipGroupListItem","key","isOverflowChip","event","toggleCollapse","component","chipGroupClose","variant","randomId","_e","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ChipGroup/ChipGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface ChipGroupProps extends React.HTMLProps<HTMLUListElement>, OUIAProps {\n  /** Content rendered inside the chip group. Should be <Chip> elements. */\n  children?: React.ReactNode;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag for having the chip group default to expanded */\n  defaultIsOpen?: boolean;\n  /** Customizable \"Show Less\" text string */\n  expandedText?: string;\n  /** Customizeable template string. Use variable \"${remaining}\" for the overflow chip count. */\n  collapsedText?: string;\n  /** Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied */\n  categoryName?: string;\n  /** Aria label for chip group that does not have a category name */\n  'aria-label'?: string;\n  /** Set number of chips to show before overflow */\n  numChips?: number;\n  /** Flag if chip group can be closed*/\n  isClosable?: boolean;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Function that is called when clicking on the chip group close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Function that is called when clicking on the overflow (expand/collapse) chip button */\n  onOverflowChipClick?: (event: React.MouseEvent) => void;\n  /** Position of the tooltip which is displayed if the category name text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\ninterface ChipGroupState {\n  isOpen: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class ChipGroup extends React.Component<ChipGroupProps, ChipGroupState> {\n  static displayName = 'ChipGroup';\n  constructor(props: ChipGroupProps) {\n    super(props);\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  private headingRef = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: ChipGroupProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numChips: 3,\n    isClosable: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    onOverflowChipClick: (_e: React.MouseEvent) => undefined as any,\n    closeBtnAriaLabel: 'Close chip group',\n    tooltipPosition: 'top',\n    'aria-label': 'Chip group category'\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    });\n  }\n\n  toggleCollapse = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen,\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    }));\n  };\n\n  renderLabel(id: string) {\n    const { categoryName, tooltipPosition } = this.props;\n    const { isTooltipVisible } = this.state;\n    return isTooltipVisible ? (\n      <Tooltip position={tooltipPosition} content={categoryName}>\n        <span tabIndex={0} ref={this.headingRef} className={css(styles.chipGroupLabel)}>\n          <span id={id}>{categoryName}</span>\n        </span>\n      </Tooltip>\n    ) : (\n      <span ref={this.headingRef} className={css(styles.chipGroupLabel)} id={id}>\n        {categoryName}\n      </span>\n    );\n  }\n\n  render() {\n    const {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      onOverflowChipClick,\n      numChips,\n      expandedText,\n      collapsedText,\n      ouiaId,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n    const { isOpen } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText as string, {\n      remaining: React.Children.count(children) - numChips\n    });\n\n    const renderChipGroup = (id: string) => {\n      const chipArray = !isOpen\n        ? React.Children.toArray(children).slice(0, numChips)\n        : React.Children.toArray(children);\n\n      return (\n        <div\n          className={css(styles.chipGroup, className, categoryName && styles.modifiers.category)}\n          role=\"group\"\n          {...(categoryName && { 'aria-labelledby': id })}\n          {...(!categoryName && { 'aria-label': ariaLabel })}\n          {...getOUIAProps(ChipGroup.displayName, ouiaId)}\n        >\n          <div className={css(styles.chipGroupMain)}>\n            {categoryName && this.renderLabel(id)}\n            <ul\n              className={css(styles.chipGroupList)}\n              {...(categoryName && { 'aria-labelledby': id })}\n              {...(!categoryName && { 'aria-label': ariaLabel })}\n              role=\"list\"\n              {...rest}\n            >\n              {chipArray.map((child, i) => (\n                <li className={css(styles.chipGroupListItem)} key={i}>\n                  {child}\n                </li>\n              ))}\n              {numChildren > numChips && (\n                <li className={css(styles.chipGroupListItem)}>\n                  <Chip\n                    isOverflowChip\n                    onClick={event => {\n                      this.toggleCollapse();\n                      onOverflowChipClick(event);\n                    }}\n                    component=\"button\"\n                  >\n                    {isOpen ? expandedText : collapsedTextResult}\n                  </Chip>\n                </li>\n              )}\n            </ul>\n          </div>\n          {isClosable && (\n            <div className={css(styles.chipGroupClose)}>\n              <Button\n                variant=\"plain\"\n                aria-label={closeBtnAriaLabel}\n                onClick={onClick}\n                id={`remove_group_${id}`}\n                aria-labelledby={`remove_group_${id} ${id}`}\n                ouiaId={ouiaId || closeBtnAriaLabel}\n              >\n                <TimesCircleIcon aria-hidden=\"true\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    return numChildren === 0 ? null : <GenerateId>{randomId => renderChipGroup(this.props.id || randomId)}</GenerateId>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}