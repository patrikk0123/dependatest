{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useOUIAProps } from '@patternfly/react-core';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport { css } from '@patternfly/react-styles';\nimport { TableComposableContext } from './TableComposable';\n\nconst TrBase = _a => {\n  var {\n    children,\n    className,\n    isExpanded,\n    isEditable,\n    isHidden = false,\n    isHoverable = false,\n    isRowSelected = false,\n    isStriped = false,\n    innerRef,\n    ouiaId,\n    ouiaSafe = true,\n    resetOffset = false,\n    onRowClick,\n    isSelectable,\n    'aria-label': passedAriaLabel\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"isExpanded\", \"isEditable\", \"isHidden\", \"isHoverable\", \"isRowSelected\", \"isStriped\", \"innerRef\", \"ouiaId\", \"ouiaSafe\", \"resetOffset\", \"onRowClick\", \"isSelectable\", 'aria-label']);\n\n  const ouiaProps = useOUIAProps('TableRow', ouiaId, ouiaSafe);\n  const [computedAriaLabel, setComputedAriaLabel] = React.useState('');\n  let onKeyDown = null;\n\n  if (onRowClick) {\n    onKeyDown = e => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        onRowClick(e);\n        e.preventDefault();\n      }\n    };\n  }\n\n  const rowIsHidden = isHidden || isExpanded !== undefined && !isExpanded;\n  const {\n    registerSelectableRow\n  } = React.useContext(TableComposableContext);\n  React.useEffect(() => {\n    if (isSelectable && !rowIsHidden) {\n      setComputedAriaLabel(`${isRowSelected ? 'Selected' : 'Unselected'}, selectable row.`);\n      registerSelectableRow();\n    } else {\n      setComputedAriaLabel(undefined);\n    }\n  }, [isRowSelected, isSelectable, registerSelectableRow, rowIsHidden]);\n  const ariaLabel = passedAriaLabel || computedAriaLabel;\n  return React.createElement(React.Fragment, null, isSelectable && React.createElement(\"output\", {\n    className: \"pf-screen-reader\"\n  }, ariaLabel), React.createElement(\"tr\", Object.assign({\n    className: css(className, isExpanded !== undefined && styles.tableExpandableRow, isExpanded && styles.modifiers.expanded, isEditable && inlineStyles.modifiers.inlineEditable, isHoverable && styles.modifiers.hoverable, isRowSelected && styles.modifiers.selected, isStriped && styles.modifiers.striped, resetOffset && styles.modifiers.firstCellOffsetReset),\n    hidden: rowIsHidden\n  }, isHoverable && {\n    tabIndex: 0\n  }, {\n    \"aria-label\": ariaLabel,\n    ref: innerRef\n  }, onRowClick && {\n    onClick: onRowClick,\n    onKeyDown\n  }, ouiaProps, props), children));\n};\n\nexport const Tr = React.forwardRef((props, ref) => React.createElement(TrBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTr.displayName = 'Tr';","map":{"version":3,"mappings":"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","names":["React","useOUIAProps","styles","inlineStyles","css","TableComposableContext","TrBase","_a","children","className","isExpanded","isEditable","isHidden","isHoverable","isRowSelected","isStriped","innerRef","ouiaId","ouiaSafe","resetOffset","onRowClick","isSelectable","passedAriaLabel","props","ouiaProps","computedAriaLabel","setComputedAriaLabel","useState","onKeyDown","e","key","preventDefault","rowIsHidden","undefined","registerSelectableRow","useContext","useEffect","ariaLabel","tableExpandableRow","modifiers","expanded","inlineEditable","hoverable","selected","striped","firstCellOffsetReset","hidden","tabIndex","ref","onClick","Tr","forwardRef","Object","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/TableComposable/Tr.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useOUIAProps, OUIAProps } from '@patternfly/react-core';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport { css } from '@patternfly/react-styles';\nimport { TableComposableContext } from './TableComposable';\n\nexport interface TrProps extends React.HTMLProps<HTMLTableRowElement>, OUIAProps {\n  /** Content rendered inside the <tr> row */\n  children?: React.ReactNode;\n  /** Additional classes added to the <tr> row  */\n  className?: string;\n  /** Forwarded ref */\n  innerRef?: React.Ref<any>;\n  /** Flag indicating the Tr is hidden */\n  isHidden?: boolean;\n  /** Only applicable to Tr within the Tbody: Makes the row expandable and determines if it's expanded or not */\n  isExpanded?: boolean;\n  /** Only applicable to Tr within the Tbody: Whether the row is editable */\n  isEditable?: boolean;\n  /** Flag which adds hover styles for the table row */\n  isHoverable?: boolean;\n  /** Flag indicating the row is selected - adds selected styling */\n  isRowSelected?: boolean;\n  /** Flag indicating the row is striped */\n  isStriped?: boolean;\n  /** An event handler for the row */\n  onRowClick?: (event?: React.KeyboardEvent | React.MouseEvent) => void;\n  /** Flag indicating that the row is selectable */\n  isSelectable?: boolean;\n  /** Flag indicating the spacing offset of the first cell should be reset */\n  resetOffset?: boolean;\n}\n\nconst TrBase: React.FunctionComponent<TrProps> = ({\n  children,\n  className,\n  isExpanded,\n  isEditable,\n  isHidden = false,\n  isHoverable = false,\n  isRowSelected = false,\n  isStriped = false,\n  innerRef,\n  ouiaId,\n  ouiaSafe = true,\n  resetOffset = false,\n  onRowClick,\n  isSelectable,\n  'aria-label': passedAriaLabel,\n  ...props\n}: TrProps) => {\n  const ouiaProps = useOUIAProps('TableRow', ouiaId, ouiaSafe);\n  const [computedAriaLabel, setComputedAriaLabel] = React.useState<string | undefined>('');\n\n  let onKeyDown = null;\n  if (onRowClick) {\n    onKeyDown = (e: React.KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        onRowClick(e);\n        e.preventDefault();\n      }\n    };\n  }\n\n  const rowIsHidden = isHidden || (isExpanded !== undefined && !isExpanded);\n\n  const { registerSelectableRow } = React.useContext(TableComposableContext);\n\n  React.useEffect(() => {\n    if (isSelectable && !rowIsHidden) {\n      setComputedAriaLabel(`${isRowSelected ? 'Selected' : 'Unselected'}, selectable row.`);\n      registerSelectableRow();\n    } else {\n      setComputedAriaLabel(undefined);\n    }\n  }, [isRowSelected, isSelectable, registerSelectableRow, rowIsHidden]);\n\n  const ariaLabel = passedAriaLabel || computedAriaLabel;\n\n  return (\n    <>\n      {isSelectable && <output className=\"pf-screen-reader\">{ariaLabel}</output>}\n      <tr\n        className={css(\n          className,\n          isExpanded !== undefined && styles.tableExpandableRow,\n          isExpanded && styles.modifiers.expanded,\n          isEditable && inlineStyles.modifiers.inlineEditable,\n          isHoverable && styles.modifiers.hoverable,\n          isRowSelected && styles.modifiers.selected,\n          isStriped && styles.modifiers.striped,\n          resetOffset && styles.modifiers.firstCellOffsetReset\n        )}\n        hidden={rowIsHidden}\n        {...(isHoverable && { tabIndex: 0 })}\n        aria-label={ariaLabel}\n        ref={innerRef}\n        {...(onRowClick && { onClick: onRowClick, onKeyDown })}\n        {...ouiaProps}\n        {...props}\n      >\n        {children}\n      </tr>\n    </>\n  );\n};\n\nexport const Tr = React.forwardRef((props: TrProps, ref: React.Ref<HTMLTableRowElement>) => (\n  <TrBase {...props} innerRef={ref} />\n));\nTr.displayName = 'Tr';\n"]},"metadata":{},"sourceType":"module"}