{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initForm - Init form state (just values and validators)\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> form             - whole form state\n *  -> applyValues      - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - is submit button disabled?\n *\n * initForm and form objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessage -- actual error messages (in case of an error)\n *    -> state  -- state of a field ('default', 'success', 'error')\n *    -> validation:    -- means of validation\n *      -> isRequired   -- is field required?\n *      -> validators:  -- validation functions and their error messages\n *        -> check        -- validation function\n *        -> errorMessage -- error message that should be set in a case of an error\n */\nexport const useForm = (initForm, callback) => {\n  const defaultForm = { ...initForm\n  };\n\n  for (const key in defaultForm) {\n    defaultForm[key].state = 'default';\n  }\n\n  const [form, setForm] = useState(defaultForm); // is submit button disabled?\n\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true); // has any field been changed?\n  // important for edit page (do not submit until any new content)\n\n  const [hasChanged, setHasChanged] = useState(false); // are all validated inputs valid?\n\n  const isFormValid = useCallback(() => {\n    for (const key in form) {\n      var _form$key$errorMessag;\n\n      if ((_form$key$errorMessag = form[key].errorMessages) !== null && _form$key$errorMessag !== void 0 && _form$key$errorMessag.length) return false;\n    }\n\n    return true;\n  }, [form]); // are all required inputs filled?\n\n  const areRequiredFilled = useCallback(() => {\n    for (const key in form) {\n      const validation = form[key].validation;\n\n      if (validation !== null && validation !== void 0 && validation.isRequired && !form[key].value) {\n        return false;\n      }\n    }\n\n    return true;\n  }, [form]); // callback (on change of input)\n\n  const onChange = (fieldName, fieldValue) => {\n    // also delete old error messages, new checks are going to be done\n    const newFieldState = { ...form[fieldName],\n      value: fieldValue,\n      errorMessages: []\n    };\n    validate(newFieldState);\n    setForm({ ...form,\n      [fieldName]: newFieldState\n    });\n    setHasChanged(true);\n  }; // validate field state and change error messages / state\n\n\n  const validate = fieldState => {\n    const validation = fieldState.validation;\n\n    if (validation !== null && validation !== void 0 && validation.isRequired) {\n      const error = fieldState.value ? '' : 'Field must be filled.';\n      addError(fieldState, error);\n      setState(fieldState);\n    }\n\n    if (validation !== null && validation !== void 0 && validation.validators) {\n      for (const validator of validation.validators) {\n        const error = validator.check(fieldState.value) ? '' : validator.errorMessage;\n        addError(fieldState, error);\n      }\n\n      setState(fieldState);\n    }\n  }; // add error message to field state\n\n\n  const addError = (fieldState, error) => {\n    if (error) {\n      var _fieldState$errorMess;\n\n      (_fieldState$errorMess = fieldState.errorMessages) === null || _fieldState$errorMess === void 0 ? void 0 : _fieldState$errorMess.push(error);\n    }\n  }; // set state of a field (error should have been set before)\n\n\n  const setState = fieldState => {\n    var _fieldState$errorMess2;\n\n    if ((_fieldState$errorMess2 = fieldState.errorMessages) !== null && _fieldState$errorMess2 !== void 0 && _fieldState$errorMess2.length) {\n      fieldState.state = 'error';\n    } else {\n      // display success state only if not empty\n      if (fieldState.value) {\n        fieldState.state = 'success';\n      } else {\n        fieldState.state = 'default';\n      }\n    }\n  }; // callback (on submit of form)\n\n\n  const onSubmit = () => {\n    callback().catch(error => {\n      // backend error, just log it at the moment\n      console.error(error); // FUTURE IMPLEMENTATION:\n      // const formCopy = { ...form };\n      // for (const key in error.details.validation) {\n      //   const newField = { ...form[key], error: error.details.validation[key].errorMessage, state: 'error' };\n      //   formCopy[key] = newField;\n      // }\n      // setForm(formCopy);\n    }); // reset state to 'default' (valid inputs wont be highlighted)\n\n    const formCopy = { ...form\n    };\n\n    for (const key in formCopy) {\n      formCopy[key].state = 'default';\n    }\n\n    setForm(formCopy);\n    setHasChanged(false);\n  }; // set all input field to values (used for edit form)\n\n\n  const applyValues = useCallback(fieldValues => {\n    const newForm = { ...form\n    };\n\n    for (const key in fieldValues) {\n      newForm[key].value = fieldValues[key];\n      newForm[key].state = 'default';\n    }\n\n    setForm(newForm);\n  }, [form]); // on change of a input, check whether submit button should be disabled\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [form, hasChanged, isFormValid, areRequiredFilled]);\n  return {\n    form,\n    applyValues,\n    onChange,\n    onSubmit,\n    isSubmitDisabled\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useState","useForm","initForm","callback","defaultForm","key","state","form","setForm","isSubmitDisabled","setIsSubmitDisabled","hasChanged","setHasChanged","isFormValid","errorMessages","length","areRequiredFilled","validation","isRequired","value","onChange","fieldName","fieldValue","newFieldState","validate","fieldState","error","addError","setState","validators","validator","check","errorMessage","push","onSubmit","catch","console","formCopy","applyValues","fieldValues","newForm"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nexport interface IFieldValues {\n  [key: string]: string;\n}\n\ninterface IValidator {\n  check: Function;\n  errorMessage: string;\n}\n\ninterface IValidation {\n  isRequired?: boolean;\n  validators?: IValidator[];\n}\n\ninterface IFieldState {\n  value: string;\n  errorMessages?: string[];\n  state?: any;\n  validation?: IValidation;\n}\n\nexport interface IFormState {\n  [key: string]: IFieldState;\n}\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initForm - Init form state (just values and validators)\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> form             - whole form state\n *  -> applyValues      - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - is submit button disabled?\n *\n * initForm and form objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessage -- actual error messages (in case of an error)\n *    -> state  -- state of a field ('default', 'success', 'error')\n *    -> validation:    -- means of validation\n *      -> isRequired   -- is field required?\n *      -> validators:  -- validation functions and their error messages\n *        -> check        -- validation function\n *        -> errorMessage -- error message that should be set in a case of an error\n */\nexport const useForm = (initForm: Omit<Omit<IFormState, 'errorMessage'>, 'state'>, callback: Function) => {\n  const defaultForm = { ...initForm };\n  for (const key in defaultForm) {\n    defaultForm[key].state = 'default';\n  }\n  const [form, setForm] = useState<IFormState>(defaultForm);\n\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  // has any field been changed?\n  // important for edit page (do not submit until any new content)\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // are all validated inputs valid?\n  const isFormValid = useCallback(() => {\n    for (const key in form) {\n      if (form[key].errorMessages?.length) return false;\n    }\n\n    return true;\n  }, [form]);\n\n  // are all required inputs filled?\n  const areRequiredFilled = useCallback(() => {\n    for (const key in form) {\n      const validation = form[key].validation;\n      if (validation?.isRequired && !form[key].value) {\n        return false;\n      }\n    }\n\n    return true;\n  }, [form]);\n\n  // callback (on change of input)\n  const onChange = (fieldName: any, fieldValue: any) => {\n    // also delete old error messages, new checks are going to be done\n    const newFieldState = { ...form[fieldName], value: fieldValue, errorMessages: [] };\n    validate(newFieldState);\n    setForm({ ...form, [fieldName]: newFieldState });\n\n    setHasChanged(true);\n  };\n\n  // validate field state and change error messages / state\n  const validate = (fieldState: IFieldState) => {\n    const validation = fieldState.validation;\n    if (validation?.isRequired) {\n      const error = fieldState.value ? '' : 'Field must be filled.';\n      addError(fieldState, error);\n      setState(fieldState);\n    }\n    if (validation?.validators) {\n      for (const validator of validation.validators) {\n        const error = validator.check(fieldState.value) ? '' : validator.errorMessage;\n        addError(fieldState, error);\n      }\n      setState(fieldState);\n    }\n  };\n\n  // add error message to field state\n  const addError = (fieldState: IFieldState, error: string) => {\n    if (error) {\n      fieldState.errorMessages?.push(error);\n    }\n  };\n\n  // set state of a field (error should have been set before)\n  const setState = (fieldState: IFieldState) => {\n    if (fieldState.errorMessages?.length) {\n      fieldState.state = 'error';\n    } else {\n      // display success state only if not empty\n      if (fieldState.value) {\n        fieldState.state = 'success';\n      } else {\n        fieldState.state = 'default';\n      }\n    }\n  };\n\n  // callback (on submit of form)\n  const onSubmit = () => {\n    callback().catch((error: any) => {\n      // backend error, just log it at the moment\n      console.error(error);\n\n      // FUTURE IMPLEMENTATION:\n      // const formCopy = { ...form };\n      // for (const key in error.details.validation) {\n      //   const newField = { ...form[key], error: error.details.validation[key].errorMessage, state: 'error' };\n      //   formCopy[key] = newField;\n      // }\n      // setForm(formCopy);\n    });\n\n    // reset state to 'default' (valid inputs wont be highlighted)\n    const formCopy = { ...form };\n    for (const key in formCopy) {\n      formCopy[key].state = 'default';\n    }\n    setForm(formCopy);\n    setHasChanged(false);\n  };\n\n  // set all input field to values (used for edit form)\n  const applyValues = useCallback(\n    (fieldValues: IFieldValues) => {\n      const newForm = { ...form };\n      for (const key in fieldValues) {\n        newForm[key].value = fieldValues[key];\n        newForm[key].state = 'default';\n      }\n\n      setForm(newForm);\n    },\n    [form]\n  );\n\n  // on change of a input, check whether submit button should be disabled\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [form, hasChanged, isFormValid, areRequiredFilled]);\n\n  return { form, applyValues, onChange, onSubmit, isSubmitDisabled };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}