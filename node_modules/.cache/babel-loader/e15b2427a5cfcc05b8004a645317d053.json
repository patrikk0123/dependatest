{"ast":null,"code":"export var fileReaderType;\n\n(function (fileReaderType) {\n  fileReaderType[\"text\"] = \"text\";\n  fileReaderType[\"dataURL\"] = \"dataURL\";\n})(fileReaderType || (fileReaderType = {}));\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\n\n\nexport function readFile(fileHandle, type) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      return resolve(reader.result);\n    };\n\n    reader.onerror = function () {\n      return reject(reader.error);\n    };\n\n    if (type === fileReaderType.text) {\n      reader.readAsText(fileHandle);\n    } else if (type === fileReaderType.dataURL) {\n      reader.readAsDataURL(fileHandle);\n    } else {\n      reject('unknown type');\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA,WAAYA,cAAZ;;AAAA,WAAYA,cAAZ,EAA0B;EACxBA;EACAA;AACD,CAHD,EAAYA,cAAc,KAAdA,cAAc,MAA1B;AAKA;;;;;;;;;AAOA,OAAM,SAAUC,QAAV,CAAmBC,UAAnB,EAAqCC,IAArC,EAAyD;EAC7D,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;IACrC,IAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;IACAD,MAAM,CAACE,MAAP,GAAgB;MAAA,OAAMJ,OAAO,CAACE,MAAM,CAACG,MAAR,CAAb;IAAA,CAAhB;;IACAH,MAAM,CAACI,OAAP,GAAiB;MAAA,OAAML,MAAM,CAACC,MAAM,CAACK,KAAR,CAAZ;IAAA,CAAjB;;IACA,IAAIT,IAAI,KAAKH,cAAc,CAACa,IAA5B,EAAkC;MAChCN,MAAM,CAACO,UAAP,CAAkBZ,UAAlB;IACD,CAFD,MAEO,IAAIC,IAAI,KAAKH,cAAc,CAACe,OAA5B,EAAqC;MAC1CR,MAAM,CAACS,aAAP,CAAqBd,UAArB;IACD,CAFM,MAEA;MACLI,MAAM,CAAC,cAAD,CAAN;IACD;EACF,CAXM,CAAP;AAYD","names":["fileReaderType","readFile","fileHandle","type","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","text","readAsText","dataURL","readAsDataURL"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/fileUtils.ts"],"sourcesContent":["export enum fileReaderType {\n  text = 'text',\n  dataURL = 'dataURL'\n}\n\n/**\n * Read a file using the FileReader API, either as a plain text string or as a DataURL string.\n * Returns a promise which will resolve with the file contents as a string or reject with a DOMException.\n *\n * @param {File} fileHandle - File object to read\n * @param {fileReaderType} type - How to read it\n */\nexport function readFile(fileHandle: File, type: fileReaderType) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject(reader.error);\n    if (type === fileReaderType.text) {\n      reader.readAsText(fileHandle);\n    } else if (type === fileReaderType.dataURL) {\n      reader.readAsDataURL(fileHandle);\n    } else {\n      reject('unknown type');\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}