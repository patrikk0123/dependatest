{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nvar buttonVariantStyles = {\n  default: '',\n  primary: styles.modifiers.primary,\n  secondary: styles.modifiers.secondary\n};\nexport var Toggle = /*#__PURE__*/function (_React$Component) {\n  _inherits(Toggle, _React$Component);\n\n  var _super = _createSuper(Toggle);\n\n  function Toggle() {\n    var _this;\n\n    _classCallCheck(this, Toggle);\n\n    _this = _super.apply(this, arguments);\n    _this.buttonRef = React.createRef();\n\n    _this.componentDidMount = function () {\n      document.addEventListener('click', _this.onDocClick);\n      document.addEventListener('touchstart', _this.onDocClick);\n      document.addEventListener('keydown', _this.onEscPress);\n    };\n\n    _this.componentWillUnmount = function () {\n      document.removeEventListener('click', _this.onDocClick);\n      document.removeEventListener('touchstart', _this.onDocClick);\n      document.removeEventListener('keydown', _this.onEscPress);\n    };\n\n    _this.onDocClick = function (event) {\n      var _this$props = _this.props,\n          isOpen = _this$props.isOpen,\n          parentRef = _this$props.parentRef,\n          onToggle = _this$props.onToggle,\n          getMenuRef = _this$props.getMenuRef;\n      var menuRef = getMenuRef && getMenuRef();\n      var clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      var clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n\n      if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n        onToggle(false, event);\n      }\n    };\n\n    _this.onEscPress = function (event) {\n      var _this$props2 = _this.props,\n          parentRef = _this$props2.parentRef,\n          getMenuRef = _this$props2.getMenuRef;\n      var keyCode = event.keyCode || event.which;\n      var menuRef = getMenuRef && getMenuRef();\n      var escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      var escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n\n      if (_this.props.isOpen && (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') && (escFromToggle || escFromWithinMenu)) {\n        _this.props.onToggle(false, event);\n\n        _this.buttonRef.current.focus();\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      if (event.key === 'Tab' && !_this.props.isOpen) {\n        return;\n      }\n\n      if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && _this.props.isOpen) {\n        if (!_this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n\n        _this.props.onToggle(!_this.props.isOpen, event);\n      } else if ((event.key === 'Enter' || event.key === ' ') && !_this.props.isOpen) {\n        if (!_this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n\n        _this.props.onToggle(!_this.props.isOpen, event);\n\n        _this.props.onEnter();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Toggle, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          isOpen = _a.isOpen,\n          isDisabled = _a.isDisabled,\n          isPlain = _a.isPlain,\n          isText = _a.isText,\n          isPrimary = _a.isPrimary,\n          isSplitButton = _a.isSplitButton,\n          toggleVariant = _a.toggleVariant,\n          onToggle = _a.onToggle,\n          ariaHasPopup = _a['aria-haspopup'],\n          isActive = _a.isActive,\n          bubbleEvent = _a.bubbleEvent,\n          onEnter = _a.onEnter,\n          parentRef = _a.parentRef,\n          getMenuRef = _a.getMenuRef,\n          id = _a.id,\n          type = _a.type,\n          props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"isSplitButton\", \"toggleVariant\", \"onToggle\", 'aria-haspopup', \"isActive\", \"bubbleEvent\", \"onEnter\", \"parentRef\", \"getMenuRef\", \"id\", \"type\"]);\n\n      return React.createElement(DropdownContext.Consumer, null, function (_ref) {\n        var toggleClass = _ref.toggleClass;\n        return React.createElement(\"button\", Object.assign({}, props, {\n          id: id,\n          ref: _this2.buttonRef,\n          className: css(isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, isPrimary && styles.modifiers.primary, buttonVariantStyles[toggleVariant], className),\n          type: type || 'button',\n          onClick: function onClick(event) {\n            return onToggle(!isOpen, event);\n          },\n          \"aria-expanded\": isOpen,\n          \"aria-haspopup\": ariaHasPopup,\n          onKeyDown: function onKeyDown(event) {\n            return _this2.onKeyDown(event);\n          },\n          disabled: isDisabled\n        }), children);\n      });\n    }\n  }]);\n\n  return Toggle;\n}(React.Component);\nToggle.displayName = 'Toggle';\nToggle.defaultProps = {\n  className: '',\n  isOpen: false,\n  isActive: false,\n  isDisabled: false,\n  isPlain: false,\n  isText: false,\n  isPrimary: false,\n  isSplitButton: false,\n  onToggle: function onToggle() {},\n  onEnter: function onEnter() {},\n  bubbleEvent: false\n};","map":{"version":3,"mappings":"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","names":["React","styles","DropdownContext","css","KEY_CODES","buttonVariantStyles","default","primary","modifiers","secondary","Toggle","createRef","document","addEventListener","onDocClick","onEscPress","removeEventListener","event","props","isOpen","parentRef","onToggle","getMenuRef","menuRef","clickedOnToggle","current","contains","target","clickedWithinMenu","keyCode","which","escFromToggle","escFromWithinMenu","ESCAPE_KEY","key","buttonRef","focus","bubbleEvent","stopPropagation","preventDefault","onEnter","className","_a","children","isDisabled","isPlain","isText","isPrimary","isSplitButton","toggleVariant","ariaHasPopup","isActive","id","type","__rest","Consumer","toggleClass","ref","dropdownToggleButton","dropdownToggle","active","plain","text","onClick","onKeyDown","disabled","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/Toggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToggleProps {\n  /** HTML ID of dropdown toggle */\n  id: string;\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Anything which can be rendered as dropdown toggle */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (\n    isOpen: boolean,\n    event: MouseEvent | TouchEvent | KeyboardEvent | React.KeyboardEvent<any> | React.MouseEvent<HTMLButtonElement>\n  ) => void;\n  /** Callback called when the Enter key is pressed */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** The menu element */\n  getMenuRef?: () => HTMLElement;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Disables the dropdown toggle */\n  isDisabled?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** @deprecated Use `toggleVariant` instead. Display the toggle with a primary button style */\n  isPrimary?: boolean;\n  /** Style the toggle as a child of a split button */\n  isSplitButton?: boolean;\n  /** Alternate styles for the dropdown toggle button */\n  toggleVariant?: 'primary' | 'secondary' | 'default';\n  /** Flag for aria popup */\n  'aria-haspopup'?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'tree';\n  /** Allows selecting toggle to select parent */\n  bubbleEvent?: boolean;\n}\n\nconst buttonVariantStyles = {\n  default: '',\n  primary: styles.modifiers.primary,\n  secondary: styles.modifiers.secondary\n};\n\nexport class Toggle extends React.Component<ToggleProps> {\n  static displayName = 'Toggle';\n  private buttonRef = React.createRef<HTMLButtonElement>();\n\n  static defaultProps: PickOptional<ToggleProps> = {\n    className: '',\n    isOpen: false,\n    isActive: false,\n    isDisabled: false,\n    isPlain: false,\n    isText: false,\n    isPrimary: false,\n    isSplitButton: false,\n    onToggle: () => {},\n    onEnter: () => {},\n    bubbleEvent: false\n  };\n\n  componentDidMount = () => {\n    document.addEventListener('click', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('click', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  };\n\n  onDocClick = (event: MouseEvent | TouchEvent) => {\n    const { isOpen, parentRef, onToggle, getMenuRef } = this.props;\n    const menuRef = getMenuRef && getMenuRef();\n    const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target as Node);\n    if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n      onToggle(false, event);\n    }\n  };\n\n  onEscPress = (event: KeyboardEvent) => {\n    const { parentRef, getMenuRef } = this.props;\n    const keyCode = event.keyCode || event.which;\n    const menuRef = getMenuRef && getMenuRef();\n    const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target as Node);\n    if (\n      this.props.isOpen &&\n      (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') &&\n      (escFromToggle || escFromWithinMenu)\n    ) {\n      this.props.onToggle(false, event);\n      this.buttonRef.current.focus();\n    }\n  };\n\n  onKeyDown = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Tab' && !this.props.isOpen) {\n      return;\n    }\n    if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && this.props.isOpen) {\n      if (!this.props.bubbleEvent) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n\n      this.props.onToggle(!this.props.isOpen, event);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !this.props.isOpen) {\n      if (!this.props.bubbleEvent) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n\n      this.props.onToggle(!this.props.isOpen, event);\n      this.props.onEnter();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      isOpen,\n      isDisabled,\n      isPlain,\n      isText,\n      isPrimary,\n      isSplitButton,\n      toggleVariant,\n      onToggle,\n      'aria-haspopup': ariaHasPopup,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      bubbleEvent,\n      onEnter,\n      parentRef,\n      getMenuRef,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      id,\n      type,\n      ...props\n    } = this.props;\n    return (\n      <DropdownContext.Consumer>\n        {({ toggleClass }) => (\n          <button\n            {...props}\n            id={id}\n            ref={this.buttonRef}\n            className={css(\n              isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle,\n              isActive && styles.modifiers.active,\n              isPlain && styles.modifiers.plain,\n              isText && styles.modifiers.text,\n              isPrimary && styles.modifiers.primary,\n              buttonVariantStyles[toggleVariant],\n              className\n            )}\n            type={type || 'button'}\n            onClick={event => onToggle(!isOpen, event)}\n            aria-expanded={isOpen}\n            aria-haspopup={ariaHasPopup}\n            onKeyDown={event => this.onKeyDown(event)}\n            disabled={isDisabled}\n          >\n            {children}\n          </button>\n        )}\n      </DropdownContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}