{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx\";\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute equality to current filter text value (=like= operator)\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param onSelect - function to be called when option is selected (value is passed in)\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param shouldDisplayDescription - should options display description? (if any)\n */\nexport const SearchSelect = _ref => {\n  let {\n    fetchCallback,\n    attribute,\n    onSelect,\n    delay = 200,\n    pageSize = 20,\n    shouldDisplayDescription = false\n  } = _ref;\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState([]); // data downloaded on first load\n\n  const [defaultData, setDefaultData] = useState([]); // currenyly selected option\n\n  const [selected, setSelected] = useState(); // loading state\n\n  const [loading, setLoading] = useState(false);\n  const [isSelectOpen, setIsSelectOpen] = useState(false); // used to fetch data after delay\n\n  const timeout = useRef();\n  const selectRef = useRef();\n  const lastAbortController = useRef(); // fetch data and save them\n  // uses pageSize\n  // sets filter config (if there is non empty filterText)\n\n  const fetchData = useCallback(function (filterText) {\n    let setDefaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const config = {\n      params: {\n        pageSize\n      }\n    };\n\n    if (filterText) {\n      config.params.q = `${attribute}=like=\"%${filterText}%\"`;\n    }\n\n    setLoading(true);\n    fetchCallback(config).then(response => {\n      var _selectRef$current, _selectRef$current$in, _selectRef$current$in2, _selectRef$current2, _selectRef$current2$i, _selectRef$current2$i2;\n\n      const data = response.data.content;\n      const currentFilterText = selectRef !== null && selectRef !== void 0 && (_selectRef$current = selectRef.current) !== null && _selectRef$current !== void 0 && (_selectRef$current$in = _selectRef$current['inputRef']) !== null && _selectRef$current$in !== void 0 && (_selectRef$current$in2 = _selectRef$current$in.current) !== null && _selectRef$current$in2 !== void 0 && _selectRef$current$in2.value ? selectRef === null || selectRef === void 0 ? void 0 : (_selectRef$current2 = selectRef.current) === null || _selectRef$current2 === void 0 ? void 0 : (_selectRef$current2$i = _selectRef$current2['inputRef']) === null || _selectRef$current2$i === void 0 ? void 0 : (_selectRef$current2$i2 = _selectRef$current2$i.current) === null || _selectRef$current2$i2 === void 0 ? void 0 : _selectRef$current2$i2.value : ''; // if filter text changed (compared to one when request was made), do not set options\n\n      if (currentFilterText === filterText) {\n        setCurrentData(data);\n      }\n\n      if (setDefaults) setDefaultData(data);\n      setLoading(false);\n    });\n  }, [fetchCallback, attribute, pageSize]); // load first / default data\n\n  useEffect(() => {\n    fetchData('', true);\n  }, [fetchData]); // if anything was selected, unselect it\n\n  const clearSelection = () => {\n    if (selected) {\n      setSelected(undefined);\n      onSelect('');\n    }\n  }; // on clear, set default values\n\n\n  const clearSelect = () => {\n    setCurrentData(defaultData);\n    setIsSelectOpen(false);\n    clearSelection();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    variant: SelectVariant.typeahead,\n    onToggle: isOpen => {\n      setIsSelectOpen(isOpen);\n    },\n    onTypeaheadInputChanged: value => {\n      // if text filter changed, unselect\n      clearSelection();\n      clearTimeout(timeout === null || timeout === void 0 ? void 0 : timeout.current);\n\n      if (value !== '') {\n        timeout.current = setTimeout(() => fetchData(value), delay);\n      } else {\n        // if filter is empty string, just set default options\n        setCurrentData(defaultData);\n      }\n    },\n    onSelect: (event, selection, isPlaceholder) => {\n      if (isPlaceholder) clearSelect();else {\n        if (event) {\n          // do this only when select option is clicked\n          // (for some reason, this function is called also on blur)\n          setCurrentData([]);\n          fetchData(selection);\n          onSelect(selection);\n        }\n\n        setSelected(selection);\n        setIsSelectOpen(false);\n      }\n    },\n    onFilter: () => {\n      // filtering is not done here\n      return undefined;\n    },\n    loadingVariant: loading ? 'spinner' : undefined,\n    onClear: clearSelect,\n    selections: selected,\n    isOpen: isSelectOpen,\n    isInputValuePersisted: true,\n    isInputFilterPersisted: true,\n    ref: selectRef,\n    children: currentData.map((option, index) => /*#__PURE__*/_jsxDEV(SelectOption, {\n      value: option[attribute],\n      description: shouldDisplayDescription && option['description']\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Select","SelectOption","SelectVariant","useCallback","useEffect","useRef","useState","SearchSelect","fetchCallback","attribute","onSelect","delay","pageSize","shouldDisplayDescription","currentData","setCurrentData","defaultData","setDefaultData","selected","setSelected","loading","setLoading","isSelectOpen","setIsSelectOpen","timeout","selectRef","lastAbortController","fetchData","filterText","setDefaults","config","params","q","then","response","data","content","currentFilterText","current","value","clearSelection","undefined","clearSelect","typeahead","isOpen","clearTimeout","setTimeout","event","selection","isPlaceholder","map","option","index"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx"],"sourcesContent":["import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { AxiosRequestConfig } from 'axios';\nimport { MutableRefObject, useCallback, useEffect, useRef, useState } from 'react';\n\ninterface ISearchSelectProps {\n  fetchCallback: Function;\n  attribute: string;\n  onSelect: Function;\n  delay?: number;\n  pageSize?: number;\n  shouldDisplayDescription?: boolean;\n}\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute equality to current filter text value (=like= operator)\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param onSelect - function to be called when option is selected (value is passed in)\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param shouldDisplayDescription - should options display description? (if any)\n */\nexport const SearchSelect = ({\n  fetchCallback,\n  attribute,\n  onSelect,\n  delay = 200,\n  pageSize = 20,\n  shouldDisplayDescription = false,\n}: ISearchSelectProps) => {\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState<any[]>([]);\n  // data downloaded on first load\n  const [defaultData, setDefaultData] = useState<any[]>([]);\n  // currenyly selected option\n  const [selected, setSelected] = useState<string | undefined>();\n\n  // loading state\n  const [loading, setLoading] = useState<boolean>(false);\n  const [isSelectOpen, setIsSelectOpen] = useState<boolean>(false);\n\n  // used to fetch data after delay\n  const timeout = useRef<NodeJS.Timeout>();\n  const selectRef = useRef() as MutableRefObject<Select>;\n\n  const lastAbortController = useRef<AbortController>();\n\n  // fetch data and save them\n  // uses pageSize\n  // sets filter config (if there is non empty filterText)\n  const fetchData = useCallback(\n    (filterText: string, setDefaults: boolean = false) => {\n      const config: AxiosRequestConfig = { params: { pageSize } };\n      if (filterText) {\n        config.params.q = `${attribute}=like=\"%${filterText}%\"`;\n      }\n\n      setLoading(true);\n\n      fetchCallback(config).then((response: any) => {\n        const data = response.data.content;\n        const currentFilterText = selectRef?.current?.['inputRef']?.current?.value\n          ? selectRef?.current?.['inputRef']?.current?.value\n          : '';\n        // if filter text changed (compared to one when request was made), do not set options\n        if (currentFilterText === filterText) {\n          setCurrentData(data);\n        }\n        if (setDefaults) setDefaultData(data);\n        setLoading(false);\n      });\n    },\n    [fetchCallback, attribute, pageSize]\n  );\n\n  // load first / default data\n  useEffect(() => {\n    fetchData('', true);\n  }, [fetchData]);\n\n  // if anything was selected, unselect it\n  const clearSelection = () => {\n    if (selected) {\n      setSelected(undefined);\n      onSelect('');\n    }\n  };\n\n  // on clear, set default values\n  const clearSelect = () => {\n    setCurrentData(defaultData);\n    setIsSelectOpen(false);\n    clearSelection();\n  };\n\n  return (\n    <Select\n      variant={SelectVariant.typeahead}\n      onToggle={(isOpen) => {\n        setIsSelectOpen(isOpen);\n      }}\n      onTypeaheadInputChanged={(value: string) => {\n        // if text filter changed, unselect\n        clearSelection();\n\n        clearTimeout(timeout?.current);\n        if (value !== '') {\n          timeout.current = setTimeout(() => fetchData(value), delay);\n        } else {\n          // if filter is empty string, just set default options\n          setCurrentData(defaultData);\n        }\n      }}\n      onSelect={(event, selection, isPlaceholder) => {\n        if (isPlaceholder) clearSelect();\n        else {\n          if (event) {\n            // do this only when select option is clicked\n            // (for some reason, this function is called also on blur)\n            setCurrentData([]);\n            fetchData(selection as string);\n            onSelect(selection);\n          }\n          setSelected(selection as string);\n          setIsSelectOpen(false);\n        }\n      }}\n      onFilter={() => {\n        // filtering is not done here\n        return undefined;\n      }}\n      loadingVariant={loading ? 'spinner' : undefined}\n      onClear={clearSelect}\n      selections={selected}\n      isOpen={isSelectOpen}\n      isInputValuePersisted={true}\n      isInputFilterPersisted={true}\n      ref={selectRef}\n    >\n      {currentData.map((option: any, index: number) => (\n        <SelectOption key={index} value={option[attribute]} description={shouldDisplayDescription && option['description']} />\n      ))}\n    </Select>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}