{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Switch/switch';\nimport { css } from '@patternfly/react-styles';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { getUniqueId } from '../../helpers/util';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport class Switch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (!props.label && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('Switch: Switch requires either a label or an aria-label to be specified');\n    }\n\n    this.id = props.id || getUniqueId();\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(Switch.displayName)\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      id,\n      className,\n      label,\n      labelOff,\n      isChecked,\n      defaultChecked,\n      hasCheckIcon,\n      isDisabled,\n      onChange,\n      isReversed,\n      ouiaId,\n      ouiaSafe\n    } = _a,\n          props = __rest(_a, [\"id\", \"className\", \"label\", \"labelOff\", \"isChecked\", \"defaultChecked\", \"hasCheckIcon\", \"isDisabled\", \"onChange\", \"isReversed\", \"ouiaId\", \"ouiaSafe\"]);\n\n    const isAriaLabelledBy = props['aria-label'] === '';\n    return React.createElement(\"label\", Object.assign({\n      className: css(styles.switch, isReversed && styles.modifiers.reverse, className),\n      htmlFor: this.id\n    }, getOUIAProps(Switch.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)), React.createElement(\"input\", Object.assign({\n      id: this.id,\n      className: css(styles.switchInput),\n      type: \"checkbox\",\n      onChange: event => onChange(event.target.checked, event)\n    }, [true, false].includes(defaultChecked) && {\n      defaultChecked\n    }, ![true, false].includes(defaultChecked) && {\n      checked: isChecked\n    }, {\n      disabled: isDisabled,\n      \"aria-labelledby\": isAriaLabelledBy ? `${this.id}-on` : null\n    }, props)), label !== undefined ? React.createElement(React.Fragment, null, React.createElement(\"span\", {\n      className: css(styles.switchToggle)\n    }, hasCheckIcon && React.createElement(\"span\", {\n      className: css(styles.switchToggleIcon),\n      \"aria-hidden\": \"true\"\n    }, React.createElement(CheckIcon, {\n      noVerticalAlign: true\n    }))), React.createElement(\"span\", {\n      className: css(styles.switchLabel, styles.modifiers.on),\n      id: isAriaLabelledBy ? `${this.id}-on` : null,\n      \"aria-hidden\": \"true\"\n    }, label), React.createElement(\"span\", {\n      className: css(styles.switchLabel, styles.modifiers.off),\n      id: isAriaLabelledBy ? `${this.id}-off` : null,\n      \"aria-hidden\": \"true\"\n    }, labelOff !== undefined ? labelOff : label)) : React.createElement(\"span\", {\n      className: css(styles.switchToggle)\n    }, React.createElement(\"div\", {\n      className: css(styles.switchToggleIcon),\n      \"aria-hidden\": \"true\"\n    }, React.createElement(CheckIcon, {\n      noVerticalAlign: true\n    }))));\n  }\n\n}\nSwitch.displayName = 'Switch';\nSwitch.defaultProps = {\n  isChecked: true,\n  isDisabled: false,\n  isReversed: false,\n  'aria-label': '',\n  onChange: () => undefined\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","CheckIcon","getUniqueId","getOUIAProps","getDefaultOUIAId","Switch","Component","constructor","props","label","console","error","id","state","ouiaStateId","displayName","render","_a","className","labelOff","isChecked","defaultChecked","hasCheckIcon","isDisabled","onChange","isReversed","ouiaId","ouiaSafe","isAriaLabelledBy","switch","modifiers","reverse","htmlFor","undefined","switchInput","type","event","target","checked","includes","disabled","Fragment","switchToggle","switchToggleIcon","noVerticalAlign","switchLabel","on","off"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Switch/Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Switch/switch';\nimport { css } from '@patternfly/react-styles';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { getUniqueId } from '../../helpers/util';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface SwitchProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'type' | 'onChange' | 'disabled' | 'label'>,\n    OUIAProps {\n  /** id for the label. */\n  id?: string;\n  /** Additional classes added to the switch */\n  className?: string;\n  /** Text value for the visible label when on */\n  label?: React.ReactNode;\n  /** Text value for the visible label when off */\n  labelOff?: React.ReactNode;\n  /** Flag to show if the switch is checked when it is controlled by React state.\n   * To make the switch uncontrolled instead use the defaultChecked prop, but do not use both.\n   */\n  isChecked?: boolean;\n  /** Flag to set the default checked value of the switch when it is uncontrolled by React state.\n   * To make the switch controlled instead use the isChecked prop, but do not use both.\n   */\n  defaultChecked?: boolean;\n  /** Flag to show if the switch has a check icon. */\n  hasCheckIcon?: boolean;\n  /** Flag to show if the switch is disabled. */\n  isDisabled?: boolean;\n  /** A callback for when the switch selection changes. (isChecked, event) => {} */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Adds accessible text to the switch, and should describe the isChecked=\"true\" state. When label is defined, aria-label should be set to the text string that is visible when isChecked is true. */\n  'aria-label'?: string;\n  /** Flag to reverse the layout of toggle and label (toggle on right). */\n  isReversed?: boolean;\n}\n\nexport class Switch extends React.Component<SwitchProps & OUIAProps, { ouiaStateId: string }> {\n  static displayName = 'Switch';\n  id: string;\n\n  static defaultProps: SwitchProps = {\n    isChecked: true,\n    isDisabled: false,\n    isReversed: false,\n    'aria-label': '',\n    onChange: () => undefined as any\n  };\n\n  constructor(props: SwitchProps & OUIAProps) {\n    super(props);\n    if (!props.label && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('Switch: Switch requires either a label or an aria-label to be specified');\n    }\n\n    this.id = props.id || getUniqueId();\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(Switch.displayName)\n    };\n  }\n\n  render() {\n    const {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      id,\n      className,\n      label,\n      labelOff,\n      isChecked,\n      defaultChecked,\n      hasCheckIcon,\n      isDisabled,\n      onChange,\n      isReversed,\n      ouiaId,\n      ouiaSafe,\n      ...props\n    } = this.props;\n\n    const isAriaLabelledBy = props['aria-label'] === '';\n    return (\n      <label\n        className={css(styles.switch, isReversed && styles.modifiers.reverse, className)}\n        htmlFor={this.id}\n        {...getOUIAProps(Switch.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n      >\n        <input\n          id={this.id}\n          className={css(styles.switchInput)}\n          type=\"checkbox\"\n          onChange={event => onChange(event.target.checked, event)}\n          {...([true, false].includes(defaultChecked) && { defaultChecked })}\n          {...(![true, false].includes(defaultChecked) && { checked: isChecked })}\n          disabled={isDisabled}\n          aria-labelledby={isAriaLabelledBy ? `${this.id}-on` : null}\n          {...props}\n        />\n        {label !== undefined ? (\n          <React.Fragment>\n            <span className={css(styles.switchToggle)}>\n              {hasCheckIcon && (\n                <span className={css(styles.switchToggleIcon)} aria-hidden=\"true\">\n                  <CheckIcon noVerticalAlign />\n                </span>\n              )}\n            </span>\n            <span\n              className={css(styles.switchLabel, styles.modifiers.on)}\n              id={isAriaLabelledBy ? `${this.id}-on` : null}\n              aria-hidden=\"true\"\n            >\n              {label}\n            </span>\n            <span\n              className={css(styles.switchLabel, styles.modifiers.off)}\n              id={isAriaLabelledBy ? `${this.id}-off` : null}\n              aria-hidden=\"true\"\n            >\n              {labelOff !== undefined ? labelOff : label}\n            </span>\n          </React.Fragment>\n        ) : (\n          <span className={css(styles.switchToggle)}>\n            <div className={css(styles.switchToggleIcon)} aria-hidden=\"true\">\n              <CheckIcon noVerticalAlign />\n            </div>\n          </span>\n        )}\n      </label>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}