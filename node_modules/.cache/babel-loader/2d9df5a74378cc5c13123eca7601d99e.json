{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nexport const DataListCheck = _a => {\n  var {\n    className = '',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onChange = (checked, event) => {},\n    isValid = true,\n    isDisabled = false,\n    isChecked = null,\n    checked = null,\n    defaultChecked,\n    otherControls = false\n  } = _a,\n      props = __rest(_a, [\"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"checked\", \"defaultChecked\", \"otherControls\"]);\n\n  const check = React.createElement(\"div\", {\n    className: css(styles.dataListCheck)\n  }, React.createElement(\"input\", Object.assign({}, props, {\n    type: \"checkbox\",\n    onChange: event => onChange(event.currentTarget.checked, event),\n    \"aria-invalid\": !isValid,\n    disabled: isDisabled\n  }, [true, false].includes(defaultChecked) && {\n    defaultChecked\n  }, ![true, false].includes(defaultChecked) && {\n    checked: isChecked || checked\n  })));\n  return React.createElement(React.Fragment, null, !otherControls && React.createElement(\"div\", {\n    className: css(styles.dataListItemControl, className)\n  }, check), otherControls && check);\n};\nDataListCheck.displayName = 'DataListCheck';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,4DAAnB;AA+BA,OAAO,MAAMC,aAAa,GAAiDC,EAAD,IAWjD;MAXkD;IACzEC,SAAS,GAAG,EAD6D;IAEzE;IACAC,QAAQ,GAAG,CAACC,OAAD,EAAmBC,KAAnB,KAA+D,CAAG,CAHJ;IAIzEC,OAAO,GAAG,IAJ+D;IAKzEC,UAAU,GAAG,KAL4D;IAMzEC,SAAS,GAAG,IAN6D;IAOzEJ,OAAO,GAAG,IAP+D;IAQzEK,cARyE;IASzEC,aAAa,GAAG;EATyD,IASpDT;MAClBU,KAAK,cAViE,6GAUjE;;EAER,MAAMC,KAAK,GACTf;IAAKK,SAAS,EAAEJ,GAAG,CAACC,MAAM,CAACc,aAAR;EAAnB,GACEhB,+CACMc,KADN,EACW;IACTG,IAAI,EAAC,UADI;IAETX,QAAQ,EAAEE,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAACU,aAAN,CAAoBX,OAArB,EAA8BC,KAA9B,CAFlB;IAEsD,gBACjD,CAACC,OAHN;IAITU,QAAQ,EAAET;EAJD,CADX,EAMO,CAAC,IAAD,EAAO,KAAP,EAAcU,QAAd,CAAuBR,cAAvB,KAA0C;IAAEA;EAAF,CANjD,EAOO,CAAC,CAAC,IAAD,EAAO,KAAP,EAAcQ,QAAd,CAAuBR,cAAvB,CAAD,IAA2C;IAAEL,OAAO,EAAEI,SAAS,IAAIJ;EAAxB,CAPlD,EADF,CADF;EAaA,OACEP,oBAACA,KAAK,CAACqB,QAAP,EAAe,IAAf,EACG,CAACR,aAAD,IAAkBb;IAAKK,SAAS,EAAEJ,GAAG,CAACC,MAAM,CAACoB,mBAAR,EAA6BjB,SAA7B;EAAnB,GAA6DU,KAA7D,CADrB,EAEGF,aAAa,IAAIE,KAFpB,CADF;AAMD,CA/BM;AAgCPZ,aAAa,CAACoB,WAAd,GAA4B,eAA5B","names":["React","css","styles","DataListCheck","_a","className","onChange","checked","event","isValid","isDisabled","isChecked","defaultChecked","otherControls","props","check","dataListCheck","type","currentTarget","disabled","includes","Fragment","dataListItemControl","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataListCheck.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\n\nexport interface DataListCheckProps extends Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'checked'> {\n  /** Additional classes added to the DataList item checkbox */\n  className?: string;\n  /** Flag to show if the DataList checkbox selection is valid or invalid */\n  isValid?: boolean;\n  /** Flag to show if the DataList checkbox is disabled */\n  isDisabled?: boolean;\n  /** Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\n   * but only use one.\n   * To make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.\n   */\n  isChecked?: boolean;\n  /** Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\n   * but only use one.\n   * To make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.\n   */\n  checked?: boolean;\n  /** Flag to set default value of DataList checkbox when it is uncontrolled by React state.\n   * To make the DataList checkbox controlled, instead use the isChecked prop, but do not use both.\n   */\n  defaultChecked?: boolean;\n  /** A callback for when the DataList checkbox selection changes */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Aria-labelledby of the DataList checkbox */\n  'aria-labelledby': string;\n  /** Flag to indicate if other controls are used in the DataListItem */\n  otherControls?: boolean;\n}\n\nexport const DataListCheck: React.FunctionComponent<DataListCheckProps> = ({\n  className = '',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange = (checked: boolean, event: React.FormEvent<HTMLInputElement>) => {},\n  isValid = true,\n  isDisabled = false,\n  isChecked = null,\n  checked = null,\n  defaultChecked,\n  otherControls = false,\n  ...props\n}: DataListCheckProps) => {\n  const check = (\n    <div className={css(styles.dataListCheck)}>\n      <input\n        {...props}\n        type=\"checkbox\"\n        onChange={event => onChange(event.currentTarget.checked, event)}\n        aria-invalid={!isValid}\n        disabled={isDisabled}\n        {...([true, false].includes(defaultChecked) && { defaultChecked })}\n        {...(![true, false].includes(defaultChecked) && { checked: isChecked || checked })}\n      />\n    </div>\n  );\n  return (\n    <React.Fragment>\n      {!otherControls && <div className={css(styles.dataListItemControl, className)}>{check}</div>}\n      {otherControls && check}\n    </React.Fragment>\n  );\n};\nDataListCheck.displayName = 'DataListCheck';\n"]},"metadata":{},"sourceType":"module"}