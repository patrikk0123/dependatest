{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KEY_CODES } from '../../helpers';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\nexport var AdvancedSearchMenu = function AdvancedSearchMenu(_ref) {\n  var className = _ref.className,\n      parentRef = _ref.parentRef,\n      parentInputRef = _ref.parentInputRef,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? '' : _ref$value,\n      _ref$attributes = _ref.attributes,\n      attributes = _ref$attributes === void 0 ? [] : _ref$attributes,\n      formAdditionalItems = _ref.formAdditionalItems,\n      _ref$hasWordsAttrLabe = _ref.hasWordsAttrLabel,\n      hasWordsAttrLabel = _ref$hasWordsAttrLabe === void 0 ? 'Has words' : _ref$hasWordsAttrLabe,\n      advancedSearchDelimiter = _ref.advancedSearchDelimiter,\n      getAttrValueMap = _ref.getAttrValueMap,\n      onChange = _ref.onChange,\n      onSearch = _ref.onSearch,\n      onClear = _ref.onClear,\n      _ref$resetButtonLabel = _ref.resetButtonLabel,\n      resetButtonLabel = _ref$resetButtonLabel === void 0 ? 'Reset' : _ref$resetButtonLabel,\n      _ref$submitSearchButt = _ref.submitSearchButtonLabel,\n      submitSearchButtonLabel = _ref$submitSearchButt === void 0 ? 'Search' : _ref$submitSearchButt,\n      isSearchMenuOpen = _ref.isSearchMenuOpen,\n      onToggleAdvancedMenu = _ref.onToggleAdvancedMenu;\n  var firstAttrRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      putFocusBackOnInput = _React$useState2[0],\n      setPutFocusBackOnInput = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(function () {\n    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n      setPutFocusBackOnInput(true);\n    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n      parentInputRef.current.focus();\n    }\n  }, [isSearchMenuOpen]);\n  React.useEffect(function () {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  var onDocClick = function onDocClick(event) {\n    var clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target);\n\n    if (isSearchMenuOpen && !clickedWithinSearchInput) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n\n  var onEscPress = function onEscPress(event) {\n    var keyCode = event.keyCode || event.which;\n\n    if (isSearchMenuOpen && keyCode === KEY_CODES.ESCAPE_KEY && parentRef && parentRef.current.contains(event.target)) {\n      onToggleAdvancedMenu(event);\n\n      if (parentInputRef) {\n        parentInputRef.current.focus();\n      }\n    }\n  };\n\n  var onSearchHandler = function onSearchHandler(event) {\n    event.preventDefault();\n\n    if (onSearch) {\n      onSearch(value, event, getAttrValueMap());\n    }\n\n    if (isSearchMenuOpen) {\n      onToggleAdvancedMenu(event);\n    }\n  };\n\n  var handleValueChange = function handleValueChange(attribute, newValue, event) {\n    var newMap = getAttrValueMap();\n    newMap[attribute] = newValue;\n    var updatedValue = '';\n    Object.entries(newMap).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          k = _ref3[0],\n          v = _ref3[1];\n\n      if (v.trim() !== '') {\n        if (k !== 'haswords') {\n          updatedValue = \"\".concat(updatedValue, \" \").concat(k).concat(advancedSearchDelimiter).concat(v);\n        } else {\n          updatedValue = \"\".concat(updatedValue, \" \").concat(v);\n        }\n      }\n    });\n    updatedValue = updatedValue.replace(/^\\s+/g, '');\n\n    if (onChange) {\n      onChange(updatedValue, event);\n    }\n  };\n\n  var getValue = function getValue(attribute) {\n    var map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n\n  var buildFormGroups = function buildFormGroups() {\n    var formGroups = [];\n    attributes.forEach(function (attribute, index) {\n      var display = typeof attribute === 'string' ? attribute : attribute.display;\n      var queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n\n      if (index === 0) {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: \"\".concat(queryAttr, \"_\").concat(index),\n          key: \"\".concat(attribute, \"_\").concat(index)\n        }, React.createElement(TextInput, {\n          ref: firstAttrRef,\n          type: \"text\",\n          id: \"\".concat(queryAttr, \"_\").concat(index),\n          value: getValue(queryAttr),\n          onChange: function onChange(value, evt) {\n            return handleValueChange(queryAttr, value, evt);\n          }\n        })));\n      } else {\n        formGroups.push(React.createElement(FormGroup, {\n          label: display,\n          fieldId: \"\".concat(queryAttr, \"_\").concat(index),\n          key: \"\".concat(attribute, \"_\").concat(index)\n        }, React.createElement(TextInput, {\n          type: \"text\",\n          id: \"\".concat(queryAttr, \"_\").concat(index),\n          value: getValue(queryAttr),\n          onChange: function onChange(value, evt) {\n            return handleValueChange(queryAttr, value, evt);\n          }\n        })));\n      }\n    });\n    formGroups.push(React.createElement(GenerateId, {\n      key: 'hasWords'\n    }, function (randomId) {\n      return React.createElement(FormGroup, {\n        label: hasWordsAttrLabel,\n        fieldId: randomId\n      }, React.createElement(TextInput, {\n        type: \"text\",\n        id: randomId,\n        value: getValue('haswords'),\n        onChange: function onChange(value, evt) {\n          return handleValueChange('haswords', value, evt);\n        }\n      }));\n    }));\n    return formGroups;\n  };\n\n  return isSearchMenuOpen ? React.createElement(Panel, {\n    variant: \"raised\",\n    className: css(className)\n  }, React.createElement(PanelMain, null, React.createElement(PanelMainBody, null, React.createElement(Form, null, buildFormGroups(), formAdditionalItems ? formAdditionalItems : null, React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onSearchHandler,\n    isDisabled: !value\n  }, submitSearchButtonLabel), !!onClear && React.createElement(Button, {\n    variant: \"link\",\n    type: \"reset\",\n    onClick: onClear\n  }, resetButtonLabel)))))) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';","map":{"version":3,"mappings":"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","names":["React","Button","ActionGroup","Form","FormGroup","TextInput","GenerateId","KEY_CODES","Panel","PanelMain","PanelMainBody","css","AdvancedSearchMenu","className","parentRef","parentInputRef","value","attributes","formAdditionalItems","hasWordsAttrLabel","advancedSearchDelimiter","getAttrValueMap","onChange","onSearch","onClear","resetButtonLabel","submitSearchButtonLabel","isSearchMenuOpen","onToggleAdvancedMenu","firstAttrRef","useRef","useState","putFocusBackOnInput","setPutFocusBackOnInput","useEffect","length","console","error","current","focus","document","addEventListener","onDocClick","onEscPress","cleanup","removeEventListener","event","clickedWithinSearchInput","contains","target","keyCode","which","ESCAPE_KEY","onSearchHandler","preventDefault","handleValueChange","attribute","newValue","newMap","updatedValue","Object","entries","forEach","k","v","trim","replace","getValue","map","hasOwnProperty","buildFormGroups","formGroups","index","display","queryAttr","attr","push","label","fieldId","key","ref","type","id","evt","randomId","variant","onClick","isDisabled","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/SearchInput/AdvancedSearchMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Button } from '../Button';\nimport { ActionGroup, Form, FormGroup } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { GenerateId, KEY_CODES } from '../../helpers';\nimport { SearchAttribute } from './SearchInput';\nimport { Panel, PanelMain, PanelMainBody } from '../Panel';\nimport { css } from '@patternfly/react-styles';\n\nexport interface AdvancedSearchMenuProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Additional classes added to the Advanced search menu */\n  className?: string;\n  /** Value of the search input */\n  value?: string;\n  /** Ref of the div wrapping the whole search input **/\n  parentRef?: React.RefObject<any>;\n  /** Ref of the input element within the search input**/\n  parentInputRef?: React.RefObject<any>;\n  /** Function which builds an attribute-value map by parsing the value in the search input */\n  getAttrValueMap?: () => { [key: string]: string };\n  /** A callback for when the search button clicked changes */\n  onSearch?: (\n    value: string,\n    event: React.SyntheticEvent<HTMLButtonElement>,\n    attrValueMap: { [key: string]: string }\n  ) => void;\n  /** A callback for when the user clicks the clear button */\n  onClear?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** A callback for when the input value changes */\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Function called to toggle the advanced search menu */\n  onToggleAdvancedMenu?: (e: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Flag for toggling the open/close state of the advanced search menu */\n  isSearchMenuOpen?: boolean;\n  /** Label for the buttons which reset the advanced search form and clear the search input */\n  resetButtonLabel?: string;\n  /** Label for the buttons which called the onSearch event handler */\n  submitSearchButtonLabel?: string;\n  /** Array of attribute values used for dynamically generated advanced search */\n  attributes?: string[] | SearchAttribute[];\n  /* Additional elements added after the attributes in the form.\n   * The new form elements can be wrapped in a FormGroup component for automatic formatting */\n  formAdditionalItems?: React.ReactNode;\n  /** Attribute label for strings unassociated with one of the provided listed attributes */\n  hasWordsAttrLabel?: React.ReactNode;\n  /** Delimiter in the query string for pairing attributes with search values.\n   * Required whenever attributes are passed as props */\n  advancedSearchDelimiter?: string;\n}\n\nexport const AdvancedSearchMenu: React.FunctionComponent<AdvancedSearchMenuProps> = ({\n  className,\n  parentRef,\n  parentInputRef,\n  value = '',\n  attributes = [] as string[],\n  formAdditionalItems,\n  hasWordsAttrLabel = 'Has words',\n  advancedSearchDelimiter,\n  getAttrValueMap,\n  onChange,\n  onSearch,\n  onClear,\n  resetButtonLabel = 'Reset',\n  submitSearchButtonLabel = 'Search',\n  isSearchMenuOpen,\n  onToggleAdvancedMenu\n}: AdvancedSearchMenuProps) => {\n  const firstAttrRef = React.useRef(null);\n  const [putFocusBackOnInput, setPutFocusBackOnInput] = React.useState(false);\n\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop'\n      );\n    }\n  });\n\n  React.useEffect(() => {\n    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {\n      firstAttrRef.current.focus();\n      setPutFocusBackOnInput(true);\n    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {\n      parentInputRef.current.focus();\n    }\n  }, [isSearchMenuOpen]);\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n\n    return function cleanup() {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  const onDocClick = (event: Event) => {\n    const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target as Node);\n    if (isSearchMenuOpen && !clickedWithinSearchInput) {\n      onToggleAdvancedMenu(event as any);\n    }\n  };\n\n  const onEscPress = (event: KeyboardEvent) => {\n    const keyCode = event.keyCode || event.which;\n    if (\n      isSearchMenuOpen &&\n      keyCode === KEY_CODES.ESCAPE_KEY &&\n      parentRef &&\n      parentRef.current.contains(event.target as Node)\n    ) {\n      onToggleAdvancedMenu(event as any);\n      if (parentInputRef) {\n        parentInputRef.current.focus();\n      }\n    }\n  };\n\n  const onSearchHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(value, event, getAttrValueMap());\n    }\n    if (isSearchMenuOpen) {\n      onToggleAdvancedMenu(event as any);\n    }\n  };\n\n  const handleValueChange = (attribute: string, newValue: string, event: React.FormEvent<HTMLInputElement>) => {\n    const newMap = getAttrValueMap();\n    newMap[attribute] = newValue;\n    let updatedValue = '';\n    Object.entries(newMap).forEach(([k, v]) => {\n      if (v.trim() !== '') {\n        if (k !== 'haswords') {\n          updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${v}`;\n        } else {\n          updatedValue = `${updatedValue} ${v}`;\n        }\n      }\n    });\n    updatedValue = updatedValue.replace(/^\\s+/g, '');\n\n    if (onChange) {\n      onChange(updatedValue, event);\n    }\n  };\n\n  const getValue = (attribute: string) => {\n    const map = getAttrValueMap();\n    return map.hasOwnProperty(attribute) ? map[attribute] : '';\n  };\n\n  const buildFormGroups = () => {\n    const formGroups = [] as React.ReactNode[];\n    attributes.forEach((attribute: string | SearchAttribute, index: number) => {\n      const display = typeof attribute === 'string' ? attribute : attribute.display;\n      const queryAttr = typeof attribute === 'string' ? attribute : attribute.attr;\n      if (index === 0) {\n        formGroups.push(\n          <FormGroup label={display} fieldId={`${queryAttr}_${index}`} key={`${attribute}_${index}`}>\n            <TextInput\n              ref={firstAttrRef}\n              type=\"text\"\n              id={`${queryAttr}_${index}`}\n              value={getValue(queryAttr)}\n              onChange={(value, evt) => handleValueChange(queryAttr, value, evt)}\n            />\n          </FormGroup>\n        );\n      } else {\n        formGroups.push(\n          <FormGroup label={display} fieldId={`${queryAttr}_${index}`} key={`${attribute}_${index}`}>\n            <TextInput\n              type=\"text\"\n              id={`${queryAttr}_${index}`}\n              value={getValue(queryAttr)}\n              onChange={(value, evt) => handleValueChange(queryAttr, value, evt)}\n            />\n          </FormGroup>\n        );\n      }\n    });\n    formGroups.push(\n      <GenerateId key={'hasWords'}>\n        {randomId => (\n          <FormGroup label={hasWordsAttrLabel} fieldId={randomId}>\n            <TextInput\n              type=\"text\"\n              id={randomId}\n              value={getValue('haswords')}\n              onChange={(value, evt) => handleValueChange('haswords', value, evt)}\n            />\n          </FormGroup>\n        )}\n      </GenerateId>\n    );\n    return formGroups;\n  };\n\n  return isSearchMenuOpen ? (\n    <Panel variant=\"raised\" className={css(className)}>\n      <PanelMain>\n        <PanelMainBody>\n          <Form>\n            {buildFormGroups()}\n            {formAdditionalItems ? formAdditionalItems : null}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" onClick={onSearchHandler} isDisabled={!value}>\n                {submitSearchButtonLabel}\n              </Button>\n              {!!onClear && (\n                <Button variant=\"link\" type=\"reset\" onClick={onClear}>\n                  {resetButtonLabel}\n                </Button>\n              )}\n            </ActionGroup>\n          </Form>\n        </PanelMainBody>\n      </PanelMain>\n    </Panel>\n  ) : null;\n};\nAdvancedSearchMenu.displayName = 'SearchInput';\n"]},"metadata":{},"sourceType":"module"}