{"ast":null,"code":"import _toArray from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/toArray.js\";import _slicedToArray from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _createForOfIteratorHelper from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";/*\n * URL Query Params are considered to be the Single Point of Truth.\n */ /**\n * @example\n * { 'component1-pageSize': 10, 'component2-pageIndex': 1}\n */ /**\n * Transforms URL Query Params from string to object.\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageSize=10\n * // to:\n * { 'component1-pageIndex': 1, 'component2-pageSize': 10 }\n *\n * @param queryParamsString - URL Query Params in string representation\n * @returns URL Query Params in object representation\n */var parseQueryParamsToObject=function parseQueryParamsToObject(queryParamsString){var searchParams=new URLSearchParams(queryParamsString);var queryParamsObject={};var _iterator=_createForOfIteratorHelper(searchParams),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),_key=_step$value[0],value=_step$value[1];/**\n     * + operator returns the numeric value of the string or NaN\n     *\n     * examples:\n     *  +'12' returns 12\n     *  +'12px' returns NaN\n     *  +'foo' returns NaN\n     */if(Number.isInteger(+value)){queryParamsObject[_key]=Number(value);}else{queryParamsObject[_key]=value;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return queryParamsObject;};/**\n * Update Query Params contained in the URL.\n *\n * @example\n * // from:\n * { 'pageIndex': 1 }\n * // to (for component1):\n * ?component1-pageIndex=1\n *\n * @param queryParamsObject - URL Query Params in object representation\n * @param componentId - Component string identifier to distinguish individual Query Params\n * @param location - Location interface from the history library, see https://reactrouter.com/docs/en/v6/api#location\n * @param navigate - Function that lets you navigate programmatically, see https://reactrouter.com/docs/en/v6/api#usenavigate\n * @param replace - When true it replaces the current entry on the history stack, otherwise it pushes a new entry onto the history stack by default\n */export var updateQueryParamsInURL=function updateQueryParamsInURL(queryParamsObject,componentId,location,navigate){var replace=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;var currentQueryParamsString=location.search;var searchParams=new URLSearchParams(currentQueryParamsString);// add componentId prefix to all keys\nfor(var _i=0,_Object$entries=Object.entries(queryParamsObject);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),_key2=_Object$entries$_i[0],value=_Object$entries$_i[1];// set Query Params and delete duplicates if any\nif(value!==''){searchParams.set(\"\".concat(componentId,\"-\").concat(_key2),String(value));}// remove attribute if value is falsy\nelse{searchParams.delete(\"\".concat(componentId,\"-\").concat(_key2));}}var newQueryParamsString=searchParams.toString();// Prevent from placing the identical record to the history. It would result in \"empty\" back / front button action.\nif(currentQueryParamsString!==\"?\".concat(newQueryParamsString)){// #render\nnavigate({search:newQueryParamsString},{replace:replace});}};/**\n * Return Query Params object without componentId prefixes retrieved from the URL for given component.\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageSize=10\n * // to (for component1):\n * { 'pageIndex': 1}\n *\n * @param queryParamsString - URL Query Params in string representation\n * @param componentId - Component string identifier to distinguish individual component related Query Params\n * @returns URL Query Params in object representation without componentId prefixes\n */export var getComponentQueryParamsObject=function getComponentQueryParamsObject(queryParamsString,componentId){var queryParamsObject=parseQueryParamsToObject(queryParamsString);// get Query Params that belong to the given component\nvar componentQueryParamsObject={};Object.keys(queryParamsObject).forEach(function(keyWithPrefix){var _keyWithPrefix$split=keyWithPrefix.split('-'),_keyWithPrefix$split2=_toArray(_keyWithPrefix$split),prefix=_keyWithPrefix$split2[0],keyWithoutPrefix=_keyWithPrefix$split2[1],rest=_keyWithPrefix$split2.slice(2);if(rest.length){throw new Error('Exactly one occurrence of \"-\" is expected in Query Params keys');}if(prefix===componentId){componentQueryParamsObject[keyWithoutPrefix]=queryParamsObject[keyWithPrefix];}});return componentQueryParamsObject;};/**\n * The same as {@link getComponentQueryParamsObject}, but\n *  - it returns just single value (for specific component and key combination) in string\n *  - performance is better\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageIndex=3&component2-pageSize=10\n * // to (for component2 and pageIndex):\n * '3'\n * @param queryParamsString - URL Query Params in string representation\n * @param queryParamKey - URL Query Params key without component prefix\n * @param componentId - Component string identifier to distinguish individual component related Query Params\n */export var getComponentQueryParamValue=function getComponentQueryParamValue(queryParamsString,queryParamKey,componentId){var searchParams=new URLSearchParams(queryParamsString);return searchParams.get(\"\".concat(componentId,\"-\").concat(queryParamKey));};/**\n * Compare two Query Params objects.\n *\n * @param queryParams1 - Query Params object 1\n * @param queryParams2 - Query Params object 2\n * @returns true when objects are identical, otherwise false\n */export var queryParamsObjectsAreEqual=function queryParamsObjectsAreEqual(queryParams1,queryParams2){var queryParams1Keys=Object.keys(queryParams1);if(queryParams1Keys.length===Object.keys(queryParams2).length){var _iterator2=_createForOfIteratorHelper(queryParams1Keys),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _key3=_step2.value;if(queryParams1[_key3]!==queryParams2[_key3]){return false;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return true;}return false;};","map":{"version":3,"names":["parseQueryParamsToObject","queryParamsString","searchParams","URLSearchParams","queryParamsObject","key","value","Number","isInteger","updateQueryParamsInURL","componentId","location","navigate","replace","currentQueryParamsString","search","Object","entries","set","String","delete","newQueryParamsString","toString","getComponentQueryParamsObject","componentQueryParamsObject","keys","forEach","keyWithPrefix","split","prefix","keyWithoutPrefix","rest","length","Error","getComponentQueryParamValue","queryParamKey","get","queryParamsObjectsAreEqual","queryParams1","queryParams2","queryParams1Keys"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/utils/queryParamsHelper.ts"],"sourcesContent":["import { NavigateFunction, Location } from 'react-router-dom';\n\n/*\n * URL Query Params are considered to be the Single Point of Truth.\n */\n\n/**\n * @example\n * { 'component1-pageSize': 10, 'component2-pageIndex': 1}\n */\nexport interface IQueryParamsObject {\n  [key: string]: string | number;\n}\n\n/**\n * Transforms URL Query Params from string to object.\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageSize=10\n * // to:\n * { 'component1-pageIndex': 1, 'component2-pageSize': 10 }\n *\n * @param queryParamsString - URL Query Params in string representation\n * @returns URL Query Params in object representation\n */\nconst parseQueryParamsToObject = (queryParamsString: string): IQueryParamsObject => {\n  const searchParams = new URLSearchParams(queryParamsString);\n  const queryParamsObject: IQueryParamsObject = {};\n\n  for (const [key, value] of searchParams) {\n    /**\n     * + operator returns the numeric value of the string or NaN\n     *\n     * examples:\n     *  +'12' returns 12\n     *  +'12px' returns NaN\n     *  +'foo' returns NaN\n     */\n    if (Number.isInteger(+value)) {\n      queryParamsObject[key] = Number(value);\n    } else {\n      queryParamsObject[key] = value;\n    }\n  }\n\n  return queryParamsObject;\n};\n\n/**\n * Update Query Params contained in the URL.\n *\n * @example\n * // from:\n * { 'pageIndex': 1 }\n * // to (for component1):\n * ?component1-pageIndex=1\n *\n * @param queryParamsObject - URL Query Params in object representation\n * @param componentId - Component string identifier to distinguish individual Query Params\n * @param location - Location interface from the history library, see https://reactrouter.com/docs/en/v6/api#location\n * @param navigate - Function that lets you navigate programmatically, see https://reactrouter.com/docs/en/v6/api#usenavigate\n * @param replace - When true it replaces the current entry on the history stack, otherwise it pushes a new entry onto the history stack by default\n */\nexport const updateQueryParamsInURL = (\n  queryParamsObject: IQueryParamsObject,\n  componentId: string,\n  location: Location,\n  navigate: NavigateFunction,\n  replace: boolean = false\n) => {\n  const currentQueryParamsString = location.search;\n  const searchParams = new URLSearchParams(currentQueryParamsString);\n\n  // add componentId prefix to all keys\n  for (const [key, value] of Object.entries(queryParamsObject)) {\n    // set Query Params and delete duplicates if any\n    if (value !== '') {\n      searchParams.set(`${componentId}-${key}`, String(value));\n    }\n    // remove attribute if value is falsy\n    else {\n      searchParams.delete(`${componentId}-${key}`);\n    }\n  }\n\n  const newQueryParamsString = searchParams.toString();\n\n  // Prevent from placing the identical record to the history. It would result in \"empty\" back / front button action.\n  if (currentQueryParamsString !== `?${newQueryParamsString}`) {\n    // #render\n    navigate(\n      {\n        search: newQueryParamsString,\n      },\n      { replace }\n    );\n  }\n};\n\n/**\n * Return Query Params object without componentId prefixes retrieved from the URL for given component.\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageSize=10\n * // to (for component1):\n * { 'pageIndex': 1}\n *\n * @param queryParamsString - URL Query Params in string representation\n * @param componentId - Component string identifier to distinguish individual component related Query Params\n * @returns URL Query Params in object representation without componentId prefixes\n */\nexport const getComponentQueryParamsObject = (queryParamsString: string, componentId: string): IQueryParamsObject => {\n  const queryParamsObject = parseQueryParamsToObject(queryParamsString);\n\n  // get Query Params that belong to the given component\n  const componentQueryParamsObject: IQueryParamsObject = {};\n  Object.keys(queryParamsObject).forEach((keyWithPrefix) => {\n    const [prefix, keyWithoutPrefix, ...rest] = keyWithPrefix.split('-');\n\n    if (rest.length) {\n      throw new Error('Exactly one occurrence of \"-\" is expected in Query Params keys');\n    }\n\n    if (prefix === componentId) {\n      componentQueryParamsObject[keyWithoutPrefix] = queryParamsObject[keyWithPrefix];\n    }\n  });\n\n  return componentQueryParamsObject;\n};\n\n/**\n * The same as {@link getComponentQueryParamsObject}, but\n *  - it returns just single value (for specific component and key combination) in string\n *  - performance is better\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageIndex=3&component2-pageSize=10\n * // to (for component2 and pageIndex):\n * '3'\n * @param queryParamsString - URL Query Params in string representation\n * @param queryParamKey - URL Query Params key without component prefix\n * @param componentId - Component string identifier to distinguish individual component related Query Params\n */\nexport const getComponentQueryParamValue = (\n  queryParamsString: string,\n  queryParamKey: string,\n  componentId: string\n): string | null => {\n  const searchParams = new URLSearchParams(queryParamsString);\n  return searchParams.get(`${componentId}-${queryParamKey}`);\n};\n\n/**\n * Compare two Query Params objects.\n *\n * @param queryParams1 - Query Params object 1\n * @param queryParams2 - Query Params object 2\n * @returns true when objects are identical, otherwise false\n */\nexport const queryParamsObjectsAreEqual = (queryParams1: IQueryParamsObject, queryParams2: IQueryParamsObject) => {\n  const queryParams1Keys = Object.keys(queryParams1);\n  if (queryParams1Keys.length === Object.keys(queryParams2).length) {\n    for (const key of queryParams1Keys) {\n      if (queryParams1[key] !== queryParams2[key]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}