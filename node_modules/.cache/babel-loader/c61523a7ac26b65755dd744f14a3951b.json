{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nexport const useDataBuffer = preprocessor => {\n  const [data, setData] = useState([]);\n  const [buffer, setBuffer] = useState([]);\n  const [currentLineCount, setCurrentLineCount] = useState(1);\n  const savedTimer = useRef();\n  useEffect(() => {\n    if (data.length > buffer.length) {\n      savedTimer.current = setTimeout(() => {\n        setCurrentLineCount(currentLineCount => currentLineCount + 5);\n      }, 1500);\n    }\n\n    return () => {\n      clearTimeout(savedTimer.current);\n    };\n  }, [data.length, buffer.length]);\n  useEffect(() => {\n    setBuffer(data.slice(0, currentLineCount)); // if (currentLineCount > initLogData.length) {\n    //   clearInterval(savedTimer.current);\n    // } else {\n    //   // setLogData(initLogData.slice(0, currentLineCount));\n    //   addLines(initLogData.slice(currentLineCount - 3, currentLineCount));\n    // }\n  }, [currentLineCount]); // useEffect(() => {\n  //   setTimeout(() => {\n  //     setBuffer(data);\n  //   }, 3000);\n  // }, [data]);\n\n  const addLines = useCallback(lines => {\n    setData([...data, ...lines]);\n  }, [data]);\n  return {\n    buffer,\n    addLines\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useDataBuffer","preprocessor","data","setData","buffer","setBuffer","currentLineCount","setCurrentLineCount","savedTimer","length","current","setTimeout","clearTimeout","slice","addLines","lines"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useDataBuffer.ts"],"sourcesContent":["import { SelectOption } from '@patternfly/react-core';\nimport { MutableRefObject, useCallback, useEffect, useRef, useState } from 'react';\n\nexport const useDataBuffer = (preprocessor: Function | undefined) => {\n  const [data, setData] = useState<any>([]);\n  const [buffer, setBuffer] = useState<any>([]);\n  const [currentLineCount, setCurrentLineCount] = useState<number>(1);\n  const savedTimer: MutableRefObject<NodeJS.Timer | undefined> = useRef();\n\n  useEffect(() => {\n    if (data.length > buffer.length) {\n      savedTimer.current = setTimeout(() => {\n        setCurrentLineCount((currentLineCount) => currentLineCount + 5);\n      }, 1500);\n    }\n    return () => {\n      clearTimeout(savedTimer.current);\n    };\n  }, [data.length, buffer.length]);\n\n  useEffect(() => {\n    setBuffer(data.slice(0, currentLineCount));\n    // if (currentLineCount > initLogData.length) {\n    //   clearInterval(savedTimer.current);\n    // } else {\n    //   // setLogData(initLogData.slice(0, currentLineCount));\n    //   addLines(initLogData.slice(currentLineCount - 3, currentLineCount));\n    // }\n  }, [currentLineCount]);\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     setBuffer(data);\n  //   }, 3000);\n  // }, [data]);\n\n  const addLines = useCallback(\n    (lines: string[]) => {\n      setData([...data, ...lines]);\n    },\n    [data]\n  );\n\n  return { buffer, addLines };\n};\n"],"mappings":"AACA,SAA2BA,WAA3B,EAAwCC,SAAxC,EAAmDC,MAAnD,EAA2DC,QAA3D,QAA2E,OAA3E;AAEA,OAAO,MAAMC,aAAa,GAAIC,YAAD,IAAwC;EACnE,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAM,EAAN,CAAhC;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAM,EAAN,CAApC;EACA,MAAM,CAACO,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,CAAS,CAAT,CAAxD;EACA,MAAMS,UAAsD,GAAGV,MAAM,EAArE;EAEAD,SAAS,CAAC,MAAM;IACd,IAAIK,IAAI,CAACO,MAAL,GAAcL,MAAM,CAACK,MAAzB,EAAiC;MAC/BD,UAAU,CAACE,OAAX,GAAqBC,UAAU,CAAC,MAAM;QACpCJ,mBAAmB,CAAED,gBAAD,IAAsBA,gBAAgB,GAAG,CAA1C,CAAnB;MACD,CAF8B,EAE5B,IAF4B,CAA/B;IAGD;;IACD,OAAO,MAAM;MACXM,YAAY,CAACJ,UAAU,CAACE,OAAZ,CAAZ;IACD,CAFD;EAGD,CATQ,EASN,CAACR,IAAI,CAACO,MAAN,EAAcL,MAAM,CAACK,MAArB,CATM,CAAT;EAWAZ,SAAS,CAAC,MAAM;IACdQ,SAAS,CAACH,IAAI,CAACW,KAAL,CAAW,CAAX,EAAcP,gBAAd,CAAD,CAAT,CADc,CAEd;IACA;IACA;IACA;IACA;IACA;EACD,CARQ,EAQN,CAACA,gBAAD,CARM,CAAT,CAjBmE,CA2BnE;EACA;EACA;EACA;EACA;;EAEA,MAAMQ,QAAQ,GAAGlB,WAAW,CACzBmB,KAAD,IAAqB;IACnBZ,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU,GAAGa,KAAb,CAAD,CAAP;EACD,CAHyB,EAI1B,CAACb,IAAD,CAJ0B,CAA5B;EAOA,OAAO;IAAEE,MAAF;IAAUU;EAAV,CAAP;AACD,CAzCM"},"metadata":{},"sourceType":"module"}