{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport var Chip = /*#__PURE__*/function (_React$Component) {\n  _inherits(Chip, _React$Component);\n\n  var _super = _createSuper(Chip);\n\n  function Chip(props) {\n    var _this;\n\n    _classCallCheck(this, Chip);\n\n    _this = _super.call(this, props);\n    _this.span = React.createRef();\n\n    _this.setChipStyle = function () {\n      return {\n        '--pf-c-chip__text--MaxWidth': _this.props.textMaxWidth\n      };\n    };\n\n    _this.renderOverflowChip = function () {\n      var _this$props = _this.props,\n          children = _this$props.children,\n          className = _this$props.className,\n          onClick = _this$props.onClick,\n          ouiaId = _this$props.ouiaId;\n      var Component = _this.props.component;\n      return React.createElement(Component, Object.assign({\n        onClick: onClick\n      }, _this.props.textMaxWidth && Object.assign({\n        style: _this.setChipStyle()\n      }, _this.props.style), {\n        className: css(styles.chip, styles.modifiers.overflow, className)\n      }, _this.props.component === 'button' ? {\n        type: 'button'\n      } : {}, getOUIAProps('OverflowChip', ouiaId !== undefined ? ouiaId : _this.state.ouiaStateId)), React.createElement(\"span\", {\n        className: css(styles.chipText)\n      }, children));\n    };\n\n    _this.renderChip = function (randomId) {\n      var _this$props2 = _this.props,\n          children = _this$props2.children,\n          tooltipPosition = _this$props2.tooltipPosition;\n\n      if (_this.state.isTooltipVisible) {\n        return React.createElement(Tooltip, {\n          position: tooltipPosition,\n          content: children\n        }, _this.renderInnerChip(randomId));\n      }\n\n      return _this.renderInnerChip(randomId);\n    };\n\n    _this.state = {\n      isTooltipVisible: false,\n      ouiaStateId: getDefaultOUIAId(Chip.displayName)\n    };\n    return _this;\n  }\n\n  _createClass(Chip, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)\n      });\n    }\n  }, {\n    key: \"renderInnerChip\",\n    value: function renderInnerChip(id) {\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          className = _this$props3.className,\n          onClick = _this$props3.onClick,\n          closeBtnAriaLabel = _this$props3.closeBtnAriaLabel,\n          isReadOnly = _this$props3.isReadOnly,\n          component = _this$props3.component,\n          ouiaId = _this$props3.ouiaId;\n      var Component = component;\n      return React.createElement(Component, Object.assign({}, this.props.textMaxWidth && {\n        style: this.setChipStyle()\n      }, {\n        className: css(styles.chip, className)\n      }, this.state.isTooltipVisible && {\n        tabIndex: 0\n      }, getOUIAProps(Chip.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)), React.createElement(\"span\", {\n        ref: this.span,\n        className: css(styles.chipText),\n        id: id\n      }, children), !isReadOnly && React.createElement(Button, {\n        onClick: onClick,\n        variant: \"plain\",\n        \"aria-label\": closeBtnAriaLabel,\n        id: \"remove_\".concat(id),\n        \"aria-labelledby\": \"remove_\".concat(id, \" \").concat(id),\n        ouiaId: ouiaId || closeBtnAriaLabel\n      }, React.createElement(TimesIcon, {\n        \"aria-hidden\": \"true\"\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var isOverflowChip = this.props.isOverflowChip;\n      return React.createElement(GenerateId, null, function (randomId) {\n        return isOverflowChip ? _this2.renderOverflowChip() : _this2.renderChip(_this2.props.id || randomId);\n      });\n    }\n  }]);\n\n  return Chip;\n}(React.Component);\nChip.displayName = 'Chip';\nChip.defaultProps = {\n  closeBtnAriaLabel: 'close',\n  className: '',\n  isOverflowChip: false,\n  isReadOnly: false,\n  tooltipPosition: 'top',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: function onClick(_e) {\n    return undefined;\n  },\n  component: 'div'\n};","map":{"version":3,"mappings":"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","names":["React","css","Button","Tooltip","TimesIcon","styles","GenerateId","getOUIAProps","getDefaultOUIAId","Chip","props","createRef","textMaxWidth","children","className","onClick","ouiaId","Component","component","Object","style","setChipStyle","chip","modifiers","overflow","type","undefined","state","ouiaStateId","chipText","randomId","tooltipPosition","isTooltipVisible","position","content","renderInnerChip","displayName","setState","Boolean","span","current","offsetWidth","scrollWidth","id","closeBtnAriaLabel","isReadOnly","tabIndex","ref","variant","isOverflowChip","renderOverflowChip","renderChip","_e"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Chip/Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface ChipProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** Content rendered inside the chip text */\n  children?: React.ReactNode;\n  /** Aria Label for close button */\n  closeBtnAriaLabel?: string;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag indicating if the chip is an overflow chip */\n  isOverflowChip?: boolean;\n  /** Flag indicating if chip is read only */\n  isReadOnly?: boolean;\n  /** Function that is called when clicking on the chip close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Component that will be used for chip. It is recommended that <button> or <li>  are used when the chip is an overflow chip. */\n  component?: React.ReactNode;\n  /** Position of the tooltip which is displayed if text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n\n  /** Css property expressed in percentage or any css unit that overrides the default value of the max-width of the chip's text */\n  textMaxWidth?: string;\n}\n\ninterface ChipState {\n  isTooltipVisible: boolean;\n  ouiaStateId: string;\n}\n\nexport class Chip extends React.Component<ChipProps, ChipState> {\n  static displayName = 'Chip';\n  constructor(props: ChipProps) {\n    super(props);\n    this.state = {\n      isTooltipVisible: false,\n      ouiaStateId: getDefaultOUIAId(Chip.displayName)\n    };\n  }\n  span = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: ChipProps = {\n    closeBtnAriaLabel: 'close',\n    className: '',\n    isOverflowChip: false,\n    isReadOnly: false,\n    tooltipPosition: 'top' as 'auto' | 'top' | 'bottom' | 'left' | 'right',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    component: 'div' as React.ReactNode\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)\n    });\n  }\n\n  setChipStyle = () => ({\n    '--pf-c-chip__text--MaxWidth': this.props.textMaxWidth\n  });\n\n  renderOverflowChip = () => {\n    const { children, className, onClick, ouiaId } = this.props;\n    const Component = this.props.component as any;\n    return (\n      <Component\n        onClick={onClick}\n        {...(this.props.textMaxWidth && {\n          style: this.setChipStyle(),\n          ...this.props.style\n        })}\n        className={css(styles.chip, styles.modifiers.overflow, className)}\n        {...(this.props.component === 'button' ? { type: 'button' } : {})}\n        {...getOUIAProps('OverflowChip', ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n      >\n        <span className={css(styles.chipText)}>{children}</span>\n      </Component>\n    );\n  };\n\n  renderInnerChip(id: string) {\n    const { children, className, onClick, closeBtnAriaLabel, isReadOnly, component, ouiaId } = this.props;\n    const Component = component as any;\n    return (\n      <Component\n        {...(this.props.textMaxWidth && {\n          style: this.setChipStyle()\n        })}\n        className={css(styles.chip, className)}\n        {...(this.state.isTooltipVisible && { tabIndex: 0 })}\n        {...getOUIAProps(Chip.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n      >\n        <span ref={this.span} className={css(styles.chipText)} id={id}>\n          {children}\n        </span>\n        {!isReadOnly && (\n          <Button\n            onClick={onClick}\n            variant=\"plain\"\n            aria-label={closeBtnAriaLabel}\n            id={`remove_${id}`}\n            aria-labelledby={`remove_${id} ${id}`}\n            ouiaId={ouiaId || closeBtnAriaLabel}\n          >\n            <TimesIcon aria-hidden=\"true\" />\n          </Button>\n        )}\n      </Component>\n    );\n  }\n\n  renderChip = (randomId: string) => {\n    const { children, tooltipPosition } = this.props;\n    if (this.state.isTooltipVisible) {\n      return (\n        <Tooltip position={tooltipPosition} content={children}>\n          {this.renderInnerChip(randomId)}\n        </Tooltip>\n      );\n    }\n    return this.renderInnerChip(randomId);\n  };\n\n  render() {\n    const { isOverflowChip } = this.props;\n    return (\n      <GenerateId>\n        {randomId => (isOverflowChip ? this.renderOverflowChip() : this.renderChip(this.props.id || randomId))}\n      </GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}