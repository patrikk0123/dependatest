{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\n/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\n\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\n\nvar BaseBody = /*#__PURE__*/function (_React$Component) {\n  _inherits(BaseBody, _React$Component);\n\n  var _super = _createSuper(BaseBody);\n\n  function BaseBody() {\n    var _this;\n\n    _classCallCheck(this, BaseBody);\n\n    _this = _super.apply(this, arguments);\n\n    _this.omitOnRow = function (props) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var onRow = props.onRow,\n          ret = __rest(props, [\"onRow\"]);\n\n      return ret;\n    };\n\n    return _this;\n  }\n\n  _createClass(BaseBody, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      // Skip checking props against `onRow` since that can be bound at render().\n      // That's not particularly good practice but you never know how the users\n      // prefer to define the handler.\n      // Check for wrapper based override.\n      var renderers = nextProps.renderers;\n\n      if (renderers && renderers.body && renderers.body.wrapper && renderers.body.wrapper.shouldComponentUpdate) {\n        if (typeof renderers.body.wrapper.shouldComponentUpdate === 'function') {\n          return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, {}, {});\n        }\n\n        return true;\n      }\n\n      return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          onRow = _a.onRow,\n          rows = _a.rows,\n          rowKey = _a.rowKey,\n          columns = _a.columns,\n          renderers = _a.renderers,\n          props = __rest(_a, [\"onRow\", \"rows\", \"rowKey\", \"columns\", \"renderers\"]);\n\n      var children = rows.map(function (rowData, index) {\n        var key = resolveRowKey({\n          rowData: rowData,\n          rowIndex: index,\n          rowKey: rowKey\n        });\n        return React.createElement(BodyRow, {\n          key: key,\n          renderers: renderers.body,\n          onRow: onRow,\n          rowKey: key,\n          rowIndex: index,\n          rowData: rowData,\n          columns: columns\n        });\n      });\n      return React.createElement(renderers.body.wrapper, props, children);\n    }\n  }]);\n\n  return BaseBody;\n}(React.Component);\n\nBaseBody.defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onRow: function onRow() {\n    return {};\n  }\n};\nexport var Body = function Body(props) {\n  return React.createElement(ProviderContext.Consumer, null, function (_ref) {\n    var columns = _ref.columns,\n        renderers = _ref.renderers;\n    return React.createElement(BaseBody, Object.assign({\n      columns: columns,\n      renderers: renderers\n    }, props));\n  });\n};","map":{"version":3,"mappings":"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","names":["React","isEqual","resolveRowKey","BodyRow","ProviderContext","BaseBody","props","onRow","ret","__rest","nextProps","renderers","body","wrapper","shouldComponentUpdate","call","omitOnRow","_a","rows","rowKey","columns","children","map","rowData","index","key","rowIndex","createElement","Component","Body","Consumer","Object"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/base/body.tsx"],"sourcesContent":["/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { RowsType, RowType, RowKeyType, RenderersTypes, createElementType, ColumnsType } from './types';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\n\nexport interface BodyProps {\n  onRow?: Function;\n  rows: RowsType;\n  rowKey?: RowKeyType;\n  columns?: ColumnsType;\n  renderers?: RenderersTypes['renderers'];\n  mappedRows?: any;\n  className?: string;\n}\n\nclass BaseBody extends React.Component<BodyProps, {}> {\n  static defaultProps = {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRow: (...args: any) => ({})\n  };\n\n  shouldComponentUpdate(nextProps: BodyProps) {\n    // Skip checking props against `onRow` since that can be bound at render().\n    // That's not particularly good practice but you never know how the users\n    // prefer to define the handler.\n    // Check for wrapper based override.\n    const { renderers } = nextProps;\n\n    if (\n      renderers &&\n      renderers.body &&\n      renderers.body.wrapper &&\n      (renderers.body.wrapper as React.Component).shouldComponentUpdate\n    ) {\n      if (typeof (renderers.body.wrapper as React.Component).shouldComponentUpdate === 'function') {\n        return (renderers.body.wrapper as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n      return true;\n    }\n\n    return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n  }\n\n  omitOnRow = (props: BodyProps) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { onRow, ...ret } = props;\n    return ret;\n  };\n\n  render() {\n    const { onRow, rows, rowKey, columns, renderers, ...props } = this.props;\n    const children = (rows as []).map((rowData: RowType, index: number) => {\n      const key = resolveRowKey({ rowData, rowIndex: index, rowKey });\n      return React.createElement(BodyRow, {\n        key,\n        renderers: renderers.body,\n        onRow,\n        rowKey: key,\n        rowIndex: index,\n        rowData,\n        columns\n      });\n    });\n\n    return React.createElement(renderers.body.wrapper as createElementType, props, children);\n  }\n}\n\nexport const Body = (props: BodyProps) => (\n  <ProviderContext.Consumer>\n    {({ columns, renderers }) => <BaseBody columns={columns} renderers={renderers} {...props} />}\n  </ProviderContext.Consumer>\n);\n"]},"metadata":{},"sourceType":"module"}