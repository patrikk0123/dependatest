{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { SelectVariant, SelectFooterTabbableItems } from './selectConstants';\nimport { findTabbableElements } from '../../helpers/util';\nimport { KeyTypes } from '../../helpers/constants';\nexport class SelectToggle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDocClick = event => {\n      const {\n        parentRef,\n        menuRef,\n        footerRef,\n        isOpen,\n        onToggle,\n        onClose\n      } = this.props;\n      const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const clickedWithinMenu = menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target);\n      const clickedWithinFooter = footerRef && footerRef.current && footerRef.current.contains && footerRef.current.contains(event.target);\n\n      if (isOpen && !(clickedOnToggle || clickedWithinMenu || clickedWithinFooter)) {\n        onToggle(false, event);\n        onClose();\n      }\n    };\n\n    this.handleGlobalKeys = event => {\n      const {\n        parentRef,\n        menuRef,\n        hasFooter,\n        footerRef,\n        isOpen,\n        variant,\n        onToggle,\n        onClose,\n        moveFocusToLastMenuItem\n      } = this.props;\n      const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const escFromWithinMenu = menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target);\n\n      if (isOpen && event.key === KeyTypes.Tab && (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)) {\n        this.props.handleTypeaheadKeys('tab', event.shiftKey);\n        event.preventDefault();\n        return;\n      }\n\n      if (isOpen && event.key === KeyTypes.Tab && hasFooter) {\n        const tabbableItems = findTabbableElements(footerRef, SelectFooterTabbableItems); // If no tabbable item in footer close select\n\n        if (tabbableItems.length <= 0) {\n          onToggle(false, event);\n          onClose();\n          this.toggle.current.focus();\n          return;\n        } else {\n          // if current element is not in footer, tab to first tabbable element in footer, or close if shift clicked\n          const currentElementIndex = tabbableItems.findIndex(item => item === document.activeElement);\n\n          if (currentElementIndex === -1) {\n            if (event.shiftKey) {\n              if (variant !== 'checkbox') {\n                // only close non checkbox variation on shift clicked\n                onToggle(false, event);\n                onClose();\n                this.toggle.current.focus();\n              }\n            } else {\n              // tab to footer\n              tabbableItems[0].focus();\n              return;\n            }\n          } // Current element is in footer.\n\n\n          if (event.shiftKey) {\n            // Move focus back to menu if current tab index is 0\n            if (currentElementIndex === 0) {\n              moveFocusToLastMenuItem();\n              event.preventDefault();\n            }\n\n            return;\n          } // Tab to next element in footer or close if there are none\n\n\n          if (currentElementIndex + 1 < tabbableItems.length) {\n            tabbableItems[currentElementIndex + 1].focus();\n          } else {\n            // no more footer items close menu\n            onToggle(false, event);\n            onClose();\n            this.toggle.current.focus();\n          }\n\n          event.preventDefault();\n          return;\n        }\n      }\n\n      if (isOpen && (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) && (escFromToggle || escFromWithinMenu)) {\n        onToggle(false, event);\n        onClose();\n        this.toggle.current.focus();\n      }\n    };\n\n    this.onKeyDown = event => {\n      const {\n        isOpen,\n        onToggle,\n        variant,\n        onClose,\n        onEnter,\n        handleTypeaheadKeys\n      } = this.props;\n\n      if (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) {\n        if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n          handleTypeaheadKeys(event.key === KeyTypes.ArrowDown && 'down' || event.key === KeyTypes.ArrowUp && 'up');\n          event.preventDefault();\n        } else if (event.key === KeyTypes.Enter) {\n          if (isOpen) {\n            handleTypeaheadKeys('enter');\n          } else {\n            onToggle(!isOpen, event);\n          }\n        }\n      }\n\n      if (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti || event.key === KeyTypes.Tab && !isOpen || event.key !== KeyTypes.Enter && event.key !== KeyTypes.Space) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && isOpen) {\n        onToggle(!isOpen, event);\n        onClose();\n        this.toggle.current.focus();\n      } else if ((event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && !isOpen) {\n        onToggle(!isOpen, event);\n        onEnter();\n      }\n    };\n\n    const {\n      variant\n    } = props;\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n    this.toggle = isTypeahead ? React.createRef() : React.createRef();\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', this.onDocClick, {\n      capture: true\n    });\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const _a = this.props,\n          {\n      className,\n      children,\n      isOpen,\n      isActive,\n      isPlain,\n      isDisabled,\n      hasPlaceholderStyle,\n      variant,\n      onToggle,\n      onEnter,\n      onClose,\n      onBlur,\n      onClickTypeaheadToggleButton,\n      handleTypeaheadKeys,\n      moveFocusToLastMenuItem,\n      parentRef,\n      menuRef,\n      id,\n      type,\n      hasClearButton,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-label': ariaLabel,\n      hasFooter,\n      footerRef\n    } = _a,\n          props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isActive\", \"isPlain\", \"isDisabled\", \"hasPlaceholderStyle\", \"variant\", \"onToggle\", \"onEnter\", \"onClose\", \"onBlur\", \"onClickTypeaheadToggleButton\", \"handleTypeaheadKeys\", \"moveFocusToLastMenuItem\", \"parentRef\", \"menuRef\", \"id\", \"type\", \"hasClearButton\", 'aria-labelledby', 'aria-label', \"hasFooter\", \"footerRef\"]);\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti || hasClearButton;\n    const toggleProps = {\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-expanded': isOpen,\n      'aria-haspopup': variant !== SelectVariant.checkbox && 'listbox' || null\n    };\n    return React.createElement(React.Fragment, null, !isTypeahead && React.createElement(\"button\", Object.assign({}, props, toggleProps, {\n      ref: this.toggle,\n      type: type,\n      className: css(styles.selectToggle, hasPlaceholderStyle && styles.modifiers.placeholder, isDisabled && styles.modifiers.disabled, isPlain && styles.modifiers.plain, isActive && styles.modifiers.active, className),\n      \"aria-label\": ariaLabel,\n      onBlur: onBlur,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onClick: event => {\n        onToggle(!isOpen, event);\n\n        if (isOpen) {\n          onClose();\n        }\n      },\n      onKeyDown: this.onKeyDown,\n      disabled: isDisabled\n    }), children, React.createElement(\"span\", {\n      className: css(styles.selectToggleArrow)\n    }, React.createElement(CaretDownIcon, null))), isTypeahead && React.createElement(\"div\", Object.assign({}, props, {\n      ref: this.toggle,\n      className: css(styles.selectToggle, hasPlaceholderStyle && styles.modifiers.placeholder, isDisabled && styles.modifiers.disabled, isPlain && styles.modifiers.plain, isTypeahead && styles.modifiers.typeahead, className),\n      onBlur: onBlur,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onClick: event => {\n        if (!isDisabled) {\n          onToggle(!isOpen, event);\n\n          if (isOpen) {\n            onClose();\n          }\n        }\n      },\n      onKeyDown: this.onKeyDown\n    }), children, React.createElement(\"button\", Object.assign({}, toggleProps, {\n      type: type,\n      className: css(buttonStyles.button, styles.selectToggleButton, styles.modifiers.plain),\n      \"aria-label\": ariaLabel,\n      onClick: event => {\n        onToggle(!isOpen, event);\n\n        if (isOpen) {\n          onClose();\n        }\n\n        onClickTypeaheadToggleButton();\n      }\n    }, (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) && {\n      tabIndex: -1\n    }, {\n      disabled: isDisabled\n    }), React.createElement(CaretDownIcon, {\n      className: css(styles.selectToggleArrow)\n    }))));\n  }\n\n}\nSelectToggle.displayName = 'SelectToggle';\nSelectToggle.defaultProps = {\n  className: '',\n  isOpen: false,\n  isActive: false,\n  isPlain: false,\n  isDisabled: false,\n  hasPlaceholderStyle: false,\n  hasClearButton: false,\n  hasFooter: false,\n  variant: 'single',\n  'aria-labelledby': '',\n  'aria-label': '',\n  type: 'button',\n  onToggle: () => {},\n  onEnter: () => {},\n  onClose: () => {},\n  onClickTypeaheadToggleButton: () => {}\n};","map":{"version":3,"mappings":"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","names":["React","styles","buttonStyles","css","CaretDownIcon","SelectVariant","SelectFooterTabbableItems","findTabbableElements","KeyTypes","SelectToggle","Component","constructor","props","event","parentRef","menuRef","footerRef","isOpen","onToggle","onClose","clickedOnToggle","current","contains","target","clickedWithinMenu","clickedWithinFooter","hasFooter","variant","moveFocusToLastMenuItem","escFromToggle","escFromWithinMenu","key","Tab","typeahead","typeaheadMulti","handleTypeaheadKeys","shiftKey","preventDefault","tabbableItems","length","toggle","focus","currentElementIndex","findIndex","item","document","activeElement","Escape","onEnter","ArrowDown","ArrowUp","Enter","Space","isTypeahead","createRef","componentDidMount","addEventListener","onDocClick","capture","handleGlobalKeys","componentWillUnmount","removeEventListener","render","_a","className","children","isActive","isPlain","isDisabled","hasPlaceholderStyle","onBlur","onClickTypeaheadToggleButton","id","type","hasClearButton","ariaLabelledBy","ariaLabel","toggleProps","checkbox","Fragment","ref","selectToggle","modifiers","placeholder","disabled","plain","active","onClick","onKeyDown","selectToggleArrow","button","selectToggleButton","tabIndex"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Select/SelectToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { SelectVariant, SelectFooterTabbableItems } from './selectConstants';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { findTabbableElements } from '../../helpers/util';\nimport { KeyTypes } from '../../helpers/constants';\n\nexport interface SelectToggleProps extends React.HTMLProps<HTMLElement> {\n  /** HTML ID of dropdown toggle */\n  id: string;\n  /** Anything which can be rendered as dropdown toggle */\n  children: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if select is open */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isExpanded: boolean, event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent | Event) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Callback for toggle close */\n  onClose?: () => void;\n  /** Callback for toggle blur */\n  onBlur?: (event?: any) => void;\n  /** @hide Internal callback for toggle keyboard navigation */\n  handleTypeaheadKeys?: (position: string, shiftKey?: boolean) => void;\n  /** @hide Internal callback to move focus to last menu item */\n  moveFocusToLastMenuItem?: () => void;\n  /** Element which wraps toggle */\n  parentRef: React.RefObject<HTMLDivElement>;\n  /** The menu element */\n  menuRef?: React.RefObject<HTMLElement>;\n  /** The menu footer element */\n  footerRef?: React.RefObject<HTMLDivElement>;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Flag indicating if select is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if placeholder styles should be applied */\n  hasPlaceholderStyle?: boolean;\n  /** Type of the toggle button, defaults to 'button' */\n  type?: 'reset' | 'button' | 'submit' | undefined;\n  /** Id of label for the Select aria-labelledby */\n  'aria-labelledby'?: string;\n  /** Label for toggle of select variants */\n  'aria-label'?: string;\n  /** Flag for variant, determines toggle rules and interaction */\n  variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n  /** Flag indicating if select toggle has an clear button */\n  hasClearButton?: boolean;\n  /** Flag indicating if select menu has a footer */\n  hasFooter?: boolean;\n  /** @hide Internal callback for handling focus when typeahead toggle button clicked. */\n  onClickTypeaheadToggleButton?: () => void;\n}\n\nexport class SelectToggle extends React.Component<SelectToggleProps> {\n  static displayName = 'SelectToggle';\n  private toggle: React.RefObject<HTMLDivElement> | React.RefObject<HTMLButtonElement>;\n\n  static defaultProps: PickOptional<SelectToggleProps> = {\n    className: '',\n    isOpen: false,\n    isActive: false,\n    isPlain: false,\n    isDisabled: false,\n    hasPlaceholderStyle: false,\n    hasClearButton: false,\n    hasFooter: false,\n    variant: 'single',\n    'aria-labelledby': '',\n    'aria-label': '',\n    type: 'button',\n    onToggle: () => {},\n    onEnter: () => {},\n    onClose: () => {},\n    onClickTypeaheadToggleButton: () => {}\n  };\n\n  constructor(props: SelectToggleProps) {\n    super(props);\n    const { variant } = props;\n    const isTypeahead = variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti;\n    this.toggle = isTypeahead ? React.createRef<HTMLDivElement>() : React.createRef<HTMLButtonElement>();\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', this.onDocClick, { capture: true });\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.handleGlobalKeys);\n  }\n\n  onDocClick = (event: Event) => {\n    const { parentRef, menuRef, footerRef, isOpen, onToggle, onClose } = this.props;\n    const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const clickedWithinMenu =\n      menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target as Node);\n    const clickedWithinFooter =\n      footerRef && footerRef.current && footerRef.current.contains && footerRef.current.contains(event.target as Node);\n\n    if (isOpen && !(clickedOnToggle || clickedWithinMenu || clickedWithinFooter)) {\n      onToggle(false, event);\n      onClose();\n    }\n  };\n\n  handleGlobalKeys = (event: KeyboardEvent) => {\n    const {\n      parentRef,\n      menuRef,\n      hasFooter,\n      footerRef,\n      isOpen,\n      variant,\n      onToggle,\n      onClose,\n      moveFocusToLastMenuItem\n    } = this.props;\n    const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const escFromWithinMenu =\n      menuRef && menuRef.current && menuRef.current.contains && menuRef.current.contains(event.target as Node);\n    if (\n      isOpen &&\n      event.key === KeyTypes.Tab &&\n      (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti)\n    ) {\n      this.props.handleTypeaheadKeys('tab', event.shiftKey);\n      event.preventDefault();\n      return;\n    }\n\n    if (isOpen && event.key === KeyTypes.Tab && hasFooter) {\n      const tabbableItems = findTabbableElements(footerRef, SelectFooterTabbableItems);\n\n      // If no tabbable item in footer close select\n      if (tabbableItems.length <= 0) {\n        onToggle(false, event);\n        onClose();\n        this.toggle.current.focus();\n        return;\n      } else {\n        // if current element is not in footer, tab to first tabbable element in footer, or close if shift clicked\n        const currentElementIndex = tabbableItems.findIndex((item: any) => item === document.activeElement);\n        if (currentElementIndex === -1) {\n          if (event.shiftKey) {\n            if (variant !== 'checkbox') {\n              // only close non checkbox variation on shift clicked\n              onToggle(false, event);\n              onClose();\n              this.toggle.current.focus();\n            }\n          } else {\n            // tab to footer\n            tabbableItems[0].focus();\n            return;\n          }\n        }\n        // Current element is in footer.\n        if (event.shiftKey) {\n          // Move focus back to menu if current tab index is 0\n          if (currentElementIndex === 0) {\n            moveFocusToLastMenuItem();\n            event.preventDefault();\n          }\n          return;\n        }\n        // Tab to next element in footer or close if there are none\n        if (currentElementIndex + 1 < tabbableItems.length) {\n          tabbableItems[currentElementIndex + 1].focus();\n        } else {\n          // no more footer items close menu\n          onToggle(false, event);\n          onClose();\n          this.toggle.current.focus();\n        }\n        event.preventDefault();\n        return;\n      }\n    }\n\n    if (\n      isOpen &&\n      (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) &&\n      (escFromToggle || escFromWithinMenu)\n    ) {\n      onToggle(false, event);\n      onClose();\n      this.toggle.current.focus();\n    }\n  };\n\n  onKeyDown = (event: React.KeyboardEvent) => {\n    const { isOpen, onToggle, variant, onClose, onEnter, handleTypeaheadKeys } = this.props;\n\n    if (variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) {\n      if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n        handleTypeaheadKeys((event.key === KeyTypes.ArrowDown && 'down') || (event.key === KeyTypes.ArrowUp && 'up'));\n        event.preventDefault();\n      } else if (event.key === KeyTypes.Enter) {\n        if (isOpen) {\n          handleTypeaheadKeys('enter');\n        } else {\n          onToggle(!isOpen, event);\n        }\n      }\n    }\n\n    if (\n      variant === SelectVariant.typeahead ||\n      variant === SelectVariant.typeaheadMulti ||\n      (event.key === KeyTypes.Tab && !isOpen) ||\n      (event.key !== KeyTypes.Enter && event.key !== KeyTypes.Space)\n    ) {\n      return;\n    }\n    event.preventDefault();\n    if ((event.key === KeyTypes.Tab || event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && isOpen) {\n      onToggle(!isOpen, event);\n      onClose();\n      this.toggle.current.focus();\n    } else if ((event.key === KeyTypes.Enter || event.key === KeyTypes.Space) && !isOpen) {\n      onToggle(!isOpen, event);\n      onEnter();\n    }\n  };\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      className,\n      children,\n      isOpen,\n      isActive,\n      isPlain,\n      isDisabled,\n      hasPlaceholderStyle,\n      variant,\n      onToggle,\n      onEnter,\n      onClose,\n      onBlur,\n      onClickTypeaheadToggleButton,\n      handleTypeaheadKeys,\n      moveFocusToLastMenuItem,\n      parentRef,\n      menuRef,\n      id,\n      type,\n      hasClearButton,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-label': ariaLabel,\n      hasFooter,\n      footerRef,\n      ...props\n    } = this.props;\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    const isTypeahead =\n      variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti || hasClearButton;\n    const toggleProps: {\n      id: string;\n      'aria-labelledby': string;\n      'aria-expanded': boolean;\n      'aria-haspopup': 'listbox' | null;\n    } = {\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-expanded': isOpen,\n      'aria-haspopup': (variant !== SelectVariant.checkbox && 'listbox') || null\n    };\n    return (\n      <React.Fragment>\n        {!isTypeahead && (\n          <button\n            {...props}\n            {...toggleProps}\n            ref={this.toggle as React.RefObject<HTMLButtonElement>}\n            type={type}\n            className={css(\n              styles.selectToggle,\n              hasPlaceholderStyle && styles.modifiers.placeholder,\n              isDisabled && styles.modifiers.disabled,\n              isPlain && styles.modifiers.plain,\n              isActive && styles.modifiers.active,\n              className\n            )}\n            aria-label={ariaLabel}\n            onBlur={onBlur}\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onClick={event => {\n              onToggle(!isOpen, event);\n              if (isOpen) {\n                onClose();\n              }\n            }}\n            onKeyDown={this.onKeyDown}\n            disabled={isDisabled}\n          >\n            {children}\n            <span className={css(styles.selectToggleArrow)}>\n              <CaretDownIcon />\n            </span>\n          </button>\n        )}\n        {isTypeahead && (\n          <div\n            {...props}\n            ref={this.toggle as React.RefObject<HTMLDivElement>}\n            className={css(\n              styles.selectToggle,\n              hasPlaceholderStyle && styles.modifiers.placeholder,\n              isDisabled && styles.modifiers.disabled,\n              isPlain && styles.modifiers.plain,\n              isTypeahead && styles.modifiers.typeahead,\n              className\n            )}\n            onBlur={onBlur}\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            onClick={event => {\n              if (!isDisabled) {\n                onToggle(!isOpen, event);\n                if (isOpen) {\n                  onClose();\n                }\n              }\n            }}\n            onKeyDown={this.onKeyDown}\n          >\n            {children}\n            <button\n              {...toggleProps}\n              type={type}\n              className={css(buttonStyles.button, styles.selectToggleButton, styles.modifiers.plain)}\n              aria-label={ariaLabel}\n              onClick={event => {\n                onToggle(!isOpen, event);\n                if (isOpen) {\n                  onClose();\n                }\n                onClickTypeaheadToggleButton();\n              }}\n              {...((variant === SelectVariant.typeahead || variant === SelectVariant.typeaheadMulti) && {\n                tabIndex: -1\n              })}\n              disabled={isDisabled}\n            >\n              <CaretDownIcon className={css(styles.selectToggleArrow)} />\n            </button>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}