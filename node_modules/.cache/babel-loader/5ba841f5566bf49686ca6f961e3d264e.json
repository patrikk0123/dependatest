{"ast":null,"code":"import React, { memo, useContext } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { LOGGER_LINE_NUMBER_INDEX_DELTA } from './utils/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/LogViewer/log-viewer';\nimport { LogViewerContext } from './LogViewerContext';\nimport { escapeString, escapeTextForHtml, isAnsi, splitAnsi } from './utils/utils';\nexport const LogViewerRow = memo(_ref => {\n  let {\n    index,\n    style,\n    data,\n    ansiUp\n  } = _ref;\n  const {\n    parsedData,\n    searchedWordIndexes,\n    rowInFocus\n  } = data;\n  const context = useContext(LogViewerContext);\n\n  const getData = index => parsedData ? parsedData[index] : null;\n\n  const getRowIndex = index => index + LOGGER_LINE_NUMBER_INDEX_DELTA;\n  /** Helper function for applying the correct styling for styling rows containing searched keywords */\n\n\n  const handleHighlight = matchCounter => {\n    const searchedWordResult = searchedWordIndexes.filter(searchedWord => searchedWord.rowIndex === index);\n\n    if (searchedWordResult.length !== 0) {\n      if (rowInFocus.rowIndex === index && rowInFocus.matchIndex === matchCounter) {\n        return styles.modifiers.current;\n      }\n\n      return styles.modifiers.match;\n    }\n\n    return '';\n  };\n\n  const getFormattedData = () => {\n    const rowText = getData(index);\n    let matchCounter = 0;\n\n    if (context.searchedInput) {\n      const splitAnsiString = splitAnsi(rowText);\n      const regEx = new RegExp(`(${escapeString(context.searchedInput)})`, 'ig');\n      const composedString = [];\n      splitAnsiString.forEach(str => {\n        matchCounter = 0;\n\n        if (isAnsi(str)) {\n          composedString.push(str);\n        } else {\n          const splitString = str.split(regEx);\n          splitString.forEach((substr, newIndex) => {\n            if (substr.match(regEx)) {\n              matchCounter += 1;\n              composedString.push(ReactDOMServer.renderToString(React.createElement(\"span\", {\n                className: css(styles.logViewerString, handleHighlight(matchCounter)),\n                key: newIndex\n              }, substr)));\n            } else {\n              composedString.push(escapeTextForHtml(substr));\n            }\n          });\n        }\n      });\n      return composedString.join('');\n    }\n\n    return escapeTextForHtml(rowText);\n  };\n\n  return React.createElement(\"div\", {\n    style: style,\n    className: css(styles.logViewerListItem)\n  }, React.createElement(\"span\", {\n    className: css(styles.logViewerIndex)\n  }, getRowIndex(index)), React.createElement(\"span\", {\n    className: css(styles.logViewerText),\n    style: {\n      width: 'fit-content'\n    },\n    dangerouslySetInnerHTML: {\n      __html: ansiUp.ansi_to_html(getFormattedData())\n    }\n  }));\n});\nLogViewerRow.displayName = 'LogViewerRow';","map":{"version":3,"mappings":"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","names":["React","memo","useContext","ReactDOMServer","LOGGER_LINE_NUMBER_INDEX_DELTA","css","styles","LogViewerContext","escapeString","escapeTextForHtml","isAnsi","splitAnsi","LogViewerRow","index","style","data","ansiUp","parsedData","searchedWordIndexes","rowInFocus","context","getData","getRowIndex","handleHighlight","matchCounter","searchedWordResult","filter","searchedWord","rowIndex","length","matchIndex","modifiers","current","match","getFormattedData","rowText","searchedInput","splitAnsiString","regEx","RegExp","composedString","forEach","str","push","splitString","split","substr","newIndex","renderToString","className","logViewerString","key","join","logViewerListItem","logViewerIndex","logViewerText","width","dangerouslySetInnerHTML","__html","ansi_to_html","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-log-viewer/src/LogViewer/LogViewerRow.tsx"],"sourcesContent":["import React, { memo, useContext } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { LOGGER_LINE_NUMBER_INDEX_DELTA } from './utils/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/LogViewer/log-viewer';\nimport { LogViewerContext } from './LogViewerContext';\nimport AnsiUp from '../ansi_up/ansi_up';\nimport { escapeString, escapeTextForHtml, isAnsi, searchedKeyWordType, splitAnsi } from './utils/utils';\n\ninterface LogViewerRowProps {\n  index: number;\n  style?: React.CSSProperties;\n  data: {\n    parsedData: string[] | null;\n    rowInFocus: searchedKeyWordType;\n    searchedWordIndexes: searchedKeyWordType[];\n  };\n  ansiUp: AnsiUp;\n}\n\nexport const LogViewerRow: React.FunctionComponent<LogViewerRowProps> = memo(({ index, style, data, ansiUp }) => {\n  const { parsedData, searchedWordIndexes, rowInFocus } = data;\n  const context = useContext(LogViewerContext);\n\n  const getData = (index: number): string => (parsedData ? parsedData[index] : null);\n\n  const getRowIndex = (index: number): number => index + LOGGER_LINE_NUMBER_INDEX_DELTA;\n\n  /** Helper function for applying the correct styling for styling rows containing searched keywords */\n  const handleHighlight = (matchCounter: number) => {\n    const searchedWordResult = searchedWordIndexes.filter(searchedWord => searchedWord.rowIndex === index);\n    if (searchedWordResult.length !== 0) {\n      if (rowInFocus.rowIndex === index && rowInFocus.matchIndex === matchCounter) {\n        return styles.modifiers.current;\n      }\n      return styles.modifiers.match;\n    }\n    return '';\n  };\n\n  const getFormattedData = () => {\n    const rowText = getData(index);\n    let matchCounter = 0;\n    if (context.searchedInput) {\n      const splitAnsiString = splitAnsi(rowText);\n      const regEx = new RegExp(`(${escapeString(context.searchedInput)})`, 'ig');\n      const composedString: string[] = [];\n      splitAnsiString.forEach(str => {\n        matchCounter = 0;\n        if (isAnsi(str)) {\n          composedString.push(str);\n        } else {\n          const splitString = str.split(regEx);\n          splitString.forEach((substr, newIndex) => {\n            if (substr.match(regEx)) {\n              matchCounter += 1;\n              composedString.push(\n                ReactDOMServer.renderToString(\n                  <span className={css(styles.logViewerString, handleHighlight(matchCounter))} key={newIndex}>\n                    {substr}\n                  </span>\n                )\n              );\n            } else {\n              composedString.push(escapeTextForHtml(substr));\n            }\n          });\n        }\n      });\n      return composedString.join('');\n    }\n    return escapeTextForHtml(rowText);\n  };\n\n  return (\n    <div style={style} className={css(styles.logViewerListItem)}>\n      <span className={css(styles.logViewerIndex)}>{getRowIndex(index)}</span>\n      <span\n        className={css(styles.logViewerText)}\n        style={{ width: 'fit-content' }}\n        dangerouslySetInnerHTML={{ __html: ansiUp.ansi_to_html(getFormattedData()) }}\n      />\n    </div>\n  );\n});\nLogViewerRow.displayName = 'LogViewerRow';\n"]},"metadata":{},"sourceType":"module"}