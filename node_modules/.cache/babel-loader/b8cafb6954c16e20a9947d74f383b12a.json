{"ast":null,"code":"// @ts-nocheck\nexport var top = 'top';\nexport var bottom = 'bottom';\nexport var right = 'right';\nexport var left = 'left';\nexport var auto = 'auto';\nexport var basePlacements = [top, bottom, right, left];\nexport var start = 'start';\nexport var end = 'end';\nexport var clippingParents = 'clippingParents';\nexport var viewport = 'viewport';\nexport var popper = 'popper';\nexport var reference = 'reference';\nexport var variationPlacements = basePlacements.reduce(function (acc, placement) {\n  return acc.concat([\"\".concat(placement, \"-\").concat(start), \"\".concat(placement, \"-\").concat(end)]);\n}, []);\nexport var placements = [].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, \"\".concat(placement, \"-\").concat(start), \"\".concat(placement, \"-\").concat(end)]);\n}, []); // modifiers that need to read the DOM\n\nexport var beforeRead = 'beforeRead';\nexport var read = 'read';\nexport var afterRead = 'afterRead'; // pure-logic modifiers\n\nexport var beforeMain = 'beforeMain';\nexport var main = 'main';\nexport var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nexport var beforeWrite = 'beforeWrite';\nexport var write = 'write';\nexport var afterWrite = 'afterWrite';\nexport var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];","map":{"version":3,"mappings":"AAAA;AACA,OAAO,IAAMA,GAAG,GAAU,KAAnB;AACP,OAAO,IAAMC,MAAM,GAAa,QAAzB;AACP,OAAO,IAAMC,KAAK,GAAY,OAAvB;AACP,OAAO,IAAMC,IAAI,GAAW,MAArB;AACP,OAAO,IAAMC,IAAI,GAAW,MAArB;AAEP,OAAO,IAAMC,cAAc,GAAoB,CAACL,GAAD,EAAMC,MAAN,EAAcC,KAAd,EAAqBC,IAArB,CAAxC;AAEP,OAAO,IAAMG,KAAK,GAAY,OAAvB;AACP,OAAO,IAAMC,GAAG,GAAU,KAAnB;AAGP,OAAO,IAAMC,eAAe,GAAsB,iBAA3C;AACP,OAAO,IAAMC,QAAQ,GAAe,UAA7B;AAIP,OAAO,IAAMC,MAAM,GAAa,QAAzB;AACP,OAAO,IAAMC,SAAS,GAAgB,WAA/B;AAgBP,OAAO,IAAMC,mBAAmB,GAAyBP,cAAc,CAACQ,MAAf,CACvD,UAACC,GAAD,EAA4BC,SAA5B;EAAA,OACED,GAAG,CAACE,MAAJ,CAAW,WAAID,SAAJ,cAAiBT,KAAjB,aAAoCS,SAApC,cAAiDR,GAAjD,EAAX,CADF;AAAA,CADuD,EAGvD,EAHuD,CAAlD;AAKP,OAAO,IAAMU,UAAU,GAAgB,UAAIZ,cAAJ,GAAoBD,IAApB,GAA0BS,MAA1B,CACrC,UAACC,GAAD,EAAmBC,SAAnB;EAAA,OACED,GAAG,CAACE,MAAJ,CAAW,CAACD,SAAD,YAAeA,SAAf,cAA4BT,KAA5B,aAA+CS,SAA/C,cAA4DR,GAA5D,EAAX,CADF;AAAA,CADqC,EAGrC,EAHqC,CAAhC,C,CAMP;;AACA,OAAO,IAAMW,UAAU,GAAiB,YAAjC;AACP,OAAO,IAAMC,IAAI,GAAW,MAArB;AACP,OAAO,IAAMC,SAAS,GAAgB,WAA/B,C,CACP;;AACA,OAAO,IAAMC,UAAU,GAAiB,YAAjC;AACP,OAAO,IAAMC,IAAI,GAAW,MAArB;AACP,OAAO,IAAMC,SAAS,GAAgB,WAA/B,C,CACP;;AACA,OAAO,IAAMC,WAAW,GAAkB,aAAnC;AACP,OAAO,IAAMC,KAAK,GAAY,OAAvB;AACP,OAAO,IAAMC,UAAU,GAAiB,YAAjC;AACP,OAAO,IAAMC,cAAc,GAAqB,CAC9CT,UAD8C,EAE9CC,IAF8C,EAG9CC,SAH8C,EAI9CC,UAJ8C,EAK9CC,IAL8C,EAM9CC,SAN8C,EAO9CC,WAP8C,EAQ9CC,KAR8C,EAS9CC,UAT8C,CAAzC","names":["top","bottom","right","left","auto","basePlacements","start","end","clippingParents","viewport","popper","reference","variationPlacements","reduce","acc","placement","concat","placements","beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite","modifierPhases"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/enums.ts"],"sourcesContent":["// @ts-nocheck\nexport const top: 'top' = 'top';\nexport const bottom: 'bottom' = 'bottom';\nexport const right: 'right' = 'right';\nexport const left: 'left' = 'left';\nexport const auto: 'auto' = 'auto';\nexport type BasePlacement = typeof top | typeof bottom | typeof right | typeof left;\nexport const basePlacements: BasePlacement[] = [top, bottom, right, left];\n\nexport const start: 'start' = 'start';\nexport const end: 'end' = 'end';\nexport type Variation = typeof start | typeof end;\n\nexport const clippingParents: 'clippingParents' = 'clippingParents';\nexport const viewport: 'viewport' = 'viewport';\nexport type Boundary = HTMLElement | HTMLElement[] | typeof clippingParents;\nexport type RootBoundary = typeof viewport | 'document';\n\nexport const popper: 'popper' = 'popper';\nexport const reference: 'reference' = 'reference';\nexport type Context = typeof popper | typeof reference;\n\nexport type VariationPlacement =\n  | 'top-start'\n  | 'top-end'\n  | 'bottom-start'\n  | 'bottom-end'\n  | 'right-start'\n  | 'right-end'\n  | 'left-start'\n  | 'left-end';\nexport type AutoPlacement = 'auto' | 'auto-start' | 'auto-end';\nexport type ComputedPlacement = VariationPlacement | BasePlacement;\nexport type Placement = AutoPlacement | BasePlacement | VariationPlacement;\n\nexport const variationPlacements: VariationPlacement[] = basePlacements.reduce(\n  (acc: VariationPlacement[], placement: BasePlacement) =>\n    acc.concat([`${placement}-${start}` as any, `${placement}-${end}` as any]),\n  []\n);\nexport const placements: Placement[] = [...basePlacements, auto].reduce(\n  (acc: Placement[], placement: BasePlacement | typeof auto): Placement[] =>\n    acc.concat([placement, `${placement}-${start}` as any, `${placement}-${end}` as any]),\n  []\n);\n\n// modifiers that need to read the DOM\nexport const beforeRead: 'beforeRead' = 'beforeRead';\nexport const read: 'read' = 'read';\nexport const afterRead: 'afterRead' = 'afterRead';\n// pure-logic modifiers\nexport const beforeMain: 'beforeMain' = 'beforeMain';\nexport const main: 'main' = 'main';\nexport const afterMain: 'afterMain' = 'afterMain';\n// modifier with the purpose to write to the DOM (or write into a framework state)\nexport const beforeWrite: 'beforeWrite' = 'beforeWrite';\nexport const write: 'write' = 'write';\nexport const afterWrite: 'afterWrite' = 'afterWrite';\nexport const modifierPhases: ModifierPhases[] = [\n  beforeRead,\n  read,\n  afterRead,\n  beforeMain,\n  main,\n  afterMain,\n  beforeWrite,\n  write,\n  afterWrite\n];\n\nexport type ModifierPhases =\n  | typeof beforeRead\n  | typeof read\n  | typeof afterRead\n  | typeof beforeMain\n  | typeof main\n  | typeof afterMain\n  | typeof beforeWrite\n  | typeof write\n  | typeof afterWrite;\n"]},"metadata":{},"sourceType":"module"}