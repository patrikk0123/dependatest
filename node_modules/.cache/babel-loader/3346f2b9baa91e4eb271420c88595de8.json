{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\nexport var ToolbarGroupVariant;\n\n(function (ToolbarGroupVariant) {\n  ToolbarGroupVariant[\"filter-group\"] = \"filter-group\";\n  ToolbarGroupVariant[\"icon-button-group\"] = \"icon-button-group\";\n  ToolbarGroupVariant[\"button-group\"] = \"button-group\";\n})(ToolbarGroupVariant || (ToolbarGroupVariant = {}));\n\nclass ToolbarGroupWithRef extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      visibility,\n      visiblity,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      variant,\n      children,\n      innerRef\n    } = _a,\n          props = __rest(_a, [\"visibility\", \"visiblity\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"variant\", \"children\", \"innerRef\"]);\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n\n    return React.createElement(PageContext.Consumer, null, _ref => {\n      let {\n        width,\n        getBreakpoint\n      } = _ref;\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbarGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className)\n      }, props, {\n        ref: innerRef\n      }), children);\n    });\n  }\n\n}\n\nexport const ToolbarGroup = React.forwardRef((props, ref) => React.createElement(ToolbarGroupWithRef, Object.assign({}, props, {\n  innerRef: ref\n})));","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,yDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,oBAAT,EAA+BC,OAA/B,QAA8C,oBAA9C;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,WAAYC,mBAAZ;;AAAA,WAAYA,mBAAZ,EAA+B;EAC7BA;EACAA;EACAA;AACD,CAJD,EAAYA,mBAAmB,KAAnBA,mBAAmB,MAA/B;;AAyDA,MAAMC,mBAAN,SAAkCP,KAAK,CAACQ,SAAxC,CAAoE;EAClEC,MAAM;IACJ,MAAMC,KAWF,KAAKC,KAXT;IAAA,MAAM;MACJC,UADI;MAEJC,SAFI;MAGJC,SAHI;MAIJC,MAJI;MAKJC,UALI;MAMJC,SANI;MAOJC,OAPI;MAQJC,QARI;MASJC;IATI,IASIV,EATV;IAAA,MAUKC,KAAK,cAVJ,gHAUI,CAVV;;IAaA,IAAIE,SAAS,KAAKQ,SAAlB,EAA6B;MAC3B;MACAC,OAAO,CAACC,IAAR,CACE,0DACE,2DAFJ;IAID;;IAED,OACEvB,oBAACK,WAAW,CAACmB,QAAb,EAAqB,IAArB,EACG;MAAA,IAAC;QAAEC,KAAF;QAASC;MAAT,CAAD;MAAA,OACC1B;QACEiB,SAAS,EAAEf,GAAG,CACZD,MAAM,CAAC0B,YADK,EAEZT,OAAO,IAAIjB,MAAM,CAAC2B,SAAP,CAAiBxB,OAAO,CAACc,OAAD,CAAxB,CAFC,EAGZf,oBAAoB,CAACS,UAAU,IAAIC,SAAf,EAA0BZ,MAA1B,EAAkC,EAAlC,EAAsCyB,aAAa,CAACD,KAAD,CAAnD,CAHR,EAIZtB,oBAAoB,CAACW,SAAD,EAAYb,MAAZ,EAAoB,EAApB,EAAwByB,aAAa,CAACD,KAAD,CAArC,CAJR,EAKZtB,oBAAoB,CAACY,MAAD,EAASd,MAAT,EAAiB,EAAjB,EAAqByB,aAAa,CAACD,KAAD,CAAlC,CALR,EAMZtB,oBAAoB,CAACa,UAAD,EAAaf,MAAb,EAAqB,EAArB,EAAyByB,aAAa,CAACD,KAAD,CAAtC,CANR,EAOZR,SAPY;MADhB,GAUMN,KAVN,EAUW;QACTkB,GAAG,EAAET;MADI,CAVX,GAaGD,QAbH,CADD;IAAA,CADH,CADF;EAqBD;;AA5CiE;;AA+CpE,OAAO,MAAMW,YAAY,GAAG9B,KAAK,CAAC+B,UAAN,CAAiB,CAACpB,KAAD,EAA2BkB,GAA3B,KAC3C7B,oBAACO,mBAAD,EAAoByB,kBAAKrB,KAAL,EAAU;EAAES,QAAQ,EAAES;AAAZ,CAAV,CAApB,CAD0B,CAArB","names":["React","styles","css","formatBreakpointMods","toCamel","PageContext","ToolbarGroupVariant","ToolbarGroupWithRef","Component","render","_a","props","visibility","visiblity","alignment","spacer","spaceItems","className","variant","children","innerRef","undefined","console","warn","Consumer","width","getBreakpoint","toolbarGroup","modifiers","ref","ToolbarGroup","forwardRef","Object"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { formatBreakpointMods, toCamel } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\n\nexport enum ToolbarGroupVariant {\n  'filter-group' = 'filter-group',\n  'icon-button-group' = 'icon-button-group',\n  'button-group' = 'button-group'\n}\n\nexport interface ToolbarGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'ref'> {\n  /** Classes applied to root element of the data toolbar group */\n  className?: string;\n  /** A type modifier which modifies spacing specifically depending on the type of group */\n  variant?: ToolbarGroupVariant | 'filter-group' | 'icon-button-group' | 'button-group';\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Spacers at various breakpoints. */\n  spacer?: {\n    default?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    md?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    lg?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    xl?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    '2xl'?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n  };\n  /** Space items at various breakpoints. */\n  spaceItems?: {\n    default?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    md?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    lg?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    xl?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    '2xl'?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n  };\n  /** Content to be rendered inside the data toolbar group */\n  children?: React.ReactNode;\n  /** Reference to pass to this group if it has .pf-m-chip-container modifier */\n  innerRef?: React.RefObject<any>;\n}\n\nclass ToolbarGroupWithRef extends React.Component<ToolbarGroupProps> {\n  render() {\n    const {\n      visibility,\n      visiblity,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      variant,\n      children,\n      innerRef,\n      ...props\n    } = this.props;\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarGroup visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <div\n            className={css(\n              styles.toolbarGroup,\n              variant && styles.modifiers[toCamel(variant) as 'filterGroup' | 'iconButtonGroup' | 'buttonGroup'],\n              formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n              formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n              formatBreakpointMods(spacer, styles, '', getBreakpoint(width)),\n              formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)),\n              className\n            )}\n            {...props}\n            ref={innerRef}\n          >\n            {children}\n          </div>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n\nexport const ToolbarGroup = React.forwardRef((props: ToolbarGroupProps, ref: any) => (\n  <ToolbarGroupWithRef {...props} innerRef={ref} />\n));\n"]},"metadata":{},"sourceType":"module"}