{"ast":null,"code":"import { pncClient } from './pncClient';\n\nclass RepositoryService {\n  /**\n   * Gets all SCM repositories.\n   *\n   * @param requestConfig - Axios based request config\n   * @returns SCM repositories\n   */\n  getRepositories() {\n    let requestConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return pncClient.getHttpClient().get('/scm-repositories', requestConfig);\n  }\n  /**\n   * Gets a specific SCM repository.\n   *\n   * @param data - object containing ID of the SCM repository\n   * @param requestConfig - Axios based request config\n   * @returns Project\n   */\n\n\n  getRepository(_ref) {\n    let {\n      id\n    } = _ref;\n    let requestConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return pncClient.getHttpClient().get(`/scm-repositories/${id}`, requestConfig);\n  }\n  /**\n   * Creates a new Project.\n   *\n   * @param data - object containing new Project data\n   * @param requestConfig  - Axios based request config\n   * @returns Created Project\n   */\n\n\n  createProject(data) {\n    let requestConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return pncClient.getHttpClient().post('/projects', data, requestConfig);\n  }\n  /**\n   * Gets all builds associated with a specific project.\n   *\n   * @param data - object containing ID of the Project\n   * @param requestConfig - Axios based request config\n   * @returns Builds\n   */\n\n\n  getProjectBuilds(_ref2) {\n    let {\n      id\n    } = _ref2;\n    let requestConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return pncClient.getHttpClient().get(`/projects/${id}/builds`, requestConfig);\n  }\n\n}\n/**\n * Instance of SCMService providing group of Source Code Management related API operations.\n */\n\n\nexport const repositoryService = new RepositoryService();","map":{"version":3,"names":["pncClient","RepositoryService","getRepositories","requestConfig","getHttpClient","get","getRepository","id","createProject","data","post","getProjectBuilds","repositoryService"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/services/repositoryService.ts"],"sourcesContent":["import { AxiosRequestConfig } from 'axios';\nimport { Project } from 'pnc-api-types-ts';\nimport { pncClient } from './pncClient';\n\nexport interface IRepositoryServiceData {\n  id: string;\n}\n\nclass RepositoryService {\n  /**\n   * Gets all SCM repositories.\n   *\n   * @param requestConfig - Axios based request config\n   * @returns SCM repositories\n   */\n  public getRepositories(requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().get('/scm-repositories', requestConfig);\n  }\n\n  /**\n   * Gets a specific SCM repository.\n   *\n   * @param data - object containing ID of the SCM repository\n   * @param requestConfig - Axios based request config\n   * @returns Project\n   */\n  public getRepository({ id }: IRepositoryServiceData, requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().get(`/scm-repositories/${id}`, requestConfig);\n  }\n\n  /**\n   * Creates a new Project.\n   *\n   * @param data - object containing new Project data\n   * @param requestConfig  - Axios based request config\n   * @returns Created Project\n   */\n  public createProject(data: Omit<Project, 'id'>, requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().post('/projects', data, requestConfig);\n  }\n\n  /**\n   * Gets all builds associated with a specific project.\n   *\n   * @param data - object containing ID of the Project\n   * @param requestConfig - Axios based request config\n   * @returns Builds\n   */\n  public getProjectBuilds({ id }: IRepositoryServiceData, requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().get(`/projects/${id}/builds`, requestConfig);\n  }\n}\n\n/**\n * Instance of SCMService providing group of Source Code Management related API operations.\n */\nexport const repositoryService = new RepositoryService();\n"],"mappings":"AAEA,SAASA,SAAT,QAA0B,aAA1B;;AAMA,MAAMC,iBAAN,CAAwB;EACtB;AACF;AACA;AACA;AACA;AACA;EACSC,eAAe,GAAyC;IAAA,IAAxCC,aAAwC,uEAAJ,EAAI;IAC7D,OAAOH,SAAS,CAACI,aAAV,GAA0BC,GAA1B,CAA8B,mBAA9B,EAAmDF,aAAnD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACSG,aAAa,OAAyE;IAAA,IAAxE;MAAEC;IAAF,CAAwE;IAAA,IAAxCJ,aAAwC,uEAAJ,EAAI;IAC3F,OAAOH,SAAS,CAACI,aAAV,GAA0BC,GAA1B,CAA+B,qBAAoBE,EAAG,EAAtD,EAAyDJ,aAAzD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACSK,aAAa,CAACC,IAAD,EAAoE;IAAA,IAAxCN,aAAwC,uEAAJ,EAAI;IACtF,OAAOH,SAAS,CAACI,aAAV,GAA0BM,IAA1B,CAA+B,WAA/B,EAA4CD,IAA5C,EAAkDN,aAAlD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACSQ,gBAAgB,QAAyE;IAAA,IAAxE;MAAEJ;IAAF,CAAwE;IAAA,IAAxCJ,aAAwC,uEAAJ,EAAI;IAC9F,OAAOH,SAAS,CAACI,aAAV,GAA0BC,GAA1B,CAA+B,aAAYE,EAAG,SAA9C,EAAwDJ,aAAxD,CAAP;EACD;;AA1CqB;AA6CxB;AACA;AACA;;;AACA,OAAO,MAAMS,iBAAiB,GAAG,IAAIX,iBAAJ,EAA1B"},"metadata":{},"sourceType":"module"}