{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nexport class ClipboardCopyExpanded extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      children,\n      onChange,\n      isReadOnly,\n      isCode\n    } = _a,\n          props = __rest(_a, [\"className\", \"children\", \"onChange\", \"isReadOnly\", \"isCode\"]);\n\n    return React.createElement(\"div\", Object.assign({\n      suppressContentEditableWarning: true,\n      className: css(styles.clipboardCopyExpandableContent, className),\n      onInput: e => onChange(e.target.innerText, e),\n      contentEditable: !isReadOnly\n    }, props), isCode ? React.createElement(\"pre\", null, children) : children);\n  }\n\n}\nClipboardCopyExpanded.displayName = 'ClipboardCopyExpanded';\nClipboardCopyExpanded.defaultProps = {\n  onChange: () => undefined,\n  className: '',\n  isReadOnly: false,\n  isCode: false\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,sEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAYA,OAAM,MAAOC,qBAAP,SAAqCH,KAAK,CAACI,SAA3C,CAAgF;EAEpFC,YAAYC,KAAZ,EAAsB;IACpB,MAAMA,KAAN;EACD;;EASDC,MAAM;IACJ,MAAMC,KAAkE,KAAKF,KAA7E;IAAA,MAAM;MAAEG,SAAF;MAAaC,QAAb;MAAuBC,QAAvB;MAAiCC,UAAjC;MAA6CC;IAA7C,IAAmDL,EAAzD;IAAA,MAA8DF,KAAK,cAA7D,6DAA6D,CAAnE;;IAEA,OACEN;MACEc,8BAA8B,MADhC;MAEEL,SAAS,EAAEP,GAAG,CAACD,MAAM,CAACc,8BAAR,EAAwCN,SAAxC,CAFhB;MAGEO,OAAO,EAAGC,CAAD,IAAYN,QAAQ,CAACM,CAAC,CAACC,MAAF,CAASC,SAAV,EAAqBF,CAArB,CAH/B;MAIEG,eAAe,EAAE,CAACR;IAJpB,GAKMN,KALN,GAOGO,MAAM,GAAGb,iCAAMU,QAAN,CAAH,GAA2BA,QAPpC,CADF;EAWD;;AA3BmF;AAC7EP,oCAAc,uBAAd;AAKAA,qCAAyD;EAC9DQ,QAAQ,EAAE,MAAWU,SADyC;EAE9DZ,SAAS,EAAE,EAFmD;EAG9DG,UAAU,EAAE,KAHkD;EAI9DC,MAAM,EAAE;AAJsD,CAAzD","names":["React","styles","css","ClipboardCopyExpanded","Component","constructor","props","render","_a","className","children","onChange","isReadOnly","isCode","suppressContentEditableWarning","clipboardCopyExpandableContent","onInput","e","target","innerText","contentEditable","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopyExpanded.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { ClipboardCopyProps } from './ClipboardCopy';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ClipboardCopyExpandedProps extends Omit<ClipboardCopyProps, 'onChange'> {\n  className?: string;\n  children: React.ReactNode;\n  onChange?: (text: string, e: React.FormEvent<HTMLDivElement>) => void;\n  isReadOnly?: boolean;\n  isCode?: boolean;\n}\n\nexport class ClipboardCopyExpanded extends React.Component<ClipboardCopyExpandedProps> {\n  static displayName = 'ClipboardCopyExpanded';\n  constructor(props: any) {\n    super(props);\n  }\n\n  static defaultProps: PickOptional<ClipboardCopyExpandedProps> = {\n    onChange: (): any => undefined,\n    className: '',\n    isReadOnly: false,\n    isCode: false\n  };\n\n  render() {\n    const { className, children, onChange, isReadOnly, isCode, ...props } = this.props;\n\n    return (\n      <div\n        suppressContentEditableWarning\n        className={css(styles.clipboardCopyExpandableContent, className)}\n        onInput={(e: any) => onChange(e.target.innerText, e)}\n        contentEditable={!isReadOnly}\n        {...props}\n      >\n        {isCode ? <pre>{children}</pre> : children}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}