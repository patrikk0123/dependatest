{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton } from './DataListDragButton';\n\nfunction findDataListDragButton(node) {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n\n  if (node.type === DataListDragButton) {\n    return node;\n  }\n\n  if (node.props.children) {\n    for (const child of React.Children.toArray(node.props.children)) {\n      const button = findDataListDragButton(child);\n\n      if (button) {\n        return button;\n      }\n    }\n  }\n\n  return null;\n}\n\nexport class DataListItem extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      children,\n      isExpanded,\n      className,\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      selectableInputAriaLabel\n    } = _a,\n          props = __rest(_a, [\"children\", \"isExpanded\", \"className\", \"id\", 'aria-labelledby', \"selectableInputAriaLabel\"]);\n\n    return React.createElement(DataListContext.Consumer, null, _ref => {\n      let {\n        isSelectable,\n        selectedDataListItemId,\n        updateSelectedDataListItem,\n        selectableRow,\n        isDraggable,\n        dragStart,\n        dragEnd,\n        drop\n      } = _ref;\n\n      const selectDataListItem = event => {\n        let target = event.target;\n\n        while (event.currentTarget !== target) {\n          if ('onclick' in target && target.onclick || target.parentNode.classList.contains(styles.dataListItemAction) || target.parentNode.classList.contains(styles.dataListItemControl)) {\n            // check other event handlers are not present.\n            return;\n          } else {\n            target = target.parentNode;\n          }\n        }\n\n        updateSelectedDataListItem(id);\n      };\n\n      const onKeyDown = event => {\n        if (event.key === KeyTypes.Enter) {\n          updateSelectedDataListItem(id);\n        }\n      }; // We made the DataListDragButton determine if the entire item is draggable instead of\n      // DataListItem like we should have.\n      // Recursively search children for the DataListDragButton and see if it's disabled...\n\n\n      const dragButton = findDataListDragButton(children);\n      const dragProps = isDraggable && {\n        draggable: dragButton ? !dragButton.props.isDisabled : true,\n        onDrop: drop,\n        onDragEnd: dragEnd,\n        onDragStart: dragStart\n      };\n      const isSelected = selectedDataListItemId === id;\n      const selectableInputAriaProps = selectableInputAriaLabel ? {\n        'aria-label': selectableInputAriaLabel\n      } : {\n        'aria-labelledby': ariaLabelledBy\n      };\n      const selectableInputType = (selectableRow === null || selectableRow === void 0 ? void 0 : selectableRow.type) === 'multiple' ? 'checkbox' : 'radio';\n      return React.createElement(\"li\", Object.assign({\n        id: id,\n        className: css(styles.dataListItem, isExpanded && styles.modifiers.expanded, isSelectable && styles.modifiers.selectable, selectedDataListItemId && isSelected && styles.modifiers.selected, className),\n        \"aria-labelledby\": ariaLabelledBy\n      }, isSelectable && {\n        tabIndex: 0,\n        onClick: selectDataListItem,\n        onKeyDown\n      }, isSelectable && isSelected && {\n        'aria-selected': true\n      }, props, dragProps), selectableRow && React.createElement(\"input\", Object.assign({\n        className: \"pf-screen-reader\",\n        type: selectableInputType,\n        checked: isSelected,\n        onChange: event => selectableRow.onChange(id, event),\n        tabIndex: -1\n      }, selectableInputAriaProps)), React.Children.map(children, child => React.isValidElement(child) && React.cloneElement(child, {\n        rowid: ariaLabelledBy\n      })));\n    });\n  }\n\n}\nDataListItem.displayName = 'DataListItem';\nDataListItem.defaultProps = {\n  isExpanded: false,\n  className: '',\n  id: '',\n  children: null,\n  'aria-labelledby': ''\n};","map":{"version":3,"mappings":"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","names":["React","css","styles","DataListContext","KeyTypes","DataListDragButton","findDataListDragButton","node","isValidElement","type","props","children","child","Children","toArray","button","DataListItem","Component","render","_a","isExpanded","className","id","ariaLabelledBy","selectableInputAriaLabel","Consumer","isSelectable","selectedDataListItemId","updateSelectedDataListItem","selectableRow","isDraggable","dragStart","dragEnd","drop","selectDataListItem","event","target","currentTarget","onclick","parentNode","classList","contains","dataListItemAction","dataListItemControl","onKeyDown","key","Enter","dragButton","dragProps","draggable","isDisabled","onDrop","onDragEnd","onDragStart","isSelected","selectableInputAriaProps","selectableInputType","dataListItem","modifiers","expanded","selectable","selected","tabIndex","onClick","checked","onChange","map","cloneElement","rowid"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton, DataListDragButtonProps } from './DataListDragButton';\n\nexport interface DataListItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'children' | 'ref'> {\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Content rendered inside the DataList item */\n  children: React.ReactNode;\n  /** Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent> */\n  className?: string;\n  /** Adds accessible text to the DataList item */\n  'aria-labelledby': string;\n  /** Unique id for the DataList item */\n  id?: string;\n  /** @beta Aria label to apply to the selectable input if one is rendered */\n  selectableInputAriaLabel?: string;\n}\n\nexport interface DataListItemChildProps {\n  /** Id for the row */\n  rowid: string;\n}\n\nfunction findDataListDragButton(node: React.ReactNode): React.ReactElement<DataListDragButtonProps> | null {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n  if (node.type === DataListDragButton) {\n    return node as React.ReactElement<DataListDragButtonProps>;\n  }\n  if (node.props.children) {\n    for (const child of React.Children.toArray(node.props.children)) {\n      const button = findDataListDragButton(child);\n      if (button) {\n        return button;\n      }\n    }\n  }\n\n  return null;\n}\n\nexport class DataListItem extends React.Component<DataListItemProps> {\n  static displayName = 'DataListItem';\n  static defaultProps: DataListItemProps = {\n    isExpanded: false,\n    className: '',\n    id: '',\n    children: null,\n    'aria-labelledby': ''\n  };\n  render() {\n    const {\n      children,\n      isExpanded,\n      className,\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      selectableInputAriaLabel,\n      ...props\n    } = this.props;\n    return (\n      <DataListContext.Consumer>\n        {({\n          isSelectable,\n          selectedDataListItemId,\n          updateSelectedDataListItem,\n          selectableRow,\n          isDraggable,\n          dragStart,\n          dragEnd,\n          drop\n        }) => {\n          const selectDataListItem = (event: React.MouseEvent) => {\n            let target: any = event.target;\n            while (event.currentTarget !== target) {\n              if (\n                ('onclick' in target && target.onclick) ||\n                target.parentNode.classList.contains(styles.dataListItemAction) ||\n                target.parentNode.classList.contains(styles.dataListItemControl)\n              ) {\n                // check other event handlers are not present.\n                return;\n              } else {\n                target = target.parentNode;\n              }\n            }\n            updateSelectedDataListItem(id);\n          };\n\n          const onKeyDown = (event: React.KeyboardEvent) => {\n            if (event.key === KeyTypes.Enter) {\n              updateSelectedDataListItem(id);\n            }\n          };\n\n          // We made the DataListDragButton determine if the entire item is draggable instead of\n          // DataListItem like we should have.\n          // Recursively search children for the DataListDragButton and see if it's disabled...\n          const dragButton = findDataListDragButton(children);\n          const dragProps = isDraggable && {\n            draggable: dragButton ? !dragButton.props.isDisabled : true,\n            onDrop: drop,\n            onDragEnd: dragEnd,\n            onDragStart: dragStart\n          };\n\n          const isSelected = selectedDataListItemId === id;\n\n          const selectableInputAriaProps = selectableInputAriaLabel\n            ? { 'aria-label': selectableInputAriaLabel }\n            : { 'aria-labelledby': ariaLabelledBy };\n\n          const selectableInputType = selectableRow?.type === 'multiple' ? 'checkbox' : 'radio';\n\n          return (\n            <li\n              id={id}\n              className={css(\n                styles.dataListItem,\n                isExpanded && styles.modifiers.expanded,\n                isSelectable && styles.modifiers.selectable,\n                selectedDataListItemId && isSelected && styles.modifiers.selected,\n                className\n              )}\n              aria-labelledby={ariaLabelledBy}\n              {...(isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown })}\n              {...(isSelectable && isSelected && { 'aria-selected': true })}\n              {...props}\n              {...dragProps}\n            >\n              {selectableRow && (\n                <input\n                  className=\"pf-screen-reader\"\n                  type={selectableInputType}\n                  checked={isSelected}\n                  onChange={event => selectableRow.onChange(id, event)}\n                  tabIndex={-1}\n                  {...selectableInputAriaProps}\n                />\n              )}\n              {React.Children.map(\n                children,\n                child =>\n                  React.isValidElement(child) &&\n                  React.cloneElement(child as React.ReactElement<any>, {\n                    rowid: ariaLabelledBy\n                  })\n              )}\n            </li>\n          );\n        }}\n      </DataListContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}