{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tabs/tabs';\nimport { TabButton } from './TabButton';\nimport { TabsContext } from './TabsContext';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nimport { Button } from '../Button';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\n\nconst TabBase = _a => {\n  var {\n    title,\n    eventKey,\n    tabContentRef,\n    id: childId,\n    tabContentId,\n    className: childClassName = '',\n    ouiaId: childOuiaId,\n    isDisabled,\n    isAriaDisabled,\n    inoperableEvents = ['onClick', 'onKeyPress'],\n    href,\n    innerRef,\n    tooltip,\n    closeButtonAriaLabel,\n    isCloseDisabled = false\n  } = _a,\n      props = __rest(_a, [\"title\", \"eventKey\", \"tabContentRef\", \"id\", \"tabContentId\", \"className\", \"ouiaId\", \"isDisabled\", \"isAriaDisabled\", \"inoperableEvents\", \"href\", \"innerRef\", \"tooltip\", \"closeButtonAriaLabel\", \"isCloseDisabled\"]);\n\n  const preventedEvents = inoperableEvents.reduce((handlers, eventToPrevent) => Object.assign(Object.assign({}, handlers), {\n    [eventToPrevent]: event => {\n      event.preventDefault();\n    }\n  }), {});\n  const {\n    mountOnEnter,\n    localActiveKey,\n    unmountOnExit,\n    uniqueId,\n    handleTabClick,\n    handleTabClose\n  } = React.useContext(TabsContext);\n  let ariaControls = tabContentId ? `${tabContentId}` : `pf-tab-section-${eventKey}-${childId || uniqueId}`;\n\n  if ((mountOnEnter || unmountOnExit) && eventKey !== localActiveKey) {\n    ariaControls = undefined;\n  }\n\n  const isButtonElement = Boolean(!href);\n\n  const getDefaultTabIdx = () => {\n    if (isDisabled) {\n      return isButtonElement ? null : -1;\n    } else if (isAriaDisabled) {\n      return null;\n    }\n  };\n\n  const tabButton = React.createElement(TabButton, Object.assign({\n    parentInnerRef: innerRef,\n    className: css(styles.tabsLink, isDisabled && href && styles.modifiers.disabled, isAriaDisabled && styles.modifiers.ariaDisabled),\n    disabled: isButtonElement ? isDisabled : null,\n    \"aria-disabled\": isDisabled || isAriaDisabled,\n    tabIndex: getDefaultTabIdx(),\n    onClick: event => handleTabClick(event, eventKey, tabContentRef)\n  }, isAriaDisabled ? preventedEvents : null, {\n    id: `pf-tab-${eventKey}-${childId || uniqueId}`,\n    \"aria-controls\": ariaControls,\n    tabContentRef: tabContentRef,\n    ouiaId: childOuiaId,\n    href: href,\n    role: \"tab\",\n    \"aria-selected\": eventKey === localActiveKey\n  }, props), title);\n  return React.createElement(\"li\", {\n    className: css(styles.tabsItem, eventKey === localActiveKey && styles.modifiers.current, handleTabClose && styles.modifiers.action, handleTabClose && (isDisabled || isAriaDisabled) && styles.modifiers.disabled, childClassName),\n    role: \"presentation\"\n  }, tooltip ? React.createElement(Tooltip, Object.assign({}, tooltip.props), tabButton) : tabButton, handleTabClose !== undefined && React.createElement(\"span\", {\n    className: css(styles.tabsItemClose)\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": closeButtonAriaLabel || 'Close tab',\n    onClick: event => handleTabClose(event, eventKey, tabContentRef),\n    isDisabled: isCloseDisabled\n  }, React.createElement(\"span\", {\n    className: css(styles.tabsItemCloseIcon)\n  }, React.createElement(TimesIcon, null)))));\n};\n\nexport const Tab = React.forwardRef((props, ref) => React.createElement(TabBase, Object.assign({\n  innerRef: ref\n}, props)));\nTab.displayName = 'Tab';","map":{"version":3,"mappings":"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","names":["React","styles","TabButton","TabsContext","css","Tooltip","Button","TimesIcon","TabBase","_a","title","eventKey","tabContentRef","id","childId","tabContentId","className","childClassName","ouiaId","childOuiaId","isDisabled","isAriaDisabled","inoperableEvents","href","innerRef","tooltip","closeButtonAriaLabel","isCloseDisabled","props","preventedEvents","reduce","handlers","eventToPrevent","Object","event","preventDefault","mountOnEnter","localActiveKey","unmountOnExit","uniqueId","handleTabClick","handleTabClose","useContext","ariaControls","undefined","isButtonElement","Boolean","getDefaultTabIdx","tabButton","parentInnerRef","tabsLink","modifiers","disabled","ariaDisabled","tabIndex","onClick","role","tabsItem","current","action","tabsItemClose","variant","tabsItemCloseIcon","Tab","forwardRef","ref","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Tabs/Tab.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tabs/tabs';\nimport { OUIAProps } from '../../helpers';\nimport { TabButton } from './TabButton';\nimport { TabsContext } from './TabsContext';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nimport { Button } from '../Button';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\n\nexport interface TabProps extends Omit<React.HTMLProps<HTMLAnchorElement | HTMLButtonElement>, 'title'>, OUIAProps {\n  /** content rendered inside the Tab content area. */\n  children?: React.ReactNode;\n  /** additional classes added to the Tab */\n  className?: string;\n  /** URL associated with the Tab. A Tab with an href will render as an <a> instead of a <button>. A Tab inside a <Tabs component=\"nav\"> should have an href. */\n  href?: string;\n  /** Content rendered in the tab title. Should be <TabTitleText> and/or <TabTitleIcon> for proper styling. */\n  title: React.ReactNode;\n  /** uniquely identifies the tab */\n  eventKey: number | string;\n  /** child id for case in which a TabContent section is defined outside of a Tabs component */\n  tabContentId?: string | number;\n  /** child reference for case in which a TabContent section is defined outside of a Tabs component */\n  tabContentRef?: React.RefObject<any>;\n  /** whether to render the tab or not */\n  isHidden?: boolean;\n  /** Adds disabled styling and disables the button using the disabled html attribute */\n  isDisabled?: boolean;\n  /** Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute */\n  isAriaDisabled?: boolean;\n  /** Events to prevent when the button is in an aria-disabled state */\n  inoperableEvents?: string[];\n  /** Forwarded ref */\n  innerRef?: React.Ref<any>;\n  /** Optional Tooltip rendered to a Tab. Should be <Tooltip> with appropriate props for proper rendering. */\n  tooltip?: React.ReactElement<any>;\n  /** @beta Aria-label for the close button added by passing the onClose property to Tabs. */\n  closeButtonAriaLabel?: string;\n  /** @beta Flag indicating the close button should be disabled */\n  isCloseDisabled?: boolean;\n}\n\nconst TabBase: React.FunctionComponent<TabProps> = ({\n  title,\n  eventKey,\n  tabContentRef,\n  id: childId,\n  tabContentId,\n  className: childClassName = '',\n  ouiaId: childOuiaId,\n  isDisabled,\n  isAriaDisabled,\n  inoperableEvents = ['onClick', 'onKeyPress'],\n  href,\n  innerRef,\n  tooltip,\n  closeButtonAriaLabel,\n  isCloseDisabled = false,\n  ...props\n}: TabProps) => {\n  const preventedEvents = inoperableEvents.reduce(\n    (handlers, eventToPrevent) => ({\n      ...handlers,\n      [eventToPrevent]: (event: React.SyntheticEvent<HTMLButtonElement>) => {\n        event.preventDefault();\n      }\n    }),\n    {}\n  );\n  const { mountOnEnter, localActiveKey, unmountOnExit, uniqueId, handleTabClick, handleTabClose } = React.useContext(\n    TabsContext\n  );\n  let ariaControls = tabContentId ? `${tabContentId}` : `pf-tab-section-${eventKey}-${childId || uniqueId}`;\n  if ((mountOnEnter || unmountOnExit) && eventKey !== localActiveKey) {\n    ariaControls = undefined;\n  }\n  const isButtonElement = Boolean(!href);\n  const getDefaultTabIdx = () => {\n    if (isDisabled) {\n      return isButtonElement ? null : -1;\n    } else if (isAriaDisabled) {\n      return null;\n    }\n  };\n\n  const tabButton = (\n    <TabButton\n      parentInnerRef={innerRef}\n      className={css(\n        styles.tabsLink,\n        isDisabled && href && styles.modifiers.disabled,\n        isAriaDisabled && styles.modifiers.ariaDisabled\n      )}\n      disabled={isButtonElement ? isDisabled : null}\n      aria-disabled={isDisabled || isAriaDisabled}\n      tabIndex={getDefaultTabIdx()}\n      onClick={(event: any) => handleTabClick(event, eventKey, tabContentRef)}\n      {...(isAriaDisabled ? preventedEvents : null)}\n      id={`pf-tab-${eventKey}-${childId || uniqueId}`}\n      aria-controls={ariaControls}\n      tabContentRef={tabContentRef}\n      ouiaId={childOuiaId}\n      href={href}\n      role=\"tab\"\n      aria-selected={eventKey === localActiveKey}\n      {...props}\n    >\n      {title}\n    </TabButton>\n  );\n\n  return (\n    <li\n      className={css(\n        styles.tabsItem,\n        eventKey === localActiveKey && styles.modifiers.current,\n        handleTabClose && styles.modifiers.action,\n        handleTabClose && (isDisabled || isAriaDisabled) && styles.modifiers.disabled,\n        childClassName\n      )}\n      role=\"presentation\"\n    >\n      {tooltip ? <Tooltip {...tooltip.props}>{tabButton}</Tooltip> : tabButton}\n      {handleTabClose !== undefined && (\n        <span className={css(styles.tabsItemClose)}>\n          <Button\n            variant=\"plain\"\n            aria-label={closeButtonAriaLabel || 'Close tab'}\n            onClick={(event: any) => handleTabClose(event, eventKey, tabContentRef)}\n            isDisabled={isCloseDisabled}\n          >\n            <span className={css(styles.tabsItemCloseIcon)}>\n              <TimesIcon />\n            </span>\n          </Button>\n        </span>\n      )}\n    </li>\n  );\n};\n\nexport const Tab = React.forwardRef((props: TabProps, ref: React.Ref<any>) => <TabBase innerRef={ref} {...props} />);\nTab.displayName = 'Tab';\n"]},"metadata":{},"sourceType":"module"}