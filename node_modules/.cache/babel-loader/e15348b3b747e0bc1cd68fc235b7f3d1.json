{"ast":null,"code":"import { top, bottom, left, right } from '../enums';\nimport detectOverflow from '../utils/detectOverflow';\n/**\n * @param overflow\n * @param rect\n * @param preventedOffsets\n */\n\nfunction getSideOffsets(overflow, rect) {\n  let preventedOffsets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    x: 0,\n    y: 0\n  };\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n/**\n * @param overflow\n */\n\n\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(side => overflow[side] >= 0);\n}\n/**\n *\n */\n\n\nfunction hide(_ref) {\n  let {\n    state,\n    name\n  } = _ref;\n  const referenceRect = state.rects.reference;\n  const popperRect = state.rects.popper;\n  const preventedOffsets = state.modifiersData.preventOverflow;\n  const referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  const popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  const referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  const popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  const isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  const hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets,\n    popperEscapeOffsets,\n    isReferenceHidden,\n    hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n}\n\nexport default {\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n};","map":{"version":3,"mappings":"AAEA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,KAA5B,QAAyC,UAAzC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AAEA;;;;;;AAKA,SAASC,cAAT,CAAwBC,QAAxB,EAA8CC,IAA9C,EAAoG;EAAA,IAA1CC,gBAA0C,uEAAd;IAAEC,CAAC,EAAE,CAAL;IAAQC,CAAC,EAAE;EAAX,CAAc;EAClG,OAAO;IACLV,GAAG,EAAEM,QAAQ,CAACN,GAAT,GAAeO,IAAI,CAACI,MAApB,GAA6BH,gBAAgB,CAACE,CAD9C;IAELP,KAAK,EAAEG,QAAQ,CAACH,KAAT,GAAiBI,IAAI,CAACK,KAAtB,GAA8BJ,gBAAgB,CAACC,CAFjD;IAGLR,MAAM,EAAEK,QAAQ,CAACL,MAAT,GAAkBM,IAAI,CAACI,MAAvB,GAAgCH,gBAAgB,CAACE,CAHpD;IAILR,IAAI,EAAEI,QAAQ,CAACJ,IAAT,GAAgBK,IAAI,CAACK,KAArB,GAA6BJ,gBAAgB,CAACC;EAJ/C,CAAP;AAMD;AAED;;;;;AAGA,SAASI,qBAAT,CAA+BP,QAA/B,EAAmD;EACjD,OAAO,CAACN,GAAD,EAAMG,KAAN,EAAaF,MAAb,EAAqBC,IAArB,EAA2BY,IAA3B,CAAgCC,IAAI,IAAIT,QAAQ,CAACS,IAAD,CAAR,IAAkB,CAA1D,CAAP;AACD;AAED;;;;;AAGA,SAASC,IAAT,OAAoD;EAAA,IAAtC;IAAEC,KAAF;IAASC;EAAT,CAAsC;EAClD,MAAMC,aAAa,GAAGF,KAAK,CAACG,KAAN,CAAYC,SAAlC;EACA,MAAMC,UAAU,GAAGL,KAAK,CAACG,KAAN,CAAYG,MAA/B;EACA,MAAMf,gBAAgB,GAAGS,KAAK,CAACO,aAAN,CAAoBC,eAA7C;EAEA,MAAMC,iBAAiB,GAAGtB,cAAc,CAACa,KAAD,EAAQ;IAC9CU,cAAc,EAAE;EAD8B,CAAR,CAAxC;EAGA,MAAMC,iBAAiB,GAAGxB,cAAc,CAACa,KAAD,EAAQ;IAC9CY,WAAW,EAAE;EADiC,CAAR,CAAxC;EAIA,MAAMC,wBAAwB,GAAGzB,cAAc,CAACqB,iBAAD,EAAoBP,aAApB,CAA/C;EACA,MAAMY,mBAAmB,GAAG1B,cAAc,CAACuB,iBAAD,EAAoBN,UAApB,EAAgCd,gBAAhC,CAA1C;EAEA,MAAMwB,iBAAiB,GAAGnB,qBAAqB,CAACiB,wBAAD,CAA/C;EACA,MAAMG,gBAAgB,GAAGpB,qBAAqB,CAACkB,mBAAD,CAA9C;EAEAd,KAAK,CAACO,aAAN,CAAoBN,IAApB,IAA4B;IAC1BY,wBAD0B;IAE1BC,mBAF0B;IAG1BC,iBAH0B;IAI1BC;EAJ0B,CAA5B;EAOAhB,KAAK,CAACiB,UAAN,CAAiBX,MAAjB,GAAuBY,gCAClBlB,KAAK,CAACiB,UAAN,CAAiBX,MADC,GACK;IAC1B,gCAAgCS,iBADN;IAE1B,uBAAuBC;EAFG,CADL,CAAvB;AAKD;;AAID,eAAe;EACbf,IAAI,EAAE,MADO;EAEbkB,OAAO,EAAE,IAFI;EAGbC,KAAK,EAAE,MAHM;EAIbC,gBAAgB,EAAE,CAAC,iBAAD,CAJL;EAKbC,EAAE,EAAEvB;AALS,CAAf","names":["top","bottom","left","right","detectOverflow","getSideOffsets","overflow","rect","preventedOffsets","x","y","height","width","isAnySideFullyClipped","some","side","hide","state","name","referenceRect","rects","reference","popperRect","popper","modifiersData","preventOverflow","referenceOverflow","elementContext","popperAltOverflow","altBoundary","referenceClippingOffsets","popperEscapeOffsets","isReferenceHidden","hasPopperEscaped","attributes","Object","enabled","phase","requiresIfExists","fn"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/modifiers/hide.ts"],"sourcesContent":["// @ts-nocheck\nimport { ModifierArguments, Modifier, Rect, SideObject, Offsets } from '../types';\nimport { top, bottom, left, right } from '../enums';\nimport detectOverflow from '../utils/detectOverflow';\n\n/**\n * @param overflow\n * @param rect\n * @param preventedOffsets\n */\nfunction getSideOffsets(overflow: SideObject, rect: Rect, preventedOffsets: Offsets = { x: 0, y: 0 }): SideObject {\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\n/**\n * @param overflow\n */\nfunction isAnySideFullyClipped(overflow: SideObject): boolean {\n  return [top, right, bottom, left].some(side => overflow[side] >= 0);\n}\n\n/**\n *\n */\nfunction hide({ state, name }: ModifierArguments<{}>) {\n  const referenceRect = state.rects.reference;\n  const popperRect = state.rects.popper;\n  const preventedOffsets = state.modifiersData.preventOverflow;\n\n  const referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  const popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n\n  const referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  const popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n\n  const isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  const hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n\n  state.modifiersData[name] = {\n    referenceClippingOffsets,\n    popperEscapeOffsets,\n    isReferenceHidden,\n    hasPopperEscaped\n  };\n\n  state.attributes.popper = {\n    ...state.attributes.popper,\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  };\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport type HideModifier = Modifier<'hide', {}>;\nexport default {\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n} as HideModifier;\n"]},"metadata":{},"sourceType":"module"}