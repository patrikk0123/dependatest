{"ast":null,"code":"import _toConsumableArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { getUniqueId } from '../../helpers';\nimport { flattenTree, flattenTreeWithFolders, filterFolders, filterTreeItems, filterTreeItemsWithoutFolders, filterRestTreeItems } from './treeUtils';\nimport { DualListSelectorControlsWrapper } from './DualListSelectorControlsWrapper';\nimport { DualListSelectorControl } from './DualListSelectorControl';\nimport { DualListSelectorContext } from './DualListSelectorContext';\nexport var DualListSelector = /*#__PURE__*/function (_React$Component) {\n  _inherits(DualListSelector, _React$Component);\n\n  var _super = _createSuper(DualListSelector);\n\n  function DualListSelector(props) {\n    var _this;\n\n    _classCallCheck(this, DualListSelector);\n\n    _this = _super.call(this, props);\n    _this.addAllButtonRef = React.createRef();\n    _this.addSelectedButtonRef = React.createRef();\n    _this.removeSelectedButtonRef = React.createRef();\n    _this.removeAllButtonRef = React.createRef();\n\n    _this.onFilterUpdate = function (newFilteredOptions, paneType, isSearchReset) {\n      var isTree = _this.props.isTree;\n\n      if (paneType === 'available') {\n        if (isSearchReset) {\n          _this.setState({\n            availableFilteredOptions: null,\n            availableTreeFilteredOptions: null\n          });\n\n          return;\n        }\n\n        if (isTree) {\n          _this.setState({\n            availableTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)\n          });\n        } else {\n          _this.setState({\n            availableFilteredOptions: newFilteredOptions\n          });\n        }\n      } else if (paneType === 'chosen') {\n        if (isSearchReset) {\n          _this.setState({\n            chosenFilteredOptions: null,\n            chosenTreeFilteredOptions: null\n          });\n\n          return;\n        }\n\n        if (isTree) {\n          _this.setState({\n            chosenTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)\n          });\n        } else {\n          _this.setState({\n            chosenFilteredOptions: newFilteredOptions\n          });\n        }\n      }\n    };\n\n    _this.addAllVisible = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newAvailable = [];\n        var movedOptions = prevState.availableFilteredOptions || prevState.availableOptions;\n        prevState.availableOptions.forEach(function (value) {\n          if (movedOptions.indexOf(value) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newAvailable.push(value);\n          }\n        });\n        var newChosen = [].concat(_toConsumableArray(prevState.chosenOptions), itemsToRemove);\n        _this.props.addAll && _this.props.addAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          availableOptions: newAvailable,\n          chosenOptionsSelected: [],\n          availableOptionsSelected: []\n        };\n      });\n    };\n\n    _this.addAllTreeVisible = function () {\n      _this.setState(function (prevState) {\n        var movedOptions = prevState.availableTreeFilteredOptions || flattenTreeWithFolders(prevState.availableOptions);\n        var newAvailable = prevState.availableOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, movedOptions);\n        });\n        var currChosen = flattenTree(prevState.chosenOptions);\n        var nextChosenOptions = currChosen.concat(movedOptions);\n\n        var newChosen = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextChosenOptions);\n        });\n\n        _this.props.addAll && _this.props.addAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          chosenFilteredOptions: newChosen,\n          availableOptions: newAvailable,\n          availableFilteredOptions: newAvailable,\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: []\n        };\n      });\n    };\n\n    _this.addSelected = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newAvailable = [];\n        prevState.availableOptions.forEach(function (value, index) {\n          if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newAvailable.push(value);\n          }\n        });\n        var newChosen = [].concat(_toConsumableArray(prevState.chosenOptions), itemsToRemove);\n        _this.props.addSelected && _this.props.addSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          availableOptions: newAvailable\n        };\n      });\n    };\n\n    _this.addTreeSelected = function () {\n      _this.setState(function (prevState) {\n        // Remove selected available nodes from current available nodes\n        var newAvailable = prevState.availableOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, prevState.availableTreeOptionsChecked);\n        }); // Get next chosen options from current + new nodes and remap from base\n\n        var currChosen = flattenTree(prevState.chosenOptions);\n        var nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsChecked);\n\n        var newChosen = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextChosenOptions);\n        });\n\n        _this.props.addSelected && _this.props.addSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: [],\n          availableOptions: newAvailable,\n          chosenOptions: newChosen\n        };\n      });\n    };\n\n    _this.removeAllVisible = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newChosen = [];\n        var movedOptions = prevState.chosenFilteredOptions || prevState.chosenOptions;\n        prevState.chosenOptions.forEach(function (value) {\n          if (movedOptions.indexOf(value) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newChosen.push(value);\n          }\n        });\n        var newAvailable = [].concat(_toConsumableArray(prevState.availableOptions), itemsToRemove);\n        _this.props.removeAll && _this.props.removeAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          availableOptions: newAvailable,\n          chosenOptionsSelected: [],\n          availableOptionsSelected: []\n        };\n      });\n    };\n\n    _this.removeAllTreeVisible = function () {\n      _this.setState(function (prevState) {\n        var movedOptions = prevState.chosenTreeFilteredOptions || flattenTreeWithFolders(prevState.chosenOptions);\n        var newChosen = prevState.chosenOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, movedOptions);\n        });\n        var currAvailable = flattenTree(prevState.availableOptions);\n        var nextAvailableOptions = currAvailable.concat(movedOptions);\n\n        var newAvailable = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextAvailableOptions);\n        });\n\n        _this.props.removeAll && _this.props.removeAll(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptions: newChosen,\n          availableOptions: newAvailable,\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: []\n        };\n      });\n    };\n\n    _this.removeSelected = function () {\n      _this.setState(function (prevState) {\n        var itemsToRemove = [];\n        var newChosen = [];\n        prevState.chosenOptions.forEach(function (value, index) {\n          if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n            itemsToRemove.push(value);\n          } else {\n            newChosen.push(value);\n          }\n        });\n        var newAvailable = [].concat(_toConsumableArray(prevState.availableOptions), itemsToRemove);\n        _this.props.removeSelected && _this.props.removeSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          chosenOptionsSelected: [],\n          availableOptionsSelected: [],\n          chosenOptions: newChosen,\n          availableOptions: newAvailable\n        };\n      });\n    };\n\n    _this.removeTreeSelected = function () {\n      _this.setState(function (prevState) {\n        // Remove selected chosen nodes from current chosen nodes\n        var newChosen = prevState.chosenOptions.map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterRestTreeItems(item, prevState.chosenTreeOptionsChecked);\n        }); // Get next chosen options from current and remap from base\n\n        var currAvailable = flattenTree(prevState.availableOptions);\n        var nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsChecked);\n\n        var newAvailable = _this.createMergedCopy().map(function (opt) {\n          return Object.assign({}, opt);\n        }).filter(function (item) {\n          return filterTreeItemsWithoutFolders(item, nextAvailableOptions);\n        });\n\n        _this.props.removeSelected && _this.props.removeSelected(newAvailable, newChosen);\n        _this.props.onListChange && _this.props.onListChange(newAvailable, newChosen);\n        return {\n          availableTreeOptionsChecked: [],\n          chosenTreeOptionsChecked: [],\n          availableOptions: newAvailable,\n          chosenOptions: newChosen\n        };\n      });\n    };\n\n    _this.onOptionSelect = function (e, index, isChosen,\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    id, itemData, parentData\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ) {\n      _this.setState(function (prevState) {\n        var originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n        var updatedArray = null;\n\n        if (originalArray.indexOf(index) !== -1) {\n          updatedArray = originalArray.filter(function (value) {\n            return value !== index;\n          });\n        } else {\n          updatedArray = [].concat(_toConsumableArray(originalArray), [index]);\n        }\n\n        return {\n          chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n          availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n        };\n      });\n\n      _this.props.onOptionSelect && _this.props.onOptionSelect(e, index, isChosen, id, itemData, parentData);\n    };\n\n    _this.isChecked = function (treeItem, isChosen) {\n      return isChosen ? _this.state.chosenTreeOptionsChecked.includes(treeItem.id) : _this.state.availableTreeOptionsChecked.includes(treeItem.id);\n    };\n\n    _this.areAllDescendantsChecked = function (treeItem, isChosen) {\n      return treeItem.children ? treeItem.children.every(function (child) {\n        return _this.areAllDescendantsChecked(child, isChosen);\n      }) : _this.isChecked(treeItem, isChosen);\n    };\n\n    _this.areSomeDescendantsChecked = function (treeItem, isChosen) {\n      return treeItem.children ? treeItem.children.some(function (child) {\n        return _this.areSomeDescendantsChecked(child, isChosen);\n      }) : _this.isChecked(treeItem, isChosen);\n    };\n\n    _this.mapChecked = function (item, isChosen) {\n      var hasCheck = _this.areAllDescendantsChecked(item, isChosen);\n\n      item.isChecked = false;\n\n      if (hasCheck) {\n        item.isChecked = true;\n      } else {\n        var hasPartialCheck = _this.areSomeDescendantsChecked(item, isChosen);\n\n        if (hasPartialCheck) {\n          item.isChecked = null;\n        }\n      }\n\n      if (item.children) {\n        return Object.assign(Object.assign({}, item), {\n          children: item.children.map(function (child) {\n            return _this.mapChecked(child, isChosen);\n          })\n        });\n      }\n\n      return item;\n    };\n\n    _this.onTreeOptionCheck = function (evt, isChecked, itemData, isChosen) {\n      var _this$state = _this.state,\n          availableOptions = _this$state.availableOptions,\n          availableTreeFilteredOptions = _this$state.availableTreeFilteredOptions,\n          chosenOptions = _this$state.chosenOptions,\n          chosenTreeFilteredOptions = _this$state.chosenTreeFilteredOptions;\n      var panelOptions;\n\n      if (isChosen) {\n        if (chosenTreeFilteredOptions) {\n          panelOptions = chosenOptions.map(function (opt) {\n            return Object.assign({}, opt);\n          }).filter(function (item) {\n            return filterTreeItemsWithoutFolders(item, chosenTreeFilteredOptions);\n          });\n        } else {\n          panelOptions = chosenOptions;\n        }\n      } else {\n        if (availableTreeFilteredOptions) {\n          panelOptions = availableOptions.map(function (opt) {\n            return Object.assign({}, opt);\n          }).filter(function (item) {\n            return filterTreeItemsWithoutFolders(item, availableTreeFilteredOptions);\n          });\n        } else {\n          panelOptions = availableOptions;\n        }\n      }\n\n      var checkedOptionTree = panelOptions.map(function (opt) {\n        return Object.assign({}, opt);\n      }).filter(function (item) {\n        return filterTreeItems(item, [itemData.id]);\n      });\n      var flatTree = flattenTreeWithFolders(checkedOptionTree);\n      var prevChecked = isChosen ? _this.state.chosenTreeOptionsChecked : _this.state.availableTreeOptionsChecked;\n      var updatedChecked = [];\n\n      if (isChecked) {\n        updatedChecked = prevChecked.concat(flatTree.filter(function (id) {\n          return !prevChecked.includes(id);\n        }));\n      } else {\n        updatedChecked = prevChecked.filter(function (id) {\n          return !flatTree.includes(id);\n        });\n      }\n\n      _this.setState(function (prevState) {\n        return {\n          availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,\n          chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked\n        };\n      }, function () {\n        _this.props.onOptionCheck && _this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);\n      });\n    };\n\n    _this.state = {\n      availableOptions: _toConsumableArray(_this.props.availableOptions),\n      availableOptionsSelected: [],\n      availableFilteredOptions: null,\n      availableTreeFilteredOptions: null,\n      chosenOptions: _toConsumableArray(_this.props.chosenOptions),\n      chosenOptionsSelected: [],\n      chosenFilteredOptions: null,\n      chosenTreeFilteredOptions: null,\n      availableTreeOptionsChecked: [],\n      chosenTreeOptionsChecked: []\n    };\n    return _this;\n  } // If the DualListSelector uses trees, concat the two initial arrays and merge duplicate folder IDs\n\n\n  _createClass(DualListSelector, [{\n    key: \"createMergedCopy\",\n    value: function createMergedCopy() {\n      var copyOfAvailable = JSON.parse(JSON.stringify(this.props.availableOptions));\n      var copyOfChosen = JSON.parse(JSON.stringify(this.props.chosenOptions));\n      return this.props.isTree ? Object.values(copyOfAvailable.concat(copyOfChosen).reduce(function (mapObj, item) {\n        var key = item.id;\n\n        if (mapObj[key]) {\n          var _mapObj$key$children;\n\n          // If map already has an item ID, add the dupe ID's children to the existing map\n          (_mapObj$key$children = mapObj[key].children).push.apply(_mapObj$key$children, _toConsumableArray(item.children));\n        } else {\n          // Else clone the item data\n          mapObj[key] = Object.assign({}, item);\n        }\n\n        return mapObj;\n      }, {})) : null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (JSON.stringify(this.props.availableOptions) !== JSON.stringify(this.state.availableOptions) || JSON.stringify(this.props.chosenOptions) !== JSON.stringify(this.state.chosenOptions)) {\n        this.setState({\n          availableOptions: _toConsumableArray(this.props.availableOptions),\n          chosenOptions: _toConsumableArray(this.props.chosenOptions)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          availableOptionsTitle = _a.availableOptionsTitle,\n          availableOptionsActions = _a.availableOptionsActions,\n          availableOptionsSearchAriaLabel = _a.availableOptionsSearchAriaLabel,\n          className = _a.className,\n          children = _a.children,\n          chosenOptionsTitle = _a.chosenOptionsTitle,\n          chosenOptionsActions = _a.chosenOptionsActions,\n          chosenOptionsSearchAriaLabel = _a.chosenOptionsSearchAriaLabel,\n          filterOption = _a.filterOption,\n          isSearchable = _a.isSearchable,\n          chosenOptionsStatus = _a.chosenOptionsStatus,\n          availableOptionsStatus = _a.availableOptionsStatus,\n          controlsAriaLabel = _a.controlsAriaLabel,\n          addAllAriaLabel = _a.addAllAriaLabel,\n          addSelectedAriaLabel = _a.addSelectedAriaLabel,\n          removeSelectedAriaLabel = _a.removeSelectedAriaLabel,\n          removeAllAriaLabel = _a.removeAllAriaLabel,\n          consumerPassedAvailableOptions = _a.availableOptions,\n          consumerPassedChosenOptions = _a.chosenOptions,\n          removeSelected = _a.removeSelected,\n          addAll = _a.addAll,\n          removeAll = _a.removeAll,\n          addSelected = _a.addSelected,\n          onListChange = _a.onListChange,\n          onAvailableOptionsSearchInputChanged = _a.onAvailableOptionsSearchInputChanged,\n          onChosenOptionsSearchInputChanged = _a.onChosenOptionsSearchInputChanged,\n          onOptionSelect = _a.onOptionSelect,\n          onOptionCheck = _a.onOptionCheck,\n          id = _a.id,\n          isTree = _a.isTree,\n          isDisabled = _a.isDisabled,\n          addAllTooltip = _a.addAllTooltip,\n          addAllTooltipProps = _a.addAllTooltipProps,\n          addSelectedTooltip = _a.addSelectedTooltip,\n          addSelectedTooltipProps = _a.addSelectedTooltipProps,\n          removeAllTooltip = _a.removeAllTooltip,\n          removeAllTooltipProps = _a.removeAllTooltipProps,\n          removeSelectedTooltip = _a.removeSelectedTooltip,\n          removeSelectedTooltipProps = _a.removeSelectedTooltipProps,\n          props = __rest(_a, [\"availableOptionsTitle\", \"availableOptionsActions\", \"availableOptionsSearchAriaLabel\", \"className\", \"children\", \"chosenOptionsTitle\", \"chosenOptionsActions\", \"chosenOptionsSearchAriaLabel\", \"filterOption\", \"isSearchable\", \"chosenOptionsStatus\", \"availableOptionsStatus\", \"controlsAriaLabel\", \"addAllAriaLabel\", \"addSelectedAriaLabel\", \"removeSelectedAriaLabel\", \"removeAllAriaLabel\", \"availableOptions\", \"chosenOptions\", \"removeSelected\", \"addAll\", \"removeAll\", \"addSelected\", \"onListChange\", \"onAvailableOptionsSearchInputChanged\", \"onChosenOptionsSearchInputChanged\", \"onOptionSelect\", \"onOptionCheck\", \"id\", \"isTree\", \"isDisabled\", \"addAllTooltip\", \"addAllTooltipProps\", \"addSelectedTooltip\", \"addSelectedTooltipProps\", \"removeAllTooltip\", \"removeAllTooltipProps\", \"removeSelectedTooltip\", \"removeSelectedTooltipProps\"]);\n\n      var _this$state2 = this.state,\n          availableOptions = _this$state2.availableOptions,\n          chosenOptions = _this$state2.chosenOptions,\n          chosenOptionsSelected = _this$state2.chosenOptionsSelected,\n          availableOptionsSelected = _this$state2.availableOptionsSelected,\n          chosenTreeOptionsChecked = _this$state2.chosenTreeOptionsChecked,\n          availableTreeOptionsChecked = _this$state2.availableTreeOptionsChecked;\n      var availableOptionsStatusToDisplay = availableOptionsStatus || (isTree ? \"\".concat(filterFolders(availableOptions, availableTreeOptionsChecked).length, \" of \").concat(flattenTree(availableOptions).length, \" items selected\") : \"\".concat(availableOptionsSelected.length, \" of \").concat(availableOptions.length, \" items selected\"));\n      var chosenOptionsStatusToDisplay = chosenOptionsStatus || (isTree ? \"\".concat(filterFolders(chosenOptions, chosenTreeOptionsChecked).length, \" of \").concat(flattenTree(chosenOptions).length, \" items selected\") : \"\".concat(chosenOptionsSelected.length, \" of \").concat(chosenOptions.length, \" items selected\"));\n      var available = isTree ? availableOptions.map(function (item) {\n        return _this2.mapChecked(item, false);\n      }) : availableOptions;\n      var chosen = isTree ? chosenOptions.map(function (item) {\n        return _this2.mapChecked(item, true);\n      }) : chosenOptions;\n      return React.createElement(DualListSelectorContext.Provider, {\n        value: {\n          isTree: isTree\n        }\n      }, React.createElement(\"div\", Object.assign({\n        className: css(styles.dualListSelector, className),\n        id: id\n      }, props), children === '' ? React.createElement(React.Fragment, null, React.createElement(DualListSelectorPane, {\n        isSearchable: isSearchable,\n        onFilterUpdate: this.onFilterUpdate,\n        searchInputAriaLabel: availableOptionsSearchAriaLabel,\n        filterOption: filterOption,\n        onSearchInputChanged: onAvailableOptionsSearchInputChanged,\n        status: availableOptionsStatusToDisplay,\n        title: availableOptionsTitle,\n        options: available,\n        selectedOptions: isTree ? availableTreeOptionsChecked : availableOptionsSelected,\n        onOptionSelect: this.onOptionSelect,\n        onOptionCheck: function onOptionCheck(e, isChecked, itemData) {\n          return _this2.onTreeOptionCheck(e, isChecked, itemData, false);\n        },\n        actions: availableOptionsActions,\n        id: \"\".concat(id, \"-available-pane\"),\n        isDisabled: isDisabled\n      }), React.createElement(DualListSelectorControlsWrapper, {\n        \"aria-label\": controlsAriaLabel\n      }, React.createElement(DualListSelectorControl, {\n        isDisabled: (isTree ? availableTreeOptionsChecked.length === 0 : availableOptionsSelected.length === 0) || isDisabled,\n        onClick: isTree ? this.addTreeSelected : this.addSelected,\n        ref: this.addSelectedButtonRef,\n        \"aria-label\": addSelectedAriaLabel,\n        tooltipContent: addSelectedTooltip,\n        tooltipProps: addSelectedTooltipProps\n      }, React.createElement(AngleRightIcon, null)), React.createElement(DualListSelectorControl, {\n        isDisabled: availableOptions.length === 0 || isDisabled,\n        onClick: isTree ? this.addAllTreeVisible : this.addAllVisible,\n        ref: this.addAllButtonRef,\n        \"aria-label\": addAllAriaLabel,\n        tooltipContent: addAllTooltip,\n        tooltipProps: addAllTooltipProps\n      }, React.createElement(AngleDoubleRightIcon, null)), React.createElement(DualListSelectorControl, {\n        isDisabled: chosenOptions.length === 0 || isDisabled,\n        onClick: isTree ? this.removeAllTreeVisible : this.removeAllVisible,\n        \"aria-label\": removeAllAriaLabel,\n        ref: this.removeAllButtonRef,\n        tooltipContent: removeAllTooltip,\n        tooltipProps: removeAllTooltipProps\n      }, React.createElement(AngleDoubleLeftIcon, null)), React.createElement(DualListSelectorControl, {\n        onClick: isTree ? this.removeTreeSelected : this.removeSelected,\n        isDisabled: (isTree ? chosenTreeOptionsChecked.length === 0 : chosenOptionsSelected.length === 0) || isDisabled,\n        ref: this.removeSelectedButtonRef,\n        \"aria-label\": removeSelectedAriaLabel,\n        tooltipContent: removeSelectedTooltip,\n        tooltipProps: removeSelectedTooltipProps\n      }, React.createElement(AngleLeftIcon, null))), React.createElement(DualListSelectorPane, {\n        isChosen: true,\n        isSearchable: isSearchable,\n        onFilterUpdate: this.onFilterUpdate,\n        searchInputAriaLabel: chosenOptionsSearchAriaLabel,\n        filterOption: filterOption,\n        onSearchInputChanged: onChosenOptionsSearchInputChanged,\n        title: chosenOptionsTitle,\n        status: chosenOptionsStatusToDisplay,\n        options: chosen,\n        selectedOptions: isTree ? chosenTreeOptionsChecked : chosenOptionsSelected,\n        onOptionSelect: this.onOptionSelect,\n        onOptionCheck: function onOptionCheck(e, isChecked, itemData) {\n          return _this2.onTreeOptionCheck(e, isChecked, itemData, true);\n        },\n        actions: chosenOptionsActions,\n        id: \"\".concat(id, \"-chosen-pane\"),\n        isDisabled: isDisabled\n      })) : children));\n    }\n  }]);\n\n  return DualListSelector;\n}(React.Component);\nDualListSelector.displayName = 'DualListSelector';\nDualListSelector.defaultProps = {\n  children: '',\n  availableOptions: [],\n  availableOptionsTitle: 'Available options',\n  availableOptionsSearchAriaLabel: 'Available search input',\n  chosenOptions: [],\n  chosenOptionsTitle: 'Chosen options',\n  chosenOptionsSearchAriaLabel: 'Chosen search input',\n  id: getUniqueId('dual-list-selector'),\n  controlsAriaLabel: 'Selector controls',\n  addAllAriaLabel: 'Add all',\n  addSelectedAriaLabel: 'Add selected',\n  removeSelectedAriaLabel: 'Remove selected',\n  removeAllAriaLabel: 'Remove all',\n  isTree: false,\n  isDisabled: false\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","AngleDoubleLeftIcon","AngleLeftIcon","AngleDoubleRightIcon","AngleRightIcon","DualListSelectorPane","getUniqueId","flattenTree","flattenTreeWithFolders","filterFolders","filterTreeItems","filterTreeItemsWithoutFolders","filterRestTreeItems","DualListSelectorControlsWrapper","DualListSelectorControl","DualListSelectorContext","DualListSelector","props","createRef","newFilteredOptions","paneType","isSearchReset","isTree","setState","availableFilteredOptions","availableTreeFilteredOptions","chosenFilteredOptions","chosenTreeFilteredOptions","itemsToRemove","newAvailable","movedOptions","prevState","availableOptions","forEach","indexOf","value","push","newChosen","chosenOptions","addAll","onListChange","chosenOptionsSelected","availableOptionsSelected","map","Object","assign","opt","filter","item","currChosen","nextChosenOptions","concat","createMergedCopy","availableTreeOptionsChecked","chosenTreeOptionsChecked","index","addSelected","removeAll","currAvailable","nextAvailableOptions","removeSelected","e","isChosen","id","itemData","parentData","originalArray","updatedArray","onOptionSelect","treeItem","state","includes","children","every","areAllDescendantsChecked","child","isChecked","some","areSomeDescendantsChecked","hasCheck","hasPartialCheck","mapChecked","evt","panelOptions","checkedOptionTree","flatTree","prevChecked","updatedChecked","onOptionCheck","copyOfAvailable","JSON","parse","stringify","copyOfChosen","values","reduce","mapObj","key","availableOptionsTitle","_a","availableOptionsActions","availableOptionsSearchAriaLabel","className","chosenOptionsTitle","chosenOptionsActions","chosenOptionsSearchAriaLabel","filterOption","isSearchable","chosenOptionsStatus","availableOptionsStatus","controlsAriaLabel","addAllAriaLabel","addSelectedAriaLabel","removeSelectedAriaLabel","removeAllAriaLabel","consumerPassedAvailableOptions","consumerPassedChosenOptions","onAvailableOptionsSearchInputChanged","onChosenOptionsSearchInputChanged","isDisabled","addAllTooltip","addAllTooltipProps","addSelectedTooltip","addSelectedTooltipProps","removeAllTooltip","removeAllTooltipProps","removeSelectedTooltip","removeSelectedTooltipProps","__rest","availableOptionsStatusToDisplay","length","chosenOptionsStatusToDisplay","available","chosen","Provider","dualListSelector","onFilterUpdate","searchInputAriaLabel","onSearchInputChanged","status","title","options","selectedOptions","onTreeOptionCheck","actions","onClick","addTreeSelected","ref","addSelectedButtonRef","tooltipContent","tooltipProps","addAllTreeVisible","addAllVisible","addAllButtonRef","removeAllTreeVisible","removeAllVisible","removeAllButtonRef","removeTreeSelected","removeSelectedButtonRef","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelector.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { DualListSelectorPane } from './DualListSelectorPane';\nimport { getUniqueId, PickOptional } from '../../helpers';\nimport { DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport {\n  flattenTree,\n  flattenTreeWithFolders,\n  filterFolders,\n  filterTreeItems,\n  filterTreeItemsWithoutFolders,\n  filterRestTreeItems\n} from './treeUtils';\nimport { DualListSelectorControlsWrapper } from './DualListSelectorControlsWrapper';\nimport { DualListSelectorControl } from './DualListSelectorControl';\nimport { DualListSelectorContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorProps {\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Id of the dual list selector. */\n  id?: string;\n  /** Flag indicating if the dual list selector uses trees instead of simple lists */\n  isTree?: boolean;\n  /** Flag indicating if the dual list selector is in a disabled state */\n  isDisabled?: boolean;\n  /** Content to be rendered in the dual list selector. Panes & controls will not be built dynamically when children are provided. */\n  children?: React.ReactNode;\n  /** Title applied to the dynamically built available options pane. */\n  availableOptionsTitle?: string;\n  /** Options to display in the dynamically built available options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. */\n  availableOptions?: React.ReactNode[] | DualListSelectorTreeItemData[];\n  /** Status message to display above the dynamically built available options pane. */\n  availableOptionsStatus?: string;\n  /** Actions to be displayed above the dynamically built available options pane. */\n  availableOptionsActions?: React.ReactNode[];\n  /** Title applied to the dynamically built chosen options pane. */\n  chosenOptionsTitle?: string;\n  /** Options to display in the dynamically built chosen options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format. */\n  chosenOptions?: React.ReactNode[] | DualListSelectorTreeItemData[];\n  /** Status message to display above the dynamically built chosen options pane.*/\n  chosenOptionsStatus?: string;\n  /** Actions to be displayed above the dynamically built chosen options pane. */\n  chosenOptionsActions?: React.ReactNode[];\n  /** Accessible label for the dynamically built controls between the two panes. */\n  controlsAriaLabel?: string;\n  /** Optional callback for the dynamically built add selected button */\n  addSelected?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built add selected button */\n  addSelectedAriaLabel?: string;\n  /** Tooltip content for the dynamically built add selected button */\n  addSelectedTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built add selected tooltip */\n  addSelectedTooltipProps?: any;\n  /** Callback fired every time dynamically built options are chosen or removed */\n  onListChange?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Optional callback for the dynamically built add all button */\n  addAll?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built add all button */\n  addAllAriaLabel?: string;\n  /** Tooltip content for the dynamically built add all button */\n  addAllTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built add all tooltip */\n  addAllTooltipProps?: any;\n  /** Optional callback for the dynamically built remove selected button */\n  removeSelected?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built remove selected button */\n  removeSelectedAriaLabel?: string;\n  /** Tooltip content for the dynamically built remove selected button */\n  removeSelectedTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built remove selected tooltip  */\n  removeSelectedTooltipProps?: any;\n  /** Optional callback for the dynamically built remove all button */\n  removeAll?: (newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void;\n  /** Accessible label for the dynamically built remove all button */\n  removeAllAriaLabel?: string;\n  /** Tooltip content for the dynamically built remove all button */\n  removeAllTooltip?: React.ReactNode;\n  /** Additonal tooltip properties for the dynamically built remove all tooltip */\n  removeAllTooltipProps?: any;\n  /** Optional callback fired when a dynamically built option is selected */\n  onOptionSelect?: (\n    e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    id: string,\n    itemData: any,\n    parentData: any\n  ) => void;\n  /** Optional callback fired when a dynamically built option is checked */\n  onOptionCheck?: (\n    e: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    checked: boolean,\n    checkedId: string,\n    newCheckedItems: string[]\n  ) => void;\n  /** Flag indicating a search bar should be included above both the dynamically built available and chosen panes. */\n  isSearchable?: boolean;\n  /** Accessible label for the search input on the dynamically built available options pane. */\n  availableOptionsSearchAriaLabel?: string;\n  /** A callback for when the search input value for the dynamically built available options changes. */\n  onAvailableOptionsSearchInputChanged?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Accessible label for the search input on the dynamically built chosen options pane. */\n  chosenOptionsSearchAriaLabel?: string;\n  /** A callback for when the search input value for the dynamically built chosen options changes. */\n  onChosenOptionsSearchInputChanged?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Optional filter function for custom filtering based on search string. Used with a dynamically built search input. */\n  filterOption?: (option: React.ReactNode, input: string) => boolean;\n}\n\ninterface DualListSelectorState {\n  availableOptions: React.ReactNode[];\n  availableOptionsSelected: number[];\n  availableFilteredOptions: React.ReactNode[];\n  chosenOptions: React.ReactNode[];\n  chosenOptionsSelected: number[];\n  chosenFilteredOptions: React.ReactNode[];\n  availableTreeFilteredOptions: string[];\n  availableTreeOptionsChecked: string[];\n  chosenTreeOptionsChecked: string[];\n  chosenTreeFilteredOptions: string[];\n}\n\nexport class DualListSelector extends React.Component<DualListSelectorProps, DualListSelectorState> {\n  static displayName = 'DualListSelector';\n  private addAllButtonRef = React.createRef<HTMLButtonElement>();\n  private addSelectedButtonRef = React.createRef<HTMLButtonElement>();\n  private removeSelectedButtonRef = React.createRef<HTMLButtonElement>();\n  private removeAllButtonRef = React.createRef<HTMLButtonElement>();\n  static defaultProps: PickOptional<DualListSelectorProps> = {\n    children: '',\n    availableOptions: [] as React.ReactNode[],\n    availableOptionsTitle: 'Available options',\n    availableOptionsSearchAriaLabel: 'Available search input',\n    chosenOptions: [] as React.ReactNode[],\n    chosenOptionsTitle: 'Chosen options',\n    chosenOptionsSearchAriaLabel: 'Chosen search input',\n    id: getUniqueId('dual-list-selector'),\n    controlsAriaLabel: 'Selector controls',\n    addAllAriaLabel: 'Add all',\n    addSelectedAriaLabel: 'Add selected',\n    removeSelectedAriaLabel: 'Remove selected',\n    removeAllAriaLabel: 'Remove all',\n    isTree: false,\n    isDisabled: false\n  };\n\n  // If the DualListSelector uses trees, concat the two initial arrays and merge duplicate folder IDs\n  private createMergedCopy() {\n    const copyOfAvailable = JSON.parse(JSON.stringify(this.props.availableOptions));\n    const copyOfChosen = JSON.parse(JSON.stringify(this.props.chosenOptions));\n\n    return this.props.isTree\n      ? Object.values(\n          (copyOfAvailable as DualListSelectorTreeItemData[])\n            .concat(copyOfChosen as DualListSelectorTreeItemData[])\n            .reduce((mapObj: any, item: DualListSelectorTreeItemData) => {\n              const key = item.id;\n              if (mapObj[key]) {\n                // If map already has an item ID, add the dupe ID's children to the existing map\n                mapObj[key].children.push(...item.children);\n              } else {\n                // Else clone the item data\n                mapObj[key] = { ...item };\n              }\n              return mapObj;\n            }, {})\n        )\n      : null;\n  }\n\n  constructor(props: DualListSelectorProps) {\n    super(props);\n    this.state = {\n      availableOptions: [...this.props.availableOptions],\n      availableOptionsSelected: [],\n      availableFilteredOptions: null,\n      availableTreeFilteredOptions: null,\n      chosenOptions: [...this.props.chosenOptions],\n      chosenOptionsSelected: [],\n      chosenFilteredOptions: null,\n      chosenTreeFilteredOptions: null,\n      availableTreeOptionsChecked: [],\n      chosenTreeOptionsChecked: []\n    };\n  }\n\n  componentDidUpdate() {\n    if (\n      JSON.stringify(this.props.availableOptions) !== JSON.stringify(this.state.availableOptions) ||\n      JSON.stringify(this.props.chosenOptions) !== JSON.stringify(this.state.chosenOptions)\n    ) {\n      this.setState({\n        availableOptions: [...this.props.availableOptions],\n        chosenOptions: [...this.props.chosenOptions]\n      });\n    }\n  }\n\n  onFilterUpdate = (newFilteredOptions: React.ReactNode[], paneType: string, isSearchReset: boolean) => {\n    const { isTree } = this.props;\n    if (paneType === 'available') {\n      if (isSearchReset) {\n        this.setState({\n          availableFilteredOptions: null,\n          availableTreeFilteredOptions: null\n        });\n        return;\n      }\n      if (isTree) {\n        this.setState({\n          availableTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions as DualListSelectorTreeItemData[])\n        });\n      } else {\n        this.setState({\n          availableFilteredOptions: newFilteredOptions as React.ReactNode[]\n        });\n      }\n    } else if (paneType === 'chosen') {\n      if (isSearchReset) {\n        this.setState({\n          chosenFilteredOptions: null,\n          chosenTreeFilteredOptions: null\n        });\n        return;\n      }\n      if (isTree) {\n        this.setState({\n          chosenTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions as DualListSelectorTreeItemData[])\n        });\n      } else {\n        this.setState({\n          chosenFilteredOptions: newFilteredOptions as React.ReactNode[]\n        });\n      }\n    }\n  };\n\n  addAllVisible = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newAvailable = [] as React.ReactNode[];\n      const movedOptions = prevState.availableFilteredOptions || prevState.availableOptions;\n      prevState.availableOptions.forEach(value => {\n        if (movedOptions.indexOf(value) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newAvailable.push(value);\n        }\n      });\n\n      const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n      this.props.addAll && this.props.addAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        availableOptions: newAvailable,\n        chosenOptionsSelected: [],\n        availableOptionsSelected: []\n      };\n    });\n  };\n\n  addAllTreeVisible = () => {\n    this.setState(prevState => {\n      const movedOptions =\n        prevState.availableTreeFilteredOptions ||\n        flattenTreeWithFolders(prevState.availableOptions as DualListSelectorTreeItemData[]);\n      const newAvailable = prevState.availableOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterRestTreeItems(item as DualListSelectorTreeItemData, movedOptions));\n\n      const currChosen = flattenTree(prevState.chosenOptions as DualListSelectorTreeItemData[]);\n      const nextChosenOptions = currChosen.concat(movedOptions);\n      const newChosen = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextChosenOptions));\n\n      this.props.addAll && this.props.addAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        chosenFilteredOptions: newChosen,\n        availableOptions: newAvailable,\n        availableFilteredOptions: newAvailable,\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: []\n      };\n    });\n  };\n\n  addSelected = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newAvailable = [] as React.ReactNode[];\n      prevState.availableOptions.forEach((value, index) => {\n        if (prevState.availableOptionsSelected.indexOf(index) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newAvailable.push(value);\n        }\n      });\n\n      const newChosen = [...prevState.chosenOptions, ...itemsToRemove];\n      this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptionsSelected: [],\n        availableOptionsSelected: [],\n        chosenOptions: newChosen,\n        availableOptions: newAvailable\n      };\n    });\n  };\n\n  addTreeSelected = () => {\n    this.setState(prevState => {\n      // Remove selected available nodes from current available nodes\n      const newAvailable = prevState.availableOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item =>\n          filterRestTreeItems(item as DualListSelectorTreeItemData, prevState.availableTreeOptionsChecked)\n        );\n\n      // Get next chosen options from current + new nodes and remap from base\n      const currChosen = flattenTree(prevState.chosenOptions as DualListSelectorTreeItemData[]);\n      const nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsChecked);\n      const newChosen = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextChosenOptions));\n\n      this.props.addSelected && this.props.addSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: [],\n        availableOptions: newAvailable,\n        chosenOptions: newChosen\n      };\n    });\n  };\n\n  removeAllVisible = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newChosen = [] as React.ReactNode[];\n      const movedOptions = prevState.chosenFilteredOptions || prevState.chosenOptions;\n      prevState.chosenOptions.forEach(value => {\n        if (movedOptions.indexOf(value) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newChosen.push(value);\n        }\n      });\n\n      const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n      this.props.removeAll && this.props.removeAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        availableOptions: newAvailable,\n        chosenOptionsSelected: [],\n        availableOptionsSelected: []\n      };\n    });\n  };\n\n  removeAllTreeVisible = () => {\n    this.setState(prevState => {\n      const movedOptions =\n        prevState.chosenTreeFilteredOptions ||\n        flattenTreeWithFolders(prevState.chosenOptions as DualListSelectorTreeItemData[]);\n\n      const newChosen = prevState.chosenOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterRestTreeItems(item as DualListSelectorTreeItemData, movedOptions));\n      const currAvailable = flattenTree(prevState.availableOptions as DualListSelectorTreeItemData[]);\n      const nextAvailableOptions = currAvailable.concat(movedOptions);\n      const newAvailable = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextAvailableOptions));\n\n      this.props.removeAll && this.props.removeAll(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptions: newChosen,\n        availableOptions: newAvailable,\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: []\n      };\n    });\n  };\n\n  removeSelected = () => {\n    this.setState(prevState => {\n      const itemsToRemove = [] as React.ReactNode[];\n      const newChosen = [] as React.ReactNode[];\n      prevState.chosenOptions.forEach((value, index) => {\n        if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {\n          itemsToRemove.push(value);\n        } else {\n          newChosen.push(value);\n        }\n      });\n\n      const newAvailable = [...prevState.availableOptions, ...itemsToRemove];\n      this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        chosenOptionsSelected: [],\n        availableOptionsSelected: [],\n        chosenOptions: newChosen,\n        availableOptions: newAvailable\n      };\n    });\n  };\n\n  removeTreeSelected = () => {\n    this.setState(prevState => {\n      // Remove selected chosen nodes from current chosen nodes\n      const newChosen = prevState.chosenOptions\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterRestTreeItems(item as DualListSelectorTreeItemData, prevState.chosenTreeOptionsChecked));\n\n      // Get next chosen options from current and remap from base\n      const currAvailable = flattenTree(prevState.availableOptions as DualListSelectorTreeItemData[]);\n      const nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsChecked);\n      const newAvailable = this.createMergedCopy()\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, nextAvailableOptions));\n\n      this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);\n      this.props.onListChange && this.props.onListChange(newAvailable, newChosen);\n\n      return {\n        availableTreeOptionsChecked: [],\n        chosenTreeOptionsChecked: [],\n        availableOptions: newAvailable,\n        chosenOptions: newChosen\n      };\n    });\n  };\n\n  onOptionSelect = (\n    e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    id?: string,\n    itemData?: any,\n    parentData?: any\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ) => {\n    this.setState(prevState => {\n      const originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;\n\n      let updatedArray = null;\n      if (originalArray.indexOf(index) !== -1) {\n        updatedArray = originalArray.filter(value => value !== index);\n      } else {\n        updatedArray = [...originalArray, index];\n      }\n\n      return {\n        chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,\n        availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray\n      };\n    });\n\n    this.props.onOptionSelect && this.props.onOptionSelect(e, index, isChosen, id, itemData, parentData);\n  };\n\n  isChecked = (treeItem: DualListSelectorTreeItemData, isChosen: boolean) =>\n    isChosen\n      ? this.state.chosenTreeOptionsChecked.includes(treeItem.id)\n      : this.state.availableTreeOptionsChecked.includes(treeItem.id);\n  areAllDescendantsChecked = (treeItem: DualListSelectorTreeItemData, isChosen: boolean): boolean =>\n    treeItem.children\n      ? treeItem.children.every(child => this.areAllDescendantsChecked(child, isChosen))\n      : this.isChecked(treeItem, isChosen);\n  areSomeDescendantsChecked = (treeItem: DualListSelectorTreeItemData, isChosen: boolean): boolean =>\n    treeItem.children\n      ? treeItem.children.some(child => this.areSomeDescendantsChecked(child, isChosen))\n      : this.isChecked(treeItem, isChosen);\n\n  mapChecked = (item: DualListSelectorTreeItemData, isChosen: boolean): DualListSelectorTreeItemData => {\n    const hasCheck = this.areAllDescendantsChecked(item, isChosen);\n    item.isChecked = false;\n\n    if (hasCheck) {\n      item.isChecked = true;\n    } else {\n      const hasPartialCheck = this.areSomeDescendantsChecked(item, isChosen);\n      if (hasPartialCheck) {\n        item.isChecked = null;\n      }\n    }\n\n    if (item.children) {\n      return {\n        ...item,\n        children: item.children.map(child => this.mapChecked(child, isChosen))\n      };\n    }\n    return item;\n  };\n\n  onTreeOptionCheck = (\n    evt: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData,\n    isChosen: boolean\n  ) => {\n    const { availableOptions, availableTreeFilteredOptions, chosenOptions, chosenTreeFilteredOptions } = this.state;\n    let panelOptions;\n    if (isChosen) {\n      if (chosenTreeFilteredOptions) {\n        panelOptions = chosenOptions\n          .map(opt => Object.assign({}, opt))\n          .filter(item =>\n            filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, chosenTreeFilteredOptions)\n          );\n      } else {\n        panelOptions = chosenOptions;\n      }\n    } else {\n      if (availableTreeFilteredOptions) {\n        panelOptions = availableOptions\n          .map(opt => Object.assign({}, opt))\n          .filter(item =>\n            filterTreeItemsWithoutFolders(item as DualListSelectorTreeItemData, availableTreeFilteredOptions)\n          );\n      } else {\n        panelOptions = availableOptions;\n      }\n    }\n    const checkedOptionTree = panelOptions\n      .map(opt => Object.assign({}, opt))\n      .filter(item => filterTreeItems(item as DualListSelectorTreeItemData, [itemData.id]));\n    const flatTree = flattenTreeWithFolders(checkedOptionTree as DualListSelectorTreeItemData[]);\n\n    const prevChecked = isChosen ? this.state.chosenTreeOptionsChecked : this.state.availableTreeOptionsChecked;\n    let updatedChecked = [] as string[];\n    if (isChecked) {\n      updatedChecked = prevChecked.concat(flatTree.filter(id => !prevChecked.includes(id)));\n    } else {\n      updatedChecked = prevChecked.filter(id => !flatTree.includes(id));\n    }\n\n    this.setState(\n      prevState => ({\n        availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,\n        chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked\n      }),\n      () => {\n        this.props.onOptionCheck && this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);\n      }\n    );\n  };\n\n  render() {\n    const {\n      availableOptionsTitle,\n      availableOptionsActions,\n      availableOptionsSearchAriaLabel,\n      className,\n      children,\n      chosenOptionsTitle,\n      chosenOptionsActions,\n      chosenOptionsSearchAriaLabel,\n      filterOption,\n      isSearchable,\n      chosenOptionsStatus,\n      availableOptionsStatus,\n      controlsAriaLabel,\n      addAllAriaLabel,\n      addSelectedAriaLabel,\n      removeSelectedAriaLabel,\n      removeAllAriaLabel,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      availableOptions: consumerPassedAvailableOptions,\n      chosenOptions: consumerPassedChosenOptions,\n      removeSelected,\n      addAll,\n      removeAll,\n      addSelected,\n      onListChange,\n      onAvailableOptionsSearchInputChanged,\n      onChosenOptionsSearchInputChanged,\n      onOptionSelect,\n      onOptionCheck,\n      id,\n      isTree,\n      isDisabled,\n      addAllTooltip,\n      addAllTooltipProps,\n      addSelectedTooltip,\n      addSelectedTooltipProps,\n      removeAllTooltip,\n      removeAllTooltipProps,\n      removeSelectedTooltip,\n      removeSelectedTooltipProps,\n      ...props\n    } = this.props;\n    const {\n      availableOptions,\n      chosenOptions,\n      chosenOptionsSelected,\n      availableOptionsSelected,\n      chosenTreeOptionsChecked,\n      availableTreeOptionsChecked\n    } = this.state;\n    const availableOptionsStatusToDisplay =\n      availableOptionsStatus ||\n      (isTree\n        ? `${\n            filterFolders(availableOptions as DualListSelectorTreeItemData[], availableTreeOptionsChecked).length\n          } of ${flattenTree(availableOptions as DualListSelectorTreeItemData[]).length} items selected`\n        : `${availableOptionsSelected.length} of ${availableOptions.length} items selected`);\n    const chosenOptionsStatusToDisplay =\n      chosenOptionsStatus ||\n      (isTree\n        ? `${filterFolders(chosenOptions as DualListSelectorTreeItemData[], chosenTreeOptionsChecked).length} of ${\n            flattenTree(chosenOptions as DualListSelectorTreeItemData[]).length\n          } items selected`\n        : `${chosenOptionsSelected.length} of ${chosenOptions.length} items selected`);\n\n    const available = isTree\n      ? availableOptions.map(item => this.mapChecked(item as DualListSelectorTreeItemData, false))\n      : availableOptions;\n    const chosen = isTree\n      ? chosenOptions.map(item => this.mapChecked(item as DualListSelectorTreeItemData, true))\n      : chosenOptions;\n\n    return (\n      <DualListSelectorContext.Provider value={{ isTree }}>\n        <div className={css(styles.dualListSelector, className)} id={id} {...props}>\n          {children === '' ? (\n            <>\n              <DualListSelectorPane\n                isSearchable={isSearchable}\n                onFilterUpdate={this.onFilterUpdate}\n                searchInputAriaLabel={availableOptionsSearchAriaLabel}\n                filterOption={filterOption}\n                onSearchInputChanged={onAvailableOptionsSearchInputChanged}\n                status={availableOptionsStatusToDisplay}\n                title={availableOptionsTitle}\n                options={available}\n                selectedOptions={isTree ? availableTreeOptionsChecked : availableOptionsSelected}\n                onOptionSelect={this.onOptionSelect}\n                onOptionCheck={(e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, false)}\n                actions={availableOptionsActions}\n                id={`${id}-available-pane`}\n                isDisabled={isDisabled}\n              />\n              <DualListSelectorControlsWrapper aria-label={controlsAriaLabel}>\n                <DualListSelectorControl\n                  isDisabled={\n                    (isTree ? availableTreeOptionsChecked.length === 0 : availableOptionsSelected.length === 0) ||\n                    isDisabled\n                  }\n                  onClick={isTree ? this.addTreeSelected : this.addSelected}\n                  ref={this.addSelectedButtonRef}\n                  aria-label={addSelectedAriaLabel}\n                  tooltipContent={addSelectedTooltip}\n                  tooltipProps={addSelectedTooltipProps}\n                >\n                  <AngleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                  isDisabled={availableOptions.length === 0 || isDisabled}\n                  onClick={isTree ? this.addAllTreeVisible : this.addAllVisible}\n                  ref={this.addAllButtonRef}\n                  aria-label={addAllAriaLabel}\n                  tooltipContent={addAllTooltip}\n                  tooltipProps={addAllTooltipProps}\n                >\n                  <AngleDoubleRightIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                  isDisabled={chosenOptions.length === 0 || isDisabled}\n                  onClick={isTree ? this.removeAllTreeVisible : this.removeAllVisible}\n                  aria-label={removeAllAriaLabel}\n                  ref={this.removeAllButtonRef}\n                  tooltipContent={removeAllTooltip}\n                  tooltipProps={removeAllTooltipProps}\n                >\n                  <AngleDoubleLeftIcon />\n                </DualListSelectorControl>\n                <DualListSelectorControl\n                  onClick={isTree ? this.removeTreeSelected : this.removeSelected}\n                  isDisabled={\n                    (isTree ? chosenTreeOptionsChecked.length === 0 : chosenOptionsSelected.length === 0) || isDisabled\n                  }\n                  ref={this.removeSelectedButtonRef}\n                  aria-label={removeSelectedAriaLabel}\n                  tooltipContent={removeSelectedTooltip}\n                  tooltipProps={removeSelectedTooltipProps}\n                >\n                  <AngleLeftIcon />\n                </DualListSelectorControl>\n              </DualListSelectorControlsWrapper>\n              <DualListSelectorPane\n                isChosen\n                isSearchable={isSearchable}\n                onFilterUpdate={this.onFilterUpdate}\n                searchInputAriaLabel={chosenOptionsSearchAriaLabel}\n                filterOption={filterOption}\n                onSearchInputChanged={onChosenOptionsSearchInputChanged}\n                title={chosenOptionsTitle}\n                status={chosenOptionsStatusToDisplay}\n                options={chosen}\n                selectedOptions={isTree ? chosenTreeOptionsChecked : chosenOptionsSelected}\n                onOptionSelect={this.onOptionSelect}\n                onOptionCheck={(e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, true)}\n                actions={chosenOptionsActions}\n                id={`${id}-chosen-pane`}\n                isDisabled={isDisabled}\n              />\n            </>\n          ) : (\n            children\n          )}\n        </div>\n      </DualListSelectorContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}