{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nexport var TreeViewRoot = /*#__PURE__*/function (_React$Component) {\n  _inherits(TreeViewRoot, _React$Component);\n\n  var _super = _createSuper(TreeViewRoot);\n\n  function TreeViewRoot() {\n    var _this;\n\n    _classCallCheck(this, TreeViewRoot);\n\n    _this = _super.apply(this, arguments);\n    _this.displayName = 'TreeViewRoot';\n    _this.treeRef = React.createRef();\n\n    _this.handleKeys = function (event) {\n      if (_this.treeRef.current !== event.target.closest('.pf-c-tree-view')) {\n        return;\n      }\n\n      var activeElement = document.activeElement;\n      var key = event.key;\n      var treeItems = Array.from(_this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')).filter(function (el) {\n        return !el.classList.contains('pf-m-disabled');\n      });\n\n      if (key === 'Space') {\n        document.activeElement.click();\n        event.preventDefault();\n      }\n\n      handleArrows(event, treeItems, function (element) {\n        return activeElement === element;\n      }, undefined, [], undefined, true, true);\n\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        var isExpandable = activeElement.firstElementChild.firstElementChild.classList.contains('pf-c-tree-view__node-toggle');\n        var isExpanded = activeElement.closest('li').classList.contains('pf-m-expanded');\n\n        if (key === 'ArrowLeft') {\n          if (isExpandable && isExpanded) {\n            activeElement.click();\n          } else {\n            var parentList = activeElement.closest('ul').parentElement;\n\n            if (parentList.tagName !== 'DIV') {\n              var parentButton = parentList.querySelector('button');\n              activeElement.tabIndex = -1;\n              parentButton.tabIndex = 0;\n              parentButton.focus();\n            }\n          }\n        } else {\n          if (isExpandable && !isExpanded) {\n            activeElement.tabIndex = -1;\n            activeElement.click();\n            var childElement = activeElement.closest('li').querySelector('ul > li').querySelector('button');\n            childElement.tabIndex = 0;\n            childElement.focus();\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    _this.handleKeysCheckbox = function (event) {\n      if (_this.treeRef.current !== event.target.closest('.pf-c-tree-view')) {\n        return;\n      }\n\n      var activeElement = document.activeElement;\n      var key = event.key;\n\n      if (key === 'Space') {\n        document.activeElement.click();\n        event.preventDefault();\n      }\n\n      var treeNodes = Array.from(_this.treeRef.current.getElementsByClassName('pf-c-tree-view__node'));\n      handleArrows(event, treeNodes, function (element) {\n        return element.contains(activeElement);\n      }, function (element) {\n        return element.querySelector('BUTTON,INPUT');\n      }, [], undefined, true, true);\n\n      if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n        if (key === 'ArrowLeft') {\n          if (activeElement.tagName === 'INPUT') {\n            activeElement.parentElement.previousSibling && activeElement.parentElement.previousSibling.focus();\n          } else if (activeElement.previousSibling) {\n            if (activeElement.previousElementSibling.tagName === 'SPAN') {\n              activeElement.previousSibling.firstChild.focus();\n            } else {\n              activeElement.previousSibling.focus();\n            }\n          }\n        } else {\n          if (activeElement.tagName === 'INPUT') {\n            activeElement.parentElement.nextSibling && activeElement.parentElement.nextSibling.focus();\n          } else if (activeElement.nextSibling) {\n            if (activeElement.nextElementSibling.tagName === 'SPAN') {\n              activeElement.nextSibling.firstChild.focus();\n            } else {\n              activeElement.nextSibling.focus();\n            }\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    _this.variantStyleModifiers = {\n      default: '',\n      compact: styles.modifiers.compact,\n      compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n    };\n    return _this;\n  }\n\n  _createClass(TreeViewRoot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (canUseDOM) {\n        window.addEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n      }\n\n      if (this.props.hasChecks) {\n        var firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0];\n\n        if (firstToggle) {\n          firstToggle.tabIndex = 0;\n        }\n\n        var firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n\n        if (firstInput) {\n          firstInput.tabIndex = 0;\n        }\n      } else {\n        this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')[0].tabIndex = 0;\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (canUseDOM) {\n        window.removeEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var _a = this.props,\n          children = _a.children,\n          hasChecks = _a.hasChecks,\n          hasGuides = _a.hasGuides,\n          variant = _a.variant,\n          className = _a.className,\n          props = __rest(_a, [\"children\", \"hasChecks\", \"hasGuides\", \"variant\", \"className\"]);\n\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className),\n        ref: this.treeRef\n      }, props), children);\n    }\n  }]);\n\n  return TreeViewRoot;\n}(React.Component);","map":{"version":3,"mappings":"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","names":["React","css","styles","canUseDOM","handleArrows","TreeViewRoot","createRef","event","treeRef","current","target","closest","activeElement","document","key","treeItems","Array","from","getElementsByClassName","filter","el","classList","contains","click","preventDefault","element","undefined","includes","isExpandable","firstElementChild","isExpanded","parentList","parentElement","tagName","parentButton","querySelector","tabIndex","focus","childElement","treeNodes","previousSibling","previousElementSibling","firstChild","nextSibling","nextElementSibling","default","compact","modifiers","compactNoBackground","noBackground","window","addEventListener","props","hasChecks","handleKeysCheckbox","handleKeys","firstToggle","firstInput","getElementsByTagName","removeEventListener","children","_a","hasGuides","variant","className","__rest","treeView","guides","variantStyleModifiers","ref","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/TreeView/TreeViewRoot.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\n\nexport interface TreeViewRootProps {\n  /** Child nodes of the tree view */\n  children: React.ReactNode;\n  /** Flag indicating if the tree view has checkboxes */\n  hasChecks?: boolean;\n  /** Flag indicating if tree view has guide lines. */\n  hasGuides?: boolean;\n  /** Variant presentation styles for the tree view. */\n  variant?: 'default' | 'compact' | 'compactNoBackground';\n  /** Class to add to add if not passed a parentItem */\n  className?: string;\n}\n\nexport class TreeViewRoot extends React.Component<TreeViewRootProps> {\n  displayName = 'TreeViewRoot';\n  private treeRef = React.createRef<HTMLDivElement>();\n\n  componentDidMount() {\n    if (canUseDOM) {\n      window.addEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n    }\n    if (this.props.hasChecks) {\n      const firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0] as HTMLElement;\n      if (firstToggle) {\n        firstToggle.tabIndex = 0;\n      }\n      const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0] as HTMLElement;\n      if (firstInput) {\n        firstInput.tabIndex = 0;\n      }\n    } else {\n      (this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')[0] as HTMLElement).tabIndex = 0;\n    }\n  }\n\n  componentWillUnmount() {\n    if (canUseDOM) {\n      window.removeEventListener('keydown', this.props.hasChecks ? this.handleKeysCheckbox : this.handleKeys);\n    }\n  }\n\n  handleKeys = (event: KeyboardEvent) => {\n    if (this.treeRef.current !== (event.target as HTMLElement).closest('.pf-c-tree-view')) {\n      return;\n    }\n    const activeElement = document.activeElement;\n    const key = event.key;\n    const treeItems = Array.from(this.treeRef.current.getElementsByClassName('pf-c-tree-view__node')).filter(\n      el => !el.classList.contains('pf-m-disabled')\n    );\n\n    if (key === 'Space') {\n      (document.activeElement as HTMLElement).click();\n      event.preventDefault();\n    }\n\n    handleArrows(\n      event,\n      treeItems,\n      (element: Element) => activeElement === element,\n      undefined,\n      [],\n      undefined,\n      true,\n      true\n    );\n\n    if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n      const isExpandable = activeElement.firstElementChild.firstElementChild.classList.contains(\n        'pf-c-tree-view__node-toggle'\n      );\n      const isExpanded = activeElement.closest('li').classList.contains('pf-m-expanded');\n      if (key === 'ArrowLeft') {\n        if (isExpandable && isExpanded) {\n          (activeElement as HTMLElement).click();\n        } else {\n          const parentList = activeElement.closest('ul').parentElement;\n          if (parentList.tagName !== 'DIV') {\n            const parentButton = parentList.querySelector('button');\n            (activeElement as HTMLElement).tabIndex = -1;\n            parentButton.tabIndex = 0;\n            parentButton.focus();\n          }\n        }\n      } else {\n        if (isExpandable && !isExpanded) {\n          (activeElement as HTMLElement).tabIndex = -1;\n          (activeElement as HTMLElement).click();\n          const childElement = activeElement\n            .closest('li')\n            .querySelector('ul > li')\n            .querySelector('button');\n          childElement.tabIndex = 0;\n          childElement.focus();\n        }\n      }\n      event.preventDefault();\n    }\n  };\n\n  handleKeysCheckbox = (event: KeyboardEvent) => {\n    if (this.treeRef.current !== (event.target as HTMLElement).closest('.pf-c-tree-view')) {\n      return;\n    }\n    const activeElement = document.activeElement;\n    const key = event.key;\n\n    if (key === 'Space') {\n      (document.activeElement as HTMLElement).click();\n      event.preventDefault();\n    }\n\n    const treeNodes = Array.from(this.treeRef.current.getElementsByClassName('pf-c-tree-view__node'));\n\n    handleArrows(\n      event,\n      treeNodes as HTMLElement[],\n      (element: Element) => element.contains(activeElement),\n      (element: Element) => element.querySelector('BUTTON,INPUT'),\n      [],\n      undefined,\n      true,\n      true\n    );\n\n    if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n      if (key === 'ArrowLeft') {\n        if (activeElement.tagName === 'INPUT') {\n          activeElement.parentElement.previousSibling &&\n            (activeElement.parentElement.previousSibling as HTMLElement).focus();\n        } else if (activeElement.previousSibling) {\n          if (activeElement.previousElementSibling.tagName === 'SPAN') {\n            (activeElement.previousSibling.firstChild as HTMLElement).focus();\n          } else {\n            (activeElement.previousSibling as HTMLElement).focus();\n          }\n        }\n      } else {\n        if (activeElement.tagName === 'INPUT') {\n          activeElement.parentElement.nextSibling && (activeElement.parentElement.nextSibling as HTMLElement).focus();\n        } else if (activeElement.nextSibling) {\n          if (activeElement.nextElementSibling.tagName === 'SPAN') {\n            (activeElement.nextSibling.firstChild as HTMLElement).focus();\n          } else {\n            (activeElement.nextSibling as HTMLElement).focus();\n          }\n        }\n      }\n      event.preventDefault();\n    }\n  };\n\n  variantStyleModifiers: { [key in TreeViewRootProps['variant']]: string | string[] } = {\n    default: '',\n    compact: styles.modifiers.compact,\n    compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n  };\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { children, hasChecks, hasGuides, variant, className, ...props } = this.props;\n    return (\n      <div\n        className={css(\n          styles.treeView,\n          hasGuides && styles.modifiers.guides,\n          this.variantStyleModifiers[variant],\n          className\n        )}\n        ref={this.treeRef}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}