{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Dropdown } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport { KebabToggle } from '@patternfly/react-core/dist/esm/components/Dropdown/KebabToggle';\nimport { DropdownItem } from '@patternfly/react-core/dist/esm/components/Dropdown/DropdownItem';\nimport { DropdownSeparator } from '@patternfly/react-core/dist/esm/components/Dropdown/DropdownSeparator';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\nimport { DropdownDirection, DropdownPosition } from '@patternfly/react-core/dist/esm/components/Dropdown/dropdownConstants';\nexport class ActionsColumn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.toggleRef = React.createRef();\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onClick = (event, onClick) => {\n      const {\n        rowData,\n        extraData\n      } = this.props; // Only prevent default if onClick is provided.  This allows href support.\n\n      if (onClick) {\n        event.preventDefault(); // tslint:disable-next-line:no-unused-expression\n\n        onClick(event, extraData && extraData.rowIndex, rowData, extraData);\n      }\n    };\n\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  render() {\n    const {\n      isOpen\n    } = this.state;\n    const {\n      items,\n      children,\n      dropdownPosition,\n      dropdownDirection,\n      isDisabled,\n      rowData,\n      actionsToggle\n    } = this.props;\n    const actionsToggleClone = actionsToggle ? actionsToggle({\n      onToggle: this.onToggle,\n      isOpen,\n      isDisabled\n    }) : React.createElement(KebabToggle, {\n      isDisabled: isDisabled,\n      onToggle: this.onToggle\n    });\n    return React.createElement(React.Fragment, null, items.filter(item => item.isOutsideDropdown) // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .map((_a, key) => {\n      var {\n        title,\n        itemKey,\n        onClick,\n        isOutsideDropdown\n      } = _a,\n          props = __rest(_a, [\"title\", \"itemKey\", \"onClick\", \"isOutsideDropdown\"]);\n\n      return typeof title === 'string' ? React.createElement(Button, Object.assign({\n        onClick: event => this.onClick(event, onClick)\n      }, props, {\n        isDisabled: isDisabled,\n        key: itemKey || `outside_dropdown_${key}`,\n        \"data-key\": itemKey || `outside_dropdown_${key}`\n      }), title) : React.cloneElement(title, Object.assign({\n        onClick,\n        isDisabled\n      }, props));\n    }), React.createElement(Dropdown, Object.assign({\n      toggle: actionsToggleClone,\n      position: dropdownPosition,\n      direction: dropdownDirection,\n      isOpen: isOpen,\n      dropdownItems: items.filter(item => !item.isOutsideDropdown).map((_a, key) => {\n        var {\n          title,\n          itemKey,\n          onClick,\n          isSeparator\n        } = _a,\n            props = __rest(_a, [\"title\", \"itemKey\", \"onClick\", \"isSeparator\"]);\n\n        return isSeparator ? React.createElement(DropdownSeparator, Object.assign({}, props, {\n          key: itemKey || key,\n          \"data-key\": itemKey || key\n        })) : React.createElement(DropdownItem, Object.assign({\n          component: \"button\",\n          onClick: event => {\n            this.onClick(event, onClick);\n            this.onToggle(!isOpen);\n          }\n        }, props, {\n          key: itemKey || key,\n          \"data-key\": itemKey || key\n        }), title);\n      }),\n      isPlain: true\n    }, rowData && rowData.actionProps)), children);\n  }\n\n}\nActionsColumn.displayName = 'ActionsColumn';\nActionsColumn.defaultProps = {\n  children: null,\n  items: [],\n  dropdownPosition: DropdownPosition.right,\n  dropdownDirection: DropdownDirection.down,\n  rowData: {},\n  extraData: {}\n};","map":{"version":3,"mappings":"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","names":["React","Dropdown","KebabToggle","DropdownItem","DropdownSeparator","Button","DropdownDirection","DropdownPosition","ActionsColumn","Component","constructor","props","createRef","isOpen","setState","event","onClick","rowData","extraData","preventDefault","rowIndex","state","render","items","children","dropdownPosition","dropdownDirection","isDisabled","actionsToggle","actionsToggleClone","onToggle","Fragment","filter","item","isOutsideDropdown","map","_a","key","title","itemKey","Object","cloneElement","toggle","position","direction","dropdownItems","isSeparator","component","isPlain","actionProps","right","down"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/ActionsColumn.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Dropdown } from '@patternfly/react-core/dist/esm/components/Dropdown';\nimport { KebabToggle } from '@patternfly/react-core/dist/esm/components/Dropdown/KebabToggle';\nimport { DropdownItem } from '@patternfly/react-core/dist/esm/components/Dropdown/DropdownItem';\nimport { DropdownSeparator } from '@patternfly/react-core/dist/esm/components/Dropdown/DropdownSeparator';\nimport { Button } from '@patternfly/react-core/dist/esm/components/Button/Button';\n\nimport {\n  DropdownDirection,\n  DropdownPosition\n} from '@patternfly/react-core/dist/esm/components/Dropdown/dropdownConstants';\n\nimport { IAction, IExtraData, IRowData } from './TableTypes';\n\nexport interface CustomActionsToggleProps {\n  onToggle: (isOpen: boolean) => void;\n  isOpen: boolean;\n  isDisabled: boolean;\n}\n\nexport interface ActionsColumnProps {\n  children?: React.ReactNode;\n  items: IAction[];\n  isDisabled?: boolean;\n  dropdownPosition?: DropdownPosition;\n  dropdownDirection?: DropdownDirection;\n  rowData?: IRowData;\n  extraData?: IExtraData;\n  actionsToggle?: (props: CustomActionsToggleProps) => React.ReactNode;\n}\n\nexport interface ActionsColumnState {\n  isOpen: boolean;\n}\n\nexport class ActionsColumn extends React.Component<ActionsColumnProps, ActionsColumnState> {\n  static displayName = 'ActionsColumn';\n  private toggleRef = React.createRef<HTMLButtonElement>();\n  static defaultProps = {\n    children: null as React.ReactNode,\n    items: [] as IAction[],\n    dropdownPosition: DropdownPosition.right,\n    dropdownDirection: DropdownDirection.down,\n    rowData: {} as IRowData,\n    extraData: {} as IExtraData\n  };\n  constructor(props: ActionsColumnProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  onToggle = (isOpen: boolean): void => {\n    this.setState({\n      isOpen\n    });\n  };\n\n  onClick = (\n    event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent,\n    onClick:\n      | ((event: React.MouseEvent, rowIndex: number | undefined, rowData: IRowData, extraData: IExtraData) => void)\n      | undefined\n  ): void => {\n    const { rowData, extraData } = this.props;\n    // Only prevent default if onClick is provided.  This allows href support.\n    if (onClick) {\n      event.preventDefault();\n      // tslint:disable-next-line:no-unused-expression\n      onClick(event as React.MouseEvent, extraData && extraData.rowIndex, rowData, extraData);\n    }\n  };\n\n  render() {\n    const { isOpen } = this.state;\n    const { items, children, dropdownPosition, dropdownDirection, isDisabled, rowData, actionsToggle } = this.props;\n\n    const actionsToggleClone = actionsToggle ? (\n      actionsToggle({ onToggle: this.onToggle, isOpen, isDisabled })\n    ) : (\n      <KebabToggle isDisabled={isDisabled} onToggle={this.onToggle} />\n    );\n\n    return (\n      <React.Fragment>\n        {items\n          .filter(item => item.isOutsideDropdown)\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          .map(({ title, itemKey, onClick, isOutsideDropdown, ...props }, key) =>\n            typeof title === 'string' ? (\n              <Button\n                onClick={event => this.onClick(event, onClick)}\n                {...(props as any)}\n                isDisabled={isDisabled}\n                key={itemKey || `outside_dropdown_${key}`}\n                data-key={itemKey || `outside_dropdown_${key}`}\n              >\n                {title}\n              </Button>\n            ) : (\n              React.cloneElement(title as React.ReactElement, { onClick, isDisabled, ...props })\n            )\n          )}\n        <Dropdown\n          toggle={actionsToggleClone}\n          position={dropdownPosition}\n          direction={dropdownDirection}\n          isOpen={isOpen}\n          dropdownItems={items\n            .filter(item => !item.isOutsideDropdown)\n            .map(({ title, itemKey, onClick, isSeparator, ...props }, key) =>\n              isSeparator ? (\n                <DropdownSeparator {...props} key={itemKey || key} data-key={itemKey || key} />\n              ) : (\n                <DropdownItem\n                  component=\"button\"\n                  onClick={event => {\n                    this.onClick(event, onClick);\n                    this.onToggle(!isOpen);\n                  }}\n                  {...props}\n                  key={itemKey || key}\n                  data-key={itemKey || key}\n                >\n                  {title}\n                </DropdownItem>\n              )\n            )}\n          isPlain\n          {...(rowData && rowData.actionProps)}\n        />\n        {children}\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}