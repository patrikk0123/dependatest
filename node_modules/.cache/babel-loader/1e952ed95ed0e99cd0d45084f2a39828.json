{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\nexport const FileUploadField = _a => {\n  var {\n    id,\n    type,\n    value = '',\n    filename = '',\n    onChange = () => {},\n    onBrowseButtonClick = () => {},\n    onClearButtonClick = () => {},\n    onTextAreaClick,\n    onTextChange,\n    onTextAreaBlur,\n    textAreaPlaceholder = '',\n    className = '',\n    isDisabled = false,\n    isReadOnly = false,\n    isLoading = false,\n    spinnerAriaValueText,\n    isRequired = false,\n    isDragActive = false,\n    validated = 'default',\n    'aria-label': ariaLabel = 'File upload',\n    filenamePlaceholder = 'Drag a file here or browse to upload',\n    filenameAriaLabel = filename ? 'Read only filename' : filenamePlaceholder,\n    browseButtonText = 'Browse...',\n    clearButtonText = 'Clear',\n    isClearButtonDisabled = !filename && !value,\n    containerRef = null,\n    allowEditingUploadedText = false,\n    hideDefaultPreview = false,\n    children = null\n  } = _a,\n      props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"onChange\", \"onBrowseButtonClick\", \"onClearButtonClick\", \"onTextAreaClick\", \"onTextChange\", \"onTextAreaBlur\", \"textAreaPlaceholder\", \"className\", \"isDisabled\", \"isReadOnly\", \"isLoading\", \"spinnerAriaValueText\", \"isRequired\", \"isDragActive\", \"validated\", 'aria-label', \"filenamePlaceholder\", \"filenameAriaLabel\", \"browseButtonText\", \"clearButtonText\", \"isClearButtonDisabled\", \"containerRef\", \"allowEditingUploadedText\", \"hideDefaultPreview\", \"children\"]);\n\n  const onTextAreaChange = (newValue, event) => {\n    onChange(newValue, filename, event);\n    onTextChange === null || onTextChange === void 0 ? void 0 : onTextChange(newValue);\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.fileUpload, isDragActive && styles.modifiers.dragHover, isLoading && styles.modifiers.loading, className),\n    ref: containerRef\n  }, props), React.createElement(\"div\", {\n    className: styles.fileUploadFileSelect\n  }, React.createElement(InputGroup, null, React.createElement(TextInput, {\n    isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n    : true,\n    isDisabled: isDisabled,\n    id: `${id}-filename`,\n    name: `${id}-filename`,\n    \"aria-label\": filenameAriaLabel,\n    placeholder: filenamePlaceholder,\n    \"aria-describedby\": `${id}-browse-button`,\n    value: filename\n  }), React.createElement(Button, {\n    id: `${id}-browse-button`,\n    variant: ButtonVariant.control,\n    onClick: onBrowseButtonClick,\n    isDisabled: isDisabled\n  }, browseButtonText), React.createElement(Button, {\n    variant: ButtonVariant.control,\n    isDisabled: isDisabled || isClearButtonDisabled,\n    onClick: onClearButtonClick\n  }, clearButtonText))), React.createElement(\"div\", {\n    className: styles.fileUploadFileDetails\n  }, !hideDefaultPreview && type === fileReaderType.text && React.createElement(TextArea, {\n    readOnly: isReadOnly || !!filename && !allowEditingUploadedText,\n    disabled: isDisabled,\n    isRequired: isRequired,\n    resizeOrientation: TextAreResizeOrientation.vertical,\n    validated: validated,\n    id: id,\n    name: id,\n    \"aria-label\": ariaLabel,\n    value: value,\n    onChange: onTextAreaChange,\n    onClick: onTextAreaClick,\n    onBlur: onTextAreaBlur,\n    placeholder: textAreaPlaceholder\n  }), isLoading && React.createElement(\"div\", {\n    className: styles.fileUploadFileDetailsSpinner\n  }, React.createElement(Spinner, {\n    size: spinnerSize.lg,\n    \"aria-valuetext\": spinnerAriaValueText\n  }))), children);\n};\nFileUploadField.displayName = 'FileUploadField';","map":{"version":3,"mappings":"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","names":["React","styles","css","InputGroup","TextInput","Button","ButtonVariant","TextArea","TextAreResizeOrientation","Spinner","spinnerSize","fileReaderType","FileUploadField","_a","id","type","value","filename","onChange","onBrowseButtonClick","onClearButtonClick","onTextAreaClick","onTextChange","onTextAreaBlur","textAreaPlaceholder","className","isDisabled","isReadOnly","isLoading","spinnerAriaValueText","isRequired","isDragActive","validated","ariaLabel","filenamePlaceholder","filenameAriaLabel","browseButtonText","clearButtonText","isClearButtonDisabled","containerRef","allowEditingUploadedText","hideDefaultPreview","children","props","onTextAreaChange","newValue","event","fileUpload","modifiers","dragHover","loading","ref","fileUploadFileSelect","name","placeholder","variant","control","onClick","fileUploadFileDetails","text","readOnly","disabled","resizeOrientation","vertical","onBlur","fileUploadFileDetailsSpinner","size","lg","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/FileUpload/FileUploadField.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FileUpload/file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextArea, TextAreResizeOrientation } from '../TextArea';\nimport { Spinner, spinnerSize } from '../Spinner';\nimport { fileReaderType } from '../../helpers/fileUtils';\n\nexport interface FileUploadFieldProps extends Omit<React.HTMLProps<HTMLDivElement>, 'value' | 'onChange'> {\n  /** Unique id for the TextArea, also used to generate ids for accessible labels */\n  id: string;\n  /** What type of file. Determines what is is expected by `value`\n   * (a string for 'text' and 'dataURL', or a File object otherwise). */\n  type?: 'text' | 'dataURL';\n  /** Value of the file's contents\n   * (string if text file, File object otherwise) */\n  value?: string | File;\n  /** Value to be shown in the read-only filename field. */\n  filename?: string;\n  /** A callback for when the TextArea value changes. */\n  onChange?: (\n    value: string,\n    filename: string,\n    event:\n      | React.ChangeEvent<HTMLTextAreaElement> // User typed in the TextArea\n      | React.MouseEvent<HTMLButtonElement, MouseEvent> // User clicked Clear button\n  ) => void;\n  /** Additional classes added to the FileUploadField container element. */\n  className?: string;\n  /** Flag to show if the field is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the field is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if a file is being loaded. */\n  isLoading?: boolean;\n  /** Aria-valuetext for the loading spinner */\n  spinnerAriaValueText?: string;\n  /** Flag to show if the field is required. */\n  isRequired?: boolean;\n  /** Value to indicate if the field is modified to show that validation state.\n   * If set to success, field will be modified to indicate valid state.\n   * If set to error,  field will be modified to indicate error state.\n   */\n  validated?: 'success' | 'error' | 'default';\n  /** Aria-label for the TextArea. */\n  'aria-label'?: string;\n  /** Placeholder string to display in the empty filename field */\n  filenamePlaceholder?: string;\n  /** Aria-label for the read-only filename field */\n  filenameAriaLabel?: string;\n  /** Text for the Browse button */\n  browseButtonText?: string;\n  /** Text for the Clear button */\n  clearButtonText?: string;\n  /** Flag to disable the Clear button */\n  isClearButtonDisabled?: boolean;\n  /** Flag to hide the built-in preview of the file (where available).\n   * If true, you can use children to render an alternate preview. */\n  hideDefaultPreview?: boolean;\n  /** Flag to allow editing of a text file's contents after it is selected from disk */\n  allowEditingUploadedText?: boolean;\n  /** Additional children to render after (or instead of) the file preview. */\n  children?: React.ReactNode;\n\n  // Props available in FileUploadField but not FileUpload:\n\n  /** A callback for when the Browse button is clicked. */\n  onBrowseButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** A callback for when the Clear button is clicked. */\n  onClearButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** A callback from when the text area is clicked. Can also be set via the onClick property of FileUpload. */\n  onTextAreaClick?: (event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void;\n  /** Flag to show if a file is being dragged over the field */\n  isDragActive?: boolean;\n  /** A reference object to attach to the FileUploadField container element. */\n  containerRef?: React.Ref<HTMLDivElement>;\n  /** Text area text changed */\n  onTextChange?: (text: string) => void;\n  /** Callback for when focus is lost on the text area field */\n  onTextAreaBlur?: (event?: any) => void;\n  /** Placeholder string to display in the empty text area field */\n  textAreaPlaceholder?: string;\n}\n\nexport const FileUploadField: React.FunctionComponent<FileUploadFieldProps> = ({\n  id,\n  type,\n  value = '',\n  filename = '',\n  onChange = () => {},\n  onBrowseButtonClick = () => {},\n  onClearButtonClick = () => {},\n  onTextAreaClick,\n  onTextChange,\n  onTextAreaBlur,\n  textAreaPlaceholder = '',\n  className = '',\n  isDisabled = false,\n  isReadOnly = false,\n  isLoading = false,\n  spinnerAriaValueText,\n  isRequired = false,\n  isDragActive = false,\n  validated = 'default' as 'success' | 'error' | 'default',\n  'aria-label': ariaLabel = 'File upload',\n  filenamePlaceholder = 'Drag a file here or browse to upload',\n  filenameAriaLabel = filename ? 'Read only filename' : filenamePlaceholder,\n  browseButtonText = 'Browse...',\n  clearButtonText = 'Clear',\n  isClearButtonDisabled = !filename && !value,\n  containerRef = null as React.Ref<HTMLDivElement>,\n  allowEditingUploadedText = false,\n  hideDefaultPreview = false,\n  children = null,\n\n  ...props\n}: FileUploadFieldProps) => {\n  const onTextAreaChange = (newValue: string, event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    onChange(newValue, filename, event);\n    onTextChange?.(newValue);\n  };\n  return (\n    <div\n      className={css(\n        styles.fileUpload,\n        isDragActive && styles.modifiers.dragHover,\n        isLoading && styles.modifiers.loading,\n        className\n      )}\n      ref={containerRef}\n      {...props}\n    >\n      <div className={styles.fileUploadFileSelect}>\n        <InputGroup>\n          <TextInput\n            isReadOnly // Always read-only regardless of isReadOnly prop (which is just for the TextArea)\n            isDisabled={isDisabled}\n            id={`${id}-filename`}\n            name={`${id}-filename`}\n            aria-label={filenameAriaLabel}\n            placeholder={filenamePlaceholder}\n            aria-describedby={`${id}-browse-button`}\n            value={filename}\n          />\n          <Button\n            id={`${id}-browse-button`}\n            variant={ButtonVariant.control}\n            onClick={onBrowseButtonClick}\n            isDisabled={isDisabled}\n          >\n            {browseButtonText}\n          </Button>\n          <Button\n            variant={ButtonVariant.control}\n            isDisabled={isDisabled || isClearButtonDisabled}\n            onClick={onClearButtonClick}\n          >\n            {clearButtonText}\n          </Button>\n        </InputGroup>\n      </div>\n      <div className={styles.fileUploadFileDetails}>\n        {!hideDefaultPreview && type === fileReaderType.text && (\n          <TextArea\n            readOnly={isReadOnly || (!!filename && !allowEditingUploadedText)}\n            disabled={isDisabled}\n            isRequired={isRequired}\n            resizeOrientation={TextAreResizeOrientation.vertical}\n            validated={validated}\n            id={id}\n            name={id}\n            aria-label={ariaLabel}\n            value={value as string}\n            onChange={onTextAreaChange}\n            onClick={onTextAreaClick}\n            onBlur={onTextAreaBlur}\n            placeholder={textAreaPlaceholder}\n          />\n        )}\n        {isLoading && (\n          <div className={styles.fileUploadFileDetailsSpinner}>\n            <Spinner size={spinnerSize.lg} aria-valuetext={spinnerAriaValueText} />\n          </div>\n        )}\n      </div>\n      {children}\n    </div>\n  );\n};\nFileUploadField.displayName = 'FileUploadField';\n"]},"metadata":{},"sourceType":"module"}