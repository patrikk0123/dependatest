{"ast":null,"code":"import _toConsumableArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { modifierPhases } from '../enums'; // source: https://stackoverflow.com/questions/49875255\n\n/**\n * @param modifiers\n */\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  /**\n   * @param modifier\n   */\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(_toConsumableArray(modifier.requires || []), _toConsumableArray(modifier.requiresIfExists || []));\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n/**\n * @param modifiers\n */\n\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}","map":{"version":3,"mappings":";AAEA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;;AACA;;;;AAGA,SAASC,KAAT,CAAeC,SAAf,EAAwB;EACtB,IAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;EACA,IAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;EACA,IAAMC,MAAM,GAAG,EAAf;EAEAL,SAAS,CAACM,OAAV,CAAkB,kBAAQ,EAAG;IAC3BL,GAAG,CAACM,GAAJ,CAAQC,QAAQ,CAACC,IAAjB,EAAuBD,QAAvB;EACD,CAFD,EALsB,CAStB;;EACA;;;;EAGA,SAASE,IAAT,CAAcF,QAAd,EAA0C;IACxCL,OAAO,CAACQ,GAAR,CAAYH,QAAQ,CAACC,IAArB;IAEA,IAAMG,QAAQ,gCAAQJ,QAAQ,CAACI,QAAT,IAAqB,EAA7B,sBAAsCJ,QAAQ,CAACK,gBAAT,IAA6B,EAAnE,EAAd;IAEAD,QAAQ,CAACN,OAAT,CAAiB,aAAG,EAAG;MACrB,IAAI,CAACH,OAAO,CAACW,GAAR,CAAYC,GAAZ,CAAL,EAAuB;QACrB,IAAMC,WAAW,GAAGf,GAAG,CAACgB,GAAJ,CAAQF,GAAR,CAApB;;QAEA,IAAIC,WAAJ,EAAiB;UACfN,IAAI,CAACM,WAAD,CAAJ;QACD;MACF;IACF,CARD;IAUAX,MAAM,CAACa,IAAP,CAAYV,QAAZ;EACD;;EAEDR,SAAS,CAACM,OAAV,CAAkB,kBAAQ,EAAG;IAC3B,IAAI,CAACH,OAAO,CAACW,GAAR,CAAYN,QAAQ,CAACC,IAArB,CAAL,EAAiC;MAC/B;MACAC,IAAI,CAACF,QAAD,CAAJ;IACD;EACF,CALD;EAOA,OAAOH,MAAP;AACD;AAED;;;;;AAGA,eAAc,SAAUc,cAAV,CAAyBnB,SAAzB,EAAwD;EACpE;EACA,IAAMoB,gBAAgB,GAAGrB,KAAK,CAACC,SAAD,CAA9B,CAFoE,CAIpE;;EACA,OAAOF,cAAc,CAACuB,MAAf,CACL,UAACC,GAAD,EAAMC,KAAN;IAAA,OAAgBD,GAAG,CAACE,MAAJ,CAAWJ,gBAAgB,CAACK,MAAjB,CAAwB,kBAAQ;MAAA,OAAIjB,QAAQ,CAACe,KAAT,KAAmBA,KAAvB;IAAA,CAAhC,CAAX,CAAhB;EAAA,CADK,EAEL,EAFK,CAAP;AAID","names":["modifierPhases","order","modifiers","map","Map","visited","Set","result","forEach","set","modifier","name","sort","add","requires","requiresIfExists","has","dep","depModifier","get","push","orderModifiers","orderedModifiers","reduce","acc","phase","concat","filter"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.ts"],"sourcesContent":["// @ts-nocheck\nimport { Modifier } from '../types';\nimport { modifierPhases } from '../enums';\n\n// source: https://stackoverflow.com/questions/49875255\n/**\n * @param modifiers\n */\nfunction order(modifiers) {\n  const map = new Map();\n  const visited = new Set();\n  const result = [];\n\n  modifiers.forEach(modifier => {\n    map.set(modifier.name, modifier);\n  });\n\n  // On visiting object, check for its dependencies and visit them recursively\n  /**\n   * @param modifier\n   */\n  function sort(modifier: Modifier<any, any>) {\n    visited.add(modifier.name);\n\n    const requires = [...(modifier.requires || []), ...(modifier.requiresIfExists || [])];\n\n    requires.forEach(dep => {\n      if (!visited.has(dep)) {\n        const depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n\n    result.push(modifier);\n  }\n\n  modifiers.forEach(modifier => {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n\n  return result;\n}\n\n/**\n * @param modifiers\n */\nexport default function orderModifiers(modifiers: Modifier<any, any>[]): Modifier<any, any>[] {\n  // order based on dependencies\n  const orderedModifiers = order(modifiers);\n\n  // order based on phase\n  return modifierPhases.reduce(\n    (acc, phase) => acc.concat(orderedModifiers.filter(modifier => modifier.phase === phase)),\n    []\n  );\n}\n"]},"metadata":{},"sourceType":"module"}