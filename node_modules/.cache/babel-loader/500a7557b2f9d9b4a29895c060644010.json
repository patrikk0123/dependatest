{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nexport var TableTextVariant;\n\n(function (TableTextVariant) {\n  TableTextVariant[\"div\"] = \"div\";\n  TableTextVariant[\"nav\"] = \"nav\";\n})(TableTextVariant || (TableTextVariant = {}));\n\nexport var WrapModifier;\n\n(function (WrapModifier) {\n  WrapModifier[\"wrap\"] = \"wrap\";\n  WrapModifier[\"nowrap\"] = \"nowrap\";\n  WrapModifier[\"truncate\"] = \"truncate\";\n  WrapModifier[\"breakWord\"] = \"breakWord\";\n  WrapModifier[\"fitContent\"] = \"fitContent\";\n})(WrapModifier || (WrapModifier = {}));\n\nexport const TableText = _a => {\n  var {\n    children = null,\n    className = '',\n    variant = 'span',\n    wrapModifier = null,\n    tooltip: tooltipProp = '',\n    tooltipProps = {},\n    onMouseEnter: onMouseEnterProp = () => {}\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"variant\", \"wrapModifier\", \"tooltip\", \"tooltipProps\", \"onMouseEnter\"]);\n\n  const Component = variant;\n  const [tooltip, setTooltip] = React.useState('');\n\n  const onMouseEnter = event => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      setTooltip(tooltipProp || event.target.innerText);\n    } else {\n      setTooltip('');\n    }\n\n    onMouseEnterProp(event);\n  };\n\n  const text = React.createElement(Component, Object.assign({\n    onMouseEnter: onMouseEnter,\n    className: css(className, wrapModifier && styles.modifiers[wrapModifier], styles.tableText)\n  }, props), children);\n  return tooltip !== '' ? React.createElement(Tooltip, Object.assign({\n    content: tooltip,\n    isVisible: true\n  }, tooltipProps), text) : text;\n};\nTableText.displayName = 'TableText';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,qDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,OAAT,QAAsC,4DAAtC;AAEA,WAAYC,gBAAZ;;AAAA,WAAYA,gBAAZ,EAA4B;EAC1BA;EACAA;AACD,CAHD,EAAYA,gBAAgB,KAAhBA,gBAAgB,MAA5B;;AAKA,WAAYC,YAAZ;;AAAA,WAAYA,YAAZ,EAAwB;EACtBA;EACAA;EACAA;EACAA;EACAA;AACD,CAND,EAAYA,YAAY,KAAZA,YAAY,MAAxB;;AAyBA,OAAO,MAAMC,SAAS,GAA6CC,EAAD,IAS7C;MAT8C;IACjEC,QAAQ,GAAG,IADsD;IAEjEC,SAAS,GAAG,EAFqD;IAGjEC,OAAO,GAAG,MAHuD;IAIjEC,YAAY,GAAG,IAJkD;IAKjEC,OAAO,EAAEC,WAAW,GAAG,EAL0C;IAMjEC,YAAY,GAAG,EANkD;IAOjEC,YAAY,EAAEC,gBAAgB,GAAG,MAAK,CAAG;EAPwB,IAOxBT;MACtCU,KAAK,cARyD,+FAQzD;;EAER,MAAMC,SAAS,GAAsCR,OAArD;EAEA,MAAM,CAACE,OAAD,EAAUO,UAAV,IAAwBnB,KAAK,CAACoB,QAAN,CAAe,EAAf,CAA9B;;EACA,MAAML,YAAY,GAAIM,KAAD,IAAe;IAClC,IAAIA,KAAK,CAACC,MAAN,CAAaC,WAAb,GAA2BF,KAAK,CAACC,MAAN,CAAaE,WAA5C,EAAyD;MACvDL,UAAU,CAACN,WAAW,IAAIQ,KAAK,CAACC,MAAN,CAAaG,SAA7B,CAAV;IACD,CAFD,MAEO;MACLN,UAAU,CAAC,EAAD,CAAV;IACD;;IACDH,gBAAgB,CAACK,KAAD,CAAhB;EACD,CAPD;;EASA,MAAMK,IAAI,GACR1B,oBAACkB,SAAD,EAAUS;IACRZ,YAAY,EAAEA,YADN;IAERN,SAAS,EAAEP,GAAG,CAACO,SAAD,EAAYE,YAAY,IAAIV,MAAM,CAAC2B,SAAP,CAAiBjB,YAAjB,CAA5B,EAA4DV,MAAM,CAAC4B,SAAnE;EAFN,GAGJZ,KAHI,CAAV,EAKGT,QALH,CADF;EAUA,OAAOI,OAAO,KAAK,EAAZ,GACLZ,oBAACG,OAAD,EAAQwB;IAACG,OAAO,EAAElB,OAAV;IAAmBmB,SAAS;EAA5B,GAAiCjB,YAAjC,CAAR,EACGY,IADH,CADK,GAKLA,IALF;AAOD,CAvCM;AAwCPpB,SAAS,CAAC0B,WAAV,GAAwB,WAAxB","names":["React","styles","css","Tooltip","TableTextVariant","WrapModifier","TableText","_a","children","className","variant","wrapModifier","tooltip","tooltipProp","tooltipProps","onMouseEnter","onMouseEnterProp","props","Component","setTooltip","useState","event","target","offsetWidth","scrollWidth","innerText","text","Object","modifiers","tableText","content","isVisible","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/TableText.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip, TooltipProps } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nexport enum TableTextVariant {\n  div = 'div',\n  nav = 'nav'\n}\n\nexport enum WrapModifier {\n  wrap = 'wrap',\n  nowrap = 'nowrap',\n  truncate = 'truncate',\n  breakWord = 'breakWord',\n  fitContent = 'fitContent'\n}\n\nexport interface TableTextProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered within the table text */\n  children?: React.ReactNode;\n  /** Additional classes added to the table text */\n  className?: string;\n  /** Determines which element to render as a table text */\n  variant?: TableTextVariant | 'span' | 'div';\n  /** Determines which wrapping modifier to apply to the table text */\n  wrapModifier?: WrapModifier | 'wrap' | 'nowrap' | 'truncate' | 'breakWord' | 'fitContent';\n  /** text to display on the tooltip */\n  tooltip?: string;\n  /** other props to pass to the tooltip */\n  tooltipProps?: Omit<TooltipProps, 'content'>;\n  /** callback used to create the tooltip if text is truncated */\n  onMouseEnter?: (event: any) => void;\n}\n\nexport const TableText: React.FunctionComponent<TableTextProps> = ({\n  children = null,\n  className = '',\n  variant = 'span',\n  wrapModifier = null,\n  tooltip: tooltipProp = '',\n  tooltipProps = {},\n  onMouseEnter: onMouseEnterProp = () => {},\n  ...props\n}: TableTextProps) => {\n  const Component: TableTextVariant | 'span' | 'div' = variant;\n\n  const [tooltip, setTooltip] = React.useState('');\n  const onMouseEnter = (event: any) => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      setTooltip(tooltipProp || event.target.innerText);\n    } else {\n      setTooltip('');\n    }\n    onMouseEnterProp(event);\n  };\n\n  const text = (\n    <Component\n      onMouseEnter={onMouseEnter}\n      className={css(className, wrapModifier && styles.modifiers[wrapModifier], styles.tableText)}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n\n  return tooltip !== '' ? (\n    <Tooltip content={tooltip} isVisible {...tooltipProps}>\n      {text}\n    </Tooltip>\n  ) : (\n    text\n  );\n};\nTableText.displayName = 'TableText';\n"]},"metadata":{},"sourceType":"module"}