{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createForOfIteratorHelper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton } from './DataListDragButton';\n\nfunction findDataListDragButton(node) {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n\n  if (node.type === DataListDragButton) {\n    return node;\n  }\n\n  if (node.props.children) {\n    var _iterator = _createForOfIteratorHelper(React.Children.toArray(node.props.children)),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var child = _step.value;\n        var button = findDataListDragButton(child);\n\n        if (button) {\n          return button;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return null;\n}\n\nexport var DataListItem = /*#__PURE__*/function (_React$Component) {\n  _inherits(DataListItem, _React$Component);\n\n  var _super = _createSuper(DataListItem);\n\n  function DataListItem() {\n    _classCallCheck(this, DataListItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DataListItem, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          isExpanded = _a.isExpanded,\n          className = _a.className,\n          id = _a.id,\n          ariaLabelledBy = _a['aria-labelledby'],\n          selectableInputAriaLabel = _a.selectableInputAriaLabel,\n          props = __rest(_a, [\"children\", \"isExpanded\", \"className\", \"id\", 'aria-labelledby', \"selectableInputAriaLabel\"]);\n\n      return React.createElement(DataListContext.Consumer, null, function (_ref) {\n        var isSelectable = _ref.isSelectable,\n            selectedDataListItemId = _ref.selectedDataListItemId,\n            updateSelectedDataListItem = _ref.updateSelectedDataListItem,\n            selectableRow = _ref.selectableRow,\n            isDraggable = _ref.isDraggable,\n            dragStart = _ref.dragStart,\n            dragEnd = _ref.dragEnd,\n            drop = _ref.drop;\n\n        var selectDataListItem = function selectDataListItem(event) {\n          var target = event.target;\n\n          while (event.currentTarget !== target) {\n            if ('onclick' in target && target.onclick || target.parentNode.classList.contains(styles.dataListItemAction) || target.parentNode.classList.contains(styles.dataListItemControl)) {\n              // check other event handlers are not present.\n              return;\n            } else {\n              target = target.parentNode;\n            }\n          }\n\n          updateSelectedDataListItem(id);\n        };\n\n        var onKeyDown = function onKeyDown(event) {\n          if (event.key === KeyTypes.Enter) {\n            updateSelectedDataListItem(id);\n          }\n        }; // We made the DataListDragButton determine if the entire item is draggable instead of\n        // DataListItem like we should have.\n        // Recursively search children for the DataListDragButton and see if it's disabled...\n\n\n        var dragButton = findDataListDragButton(children);\n        var dragProps = isDraggable && {\n          draggable: dragButton ? !dragButton.props.isDisabled : true,\n          onDrop: drop,\n          onDragEnd: dragEnd,\n          onDragStart: dragStart\n        };\n        var isSelected = selectedDataListItemId === id;\n        var selectableInputAriaProps = selectableInputAriaLabel ? {\n          'aria-label': selectableInputAriaLabel\n        } : {\n          'aria-labelledby': ariaLabelledBy\n        };\n        var selectableInputType = (selectableRow === null || selectableRow === void 0 ? void 0 : selectableRow.type) === 'multiple' ? 'checkbox' : 'radio';\n        return React.createElement(\"li\", Object.assign({\n          id: id,\n          className: css(styles.dataListItem, isExpanded && styles.modifiers.expanded, isSelectable && styles.modifiers.selectable, selectedDataListItemId && isSelected && styles.modifiers.selected, className),\n          \"aria-labelledby\": ariaLabelledBy\n        }, isSelectable && {\n          tabIndex: 0,\n          onClick: selectDataListItem,\n          onKeyDown: onKeyDown\n        }, isSelectable && isSelected && {\n          'aria-selected': true\n        }, props, dragProps), selectableRow && React.createElement(\"input\", Object.assign({\n          className: \"pf-screen-reader\",\n          type: selectableInputType,\n          checked: isSelected,\n          onChange: function onChange(event) {\n            return selectableRow.onChange(id, event);\n          },\n          tabIndex: -1\n        }, selectableInputAriaProps)), React.Children.map(children, function (child) {\n          return React.isValidElement(child) && React.cloneElement(child, {\n            rowid: ariaLabelledBy\n          });\n        }));\n      });\n    }\n  }]);\n\n  return DataListItem;\n}(React.Component);\nDataListItem.displayName = 'DataListItem';\nDataListItem.defaultProps = {\n  isExpanded: false,\n  className: '',\n  id: '',\n  children: null,\n  'aria-labelledby': ''\n};","map":{"version":3,"mappings":"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","names":["React","css","styles","DataListContext","KeyTypes","DataListDragButton","findDataListDragButton","node","isValidElement","type","props","children","Children","toArray","child","button","DataListItem","_a","isExpanded","className","id","ariaLabelledBy","selectableInputAriaLabel","__rest","Consumer","isSelectable","selectedDataListItemId","updateSelectedDataListItem","selectableRow","isDraggable","dragStart","dragEnd","drop","selectDataListItem","event","target","currentTarget","onclick","parentNode","classList","contains","dataListItemAction","dataListItemControl","onKeyDown","key","Enter","dragButton","dragProps","draggable","isDisabled","onDrop","onDragEnd","onDragStart","isSelected","selectableInputAriaProps","selectableInputType","dataListItem","modifiers","expanded","selectable","selected","tabIndex","onClick","checked","onChange","map","cloneElement","rowid","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListContext } from './DataList';\nimport { KeyTypes } from '../../helpers/constants';\nimport { DataListDragButton, DataListDragButtonProps } from './DataListDragButton';\n\nexport interface DataListItemProps extends Omit<React.HTMLProps<HTMLLIElement>, 'children' | 'ref'> {\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Content rendered inside the DataList item */\n  children: React.ReactNode;\n  /** Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent> */\n  className?: string;\n  /** Adds accessible text to the DataList item */\n  'aria-labelledby': string;\n  /** Unique id for the DataList item */\n  id?: string;\n  /** @beta Aria label to apply to the selectable input if one is rendered */\n  selectableInputAriaLabel?: string;\n}\n\nexport interface DataListItemChildProps {\n  /** Id for the row */\n  rowid: string;\n}\n\nfunction findDataListDragButton(node: React.ReactNode): React.ReactElement<DataListDragButtonProps> | null {\n  if (!React.isValidElement(node)) {\n    return null;\n  }\n  if (node.type === DataListDragButton) {\n    return node as React.ReactElement<DataListDragButtonProps>;\n  }\n  if (node.props.children) {\n    for (const child of React.Children.toArray(node.props.children)) {\n      const button = findDataListDragButton(child);\n      if (button) {\n        return button;\n      }\n    }\n  }\n\n  return null;\n}\n\nexport class DataListItem extends React.Component<DataListItemProps> {\n  static displayName = 'DataListItem';\n  static defaultProps: DataListItemProps = {\n    isExpanded: false,\n    className: '',\n    id: '',\n    children: null,\n    'aria-labelledby': ''\n  };\n  render() {\n    const {\n      children,\n      isExpanded,\n      className,\n      id,\n      'aria-labelledby': ariaLabelledBy,\n      selectableInputAriaLabel,\n      ...props\n    } = this.props;\n    return (\n      <DataListContext.Consumer>\n        {({\n          isSelectable,\n          selectedDataListItemId,\n          updateSelectedDataListItem,\n          selectableRow,\n          isDraggable,\n          dragStart,\n          dragEnd,\n          drop\n        }) => {\n          const selectDataListItem = (event: React.MouseEvent) => {\n            let target: any = event.target;\n            while (event.currentTarget !== target) {\n              if (\n                ('onclick' in target && target.onclick) ||\n                target.parentNode.classList.contains(styles.dataListItemAction) ||\n                target.parentNode.classList.contains(styles.dataListItemControl)\n              ) {\n                // check other event handlers are not present.\n                return;\n              } else {\n                target = target.parentNode;\n              }\n            }\n            updateSelectedDataListItem(id);\n          };\n\n          const onKeyDown = (event: React.KeyboardEvent) => {\n            if (event.key === KeyTypes.Enter) {\n              updateSelectedDataListItem(id);\n            }\n          };\n\n          // We made the DataListDragButton determine if the entire item is draggable instead of\n          // DataListItem like we should have.\n          // Recursively search children for the DataListDragButton and see if it's disabled...\n          const dragButton = findDataListDragButton(children);\n          const dragProps = isDraggable && {\n            draggable: dragButton ? !dragButton.props.isDisabled : true,\n            onDrop: drop,\n            onDragEnd: dragEnd,\n            onDragStart: dragStart\n          };\n\n          const isSelected = selectedDataListItemId === id;\n\n          const selectableInputAriaProps = selectableInputAriaLabel\n            ? { 'aria-label': selectableInputAriaLabel }\n            : { 'aria-labelledby': ariaLabelledBy };\n\n          const selectableInputType = selectableRow?.type === 'multiple' ? 'checkbox' : 'radio';\n\n          return (\n            <li\n              id={id}\n              className={css(\n                styles.dataListItem,\n                isExpanded && styles.modifiers.expanded,\n                isSelectable && styles.modifiers.selectable,\n                selectedDataListItemId && isSelected && styles.modifiers.selected,\n                className\n              )}\n              aria-labelledby={ariaLabelledBy}\n              {...(isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown })}\n              {...(isSelectable && isSelected && { 'aria-selected': true })}\n              {...props}\n              {...dragProps}\n            >\n              {selectableRow && (\n                <input\n                  className=\"pf-screen-reader\"\n                  type={selectableInputType}\n                  checked={isSelected}\n                  onChange={event => selectableRow.onChange(id, event)}\n                  tabIndex={-1}\n                  {...selectableInputAriaProps}\n                />\n              )}\n              {React.Children.map(\n                children,\n                child =>\n                  React.isValidElement(child) &&\n                  React.cloneElement(child as React.ReactElement<any>, {\n                    rowid: ariaLabelledBy\n                  })\n              )}\n            </li>\n          );\n        }}\n      </DataListContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}