{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { WizardHeader } from './WizardHeader';\nexport var Wizard = /*#__PURE__*/function (_React$Component) {\n  _inherits(Wizard, _React$Component);\n\n  var _super = _createSuper(Wizard);\n\n  function Wizard(props) {\n    var _this;\n\n    _classCallCheck(this, Wizard);\n\n    _this = _super.call(this, props);\n\n    _this.handleKeyClicks = function (event) {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n        if (_this.state.isNavOpen) {\n          _this.setState({\n            isNavOpen: !_this.state.isNavOpen\n          });\n        } else if (_this.props.isOpen) {\n          _this.props.onClose();\n        }\n      }\n    };\n\n    _this.onNext = function () {\n      var _this$props = _this.props,\n          onNext = _this$props.onNext,\n          onClose = _this$props.onClose,\n          onSave = _this$props.onSave;\n      var currentStep = _this.state.currentStep;\n\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      var maxSteps = flattenedSteps.length;\n\n      if (currentStep >= maxSteps) {\n        // Hit the save button at the end of the wizard\n        if (onSave) {\n          return onSave();\n        }\n\n        return onClose();\n      } else {\n        var newStep = currentStep + 1;\n\n        _this.setState({\n          currentStep: newStep\n        });\n\n        var _flattenedSteps = flattenedSteps[currentStep - 1],\n            prevId = _flattenedSteps.id,\n            prevName = _flattenedSteps.name;\n        var _flattenedSteps2 = flattenedSteps[newStep - 1],\n            id = _flattenedSteps2.id,\n            name = _flattenedSteps2.name;\n        return onNext && onNext({\n          id: id,\n          name: name\n        }, {\n          prevId: prevId,\n          prevName: prevName\n        });\n      }\n    };\n\n    _this.onBack = function () {\n      var onBack = _this.props.onBack;\n      var currentStep = _this.state.currentStep;\n\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      if (flattenedSteps.length < currentStep) {\n        // Previous step was removed, just update the currentStep state\n        var adjustedStep = flattenedSteps.length;\n\n        _this.setState({\n          currentStep: adjustedStep\n        });\n      } else {\n        var newStep = currentStep - 1 <= 0 ? 0 : currentStep - 1;\n\n        _this.setState({\n          currentStep: newStep\n        });\n\n        var _flattenedSteps$newSt = flattenedSteps[newStep],\n            prevId = _flattenedSteps$newSt.id,\n            prevName = _flattenedSteps$newSt.name;\n        var _flattenedSteps3 = flattenedSteps[newStep - 1],\n            id = _flattenedSteps3.id,\n            name = _flattenedSteps3.name;\n        return onBack && onBack({\n          id: id,\n          name: name\n        }, {\n          prevId: prevId,\n          prevName: prevName\n        });\n      }\n    };\n\n    _this.goToStep = function (step) {\n      var onGoToStep = _this.props.onGoToStep;\n      var currentStep = _this.state.currentStep;\n\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      var maxSteps = flattenedSteps.length;\n\n      if (step < 1) {\n        step = 1;\n      } else if (step > maxSteps) {\n        step = maxSteps;\n      }\n\n      _this.setState({\n        currentStep: step,\n        isNavOpen: false\n      });\n\n      var _flattenedSteps4 = flattenedSteps[currentStep - 1],\n          prevId = _flattenedSteps4.id,\n          prevName = _flattenedSteps4.name;\n      var _flattenedSteps5 = flattenedSteps[step - 1],\n          id = _flattenedSteps5.id,\n          name = _flattenedSteps5.name;\n      return onGoToStep && onGoToStep({\n        id: id,\n        name: name\n      }, {\n        prevId: prevId,\n        prevName: prevName\n      });\n    };\n\n    _this.goToStepById = function (stepId) {\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      var step;\n\n      for (var i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].id === stepId) {\n          step = i + 1;\n          break;\n        }\n      }\n\n      if (step) {\n        _this.setState({\n          currentStep: step\n        });\n      }\n    };\n\n    _this.goToStepByName = function (stepName) {\n      var flattenedSteps = _this.getFlattenedSteps();\n\n      var step;\n\n      for (var i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          step = i + 1;\n          break;\n        }\n      }\n\n      if (step) {\n        _this.setState({\n          currentStep: step\n        });\n      }\n    };\n\n    _this.getFlattenedSteps = function () {\n      var steps = _this.props.steps;\n      var flattenedSteps = [];\n\n      var _iterator = _createForOfIteratorHelper(steps),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var step = _step.value;\n\n          if (step.steps) {\n            var _iterator2 = _createForOfIteratorHelper(step.steps),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var childStep = _step2.value;\n                flattenedSteps.push(childStep);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } else {\n            flattenedSteps.push(step);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return flattenedSteps;\n    };\n\n    _this.getFlattenedStepsIndex = function (flattenedSteps, stepName) {\n      for (var i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          return i + 1;\n        }\n      }\n\n      return 0;\n    };\n\n    _this.initSteps = function (steps) {\n      // Set default Step values\n      for (var i = 0; i < steps.length; i++) {\n        if (steps[i].steps) {\n          for (var j = 0; j < steps[i].steps.length; j++) {\n            steps[i].steps[j] = Object.assign({\n              canJumpTo: true\n            }, steps[i].steps[j]);\n          }\n        }\n\n        steps[i] = Object.assign({\n          canJumpTo: true\n        }, steps[i]);\n      }\n\n      return steps;\n    };\n\n    _this.getElement = function (appendTo) {\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n\n      return appendTo || document.body;\n    };\n\n    var newId = Wizard.currentId++;\n    _this.titleId = props.titleId || \"pf-wizard-title-\".concat(newId);\n    _this.descriptionId = props.descriptionId || \"pf-wizard-description-\".concat(newId);\n    _this.state = {\n      currentStep: _this.props.startAtStep && Number.isInteger(_this.props.startAtStep) ? _this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(Wizard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var target = typeof document !== 'undefined' ? document.body : null;\n\n      if (target) {\n        target.addEventListener('keydown', this.handleKeyClicks, false);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var target = typeof document !== 'undefined' && document.body || null;\n\n      if (target) {\n        target.removeEventListener('keydown', this.handleKeyClicks, false);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          width = _a.width,\n          height = _a.height,\n          title = _a.title,\n          description = _a.description,\n          descriptionComponent = _a.descriptionComponent,\n          onClose = _a.onClose,\n          onSave = _a.onSave,\n          onBack = _a.onBack,\n          onNext = _a.onNext,\n          onGoToStep = _a.onGoToStep,\n          className = _a.className,\n          steps = _a.steps,\n          startAtStep = _a.startAtStep,\n          _a$nextButtonText = _a.nextButtonText,\n          nextButtonText = _a$nextButtonText === void 0 ? 'Next' : _a$nextButtonText,\n          _a$backButtonText = _a.backButtonText,\n          backButtonText = _a$backButtonText === void 0 ? 'Back' : _a$backButtonText,\n          _a$cancelButtonText = _a.cancelButtonText,\n          cancelButtonText = _a$cancelButtonText === void 0 ? 'Cancel' : _a$cancelButtonText,\n          hideClose = _a.hideClose,\n          _a$closeButtonAriaLab = _a.closeButtonAriaLabel,\n          closeButtonAriaLabel = _a$closeButtonAriaLab === void 0 ? 'Close' : _a$closeButtonAriaLab,\n          navAriaLabel = _a.navAriaLabel,\n          navAriaLabelledBy = _a.navAriaLabelledBy,\n          mainAriaLabel = _a.mainAriaLabel,\n          mainAriaLabelledBy = _a.mainAriaLabelledBy,\n          hasNoBodyPadding = _a.hasNoBodyPadding,\n          footer = _a.footer,\n          appendTo = _a.appendTo,\n          isOpen = _a.isOpen,\n          titleId = _a.titleId,\n          descriptionId = _a.descriptionId,\n          isNavExpandable = _a.isNavExpandable,\n          rest = __rest(_a, [\"width\", \"height\", \"title\", \"description\", \"descriptionComponent\", \"onClose\", \"onSave\", \"onBack\", \"onNext\", \"onGoToStep\", \"className\", \"steps\", \"startAtStep\", \"nextButtonText\", \"backButtonText\", \"cancelButtonText\", \"hideClose\", \"closeButtonAriaLabel\", \"navAriaLabel\", \"navAriaLabelledBy\", \"mainAriaLabel\", \"mainAriaLabelledBy\", \"hasNoBodyPadding\", \"footer\", \"appendTo\", \"isOpen\", \"titleId\", \"descriptionId\", \"isNavExpandable\"]);\n\n      var currentStep = this.state.currentStep;\n      var flattenedSteps = this.getFlattenedSteps();\n      var adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n      var activeStep = flattenedSteps[adjustedStep - 1];\n      var computedSteps = this.initSteps(steps);\n      var firstStep = activeStep === flattenedSteps[0];\n      var isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n      var nav = function nav(isWizardNavOpen) {\n        var wizNavAProps = {\n          isOpen: isWizardNavOpen,\n          'aria-label': navAriaLabel,\n          'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || _this2.titleId)\n        };\n        return React.createElement(WizardNav, Object.assign({}, wizNavAProps), computedSteps.map(function (step, index) {\n          if (step.isFinishedStep) {\n            // Don't show finished step in the side nav\n            return;\n          }\n\n          var enabled;\n          var navItemStep;\n\n          if (step.steps) {\n            var hasActiveChild = false;\n            var canJumpToParent = false;\n\n            var _iterator3 = _createForOfIteratorHelper(step.steps),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var subStep = _step3.value;\n\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            navItemStep = _this2.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n            return React.createElement(WizardNavItem, {\n              key: index,\n              id: step.id,\n              content: step.name,\n              isExpandable: isNavExpandable,\n              isCurrent: hasActiveChild,\n              isDisabled: !canJumpToParent,\n              step: navItemStep,\n              onNavItemClick: _this2.goToStep\n            }, React.createElement(WizardNav, Object.assign({}, wizNavAProps, {\n              returnList: true\n            }), step.steps.map(function (childStep, indexChild) {\n              if (childStep.isFinishedStep) {\n                // Don't show finished step in the side nav\n                return;\n              }\n\n              navItemStep = _this2.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n              enabled = childStep.canJumpTo;\n              return React.createElement(WizardNavItem, {\n                key: \"child_\".concat(indexChild),\n                id: childStep.id,\n                content: childStep.name,\n                isCurrent: activeStep.name === childStep.name,\n                isDisabled: !enabled,\n                step: navItemStep,\n                onNavItemClick: _this2.goToStep\n              });\n            })));\n          }\n\n          navItemStep = _this2.getFlattenedStepsIndex(flattenedSteps, step.name);\n          enabled = step.canJumpTo;\n          return React.createElement(WizardNavItem, Object.assign({}, step.stepNavItemProps, {\n            key: index,\n            id: step.id,\n            content: step.name,\n            isCurrent: activeStep.name === step.name,\n            isDisabled: !enabled,\n            step: navItemStep,\n            onNavItemClick: _this2.goToStep\n          }));\n        }));\n      };\n\n      var context = {\n        goToStepById: this.goToStepById,\n        goToStepByName: this.goToStepByName,\n        onNext: this.onNext,\n        onBack: this.onBack,\n        onClose: onClose,\n        activeStep: activeStep\n      };\n      var divStyles = Object.assign(Object.assign({}, height ? {\n        height: height\n      } : {}), width ? {\n        width: width\n      } : {});\n      var wizard = React.createElement(WizardContextProvider, {\n        value: context\n      }, React.createElement(\"div\", Object.assign({}, rest, {\n        className: css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className),\n        style: Object.keys(divStyles).length ? divStyles : undefined\n      }), title && React.createElement(WizardHeader, {\n        titleId: this.titleId,\n        descriptionId: this.descriptionId,\n        onClose: onClose,\n        title: title,\n        description: description,\n        descriptionComponent: descriptionComponent,\n        closeButtonAriaLabel: closeButtonAriaLabel,\n        hideClose: hideClose\n      }), React.createElement(WizardToggle, {\n        mainAriaLabel: mainAriaLabel,\n        isInPage: isOpen === undefined,\n        mainAriaLabelledBy: (title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId),\n        isNavOpen: this.state.isNavOpen,\n        onNavToggle: function onNavToggle(isNavOpen) {\n          return _this2.setState({\n            isNavOpen: isNavOpen\n          });\n        },\n        nav: nav,\n        steps: steps,\n        activeStep: activeStep,\n        hasNoBodyPadding: hasNoBodyPadding\n      }, footer || React.createElement(WizardFooterInternal, {\n        onNext: this.onNext,\n        onBack: this.onBack,\n        onClose: onClose,\n        isValid: isValid,\n        firstStep: firstStep,\n        activeStep: activeStep,\n        nextButtonText: activeStep && activeStep.nextButtonText || nextButtonText,\n        backButtonText: backButtonText,\n        cancelButtonText: cancelButtonText\n      }))));\n\n      if (isOpen !== undefined) {\n        return React.createElement(Modal, {\n          width: width !== null ? width : undefined,\n          isOpen: isOpen,\n          variant: ModalVariant.large,\n          \"aria-labelledby\": this.titleId,\n          \"aria-describedby\": this.descriptionId,\n          showClose: false,\n          hasNoBodyWrapper: true\n        }, wizard);\n      }\n\n      return wizard;\n    }\n  }]);\n\n  return Wizard;\n}(React.Component);\nWizard.displayName = 'Wizard';\nWizard.currentId = 0;\nWizard.defaultProps = {\n  title: null,\n  description: '',\n  descriptionComponent: 'p',\n  className: '',\n  startAtStep: 1,\n  nextButtonText: 'Next',\n  backButtonText: 'Back',\n  cancelButtonText: 'Cancel',\n  hideClose: false,\n  closeButtonAriaLabel: 'Close',\n  navAriaLabel: null,\n  navAriaLabelledBy: null,\n  mainAriaLabel: null,\n  mainAriaLabelledBy: null,\n  hasNoBodyPadding: false,\n  onBack: null,\n  onNext: null,\n  onGoToStep: null,\n  width: null,\n  height: null,\n  footer: null,\n  onClose: function onClose() {\n    return undefined;\n  },\n  appendTo: null,\n  isOpen: undefined,\n  isNavExpandable: false\n};","map":{"version":3,"mappings":"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","names":["React","KEY_CODES","css","styles","Modal","ModalVariant","WizardFooterInternal","WizardToggle","WizardNav","WizardNavItem","WizardContextProvider","WizardHeader","Wizard","props","event","keyCode","ESCAPE_KEY","state","isNavOpen","setState","isOpen","onClose","onNext","onSave","currentStep","flattenedSteps","getFlattenedSteps","maxSteps","length","newStep","prevId","id","prevName","name","onBack","adjustedStep","step","onGoToStep","stepId","i","stepName","steps","childStep","push","j","Object","assign","canJumpTo","appendTo","document","body","newId","currentId","titleId","descriptionId","startAtStep","Number","isInteger","target","addEventListener","handleKeyClicks","removeEventListener","width","_a","height","title","description","descriptionComponent","className","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","isNavExpandable","rest","__rest","activeStep","computedSteps","initSteps","firstStep","isValid","enableNext","undefined","nav","isWizardNavOpen","wizNavAProps","map","index","isFinishedStep","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","getFlattenedStepsIndex","key","content","isExpandable","isCurrent","isDisabled","onNavItemClick","goToStep","returnList","indexChild","stepNavItemProps","context","goToStepById","goToStepByName","divStyles","wizard","value","style","keys","isInPage","onNavToggle","variant","large","showClose","hasNoBodyWrapper","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Wizard/Wizard.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem, WizardNavItemProps } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { WizardHeader } from './WizardHeader';\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: React.ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?: React.HTMLProps<HTMLButtonElement | HTMLAnchorElement> | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: React.ReactNode },\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\n) => void;\n\nexport interface WizardProps extends React.HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: React.ReactNode;\n  /** Component type of the description */\n  descriptionComponent?: 'div' | 'p';\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose?: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  startAtStep?: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: React.ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave?: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext?: WizardStepFunctionType;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack?: WizardStepFunctionType;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n  /** Flag indicating nav items with sub steps are expandable */\n  isNavExpandable?: boolean;\n}\n\ninterface WizardState {\n  currentStep: number;\n  isNavOpen: boolean;\n}\n\nexport class Wizard extends React.Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: null,\n    description: '',\n    descriptionComponent: 'p',\n    className: '',\n    startAtStep: 1,\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: null,\n    navAriaLabelledBy: null,\n    mainAriaLabel: null,\n    mainAriaLabelledBy: null,\n    hasNoBodyPadding: false,\n    onBack: null as WizardStepFunctionType,\n    onNext: null as WizardStepFunctionType,\n    onGoToStep: null as WizardStepFunctionType,\n    width: null as string,\n    height: null as string,\n    footer: null as React.ReactNode,\n    onClose: () => undefined as any,\n    appendTo: null as HTMLElement,\n    isOpen: undefined,\n    isNavExpandable: false\n  };\n  private titleId: string;\n  private descriptionId: string;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = Wizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  private onNext = (): void => {\n    const { onNext, onClose, onSave } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const maxSteps = flattenedSteps.length;\n    if (currentStep >= maxSteps) {\n      // Hit the save button at the end of the wizard\n      if (onSave) {\n        return onSave();\n      }\n      return onClose();\n    } else {\n      const newStep = currentStep + 1;\n      this.setState({\n        currentStep: newStep\n      });\n      const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n      const { id, name } = flattenedSteps[newStep - 1];\n      return onNext && onNext({ id, name }, { prevId, prevName });\n    }\n  };\n\n  private onBack = (): void => {\n    const { onBack } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    if (flattenedSteps.length < currentStep) {\n      // Previous step was removed, just update the currentStep state\n      const adjustedStep = flattenedSteps.length;\n      this.setState({\n        currentStep: adjustedStep\n      });\n    } else {\n      const newStep = currentStep - 1 <= 0 ? 0 : currentStep - 1;\n      this.setState({\n        currentStep: newStep\n      });\n      const { id: prevId, name: prevName } = flattenedSteps[newStep];\n      const { id, name } = flattenedSteps[newStep - 1];\n      return onBack && onBack({ id, name }, { prevId, prevName });\n    }\n  };\n\n  private goToStep = (step: number): void => {\n    const { onGoToStep } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const maxSteps = flattenedSteps.length;\n    if (step < 1) {\n      step = 1;\n    } else if (step > maxSteps) {\n      step = maxSteps;\n    }\n    this.setState({ currentStep: step, isNavOpen: false });\n    const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n    const { id, name } = flattenedSteps[step - 1];\n    return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  };\n\n  private goToStepById = (stepId: number | string): void => {\n    const flattenedSteps = this.getFlattenedSteps();\n    let step;\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].id === stepId) {\n        step = i + 1;\n        break;\n      }\n    }\n    if (step) {\n      this.setState({ currentStep: step });\n    }\n  };\n\n  private goToStepByName = (stepName: string): void => {\n    const flattenedSteps = this.getFlattenedSteps();\n    let step;\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        step = i + 1;\n        break;\n      }\n    }\n    if (step) {\n      this.setState({ currentStep: step });\n    }\n  };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    const flattenedSteps: WizardStep[] = [];\n    for (const step of steps) {\n      if (step.steps) {\n        for (const childStep of step.steps) {\n          flattenedSteps.push(childStep);\n        }\n      } else {\n        flattenedSteps.push(step);\n      }\n    }\n    return flattenedSteps;\n  };\n\n  private getFlattenedStepsIndex = (flattenedSteps: WizardStep[], stepName: React.ReactNode): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps.length; j++) {\n          steps[i].steps[j] = Object.assign({ canJumpTo: true }, steps[i].steps[j]);\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n      height,\n      title,\n      description,\n      descriptionComponent,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      className,\n      steps,\n      startAtStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      isNavExpandable,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n      };\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n              return (\n                <WizardNavItem\n                  key={index}\n                  id={step.id}\n                  content={step.name}\n                  isExpandable={isNavExpandable}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={this.goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map((childStep: WizardStep, indexChild: number) => {\n                      if (childStep.isFinishedStep) {\n                        // Don't show finished step in the side nav\n                        return;\n                      }\n                      navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n                      enabled = childStep.canJumpTo;\n                      return (\n                        <WizardNavItem\n                          key={`child_${indexChild}`}\n                          id={childStep.id}\n                          content={childStep.name}\n                          isCurrent={activeStep.name === childStep.name}\n                          isDisabled={!enabled}\n                          step={navItemStep}\n                          onNavItemClick={this.goToStep}\n                        />\n                      );\n                    })}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                id={step.id}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={this.goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById: this.goToStepById,\n      goToStepByName: this.goToStepByName,\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose,\n      activeStep\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {})\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className)}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              descriptionComponent={descriptionComponent}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={(title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId)}\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={isNavOpen => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding}\n          >\n            {footer || (\n              <WizardFooterInternal\n                onNext={this.onNext}\n                onBack={this.onBack}\n                onClose={onClose}\n                isValid={isValid}\n                firstStep={firstStep}\n                activeStep={activeStep}\n                nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n                backButtonText={backButtonText}\n                cancelButtonText={cancelButtonText}\n              />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n    return wizard;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}