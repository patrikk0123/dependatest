{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { DualListSelectorTree } from './DualListSelectorTree';\nimport { getUniqueId } from '../../helpers';\nimport { DualListSelectorListWrapper } from './DualListSelectorListWrapper';\nimport { DualListSelectorContext, DualListSelectorPaneContext } from './DualListSelectorContext';\nimport { DualListSelectorList } from './DualListSelectorList';\nexport const DualListSelectorPane = _a => {\n  var {\n    isChosen = false,\n    className = '',\n    status = '',\n    actions,\n    searchInput,\n    children,\n    onOptionSelect,\n    onOptionCheck,\n    title = '',\n    options = [],\n    selectedOptions = [],\n    isSearchable = false,\n    searchInputAriaLabel = '',\n    onFilterUpdate,\n    onSearchInputChanged,\n    filterOption,\n    id = getUniqueId('dual-list-selector-pane'),\n    isDisabled = false\n  } = _a,\n      props = __rest(_a, [\"isChosen\", \"className\", \"status\", \"actions\", \"searchInput\", \"children\", \"onOptionSelect\", \"onOptionCheck\", \"title\", \"options\", \"selectedOptions\", \"isSearchable\", \"searchInputAriaLabel\", \"onFilterUpdate\", \"onSearchInputChanged\", \"filterOption\", \"id\", \"isDisabled\"]);\n\n  const [input, setInput] = React.useState('');\n  const {\n    isTree\n  } = React.useContext(DualListSelectorContext); // only called when search input is dynamically built\n\n  const onChange = e => {\n    const newValue = e.target.value;\n    let filtered;\n\n    if (isTree) {\n      filtered = options.map(opt => Object.assign({}, opt)).filter(item => filterInput(item, newValue));\n    } else {\n      filtered = options.filter(option => {\n        if (displayOption(option)) {\n          return option;\n        }\n      });\n    }\n\n    onFilterUpdate(filtered, isChosen ? 'chosen' : 'available', newValue === '');\n\n    if (onSearchInputChanged) {\n      onSearchInputChanged(newValue, e);\n    }\n\n    setInput(newValue);\n  }; // only called when options are passed via options prop and isTree === true\n\n\n  const filterInput = (item, input) => {\n    if (filterOption) {\n      return filterOption(item, input);\n    } else {\n      if (item.text.toLowerCase().includes(input.toLowerCase()) || input === '') {\n        return true;\n      }\n    }\n\n    if (item.children) {\n      return (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterInput(child, input))).length > 0;\n    }\n  }; // only called when options are passed via options prop and isTree === false\n\n\n  const displayOption = option => {\n    if (filterOption) {\n      return filterOption(option, input);\n    } else {\n      return option.toString().toLowerCase().includes(input.toLowerCase());\n    }\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className)\n  }, props), title && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorHeader)\n  }, React.createElement(\"div\", {\n    className: \"pf-c-dual-list-selector__title\"\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorTitleText)\n  }, title))), (actions || searchInput || isSearchable) && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorTools)\n  }, (isSearchable || searchInput) && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorToolsFilter)\n  }, searchInput ? searchInput : React.createElement(\"input\", {\n    className: css(formStyles.formControl, formStyles.modifiers.search),\n    type: \"search\",\n    onChange: isDisabled ? undefined : onChange,\n    \"aria-label\": searchInputAriaLabel,\n    disabled: isDisabled\n  })), actions && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorToolsActions)\n  }, actions)), status && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorStatus)\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorStatusText),\n    id: `${id}-status`\n  }, status)), React.createElement(DualListSelectorPaneContext.Provider, {\n    value: {\n      isChosen\n    }\n  }, !isTree && React.createElement(DualListSelectorListWrapper, {\n    \"aria-labelledby\": `${id}-status`,\n    options: options,\n    selectedOptions: selectedOptions,\n    onOptionSelect: (e, index, id) => onOptionSelect(e, index, isChosen, id),\n    displayOption: displayOption,\n    id: `${id}-list`,\n    isDisabled: isDisabled\n  }, children), isTree && React.createElement(DualListSelectorListWrapper, {\n    \"aria-labelledby\": `${id}-status`,\n    id: `${id}-list`\n  }, options.length > 0 ? React.createElement(DualListSelectorList, null, React.createElement(DualListSelectorTree, {\n    data: isSearchable ? options.map(opt => Object.assign({}, opt)).filter(item => filterInput(item, input)) : options,\n    onOptionCheck: onOptionCheck,\n    id: `${id}-tree`,\n    isDisabled: isDisabled\n  })) : children)));\n};\nDualListSelectorPane.displayName = 'DualListSelectorPane';","map":{"version":3,"mappings":"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","names":["React","styles","css","formStyles","DualListSelectorTree","getUniqueId","DualListSelectorListWrapper","DualListSelectorContext","DualListSelectorPaneContext","DualListSelectorList","DualListSelectorPane","_a","isChosen","className","status","actions","searchInput","children","onOptionSelect","onOptionCheck","title","options","selectedOptions","isSearchable","searchInputAriaLabel","onFilterUpdate","onSearchInputChanged","filterOption","id","isDisabled","props","input","setInput","useState","isTree","useContext","onChange","e","newValue","target","value","filtered","map","opt","Object","assign","filter","item","filterInput","option","displayOption","text","toLowerCase","includes","child","length","toString","dualListSelectorPane","modifiers","chosen","dualListSelectorHeader","dualListSelectorTitleText","dualListSelectorTools","dualListSelectorToolsFilter","formControl","search","type","undefined","disabled","dualListSelectorToolsActions","dualListSelectorStatus","dualListSelectorStatusText","Provider","index","data","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorPane.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { DualListSelectorTree, DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport { getUniqueId } from '../../helpers';\nimport { DualListSelectorListWrapper } from './DualListSelectorListWrapper';\nimport { DualListSelectorContext, DualListSelectorPaneContext } from './DualListSelectorContext';\nimport { DualListSelectorList } from './DualListSelectorList';\n\nexport interface DualListSelectorPaneProps {\n  /** Additional classes applied to the dual list selector pane. */\n  className?: string;\n  /** A dual list selector list or dual list selector tree to be rendered in the pane. */\n  children?: React.ReactNode;\n  /** Flag indicating if this pane is the chosen pane. */\n  isChosen?: boolean;\n  /** Status to display above the pane. */\n  status?: string;\n  /** Title of the pane. */\n  title?: React.ReactNode;\n  /** A search input placed above the list at the top of the pane, before actions. */\n  searchInput?: React.ReactNode;\n  /** Actions to place above the pane. */\n  actions?: React.ReactNode[];\n  /** Id of the pane. */\n  id?: string;\n  /** @hide Options to list in the pane. */\n  options?: React.ReactNode[];\n  /** @hide Options currently selected in the pane. */\n  selectedOptions?: string[] | number[];\n  /** @hide Callback for when an option is selected. Optionally used only when options prop is provided. */\n  onOptionSelect?: (\n    e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    id?: string,\n    itemData?: any,\n    parentData?: any\n  ) => void;\n  /** @hide Callback for when a tree option is checked. Optionally used only when options prop is provided. */\n  onOptionCheck?: (\n    evt: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** @hide Flag indicating a dynamically built search bar should be included above the pane. */\n  isSearchable?: boolean;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n  /** Callback for search input. To be used when isSearchable is true. */\n  onSearch?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** @hide A callback for when the search input value for changes.  To be used when isSearchable is true. */\n  onSearchInputChanged?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** @hide Filter function for custom filtering based on search string. To be used when isSearchable is true. */\n  filterOption?: (option: React.ReactNode, input: string) => boolean;\n  /** @hide Accessible label for the search input. To be used when isSearchable is true. */\n  searchInputAriaLabel?: string;\n  /** @hide Callback for updating the filtered options in DualListSelector. To be used when isSearchable is true. */\n  onFilterUpdate?: (newFilteredOptions: React.ReactNode[], paneType: string, isSearchReset: boolean) => void;\n}\n\nexport const DualListSelectorPane: React.FunctionComponent<DualListSelectorPaneProps> = ({\n  isChosen = false,\n  className = '',\n  status = '',\n  actions,\n  searchInput,\n  children,\n  onOptionSelect,\n  onOptionCheck,\n  title = '',\n  options = [],\n  selectedOptions = [],\n  isSearchable = false,\n  searchInputAriaLabel = '',\n  onFilterUpdate,\n  onSearchInputChanged,\n  filterOption,\n  id = getUniqueId('dual-list-selector-pane'),\n  isDisabled = false,\n  ...props\n}: DualListSelectorPaneProps) => {\n  const [input, setInput] = React.useState('');\n  const { isTree } = React.useContext(DualListSelectorContext);\n\n  // only called when search input is dynamically built\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    let filtered: React.ReactNode[];\n    if (isTree) {\n      filtered = options\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterInput((item as unknown) as DualListSelectorTreeItemData, newValue));\n    } else {\n      filtered = options.filter(option => {\n        if (displayOption(option)) {\n          return option;\n        }\n      });\n    }\n    onFilterUpdate(filtered, isChosen ? 'chosen' : 'available', newValue === '');\n\n    if (onSearchInputChanged) {\n      onSearchInputChanged(newValue, e);\n    }\n    setInput(newValue);\n  };\n\n  // only called when options are passed via options prop and isTree === true\n  const filterInput = (item: DualListSelectorTreeItemData, input: string): boolean => {\n    if (filterOption) {\n      return filterOption((item as unknown) as React.ReactNode, input);\n    } else {\n      if (item.text.toLowerCase().includes(input.toLowerCase()) || input === '') {\n        return true;\n      }\n    }\n    if (item.children) {\n      return (\n        (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterInput(child, input)))\n          .length > 0\n      );\n    }\n  };\n\n  // only called when options are passed via options prop and isTree === false\n  const displayOption = (option: React.ReactNode) => {\n    if (filterOption) {\n      return filterOption(option, input);\n    } else {\n      return option\n        .toString()\n        .toLowerCase()\n        .includes(input.toLowerCase());\n    }\n  };\n\n  return (\n    <div\n      className={css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className)}\n      {...props}\n    >\n      {title && (\n        <div className={css(styles.dualListSelectorHeader)}>\n          <div className=\"pf-c-dual-list-selector__title\">\n            <div className={css(styles.dualListSelectorTitleText)}>{title}</div>\n          </div>\n        </div>\n      )}\n      {(actions || searchInput || isSearchable) && (\n        <div className={css(styles.dualListSelectorTools)}>\n          {(isSearchable || searchInput) && (\n            <div className={css(styles.dualListSelectorToolsFilter)}>\n              {searchInput ? (\n                searchInput\n              ) : (\n                <input\n                  className={css(formStyles.formControl, formStyles.modifiers.search)}\n                  type=\"search\"\n                  onChange={isDisabled ? undefined : onChange}\n                  aria-label={searchInputAriaLabel}\n                  disabled={isDisabled}\n                />\n              )}\n            </div>\n          )}\n          {actions && <div className={css(styles.dualListSelectorToolsActions)}>{actions}</div>}\n        </div>\n      )}\n      {status && (\n        <div className={css(styles.dualListSelectorStatus)}>\n          <div className={css(styles.dualListSelectorStatusText)} id={`${id}-status`}>\n            {status}\n          </div>\n        </div>\n      )}\n      <DualListSelectorPaneContext.Provider value={{ isChosen }}>\n        {!isTree && (\n          <DualListSelectorListWrapper\n            aria-labelledby={`${id}-status`}\n            options={options}\n            selectedOptions={selectedOptions}\n            onOptionSelect={(\n              e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n              index: number,\n              id: string\n            ) => onOptionSelect(e, index, isChosen, id)}\n            displayOption={displayOption}\n            id={`${id}-list`}\n            isDisabled={isDisabled}\n          >\n            {children}\n          </DualListSelectorListWrapper>\n        )}\n        {isTree && (\n          <DualListSelectorListWrapper aria-labelledby={`${id}-status`} id={`${id}-list`}>\n            {options.length > 0 ? (\n              <DualListSelectorList>\n                <DualListSelectorTree\n                  data={\n                    isSearchable\n                      ? ((options\n                          .map(opt => Object.assign({}, opt))\n                          .filter(item =>\n                            filterInput((item as unknown) as DualListSelectorTreeItemData, input)\n                          ) as unknown) as DualListSelectorTreeItemData[])\n                      : ((options as unknown) as DualListSelectorTreeItemData[])\n                  }\n                  onOptionCheck={onOptionCheck}\n                  id={`${id}-tree`}\n                  isDisabled={isDisabled}\n                />\n              </DualListSelectorList>\n            ) : (\n              children\n            )}\n          </DualListSelectorListWrapper>\n        )}\n      </DualListSelectorPaneContext.Provider>\n    </div>\n  );\n};\nDualListSelectorPane.displayName = 'DualListSelectorPane';\n"]},"metadata":{},"sourceType":"module"}