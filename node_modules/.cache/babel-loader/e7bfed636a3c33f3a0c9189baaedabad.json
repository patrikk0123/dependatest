{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of an input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * Input strings are trimmed.\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initFields - Init form state (just values and validators)\n * @param submitCallback - Function to call when submitting user input data\n *\n * initFields has to specify all inputs (keys to IFields) - even if just empty objects.\n *\n * @returns form states and access functions\n *  -> fields           - whole form state\n *  -> reinitialize     - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - is submit button disabled?\n *\n * initFields and fields objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessages -- actual error messages (in case of an error)\n *    -> state  -- state of a field ('default', 'success', 'error') (check out: https://www.patternfly.org/v4/components/text-input/)\n *    -> isRequired   -- is field required?\n *    -> validators:  -- validation functions and their error messages\n *      -> validator    -- validation function\n *      -> errorMessage -- error message that should be set in a case of an error\n */\nexport const useForm = (initFields, submitCallback) => {\n  // transform init data (add default data + possibly apply new values)\n  const transformFormData = useCallback(values => {\n    const defaultFields = {};\n\n    for (const key in initFields) {\n      defaultFields[key] = {}; // init data\n\n      defaultFields[key].isRequired = initFields[key].isRequired; // SHALLOW COPY (should not change anyway)\n\n      defaultFields[key].validators = initFields[key].validators; // additional data\n\n      defaultFields[key].state = 'default';\n\n      if (values !== null && values !== void 0 && values[key]) {\n        defaultFields[key].value = values[key];\n      } else if (initFields[key].value) {\n        defaultFields[key].value = initFields[key].value;\n      } else {\n        defaultFields[key].value = '';\n      }\n    }\n\n    return defaultFields;\n  }, [initFields]);\n  const [fields, setFields] = useState(transformFormData()); // is submit button disabled?\n\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true); // has any field been changed?\n  // important for edit page (do not submit until any new content)\n\n  const [hasChanged, setHasChanged] = useState(false); // callback (on change of an input)\n\n  const onChange = (fieldName, fieldValue) => {\n    // also delete old error messages, new checks are going to be done\n    const newField = { ...fields[fieldName],\n      value: fieldValue ? fieldValue : '',\n      errorMessages: [],\n      state: 'default'\n    };\n    validate(newField);\n    setFields({ ...fields,\n      [fieldName]: newField\n    });\n    setHasChanged(true);\n  }; // validate field state and change error messages / state\n\n\n  const validate = field => {\n    if (field.isRequired) {\n      var _field$value;\n\n      if (!((_field$value = field.value) !== null && _field$value !== void 0 && _field$value.trim())) {\n        addError(field, 'Field must be filled.');\n      }\n\n      setState(field);\n    }\n\n    if (field.validators) {\n      for (const validator of field.validators) {\n        if (!validator.validator(field.value)) {\n          addError(field, validator.errorMessage);\n        }\n      }\n\n      setState(field);\n    }\n  }; // add error message to field state\n\n\n  const addError = (field, error) => {\n    if (error) {\n      var _field$errorMessages;\n\n      (_field$errorMessages = field.errorMessages) === null || _field$errorMessages === void 0 ? void 0 : _field$errorMessages.push(error);\n    }\n  }; // set state of a field (errors should have been set before)\n\n\n  const setState = field => {\n    var _field$errorMessages2;\n\n    if ((_field$errorMessages2 = field.errorMessages) !== null && _field$errorMessages2 !== void 0 && _field$errorMessages2.length) {\n      field.state = 'error';\n    } else {\n      // display success state only if not empty\n      if (field.value) {\n        field.state = 'success';\n      } else {\n        field.state = 'default';\n      }\n    }\n  }; // callback (on submit of a form)\n\n\n  const onSubmit = () => {\n    const fieldsCopy = { ...fields\n    };\n\n    for (const key in fieldsCopy) {\n      var _fieldsCopy$key$value;\n\n      // trim just strings\n      fieldsCopy[key].value = typeof fieldsCopy[key].value === 'string' ? (_fieldsCopy$key$value = fieldsCopy[key].value) === null || _fieldsCopy$key$value === void 0 ? void 0 : _fieldsCopy$key$value.trim() : fieldsCopy[key].value; // reset state to 'default' (valid inputs wont be highlighted)\n\n      fieldsCopy[key].state = 'default';\n    }\n\n    submitCallback(fieldsCopy); // .catch((error: any) => {\n    // FUTURE IMPLEMENTATION (backend error):\n    // const fieldsCopy = { ...fields };\n    // for (const key in error.details.validation) {\n    //   const newField = { ...fields[key], error: error.details.validation[key].errorMessage, state: 'error' };\n    //   fieldsCopy[key] = newField;\n    // }\n    // setFields(fieldsCopy);\n    // });\n\n    setFields(fieldsCopy);\n    setHasChanged(false);\n  }; // set all input fields to values (used for edit form)\n\n\n  const reinitialize = useCallback(fieldValues => {\n    setFields(transformFormData(fieldValues));\n  }, [transformFormData]); // on change of an input, check whether submit button should be disabled\n\n  useEffect(() => {\n    // are all validated inputs valid?\n    const isFormValid = () => {\n      for (const key in fields) {\n        var _fields$key$errorMess;\n\n        if ((_fields$key$errorMess = fields[key].errorMessages) !== null && _fields$key$errorMess !== void 0 && _fields$key$errorMess.length) return false;\n      }\n\n      return true;\n    }; // are all required inputs filled?\n\n\n    const areRequiredFilled = () => {\n      for (const key in fields) {\n        var _fields$key$value;\n\n        if (fields[key].isRequired && !((_fields$key$value = fields[key].value) !== null && _fields$key$value !== void 0 && _fields$key$value.trim())) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fields, hasChanged]);\n  return {\n    fields,\n    reinitialize,\n    onChange,\n    onSubmit,\n    isSubmitDisabled\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useState","useForm","initFields","submitCallback","transformFormData","values","defaultFields","key","isRequired","validators","state","value","fields","setFields","isSubmitDisabled","setIsSubmitDisabled","hasChanged","setHasChanged","onChange","fieldName","fieldValue","newField","errorMessages","validate","field","trim","addError","setState","validator","errorMessage","error","push","length","onSubmit","fieldsCopy","reinitialize","fieldValues","isFormValid","areRequiredFilled"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { TextInputProps } from '@patternfly/react-core';\nimport { useCallback, useEffect, useState } from 'react';\n\nexport interface IFieldValues {\n  [key: string]: string | undefined;\n}\n\ninterface IValidator {\n  validator: Function;\n  errorMessage: string;\n}\n\ninterface IField {\n  value?: string;\n  errorMessages?: string[];\n  state?: TextInputProps['validated'];\n  isRequired?: boolean;\n  validators?: IValidator[];\n}\n\nexport interface IFields {\n  [key: string]: IField;\n}\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of an input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * Input strings are trimmed.\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initFields - Init form state (just values and validators)\n * @param submitCallback - Function to call when submitting user input data\n *\n * initFields has to specify all inputs (keys to IFields) - even if just empty objects.\n *\n * @returns form states and access functions\n *  -> fields           - whole form state\n *  -> reinitialize     - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - is submit button disabled?\n *\n * initFields and fields objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessages -- actual error messages (in case of an error)\n *    -> state  -- state of a field ('default', 'success', 'error') (check out: https://www.patternfly.org/v4/components/text-input/)\n *    -> isRequired   -- is field required?\n *    -> validators:  -- validation functions and their error messages\n *      -> validator    -- validation function\n *      -> errorMessage -- error message that should be set in a case of an error\n */\nexport const useForm = (initFields: Omit<Omit<IFields, 'errorMessages'>, 'state'>, submitCallback: Function) => {\n  // transform init data (add default data + possibly apply new values)\n  const transformFormData = useCallback(\n    (values?: IFieldValues): IFields => {\n      const defaultFields: IFields = {};\n      for (const key in initFields) {\n        defaultFields[key] = {};\n\n        // init data\n        defaultFields[key].isRequired = initFields[key].isRequired;\n        // SHALLOW COPY (should not change anyway)\n        defaultFields[key].validators = initFields[key].validators;\n\n        // additional data\n        defaultFields[key].state = 'default';\n        if (values?.[key]) {\n          defaultFields[key].value = values[key];\n        } else if (initFields[key].value) {\n          defaultFields[key].value = initFields[key].value;\n        } else {\n          defaultFields[key].value = '';\n        }\n      }\n      return defaultFields;\n    },\n    [initFields]\n  );\n\n  const [fields, setFields] = useState<IFields>(transformFormData());\n\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  // has any field been changed?\n  // important for edit page (do not submit until any new content)\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // callback (on change of an input)\n  const onChange = (fieldName: string, fieldValue: any) => {\n    // also delete old error messages, new checks are going to be done\n    const newField = {\n      ...fields[fieldName],\n      value: fieldValue ? fieldValue : '',\n      errorMessages: [],\n      state: 'default' as TextInputProps['validated'],\n    };\n    validate(newField);\n    setFields({ ...fields, [fieldName]: newField });\n\n    setHasChanged(true);\n  };\n\n  // validate field state and change error messages / state\n  const validate = (field: IField) => {\n    if (field.isRequired) {\n      if (!field.value?.trim()) {\n        addError(field, 'Field must be filled.');\n      }\n      setState(field);\n    }\n    if (field.validators) {\n      for (const validator of field.validators) {\n        if (!validator.validator(field.value)) {\n          addError(field, validator.errorMessage);\n        }\n      }\n      setState(field);\n    }\n  };\n\n  // add error message to field state\n  const addError = (field: IField, error: string) => {\n    if (error) {\n      field.errorMessages?.push(error);\n    }\n  };\n\n  // set state of a field (errors should have been set before)\n  const setState = (field: IField) => {\n    if (field.errorMessages?.length) {\n      field.state = 'error';\n    } else {\n      // display success state only if not empty\n      if (field.value) {\n        field.state = 'success';\n      } else {\n        field.state = 'default';\n      }\n    }\n  };\n\n  // callback (on submit of a form)\n  const onSubmit = () => {\n    const fieldsCopy = { ...fields };\n    for (const key in fieldsCopy) {\n      // trim just strings\n      fieldsCopy[key].value = typeof fieldsCopy[key].value === 'string' ? fieldsCopy[key].value?.trim() : fieldsCopy[key].value;\n      // reset state to 'default' (valid inputs wont be highlighted)\n      fieldsCopy[key].state = 'default';\n    }\n\n    submitCallback(fieldsCopy);\n    // .catch((error: any) => {\n    // FUTURE IMPLEMENTATION (backend error):\n    // const fieldsCopy = { ...fields };\n    // for (const key in error.details.validation) {\n    //   const newField = { ...fields[key], error: error.details.validation[key].errorMessage, state: 'error' };\n    //   fieldsCopy[key] = newField;\n    // }\n    // setFields(fieldsCopy);\n    // });\n\n    setFields(fieldsCopy);\n    setHasChanged(false);\n  };\n\n  // set all input fields to values (used for edit form)\n  const reinitialize = useCallback(\n    (fieldValues: IFieldValues) => {\n      setFields(transformFormData(fieldValues));\n    },\n    [transformFormData]\n  );\n\n  // on change of an input, check whether submit button should be disabled\n  useEffect(() => {\n    // are all validated inputs valid?\n    const isFormValid = () => {\n      for (const key in fields) {\n        if (fields[key].errorMessages?.length) return false;\n      }\n\n      return true;\n    };\n\n    // are all required inputs filled?\n    const areRequiredFilled = () => {\n      for (const key in fields) {\n        if (fields[key].isRequired && !fields[key].value?.trim()) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fields, hasChanged]);\n\n  return { fields, reinitialize, onChange, onSubmit, isSubmitDisabled };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}