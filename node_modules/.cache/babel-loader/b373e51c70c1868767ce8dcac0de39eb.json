{"ast":null,"code":"import _defineProperty from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DescriptionList/description-list';\nimport { formatBreakpointMods } from '../../helpers';\n\nvar setBreakpointModifiers = function setBreakpointModifiers(prefix, modifiers) {\n  var mods = modifiers;\n  return Object.keys(mods || {}).reduce(function (acc, curr) {\n    return curr === 'default' ? Object.assign(Object.assign({}, acc), _defineProperty({}, prefix, mods[curr])) : Object.assign(Object.assign({}, acc), _defineProperty({}, \"\".concat(prefix, \"-on-\").concat(curr), mods[curr]));\n  }, {});\n};\n\nexport var DescriptionList = function DescriptionList(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$isHorizontal = _a.isHorizontal,\n      isHorizontal = _a$isHorizontal === void 0 ? false : _a$isHorizontal,\n      isAutoColumnWidths = _a.isAutoColumnWidths,\n      isAutoFit = _a.isAutoFit,\n      isInlineGrid = _a.isInlineGrid,\n      isCompact = _a.isCompact,\n      isFluid = _a.isFluid,\n      isFillColumns = _a.isFillColumns,\n      columnModifier = _a.columnModifier,\n      autoFitMinModifier = _a.autoFitMinModifier,\n      horizontalTermWidthModifier = _a.horizontalTermWidthModifier,\n      orientation = _a.orientation,\n      style = _a.style,\n      props = __rest(_a, [\"className\", \"children\", \"isHorizontal\", \"isAutoColumnWidths\", \"isAutoFit\", \"isInlineGrid\", \"isCompact\", \"isFluid\", \"isFillColumns\", \"columnModifier\", \"autoFitMinModifier\", \"horizontalTermWidthModifier\", \"orientation\", \"style\"]);\n\n  if (isAutoFit && autoFitMinModifier) {\n    style = Object.assign(Object.assign({}, style), setBreakpointModifiers('--pf-c-description-list--GridTemplateColumns--min', autoFitMinModifier));\n  }\n\n  if (isHorizontal && horizontalTermWidthModifier) {\n    style = Object.assign(Object.assign({}, style), setBreakpointModifiers('--pf-c-description-list--m-horizontal__term--width', horizontalTermWidthModifier));\n  }\n\n  return React.createElement(\"dl\", Object.assign({\n    className: css(styles.descriptionList, (isHorizontal || isFluid) && styles.modifiers.horizontal, isAutoColumnWidths && styles.modifiers.autoColumnWidths, isAutoFit && styles.modifiers.autoFit, formatBreakpointMods(columnModifier, styles), formatBreakpointMods(orientation, styles), isInlineGrid && styles.modifiers.inlineGrid, isCompact && styles.modifiers.compact, isFluid && styles.modifiers.fluid, isFillColumns && styles.modifiers.fillColumns, className),\n    style: style\n  }, props), children);\n};\nDescriptionList.displayName = 'DescriptionList';","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,0EAAnB;AACA,SAASC,oBAAT,QAAqC,eAArC;;AAkEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,MAAD,EAAiBC,SAAjB,EAAmD;EAChF,IAAMC,IAAI,GAAGD,SAAb;EACA,OAAOE,MAAM,CAACC,IAAP,CAAYF,IAAI,IAAI,EAApB,EAAwBG,MAAxB,CACL,UAACC,GAAD,EAAMC,IAAN;IAAA,OACEA,IAAI,KAAK,SAAT,GAAoBJ,gCAAMG,GAAN,uBAAYN,MAAZ,EAAqBE,IAAI,CAACK,IAAD,CAAzB,EAApB,GAAuDJ,gCAAMG,GAAN,iCAAeN,MAAf,iBAA4BO,IAA5B,GAAqCL,IAAI,CAACK,IAAD,CAAzC,EADzD;EAAA,CADK,EAGL,EAHK,CAAP;AAKD,CAPD;;AASA,OAAO,IAAMC,eAAe,GAAkD,SAAjEA,eAAiE,CAACC,EAAD,EAgBnD;qBAFpBA,GAbLC;MAAAA,sCAAY;oBAaPD,GAZLE;MAAAA,oCAAW;wBAYNF,GAXLG;MAAAA,4CAAe;MACfC,qBAUKJ,GAVLI;MACAC,YASKL,GATLK;MACAC,eAQKN,GARLM;MACAC,YAOKP,GAPLO;MACAC,UAMKR,GANLQ;MACAC,gBAKKT,GALLS;MACAC,iBAIKV,GAJLU;MACAC,qBAGKX,GAHLW;MACAC,8BAEKZ,GAFLY;MACAC,cACKb,GADLa;MACAC,QAAKd,GAALc;MACGC,QAAKC,WAfqE,oOAerE;;EAER,IAAIX,SAAS,IAAIM,kBAAjB,EAAqC;IACnCG,KAAK,mCACAA,KADA,GAEAxB,sBAAsB,CAAC,mDAAD,EAAsDqB,kBAAtD,CAFtB,CAAL;EAID;;EACD,IAAIR,YAAY,IAAIS,2BAApB,EAAiD;IAC/CE,KAAK,mCACAA,KADA,GAEAxB,sBAAsB,CAAC,oDAAD,EAAuDsB,2BAAvD,CAFtB,CAAL;EAID;;EAED,OACE1B;IACEe,SAAS,EAAEd,GAAG,CACZC,MAAM,CAAC6B,eADK,EAEZ,CAACd,YAAY,IAAIK,OAAjB,KAA6BpB,MAAM,CAACI,SAAP,CAAiB0B,UAFlC,EAGZd,kBAAkB,IAAIhB,MAAM,CAACI,SAAP,CAAiB2B,gBAH3B,EAIZd,SAAS,IAAIjB,MAAM,CAACI,SAAP,CAAiB4B,OAJlB,EAKZ/B,oBAAoB,CAACqB,cAAD,EAAiBtB,MAAjB,CALR,EAMZC,oBAAoB,CAACwB,WAAD,EAAczB,MAAd,CANR,EAOZkB,YAAY,IAAIlB,MAAM,CAACI,SAAP,CAAiB6B,UAPrB,EAQZd,SAAS,IAAInB,MAAM,CAACI,SAAP,CAAiB8B,OARlB,EASZd,OAAO,IAAIpB,MAAM,CAACI,SAAP,CAAiB+B,KAThB,EAUZd,aAAa,IAAIrB,MAAM,CAACI,SAAP,CAAiBgC,WAVtB,EAWZvB,SAXY,CADhB;IAcEa,KAAK,EAAEA;EAdT,GAeMC,KAfN,GAiBGb,QAjBH,CADF;AAqBD,CAnDM;AAqDPH,eAAe,CAAC0B,WAAhB,GAA8B,iBAA9B","names":["React","css","styles","formatBreakpointMods","setBreakpointModifiers","prefix","modifiers","mods","Object","keys","reduce","acc","curr","DescriptionList","_a","className","children","isHorizontal","isAutoColumnWidths","isAutoFit","isInlineGrid","isCompact","isFluid","isFillColumns","columnModifier","autoFitMinModifier","horizontalTermWidthModifier","orientation","style","props","__rest","descriptionList","horizontal","autoColumnWidths","autoFit","inlineGrid","compact","fluid","fillColumns","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DescriptionList/DescriptionList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DescriptionList/description-list';\nimport { formatBreakpointMods } from '../../helpers';\n\nexport interface BreakpointModifiers {\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}\n\nexport interface DescriptionListProps extends Omit<React.HTMLProps<HTMLDListElement>, 'type'> {\n  /** Anything that can be rendered inside of the list */\n  children?: React.ReactNode;\n  /** Additional classes added to the list */\n  className?: string;\n  /** Sets the description list to auto fit. */\n  isAutoFit?: boolean;\n  /** Sets the description list component term and description pair to a horizontal layout. */\n  isHorizontal?: boolean;\n  /** Sets the description list to format automatically. */\n  isAutoColumnWidths?: boolean;\n  /** Modifies the description list display to inline-grid. */\n  isInlineGrid?: boolean;\n  /** Sets the description list to compact styling. */\n  isCompact?: boolean;\n  /** Sets a horizontal description list to have fluid styling. */\n  isFluid?: boolean;\n  /** Sets the the default placement of description list groups to fill from top to bottom. */\n  isFillColumns?: boolean;\n  /** Sets the number of columns on the description list at various breakpoints */\n  columnModifier?: {\n    default?: '1Col' | '2Col' | '3Col';\n    sm?: '1Col' | '2Col' | '3Col';\n    md?: '1Col' | '2Col' | '3Col';\n    lg?: '1Col' | '2Col' | '3Col';\n    xl?: '1Col' | '2Col' | '3Col';\n    '2xl'?: '1Col' | '2Col' | '3Col';\n  };\n  /** Indicates how the menu will align at various breakpoints. */\n  orientation?: {\n    sm?: 'vertical' | 'horizontal';\n    md?: 'vertical' | 'horizontal';\n    lg?: 'vertical' | 'horizontal';\n    xl?: 'vertical' | 'horizontal';\n    '2xl'?: 'vertical' | 'horizontal';\n  };\n  /** Sets the minimum column size for the auto-fit (isAutoFit) layout at various breakpoints. */\n  autoFitMinModifier?: {\n    default?: string;\n    sm?: string;\n    md?: string;\n    lg?: string;\n    xl?: string;\n    '2xl'?: string;\n  };\n  /** Sets the horizontal description list's term column width at various breakpoints. */\n  horizontalTermWidthModifier?: {\n    default?: string;\n    sm?: string;\n    md?: string;\n    lg?: string;\n    xl?: string;\n    '2xl'?: string;\n  };\n}\n\nconst setBreakpointModifiers = (prefix: string, modifiers: BreakpointModifiers) => {\n  const mods = modifiers as Partial<{ [k: string]: string }>;\n  return Object.keys(mods || {}).reduce(\n    (acc, curr) =>\n      curr === 'default' ? { ...acc, [prefix]: mods[curr] } : { ...acc, [`${prefix}-on-${curr}`]: mods[curr] },\n    {}\n  );\n};\n\nexport const DescriptionList: React.FunctionComponent<DescriptionListProps> = ({\n  className = '',\n  children = null,\n  isHorizontal = false,\n  isAutoColumnWidths,\n  isAutoFit,\n  isInlineGrid,\n  isCompact,\n  isFluid,\n  isFillColumns,\n  columnModifier,\n  autoFitMinModifier,\n  horizontalTermWidthModifier,\n  orientation,\n  style,\n  ...props\n}: DescriptionListProps) => {\n  if (isAutoFit && autoFitMinModifier) {\n    style = {\n      ...style,\n      ...setBreakpointModifiers('--pf-c-description-list--GridTemplateColumns--min', autoFitMinModifier)\n    };\n  }\n  if (isHorizontal && horizontalTermWidthModifier) {\n    style = {\n      ...style,\n      ...setBreakpointModifiers('--pf-c-description-list--m-horizontal__term--width', horizontalTermWidthModifier)\n    };\n  }\n\n  return (\n    <dl\n      className={css(\n        styles.descriptionList,\n        (isHorizontal || isFluid) && styles.modifiers.horizontal,\n        isAutoColumnWidths && styles.modifiers.autoColumnWidths,\n        isAutoFit && styles.modifiers.autoFit,\n        formatBreakpointMods(columnModifier, styles),\n        formatBreakpointMods(orientation, styles),\n        isInlineGrid && styles.modifiers.inlineGrid,\n        isCompact && styles.modifiers.compact,\n        isFluid && styles.modifiers.fluid,\n        isFillColumns && styles.modifiers.fillColumns,\n        className\n      )}\n      style={style}\n      {...props}\n    >\n      {children}\n    </dl>\n  );\n};\n\nDescriptionList.displayName = 'DescriptionList';\n"]},"metadata":{},"sourceType":"module"}