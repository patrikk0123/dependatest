{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx\",\n    _this = this;\n\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchSelect = _ref => {\n  let {\n    attribute,\n    callback\n  } = _ref;\n  const [selectOptions, setSelectOptions] = useState([]);\n  const [isSelectOpen, setIsSelectOpen] = useState(false);\n  const [selected, setSelected] = useState();\n  const timer = useRef();\n  const fetchData = useCallback(function () {\n    let val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const config = {\n      params: {\n        pageSize: 20,\n        q: undefined\n      }\n    };\n    if (val !== '') config.params.q = `${attribute}=like=\"%${val}%\"`;\n    callback(config).then(response => {\n      const data = response.data.content.map(obj => {\n        return {\n          value: obj[attribute]\n        };\n      }).map((option, index) => /*#__PURE__*/_jsxDEV(SelectOption, {\n        value: option.value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 45\n      }, _this));\n      setSelectOptions(data);\n    });\n  }, [callback, attribute]);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const clearSelection = () => {\n    setSelected(null);\n    setIsSelectOpen(false);\n    fetchData();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    variant: SelectVariant.typeahead,\n    onToggle: isOpen => {\n      setIsSelectOpen(isOpen);\n    },\n    onSelect: (event, selection, isPlaceholder) => {\n      if (isPlaceholder) clearSelection();else {\n        if (event) {\n          // setSelectOptions([<SelectOption key={0} value={selection} />]);\n          clearTimeout(timer === null || timer === void 0 ? void 0 : timer.current);\n          timer.current = setTimeout(() => fetchData(selection), 100);\n        }\n\n        setSelected(selection);\n        setIsSelectOpen(false);\n      }\n    },\n    onTypeaheadInputChanged: val => {\n      clearTimeout(timer === null || timer === void 0 ? void 0 : timer.current);\n      timer.current = setTimeout(() => fetchData(val), 100);\n    },\n    isInputFilterPersisted: true,\n    isInputValuePersisted: true,\n    onClear: clearSelection,\n    onFilter: () => {\n      // filtering is done above\n      return selectOptions;\n    },\n    selections: selected,\n    isOpen: isSelectOpen,\n    hasInlineFilter: true,\n    children: selectOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Select","SelectOption","SelectVariant","useCallback","useEffect","useRef","useState","SearchSelect","attribute","callback","selectOptions","setSelectOptions","isSelectOpen","setIsSelectOpen","selected","setSelected","timer","fetchData","val","config","params","pageSize","q","undefined","then","response","data","content","map","obj","value","option","index","clearSelection","typeahead","isOpen","event","selection","isPlaceholder","clearTimeout","current","setTimeout"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx"],"sourcesContent":["import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\ninterface ISearchSelect {\n  attribute: string;\n  callback: Function;\n}\n\nexport const SearchSelect = ({ attribute, callback }: ISearchSelect) => {\n  const [selectOptions, setSelectOptions] = useState<any>([]);\n  const [isSelectOpen, setIsSelectOpen] = useState<boolean>(false);\n  const [selected, setSelected] = useState<any>();\n  const timer = useRef<any>();\n\n  const fetchData = useCallback(\n    (val: string = '') => {\n      const config = { params: { pageSize: 20, q: undefined } };\n      if (val !== '') config.params.q = `${attribute}=like=\"%${val}%\"`;\n      callback(config).then((response: any) => {\n        const data = response.data.content\n          .map((obj: any) => {\n            return {\n              value: obj[attribute],\n            };\n          })\n          .map((option: any, index: any) => <SelectOption key={index} value={option.value} />);\n        setSelectOptions(data);\n      });\n    },\n    [callback, attribute]\n  );\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const clearSelection = () => {\n    setSelected(null);\n    setIsSelectOpen(false);\n    fetchData();\n  };\n\n  return (\n    <Select\n      variant={SelectVariant.typeahead}\n      onToggle={(isOpen) => {\n        setIsSelectOpen(isOpen);\n      }}\n      onSelect={(event, selection, isPlaceholder) => {\n        if (isPlaceholder) clearSelection();\n        else {\n          if (event) {\n            // setSelectOptions([<SelectOption key={0} value={selection} />]);\n            clearTimeout(timer?.current);\n            timer.current = setTimeout(() => fetchData(selection as string), 100);\n          }\n          setSelected(selection);\n          setIsSelectOpen(false);\n        }\n      }}\n      onTypeaheadInputChanged={(val: string) => {\n        clearTimeout(timer?.current);\n        timer.current = setTimeout(() => fetchData(val), 100);\n      }}\n      isInputFilterPersisted={true}\n      isInputValuePersisted={true}\n      onClear={clearSelection}\n      onFilter={() => {\n        // filtering is done above\n        return selectOptions;\n      }}\n      selections={selected}\n      isOpen={isSelectOpen}\n      hasInlineFilter={true}\n    >\n      {selectOptions}\n    </Select>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}