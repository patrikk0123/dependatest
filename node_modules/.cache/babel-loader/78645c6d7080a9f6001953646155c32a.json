{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx\";\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute equality to current filter text value (=like= operator)\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param onSelect - function to be called when option is selected (value is passed in)\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param shouldDisplayDescription - should options display description? (if any)\n */\nexport const SearchSelect = _ref => {\n  let {\n    fetchCallback,\n    attribute,\n    onSelect,\n    delay = 200,\n    pageSize = 20,\n    shouldDisplayDescription = false\n  } = _ref;\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState([]); // data downloaded on first load\n\n  const [defaultData, setDefaultData] = useState([]); // currenyly selected option\n\n  const [selected, setSelected] = useState();\n  const [isSelectOpen, setIsSelectOpen] = useState(false);\n  const ref = useRef(); // used to fetch data after delay\n\n  const timeout = useRef(); // fetch data and save them\n  // uses pageSize\n  // sets filter config (if there is non empty filterText)\n\n  const fetchData = useCallback(function (filterText) {\n    let setDefaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const config = {\n      params: {\n        pageSize\n      }\n    };\n\n    if (filterText) {\n      config.params.q = `${attribute}=like=\"%${filterText}%\"`;\n    }\n\n    fetchCallback(config).then(response => {\n      var _ref$current, _ref$current$state, _ref$current2, _ref$current2$state;\n\n      const currentValue = ref !== null && ref !== void 0 && (_ref$current = ref.current) !== null && _ref$current !== void 0 && (_ref$current$state = _ref$current.state) !== null && _ref$current$state !== void 0 && _ref$current$state.typeaheadInputValue ? ref === null || ref === void 0 ? void 0 : (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : (_ref$current2$state = _ref$current2.state) === null || _ref$current2$state === void 0 ? void 0 : _ref$current2$state.typeaheadInputValue : '';\n      const data = response.data.content;\n      setCurrentData(data);\n      if (setDefaults) setDefaultData(data);\n    });\n  }, [fetchCallback, attribute, pageSize]); // load first / default data\n\n  useEffect(() => {\n    fetchData('', true);\n  }, [fetchData]); // on clear, set default values\n\n  const clearSelection = () => {\n    setCurrentData(defaultData);\n    setSelected(undefined);\n    setIsSelectOpen(false);\n    onSelect('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    ref: ref,\n    variant: SelectVariant.typeahead,\n    onToggle: isOpen => {\n      setIsSelectOpen(isOpen);\n    },\n    onTypeaheadInputChanged: value => {\n      clearTimeout(timeout === null || timeout === void 0 ? void 0 : timeout.current);\n\n      if (value !== '') {\n        timeout.current = setTimeout(() => fetchData(value), delay);\n      } else {\n        // if filter is empty string, just set default options\n        setCurrentData(defaultData);\n      }\n    },\n    onSelect: (event, selection, isPlaceholder) => {\n      if (isPlaceholder) clearSelection();else {\n        if (event) {\n          // do this only when select option is clicked\n          // (for some reason, this function is called also on blur)\n          fetchData(selection);\n          onSelect(selection);\n        }\n\n        setSelected(selection);\n        setIsSelectOpen(false);\n      }\n    },\n    onFilter: () => {\n      // filtering is not done here\n      return undefined;\n    },\n    onClear: clearSelection,\n    selections: selected,\n    isOpen: isSelectOpen,\n    isInputValuePersisted: true,\n    isInputFilterPersisted: true,\n    children: currentData.map((option, index) => /*#__PURE__*/_jsxDEV(SelectOption, {\n      value: option[attribute],\n      description: shouldDisplayDescription && option['description']\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Select","SelectOption","SelectVariant","useCallback","useEffect","useRef","useState","SearchSelect","fetchCallback","attribute","onSelect","delay","pageSize","shouldDisplayDescription","currentData","setCurrentData","defaultData","setDefaultData","selected","setSelected","isSelectOpen","setIsSelectOpen","ref","timeout","fetchData","filterText","setDefaults","config","params","q","then","response","currentValue","current","state","typeaheadInputValue","data","content","clearSelection","undefined","typeahead","isOpen","value","clearTimeout","setTimeout","event","selection","isPlaceholder","map","option","index"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx"],"sourcesContent":["import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { AxiosRequestConfig } from 'axios';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\ninterface ISearchSelectProps {\n  fetchCallback: Function;\n  attribute: string;\n  onSelect: Function;\n  delay?: number;\n  pageSize?: number;\n  shouldDisplayDescription?: boolean;\n}\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute equality to current filter text value (=like= operator)\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param onSelect - function to be called when option is selected (value is passed in)\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param shouldDisplayDescription - should options display description? (if any)\n */\nexport const SearchSelect = ({\n  fetchCallback,\n  attribute,\n  onSelect,\n  delay = 200,\n  pageSize = 20,\n  shouldDisplayDescription = false,\n}: ISearchSelectProps) => {\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState<any[]>([]);\n  // data downloaded on first load\n  const [defaultData, setDefaultData] = useState<any[]>([]);\n  // currenyly selected option\n  const [selected, setSelected] = useState<string | undefined>();\n  const [isSelectOpen, setIsSelectOpen] = useState<boolean>(false);\n  const ref = useRef<any>();\n  // used to fetch data after delay\n  const timeout = useRef<NodeJS.Timeout>();\n\n  // fetch data and save them\n  // uses pageSize\n  // sets filter config (if there is non empty filterText)\n  const fetchData = useCallback(\n    (filterText: string, setDefaults: boolean = false) => {\n      const config: AxiosRequestConfig = { params: { pageSize } };\n      if (filterText) {\n        config.params.q = `${attribute}=like=\"%${filterText}%\"`;\n      }\n\n      fetchCallback(config).then((response: any) => {\n        const currentValue = ref?.current?.state?.typeaheadInputValue ? ref?.current?.state?.typeaheadInputValue : '';\n        const data = response.data.content;\n        setCurrentData(data);\n        if (setDefaults) setDefaultData(data);\n      });\n    },\n    [fetchCallback, attribute, pageSize]\n  );\n\n  // load first / default data\n  useEffect(() => {\n    fetchData('', true);\n  }, [fetchData]);\n\n  // on clear, set default values\n  const clearSelection = () => {\n    setCurrentData(defaultData);\n    setSelected(undefined);\n    setIsSelectOpen(false);\n    onSelect('');\n  };\n\n  return (\n    <Select\n      ref={ref}\n      variant={SelectVariant.typeahead}\n      onToggle={(isOpen) => {\n        setIsSelectOpen(isOpen);\n      }}\n      onTypeaheadInputChanged={(value: string) => {\n        clearTimeout(timeout?.current);\n        if (value !== '') {\n          timeout.current = setTimeout(() => fetchData(value), delay);\n        } else {\n          // if filter is empty string, just set default options\n          setCurrentData(defaultData);\n        }\n      }}\n      onSelect={(event, selection, isPlaceholder) => {\n        if (isPlaceholder) clearSelection();\n        else {\n          if (event) {\n            // do this only when select option is clicked\n            // (for some reason, this function is called also on blur)\n            fetchData(selection as string);\n            onSelect(selection);\n          }\n          setSelected(selection as string);\n          setIsSelectOpen(false);\n        }\n      }}\n      onFilter={() => {\n        // filtering is not done here\n        return undefined;\n      }}\n      onClear={clearSelection}\n      selections={selected}\n      isOpen={isSelectOpen}\n      isInputValuePersisted={true}\n      isInputFilterPersisted={true}\n    >\n      {currentData.map((option: any, index: number) => (\n        <SelectOption key={index} value={option[attribute]} description={shouldDisplayDescription && option['description']} />\n      ))}\n    </Select>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}