{"ast":null,"code":"import { useCallback, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n/**\n * React hook to manage data, loading and error states when data is being loaded. See also {@link DataContainer}.\n *\n * @param service - Service to be executed to load data\n * @param config - Config object, initLoadingState (provides init values for loading state)\n * @returns Object with data, loading and error property\n */\nexport const useDataContainer = function (service) {\n  let {\n    initLoadingState = true\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const ERROR_INIT = ''; // initial states when component is loaded for the first time\n\n  const [data, setData] = useState();\n  const [loading, setLoading] = useState(initLoadingState);\n  const [error, setError] = useState(ERROR_INIT);\n  const loadingCount = useRef(0);\n  const lastAbortController = useRef();\n\n  const invokeService = _ref => {\n    var _lastAbortController$;\n\n    let {\n      serviceData = null,\n      requestConfig = {}\n    } = _ref;\n    loadingCount.current++; // set delayed (delayed to prevent flashing experience and unnecessary renders) loading state\n\n    setTimeout(() => {\n      if (loadingCount.current) {\n        setLoading(true);\n      }\n    }, 200); // abort previous request\n\n    (_lastAbortController$ = lastAbortController.current) === null || _lastAbortController$ === void 0 ? void 0 : _lastAbortController$.abort(); // create abort signal for new request\n\n    lastAbortController.current = new AbortController();\n    requestConfig.signal = lastAbortController.current.signal;\n    return service({\n      serviceData,\n      requestConfig\n    }).then(response => {\n      // In a future React version (potentially in React 17) this could be removed as it will be default behavior\n      // https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973\n      ReactDOM.unstable_batchedUpdates(() => {\n        setLoading(false);\n        setData(response.data);\n        setError(ERROR_INIT);\n      });\n      return response;\n    }).catch(error => {\n      console.log(error); // execute only for last request\n\n      if (loadingCount.current <= 1) {\n        // In a future React version (potentially in React 17) this could be removed as it will be default behavior\n        // https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973\n        ReactDOM.unstable_batchedUpdates(() => {\n          var _error$response, _error$response$data;\n\n          setLoading(false); // prefer errorMessage if exists\n\n          const errorMessage = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errorMessage;\n\n          if (errorMessage) {\n            setError(errorMessage);\n          } else {\n            setError(error.toString());\n          }\n        });\n      }\n\n      throw error;\n    }).finally(() => {\n      loadingCount.current--;\n    });\n  };\n\n  return {\n    data: data,\n    loading: loading,\n    error: error,\n    refresh: useCallback(invokeService, [service])\n  };\n};","map":{"version":3,"names":["useCallback","useRef","useState","ReactDOM","useDataContainer","service","initLoadingState","ERROR_INIT","data","setData","loading","setLoading","error","setError","loadingCount","lastAbortController","invokeService","serviceData","requestConfig","current","setTimeout","abort","AbortController","signal","then","response","unstable_batchedUpdates","catch","console","log","errorMessage","toString","finally","refresh"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/DataContainer/useDataContainer.ts"],"sourcesContent":["import { AxiosRequestConfig } from 'axios';\nimport { useCallback, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport interface IService<T = {}> {\n  /**\n   * Service data, eg { id: '2' }\n   */\n  serviceData?: T;\n\n  /**\n   * Axios based request config, eg { signal: <abortingSignal> }\n   */\n  requestConfig?: AxiosRequestConfig;\n}\n\n/**\n * React hook to manage data, loading and error states when data is being loaded. See also {@link DataContainer}.\n *\n * @param service - Service to be executed to load data\n * @param config - Config object, initLoadingState (provides init values for loading state)\n * @returns Object with data, loading and error property\n */\nexport const useDataContainer = (service: Function, { initLoadingState = true }: { initLoadingState?: boolean } = {}) => {\n  const ERROR_INIT: string = '';\n\n  // initial states when component is loaded for the first time\n  const [data, setData] = useState<any>();\n  const [loading, setLoading] = useState<boolean>(initLoadingState);\n  const [error, setError] = useState<string>(ERROR_INIT);\n\n  const loadingCount = useRef<number>(0);\n  const lastAbortController = useRef<AbortController>();\n\n  const invokeService = ({ serviceData = null, requestConfig = {} }: IService<any>) => {\n    loadingCount.current++;\n\n    // set delayed (delayed to prevent flashing experience and unnecessary renders) loading state\n    setTimeout(() => {\n      if (loadingCount.current) {\n        setLoading(true);\n      }\n    }, 200);\n\n    // abort previous request\n    lastAbortController.current?.abort();\n\n    // create abort signal for new request\n    lastAbortController.current = new AbortController();\n    requestConfig.signal = lastAbortController.current.signal;\n\n    return service({ serviceData, requestConfig })\n      .then((response: any) => {\n        // In a future React version (potentially in React 17) this could be removed as it will be default behavior\n        // https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973\n        ReactDOM.unstable_batchedUpdates(() => {\n          setLoading(false);\n          setData(response.data);\n          setError(ERROR_INIT);\n        });\n        return response;\n      })\n      .catch((error: any) => {\n        console.log(error);\n\n        // execute only for last request\n        if (loadingCount.current <= 1) {\n          // In a future React version (potentially in React 17) this could be removed as it will be default behavior\n          // https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973\n          ReactDOM.unstable_batchedUpdates(() => {\n            setLoading(false);\n\n            // prefer errorMessage if exists\n            const errorMessage = error.response?.data?.errorMessage;\n            if (errorMessage) {\n              setError(errorMessage);\n            } else {\n              setError(error.toString());\n            }\n          });\n        }\n        throw error;\n      })\n      .finally(() => {\n        loadingCount.current--;\n      });\n  };\n\n  return {\n    data: data,\n    loading: loading,\n    error: error,\n    refresh: useCallback(invokeService, [service]),\n  };\n};\n"],"mappings":"AACA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,UAACC,OAAD,EAAyF;EAAA,IAArE;IAAEC,gBAAgB,GAAG;EAArB,CAAqE,uEAAP,EAAO;EACvH,MAAMC,UAAkB,GAAG,EAA3B,CADuH,CAGvH;;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;EACA,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAUI,gBAAV,CAAtC;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAASK,UAAT,CAAlC;EAEA,MAAMO,YAAY,GAAGb,MAAM,CAAS,CAAT,CAA3B;EACA,MAAMc,mBAAmB,GAAGd,MAAM,EAAlC;;EAEA,MAAMe,aAAa,GAAG,QAA+D;IAAA;;IAAA,IAA9D;MAAEC,WAAW,GAAG,IAAhB;MAAsBC,aAAa,GAAG;IAAtC,CAA8D;IACnFJ,YAAY,CAACK,OAAb,GADmF,CAGnF;;IACAC,UAAU,CAAC,MAAM;MACf,IAAIN,YAAY,CAACK,OAAjB,EAA0B;QACxBR,UAAU,CAAC,IAAD,CAAV;MACD;IACF,CAJS,EAIP,GAJO,CAAV,CAJmF,CAUnF;;IACA,yBAAAI,mBAAmB,CAACI,OAApB,gFAA6BE,KAA7B,GAXmF,CAanF;;IACAN,mBAAmB,CAACI,OAApB,GAA8B,IAAIG,eAAJ,EAA9B;IACAJ,aAAa,CAACK,MAAd,GAAuBR,mBAAmB,CAACI,OAApB,CAA4BI,MAAnD;IAEA,OAAOlB,OAAO,CAAC;MAAEY,WAAF;MAAeC;IAAf,CAAD,CAAP,CACJM,IADI,CACEC,QAAD,IAAmB;MACvB;MACA;MACAtB,QAAQ,CAACuB,uBAAT,CAAiC,MAAM;QACrCf,UAAU,CAAC,KAAD,CAAV;QACAF,OAAO,CAACgB,QAAQ,CAACjB,IAAV,CAAP;QACAK,QAAQ,CAACN,UAAD,CAAR;MACD,CAJD;MAKA,OAAOkB,QAAP;IACD,CAVI,EAWJE,KAXI,CAWGf,KAAD,IAAgB;MACrBgB,OAAO,CAACC,GAAR,CAAYjB,KAAZ,EADqB,CAGrB;;MACA,IAAIE,YAAY,CAACK,OAAb,IAAwB,CAA5B,EAA+B;QAC7B;QACA;QACAhB,QAAQ,CAACuB,uBAAT,CAAiC,MAAM;UAAA;;UACrCf,UAAU,CAAC,KAAD,CAAV,CADqC,CAGrC;;UACA,MAAMmB,YAAY,sBAAGlB,KAAK,CAACa,QAAT,4EAAG,gBAAgBjB,IAAnB,yDAAG,qBAAsBsB,YAA3C;;UACA,IAAIA,YAAJ,EAAkB;YAChBjB,QAAQ,CAACiB,YAAD,CAAR;UACD,CAFD,MAEO;YACLjB,QAAQ,CAACD,KAAK,CAACmB,QAAN,EAAD,CAAR;UACD;QACF,CAVD;MAWD;;MACD,MAAMnB,KAAN;IACD,CA/BI,EAgCJoB,OAhCI,CAgCI,MAAM;MACblB,YAAY,CAACK,OAAb;IACD,CAlCI,CAAP;EAmCD,CApDD;;EAsDA,OAAO;IACLX,IAAI,EAAEA,IADD;IAELE,OAAO,EAAEA,OAFJ;IAGLE,KAAK,EAAEA,KAHF;IAILqB,OAAO,EAAEjC,WAAW,CAACgB,aAAD,EAAgB,CAACX,OAAD,CAAhB;EAJf,CAAP;AAMD,CAvEM"},"metadata":{},"sourceType":"module"}