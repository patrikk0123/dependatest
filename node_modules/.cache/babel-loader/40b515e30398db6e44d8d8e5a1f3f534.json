{"ast":null,"code":"import { __rest } from \"tslib\";\n/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\n\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\n\nclass BaseBody extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.omitOnRow = props => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        onRow\n      } = props,\n            ret = __rest(props, [\"onRow\"]);\n\n      return ret;\n    };\n  }\n\n  shouldComponentUpdate(nextProps) {\n    // Skip checking props against `onRow` since that can be bound at render().\n    // That's not particularly good practice but you never know how the users\n    // prefer to define the handler.\n    // Check for wrapper based override.\n    const {\n      renderers\n    } = nextProps;\n\n    if (renderers && renderers.body && renderers.body.wrapper && renderers.body.wrapper.shouldComponentUpdate) {\n      if (typeof renderers.body.wrapper.shouldComponentUpdate === 'function') {\n        return renderers.body.wrapper.shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n\n      return true;\n    }\n\n    return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      onRow,\n      rows,\n      rowKey,\n      columns,\n      renderers\n    } = _a,\n          props = __rest(_a, [\"onRow\", \"rows\", \"rowKey\", \"columns\", \"renderers\"]);\n\n    const children = rows.map((rowData, index) => {\n      const key = resolveRowKey({\n        rowData,\n        rowIndex: index,\n        rowKey\n      });\n      return React.createElement(BodyRow, {\n        key,\n        renderers: renderers.body,\n        onRow,\n        rowKey: key,\n        rowIndex: index,\n        rowData,\n        columns\n      });\n    });\n    return React.createElement(renderers.body.wrapper, props, children);\n  }\n\n}\n\nBaseBody.defaultProps = {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onRow: function () {\n    return {};\n  }\n};\nexport const Body = props => React.createElement(ProviderContext.Consumer, null, _ref => {\n  let {\n    columns,\n    renderers\n  } = _ref;\n  return React.createElement(BaseBody, Object.assign({\n    columns: columns,\n    renderers: renderers\n  }, props));\n});","map":{"version":3,"mappings":";AAAA;;;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,eAAT,QAAgC,YAAhC;;AAYA,MAAMC,QAAN,SAAuBL,KAAK,CAACM,SAA7B,CAAqD;EAArDC;;;IA4BE,iBAAaC,KAAD,IAAqB;MAC/B;MACA,MAAM;QAAEC;MAAF,IAAoBD,KAA1B;MAAA,MAAkBE,GAAG,UAAKF,KAAL,EAAf,SAAe,CAArB;;MACA,OAAOE,GAAP;IACD,CAJD;EAuBD;;EA7CCC,qBAAqB,CAACC,SAAD,EAAqB;IACxC;IACA;IACA;IACA;IACA,MAAM;MAAEC;IAAF,IAAgBD,SAAtB;;IAEA,IACEC,SAAS,IACTA,SAAS,CAACC,IADV,IAEAD,SAAS,CAACC,IAAV,CAAeC,OAFf,IAGCF,SAAS,CAACC,IAAV,CAAeC,OAAf,CAA2CJ,qBAJ9C,EAKE;MACA,IAAI,OAAQE,SAAS,CAACC,IAAV,CAAeC,OAAf,CAA2CJ,qBAAnD,KAA6E,UAAjF,EAA6F;QAC3F,OAAQE,SAAS,CAACC,IAAV,CAAeC,OAAf,CAA2CJ,qBAA3C,CAAiEK,IAAjE,CAAsE,IAAtE,EAA4EJ,SAA5E,EAAuF,EAAvF,EAA2F,EAA3F,CAAR;MACD;;MACD,OAAO,IAAP;IACD;;IAED,OAAO,CAACX,OAAO,CAAC,KAAKgB,SAAL,CAAe,KAAKT,KAApB,CAAD,EAA6B,KAAKS,SAAL,CAAeL,SAAf,CAA7B,CAAf;EACD;;EAQDM,MAAM;IACJ,MAAMC,KAAwD,KAAKX,KAAnE;IAAA,MAAM;MAAEC,KAAF;MAASW,IAAT;MAAeC,MAAf;MAAuBC,OAAvB;MAAgCT;IAAhC,IAAyCM,EAA/C;IAAA,MAAoDX,KAAK,cAAnD,mDAAmD,CAAzD;;IACA,MAAMe,QAAQ,GAAIH,IAAW,CAACI,GAAZ,CAAgB,CAACC,OAAD,EAAmBC,KAAnB,KAAoC;MACpE,MAAMC,GAAG,GAAGzB,aAAa,CAAC;QAAEuB,OAAF;QAAWG,QAAQ,EAAEF,KAArB;QAA4BL;MAA5B,CAAD,CAAzB;MACA,OAAOrB,KAAK,CAAC6B,aAAN,CAAoB1B,OAApB,EAA6B;QAClCwB,GADkC;QAElCd,SAAS,EAAEA,SAAS,CAACC,IAFa;QAGlCL,KAHkC;QAIlCY,MAAM,EAAEM,GAJ0B;QAKlCC,QAAQ,EAAEF,KALwB;QAMlCD,OANkC;QAOlCH;MAPkC,CAA7B,CAAP;IASD,CAXiB,CAAlB;IAaA,OAAOtB,KAAK,CAAC6B,aAAN,CAAoBhB,SAAS,CAACC,IAAV,CAAeC,OAAnC,EAAiEP,KAAjE,EAAwEe,QAAxE,CAAP;EACD;;AAlDkD;;AAC5ClB,wBAAe;EACpB;EACAI,KAAK,EAAE;IAAA,OAAmB,EAAnB;EAAA;AAFa,CAAf;AAoDT,OAAO,MAAMqB,IAAI,GAAItB,KAAD,IAClBR,oBAACI,eAAe,CAAC2B,QAAjB,EAAyB,IAAzB,EACG;EAAA,IAAC;IAAET,OAAF;IAAWT;EAAX,CAAD;EAAA,OAA4Bb,oBAACK,QAAD,EAAS2B;IAACV,OAAO,EAAEA,OAAV;IAAmBT,SAAS,EAAEA;EAA9B,GAA6CL,KAA7C,CAAT,CAA5B;AAAA,CADH,CADK","names":["React","isEqual","resolveRowKey","BodyRow","ProviderContext","BaseBody","Component","constructor","props","onRow","ret","shouldComponentUpdate","nextProps","renderers","body","wrapper","call","omitOnRow","render","_a","rows","rowKey","columns","children","map","rowData","index","key","rowIndex","createElement","Body","Consumer","Object"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/base/body.tsx"],"sourcesContent":["/**\n * body.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { RowsType, RowType, RowKeyType, RenderersTypes, createElementType, ColumnsType } from './types';\nimport { resolveRowKey } from './resolve-row-key';\nimport { BodyRow } from './body-row';\nimport { ProviderContext } from './provider';\n\nexport interface BodyProps {\n  onRow?: Function;\n  rows: RowsType;\n  rowKey?: RowKeyType;\n  columns?: ColumnsType;\n  renderers?: RenderersTypes['renderers'];\n  mappedRows?: any;\n  className?: string;\n}\n\nclass BaseBody extends React.Component<BodyProps, {}> {\n  static defaultProps = {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onRow: (...args: any) => ({})\n  };\n\n  shouldComponentUpdate(nextProps: BodyProps) {\n    // Skip checking props against `onRow` since that can be bound at render().\n    // That's not particularly good practice but you never know how the users\n    // prefer to define the handler.\n    // Check for wrapper based override.\n    const { renderers } = nextProps;\n\n    if (\n      renderers &&\n      renderers.body &&\n      renderers.body.wrapper &&\n      (renderers.body.wrapper as React.Component).shouldComponentUpdate\n    ) {\n      if (typeof (renderers.body.wrapper as React.Component).shouldComponentUpdate === 'function') {\n        return (renderers.body.wrapper as React.Component).shouldComponentUpdate.call(this, nextProps, {}, {});\n      }\n      return true;\n    }\n\n    return !isEqual(this.omitOnRow(this.props), this.omitOnRow(nextProps));\n  }\n\n  omitOnRow = (props: BodyProps) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { onRow, ...ret } = props;\n    return ret;\n  };\n\n  render() {\n    const { onRow, rows, rowKey, columns, renderers, ...props } = this.props;\n    const children = (rows as []).map((rowData: RowType, index: number) => {\n      const key = resolveRowKey({ rowData, rowIndex: index, rowKey });\n      return React.createElement(BodyRow, {\n        key,\n        renderers: renderers.body,\n        onRow,\n        rowKey: key,\n        rowIndex: index,\n        rowData,\n        columns\n      });\n    });\n\n    return React.createElement(renderers.body.wrapper as createElementType, props, children);\n  }\n}\n\nexport const Body = (props: BodyProps) => (\n  <ProviderContext.Consumer>\n    {({ columns, renderers }) => <BaseBody columns={columns} renderers={renderers} {...props} />}\n  </ProviderContext.Consumer>\n);\n"]},"metadata":{},"sourceType":"module"}