{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { canUseDOM } from '../../helpers/util';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nexport var ToolbarChipGroupContent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarChipGroupContent, _React$Component);\n\n  var _super = _createSuper(ToolbarChipGroupContent);\n\n  function ToolbarChipGroupContent() {\n    _classCallCheck(this, ToolbarChipGroupContent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToolbarChipGroupContent, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          isExpanded = _a.isExpanded,\n          chipGroupContentRef = _a.chipGroupContentRef,\n          clearAllFilters = _a.clearAllFilters,\n          showClearFiltersButton = _a.showClearFiltersButton,\n          clearFiltersButtonText = _a.clearFiltersButtonText,\n          collapseListedFiltersBreakpoint = _a.collapseListedFiltersBreakpoint,\n          numberOfFilters = _a.numberOfFilters,\n          numberOfFiltersText = _a.numberOfFiltersText,\n          customChipGroupContent = _a.customChipGroupContent,\n          props = __rest(_a, [\"className\", \"isExpanded\", \"chipGroupContentRef\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"numberOfFilters\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n\n      var clearChipGroups = function clearChipGroups() {\n        clearAllFilters();\n      };\n\n      var collapseListedFilters = false;\n\n      if (collapseListedFiltersBreakpoint === 'all') {\n        collapseListedFilters = true;\n      } else if (canUseDOM) {\n        collapseListedFilters = (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];\n      }\n\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbarContent, (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden, className)\n      }, (numberOfFilters === 0 || isExpanded) && {\n        hidden: true\n      }, {\n        ref: chipGroupContentRef\n      }, props), React.createElement(ToolbarGroup, Object.assign({\n        className: css(collapseListedFilters && styles.modifiers.hidden)\n      }, collapseListedFilters && {\n        hidden: true\n      }, collapseListedFilters && {\n        'aria-hidden': true\n      })), collapseListedFilters && numberOfFilters > 0 && !isExpanded && React.createElement(ToolbarGroup, null, React.createElement(ToolbarItem, null, numberOfFiltersText(numberOfFilters))), showClearFiltersButton && !isExpanded && !customChipGroupContent && React.createElement(ToolbarItem, null, React.createElement(Button, {\n        variant: \"link\",\n        onClick: clearChipGroups,\n        isInline: true\n      }, clearFiltersButtonText)), customChipGroupContent && customChipGroupContent);\n    }\n  }]);\n\n  return ToolbarChipGroupContent;\n}(React.Component);\nToolbarChipGroupContent.displayName = 'ToolbarChipGroupContent';\nToolbarChipGroupContent.defaultProps = {\n  clearFiltersButtonText: 'Clear all filters',\n  collapseListedFiltersBreakpoint: 'lg',\n  numberOfFiltersText: function numberOfFiltersText(numberOfFilters) {\n    return \"\".concat(numberOfFilters, \" filters applied\");\n  }\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","canUseDOM","ToolbarItem","Button","ToolbarGroup","globalBreakpoints","ToolbarChipGroupContent","props","className","_a","isExpanded","chipGroupContentRef","clearAllFilters","showClearFiltersButton","clearFiltersButtonText","collapseListedFiltersBreakpoint","numberOfFilters","numberOfFiltersText","customChipGroupContent","__rest","clearChipGroups","collapseListedFilters","window","innerWidth","toolbarContent","modifiers","hidden","ref","Object","variant","onClick","isInline","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarChipGroupContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { canUseDOM } from '../../helpers/util';\n\nimport { RefObject } from 'react';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { globalBreakpoints } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarChipGroupContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the data toolbar content row */\n  className?: string;\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** Chip group content reference for passing to data toolbar children */\n  chipGroupContentRef?: RefObject<any>;\n  /** optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Flag indicating that the clear all filters button should be visible */\n  showClearFiltersButton: boolean;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Total number of filters currently being applied across all ToolbarFilter components */\n  numberOfFilters: number;\n  /** Text to display in the total number of applied filters ToolbarFilter */\n  numberOfFiltersText?: (numberOfFilters: number) => string;\n  /** The breakpoint at which the listed filters in chip groups are collapsed down to a summary */\n  collapseListedFiltersBreakpoint?: 'all' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Custom additional content appended to the generated chips. To maintain spacing and styling, each node should be a ToolbarItem or ToolbarGroup. This property will remove the built in \"Clear all filters\" button. */\n  customChipGroupContent?: React.ReactNode;\n}\n\nexport class ToolbarChipGroupContent extends React.Component<ToolbarChipGroupContentProps> {\n  static displayName = 'ToolbarChipGroupContent';\n  static defaultProps: PickOptional<ToolbarChipGroupContentProps> = {\n    clearFiltersButtonText: 'Clear all filters',\n    collapseListedFiltersBreakpoint: 'lg',\n    numberOfFiltersText: (numberOfFilters: number) => `${numberOfFilters} filters applied`\n  };\n\n  render() {\n    const {\n      className,\n      isExpanded,\n      chipGroupContentRef,\n      clearAllFilters,\n      showClearFiltersButton,\n      clearFiltersButtonText,\n      collapseListedFiltersBreakpoint,\n      numberOfFilters,\n      numberOfFiltersText,\n      customChipGroupContent,\n      ...props\n    } = this.props;\n\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n\n    let collapseListedFilters = false;\n    if (collapseListedFiltersBreakpoint === 'all') {\n      collapseListedFilters = true;\n    } else if (canUseDOM) {\n      collapseListedFilters =\n        (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];\n    }\n\n    return (\n      <div\n        className={css(\n          styles.toolbarContent,\n          (numberOfFilters === 0 || isExpanded) && styles.modifiers.hidden,\n          className\n        )}\n        {...((numberOfFilters === 0 || isExpanded) && { hidden: true })}\n        ref={chipGroupContentRef}\n        {...props}\n      >\n        <ToolbarGroup\n          className={css(collapseListedFilters && styles.modifiers.hidden)}\n          {...(collapseListedFilters && { hidden: true })}\n          {...(collapseListedFilters && { 'aria-hidden': true })}\n        />\n        {collapseListedFilters && numberOfFilters > 0 && !isExpanded && (\n          <ToolbarGroup>\n            <ToolbarItem>{numberOfFiltersText(numberOfFilters)}</ToolbarItem>\n          </ToolbarGroup>\n        )}\n        {showClearFiltersButton && !isExpanded && !customChipGroupContent && (\n          <ToolbarItem>\n            <Button variant=\"link\" onClick={clearChipGroups} isInline>\n              {clearFiltersButtonText}\n            </Button>\n          </ToolbarItem>\n        )}\n        {customChipGroupContent && customChipGroupContent}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}