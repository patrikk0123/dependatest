{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var CardHeader = function CardHeader(_a) {\n  var _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      id = _a.id,\n      onExpand = _a.onExpand,\n      toggleButtonProps = _a.toggleButtonProps,\n      isToggleRightAligned = _a.isToggleRightAligned,\n      props = __rest(_a, [\"children\", \"className\", \"id\", \"onExpand\", \"toggleButtonProps\", \"isToggleRightAligned\"]);\n\n  return React.createElement(CardContext.Consumer, null, function (_ref) {\n    var cardId = _ref.cardId;\n    var cardHeaderToggle = React.createElement(\"div\", {\n      className: css(styles.cardHeaderToggle)\n    }, React.createElement(Button, Object.assign({\n      variant: \"plain\",\n      type: \"button\",\n      onClick: function onClick(evt) {\n        onExpand(evt, cardId);\n      }\n    }, toggleButtonProps), React.createElement(\"span\", {\n      className: css(styles.cardHeaderToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"aria-hidden\": \"true\"\n    }))));\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.cardHeader, isToggleRightAligned && styles.modifiers.toggleRight, className),\n      id: id\n    }, props), onExpand && !isToggleRightAligned && cardHeaderToggle, children, onExpand && isToggleRightAligned && cardHeaderToggle);\n  });\n};\nCardHeader.displayName = 'CardHeader';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,mDAAnB;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AAiBA,OAAO,IAAMC,UAAU,GAA6C,SAAvDA,UAAuD,CAACC,EAAD,EAQ9C;oBAFAA,GALpBC;MAAAA,oCAAW;qBAKSD,GAJpBE;MAAAA,sCAAY;MACZC,KAGoBH,GAHpBG;MACAC,WAEoBJ,GAFpBI;MACAC,oBACoBL,GADpBK;MACAC,uBAAoBN,GAApBM;MACGC,QAAKC,WAP2D,wFAO3D;;EACa,OACrBf,oBAACG,WAAW,CAACa,QAAb,EAAqB,IAArB,EACG,gBAAe;IAAA,IAAZC,MAAY,QAAZA,MAAY;IACd,IAAMC,gBAAgB,GACpBlB;MAAKS,SAAS,EAAER,GAAG,CAACC,MAAM,CAACgB,gBAAR;IAAnB,GACElB,oBAACI,MAAD,EAAOe;MACLC,OAAO,EAAC,OADH;MAELC,IAAI,EAAC,QAFA;MAGLC,OAAO,EAAE,oBAAG,EAAG;QACbX,QAAQ,CAACY,GAAD,EAAMN,MAAN,CAAR;MACD;IALI,GAMDL,iBANC,CAAP,EAQEZ;MAAMS,SAAS,EAAER,GAAG,CAACC,MAAM,CAACsB,oBAAR;IAApB,GACExB,oBAACK,cAAD,EAAe;MAAA,eAAa;IAAb,CAAf,CADF,CARF,CADF,CADF;IAiBA,OACEL;MACES,SAAS,EAAER,GAAG,CAACC,MAAM,CAACuB,UAAR,EAAoBZ,oBAAoB,IAAIX,MAAM,CAACwB,SAAP,CAAiBC,WAA7D,EAA0ElB,SAA1E,CADhB;MAEEC,EAAE,EAAEA;IAFN,GAGMI,KAHN,GAKGH,QAAQ,IAAI,CAACE,oBAAb,IAAqCK,gBALxC,EAMGV,QANH,EAOGG,QAAQ,IAAIE,oBAAZ,IAAoCK,gBAPvC,CADF;EAWD,CA9BH,CADqB;AAiCtB,CAzCM;AA0CPZ,UAAU,CAACsB,WAAX,GAAyB,YAAzB","names":["React","css","styles","CardContext","Button","AngleRightIcon","CardHeader","_a","children","className","id","onExpand","toggleButtonProps","isToggleRightAligned","props","__rest","Consumer","cardId","cardHeaderToggle","Object","variant","type","onClick","evt","cardHeaderToggleIcon","cardHeader","modifiers","toggleRight","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Card/CardHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { CardContext } from './Card';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\n\nexport interface CardHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the CardHeader */\n  children?: React.ReactNode;\n  /** Additional classes added to the CardHeader */\n  className?: string;\n  /** ID of the card header. */\n  id?: string;\n  /** Callback expandable card */\n  onExpand?: (event: React.MouseEvent, id: string) => void;\n  /** Additional props for expandable toggle button */\n  toggleButtonProps?: any;\n  /** Whether to right-align expandable toggle button */\n  isToggleRightAligned?: boolean;\n}\n\nexport const CardHeader: React.FunctionComponent<CardHeaderProps> = ({\n  children = null,\n  className = '',\n  id,\n  onExpand,\n  toggleButtonProps,\n  isToggleRightAligned,\n  ...props\n}: CardHeaderProps) => (\n  <CardContext.Consumer>\n    {({ cardId }) => {\n      const cardHeaderToggle = (\n        <div className={css(styles.cardHeaderToggle)}>\n          <Button\n            variant=\"plain\"\n            type=\"button\"\n            onClick={evt => {\n              onExpand(evt, cardId);\n            }}\n            {...toggleButtonProps}\n          >\n            <span className={css(styles.cardHeaderToggleIcon)}>\n              <AngleRightIcon aria-hidden=\"true\" />\n            </span>\n          </Button>\n        </div>\n      );\n\n      return (\n        <div\n          className={css(styles.cardHeader, isToggleRightAligned && styles.modifiers.toggleRight, className)}\n          id={id}\n          {...props}\n        >\n          {onExpand && !isToggleRightAligned && cardHeaderToggle}\n          {children}\n          {onExpand && isToggleRightAligned && cardHeaderToggle}\n        </div>\n      );\n    }}\n  </CardContext.Consumer>\n);\nCardHeader.displayName = 'CardHeader';\n"]},"metadata":{},"sourceType":"module"}