{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { getUniqueId } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport class NavExpandable extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.id = this.props.id || getUniqueId();\n    this.state = {\n      expandedState: this.props.isExpanded,\n      ouiaStateId: getDefaultOUIAId(NavExpandable.displayName)\n    };\n\n    this.onExpand = (e, onToggle) => {\n      const {\n        expandedState\n      } = this.state;\n\n      if (this.props.onExpand) {\n        this.props.onExpand(e, !expandedState);\n      } else {\n        this.setState(prevState => ({\n          expandedState: !prevState.expandedState\n        }));\n        const {\n          groupId\n        } = this.props;\n        onToggle(e, groupId, !expandedState);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      expandedState: this.props.isExpanded\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.isExpanded !== prevProps.isExpanded) {\n      this.setState({\n        expandedState: this.props.isExpanded\n      });\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      title,\n      srText,\n      children,\n      className,\n      isActive,\n      ouiaId,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      groupId,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      id,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isExpanded,\n      buttonProps,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onExpand\n    } = _a,\n          props = __rest(_a, [\"title\", \"srText\", \"children\", \"className\", \"isActive\", \"ouiaId\", \"groupId\", \"id\", \"isExpanded\", \"buttonProps\", \"onExpand\"]);\n\n    const {\n      expandedState,\n      ouiaStateId\n    } = this.state;\n    return React.createElement(NavContext.Consumer, null, context => React.createElement(\"li\", Object.assign({\n      className: css(styles.navItem, styles.modifiers.expandable, expandedState && styles.modifiers.expanded, isActive && styles.modifiers.current, className)\n    }, getOUIAProps(NavExpandable.displayName, ouiaId !== undefined ? ouiaId : ouiaStateId), props), React.createElement(PageSidebarContext.Consumer, null, _ref => {\n      let {\n        isNavOpen\n      } = _ref;\n      return React.createElement(\"button\", Object.assign({\n        className: styles.navLink,\n        id: srText ? null : this.id,\n        onClick: e => this.onExpand(e, context.onToggle),\n        \"aria-expanded\": expandedState,\n        tabIndex: isNavOpen ? null : -1\n      }, buttonProps), title, React.createElement(\"span\", {\n        className: css(styles.navToggle)\n      }, React.createElement(\"span\", {\n        className: css(styles.navToggleIcon)\n      }, React.createElement(AngleRightIcon, {\n        \"aria-hidden\": \"true\"\n      }))));\n    }), React.createElement(\"section\", {\n      className: css(styles.navSubnav),\n      \"aria-labelledby\": this.id,\n      hidden: expandedState ? null : true\n    }, srText && React.createElement(\"h2\", {\n      className: css(a11yStyles.screenReader),\n      id: this.id\n    }, srText), React.createElement(\"ul\", {\n      className: css(styles.navList)\n    }, children))));\n  }\n\n}\nNavExpandable.displayName = 'NavExpandable';\nNavExpandable.defaultProps = {\n  srText: '',\n  isExpanded: false,\n  children: '',\n  className: '',\n  groupId: null,\n  isActive: false,\n  id: ''\n};","map":{"version":3,"mappings":"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","names":["React","styles","a11yStyles","css","AngleRightIcon","getUniqueId","NavContext","PageSidebarContext","getOUIAProps","getDefaultOUIAId","NavExpandable","Component","constructor","props","id","expandedState","isExpanded","ouiaStateId","displayName","e","onToggle","state","onExpand","setState","prevState","groupId","componentDidMount","componentDidUpdate","prevProps","render","_a","title","srText","children","className","isActive","ouiaId","buttonProps","Consumer","context","navItem","modifiers","expandable","expanded","current","undefined","isNavOpen","navLink","onClick","tabIndex","navToggle","navToggleIcon","navSubnav","hidden","screenReader","navList"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Nav/NavExpandable.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { getUniqueId } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface NavExpandableProps\n  extends React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>,\n    OUIAProps {\n  /** Title shown for the expandable list */\n  title: string;\n  /** If defined, screen readers will read this text instead of the list title */\n  srText?: string;\n  /** Boolean to programatically expand or collapse section */\n  isExpanded?: boolean;\n  /** Anything that can be rendered inside of the expandable list */\n  children?: React.ReactNode;\n  /** Additional classes added to the container */\n  className?: string;\n  /** Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component */\n  groupId?: string | number;\n  /** If true makes the expandable list title active */\n  isActive?: boolean;\n  /** Identifier to use for the section aria label */\n  id?: string;\n  /** allow consumer to optionally override this callback and manage expand state externally. if passed will not call Nav's onToggle. */\n  onExpand?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, val: boolean) => void;\n  /** Additional props added to the NavExpandable <button> */\n  buttonProps?: any;\n}\n\ninterface NavExpandableState {\n  expandedState: boolean;\n  ouiaStateId: string;\n}\n\nexport class NavExpandable extends React.Component<NavExpandableProps, NavExpandableState> {\n  static displayName = 'NavExpandable';\n  static defaultProps: PickOptional<NavExpandableProps> = {\n    srText: '',\n    isExpanded: false,\n    children: '',\n    className: '',\n    groupId: null as string,\n    isActive: false,\n    id: ''\n  };\n\n  id = this.props.id || getUniqueId();\n\n  state = {\n    expandedState: this.props.isExpanded,\n    ouiaStateId: getDefaultOUIAId(NavExpandable.displayName)\n  };\n\n  componentDidMount() {\n    this.setState({ expandedState: this.props.isExpanded });\n  }\n\n  componentDidUpdate(prevProps: NavExpandableProps) {\n    if (this.props.isExpanded !== prevProps.isExpanded) {\n      this.setState({ expandedState: this.props.isExpanded });\n    }\n  }\n\n  onExpand = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n    onToggle: (\n      event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n      groupId: string | number,\n      expandedState: boolean\n    ) => void\n  ) => {\n    const { expandedState } = this.state;\n    if (this.props.onExpand) {\n      this.props.onExpand(e, !expandedState);\n    } else {\n      this.setState(prevState => ({ expandedState: !prevState.expandedState }));\n      const { groupId } = this.props;\n      onToggle(e, groupId, !expandedState);\n    }\n  };\n\n  render() {\n    const {\n      title,\n      srText,\n      children,\n      className,\n      isActive,\n      ouiaId,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      groupId,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      id,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isExpanded,\n      buttonProps,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onExpand,\n      ...props\n    } = this.props;\n\n    const { expandedState, ouiaStateId } = this.state;\n\n    return (\n      <NavContext.Consumer>\n        {context => (\n          <li\n            className={css(\n              styles.navItem,\n              styles.modifiers.expandable,\n              expandedState && styles.modifiers.expanded,\n              isActive && styles.modifiers.current,\n              className\n            )}\n            {...getOUIAProps(NavExpandable.displayName, ouiaId !== undefined ? ouiaId : ouiaStateId)}\n            {...props}\n          >\n            <PageSidebarContext.Consumer>\n              {({ isNavOpen }) => (\n                <button\n                  className={styles.navLink}\n                  id={srText ? null : this.id}\n                  onClick={e => this.onExpand(e, context.onToggle)}\n                  aria-expanded={expandedState}\n                  tabIndex={isNavOpen ? null : -1}\n                  {...buttonProps}\n                >\n                  {title}\n                  <span className={css(styles.navToggle)}>\n                    <span className={css(styles.navToggleIcon)}>\n                      <AngleRightIcon aria-hidden=\"true\" />\n                    </span>\n                  </span>\n                </button>\n              )}\n            </PageSidebarContext.Consumer>\n            <section className={css(styles.navSubnav)} aria-labelledby={this.id} hidden={expandedState ? null : true}>\n              {srText && (\n                <h2 className={css(a11yStyles.screenReader)} id={this.id}>\n                  {srText}\n                </h2>\n              )}\n              <ul className={css(styles.navList)}>{children}</ul>\n            </section>\n          </li>\n        )}\n      </NavContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}