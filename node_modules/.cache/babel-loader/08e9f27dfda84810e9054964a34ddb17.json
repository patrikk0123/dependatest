{"ast":null,"code":"/**\n * types.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport { TableComposable } from '../../TableComposable/TableComposable';\nimport { Thead } from '../../TableComposable/Thead';\nimport { Tbody } from '../../TableComposable/Tbody';\nimport { Tr } from '../../TableComposable/Tr';\nimport { Th } from '../../TableComposable/Th';\nimport { Td } from '../../TableComposable/Td'; // Table Defaults\n\nexport const TableDefaults = {\n  renderers: {\n    table: TableComposable,\n    header: {\n      wrapper: Thead,\n      row: Tr,\n      cell: Th\n    },\n    body: {\n      wrapper: Tbody,\n      row: Tr,\n      cell: Td\n    }\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;AAgBA,SAASA,eAAT,QAAgC,uCAAhC;AACA,SAASC,KAAT,QAAsB,6BAAtB;AACA,SAASC,KAAT,QAAsB,6BAAtB;AACA,SAASC,EAAT,QAAmB,0BAAnB;AACA,SAASC,EAAT,QAAmB,0BAAnB;AACA,SAASC,EAAT,QAAmB,0BAAnB,C,CAoKA;;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BC,SAAS,EAAE;IACTC,KAAK,EAAER,eADE;IAETS,MAAM,EAAE;MACNC,OAAO,EAAET,KADH;MAENU,GAAG,EAAER,EAFC;MAGNS,IAAI,EAAER;IAHA,CAFC;IAOTS,IAAI,EAAE;MACJH,OAAO,EAAER,KADL;MAEJS,GAAG,EAAER,EAFD;MAGJS,IAAI,EAAEP;IAHF;EAPG;AADgB,CAAtB","names":["TableComposable","Thead","Tbody","Tr","Th","Td","TableDefaults","renderers","table","header","wrapper","row","cell","body"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/base/types.tsx"],"sourcesContent":["/**\n * types.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\n\nimport * as React from 'react';\nimport {\n  TooltipProps,\n  PopoverProps,\n  DropdownPosition,\n  DropdownDirection,\n  SelectOptionObject,\n  SelectProps\n} from '@patternfly/react-core';\nimport { TableComposable } from '../../TableComposable/TableComposable';\nimport { Thead } from '../../TableComposable/Thead';\nimport { Tbody } from '../../TableComposable/Tbody';\nimport { Tr } from '../../TableComposable/Tr';\nimport { Th } from '../../TableComposable/Th';\nimport { Td } from '../../TableComposable/Td';\nimport {\n  IActions,\n  ISortBy,\n  OnCheckChange,\n  OnCollapse,\n  OnExpand,\n  OnFavorite,\n  OnSelect,\n  OnSort,\n  OnToggleRowDetails,\n  OnTreeRowCollapse\n} from '../TableTypes';\nimport { CustomActionsToggleProps } from '../ActionsColumn';\n\n// Cell Type\nexport interface CellType {\n  property?: number | string;\n  transforms?: transformsType;\n  formatters?: formattersType;\n  props?: object;\n}\n\nexport interface TdSelectType {\n  /** The selectable variant */\n  variant?: 'checkbox' | 'radio';\n  /** Callback on select */\n  onSelect?: OnSelect;\n  /** Whether the cell is selected */\n  isSelected: boolean;\n  /** Whether to disable the selection */\n  disable?: boolean;\n  /** The row index */\n  rowIndex: number;\n  /** Additional props forwarded to select rowData */\n  props?: any;\n}\n\nexport interface TdActionsType {\n  /** The row index */\n  rowIndex?: number;\n  /** Cell actions */\n  items: IActions;\n  /** Whether to disable the actions */\n  disable?: boolean;\n  /** Actions dropdown position */\n  dropdownPosition?: DropdownPosition;\n  /** Actions dropdown direction */\n  dropdownDirection?: DropdownDirection;\n  /** Custom toggle for the actions menu */\n  actionsToggle?: (props: CustomActionsToggleProps) => React.ReactNode;\n}\n\nexport interface TdExpandType {\n  /** Flag indicating the child row associated with this cell is expanded */\n  isExpanded: boolean;\n  /** The row index */\n  rowIndex: number;\n  /** The column index */\n  columnIndex?: number;\n  /** On toggling the expansion */\n  onToggle?: OnCollapse;\n}\n\nexport interface TdCompoundExpandType {\n  /** determines if the corresponding expansion row is open */\n  isExpanded: boolean;\n  /** Callback on toggling of the expansion */\n  onToggle?: OnExpand;\n}\n\nexport interface TdFavoritesType {\n  /** Whether the corresponding row is favorited */\n  isFavorited: boolean;\n  /** Callback on clicking the favorites button */\n  onFavorite?: OnFavorite;\n  /** The row index */\n  rowIndex?: number;\n  /** Additional props forwarded to the FavoritesCell */\n  props?: any;\n}\n\nexport interface TdTreeRowType {\n  /** Callback when user expands/collapses a row to reveal/hide the row's children */\n  onCollapse: OnTreeRowCollapse;\n  /** (optional) Callback when user changes the checkbox on a row */\n  onCheckChange?: OnCheckChange;\n  /** (optional) Callback when user shows/hides the row details in responsive view. */\n  onToggleRowDetails?: OnToggleRowDetails;\n  /** The row index */\n  rowIndex?: number;\n  /** Additional props forwarded to the title cell of the tree row */\n  props?: any;\n}\n\nexport interface TdDraggableType {\n  /** Id of the draggable row */\n  id: string;\n}\n\n// Columns Types\nexport type ColumnsType = ColumnType[] | any[];\n\nexport interface ColumnType {\n  property?: string;\n  cell?: CellType;\n  props?: object;\n  header?: HeaderType;\n}\nexport interface HeaderType {\n  label?: string;\n  transforms?: transformsType;\n  formatters?: formattersType;\n  props?: object;\n  property?: string;\n  info?: ThInfoType;\n}\nexport interface ThInfoType {\n  tooltip?: React.ReactNode;\n  tooltipProps?: Omit<TooltipProps, 'content'>;\n  popover?: React.ReactNode;\n  popoverProps?: Omit<PopoverProps, 'bodyContent'>;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport interface ThSortType {\n  /** Wraps the content in a button and adds a sort icon - Click callback on the sortable cell */\n  onSort?: OnSort;\n  /** Provide the currently active column's index and direction */\n  sortBy: ISortBy;\n  /** The column index */\n  columnIndex: number;\n  /** True to make this a favoritable sorting cell */\n  isFavorites?: boolean;\n}\n\nexport interface ThSelectType {\n  /** Callback on select */\n  onSelect?: OnSelect;\n  /** Whether the cell is selected */\n  isSelected: boolean;\n  /** Flag indicating the select checkbox in the th is disabled */\n  isHeaderSelectDisabled?: boolean;\n}\n\nexport interface ThExpandType {\n  /** On toggling the expansion */\n  onToggle?: OnCollapse;\n  /** Whether all are expanded */\n  areAllExpanded: boolean;\n  /** Alternative aria label */\n  collapseAllAriaLabel: '';\n}\n\n// Rows Types\nexport type RowsType = RowType[] | [][];\nexport type RowKeyType = Function | string;\nexport interface RowType {\n  header?: HeaderType;\n  cell?: CellType;\n  [key: string]: any;\n}\n\n// Table Defaults\nexport const TableDefaults = {\n  renderers: {\n    table: TableComposable,\n    header: {\n      wrapper: Thead,\n      row: Tr,\n      cell: Th\n    },\n    body: {\n      wrapper: Tbody,\n      row: Tr,\n      cell: Td\n    }\n  }\n};\n\n// Formatters Types\nexport type formatterValueType = object | string | React.ElementType;\nexport interface ExtraParamsType {\n  rowData?: RowType;\n  column?: ColumnType;\n  columnIndex?: number;\n  property?: string;\n  rowIndex?: number;\n  rowKey?: RowKeyType;\n}\nexport type formatterType = (value: string | object, extra: ExtraParamsType) => formatterValueType;\nexport type formattersType = formatterType[];\n\n// Transforms Types\nexport type transformType = (value: string | object, extra: ExtraParamsType) => object;\nexport type transformsType = transformType[];\n\n// Renderers Types\nexport type createElementType = string | React.ComponentClass<any, any> | React.FunctionComponent<any>;\nexport type rendererType =\n  | string\n  | Function\n  | React.ComponentClass<any, any>\n  | React.FunctionComponent<any>\n  | React.Component<any, {}, any>;\nexport interface RendererType {\n  wrapper?: rendererType;\n  row?: rendererType;\n  cell?: rendererType;\n}\nexport interface RenderersTypes {\n  columns: ColumnsType;\n  renderers?: {\n    table?: any;\n    header?: RendererType;\n    body?: RendererType;\n  };\n  components?: {\n    table?: any;\n    header?: {\n      wrapper?: rendererType;\n      row?: rendererType;\n      cell?: rendererType;\n    };\n    body?: {\n      wrapper?: rendererType;\n      row?: rendererType;\n      cell?: rendererType;\n    };\n  };\n}\n\n// Editable cell props\n\nexport interface EditableTextCellProps {\n  /** Name of the input */\n  name: string;\n  /** Value to display in the cell */\n  value: string;\n  /** arbitrary data to pass to the internal text input in the editable text cell */\n  [key: string]: any;\n}\n\nexport interface EditableSelectInputProps {\n  /** Name of the select input */\n  name: string;\n  /** Value to display in the cell */\n  value: string | string[];\n  /** Flag controlling isOpen state of select */\n  isSelectOpen: boolean;\n  /** String or SelectOptionObject, or array of strings or SelectOptionObjects representing current selections */\n  selected: string | SelectOptionObject | (string | SelectOptionObject)[];\n  /** Array of react elements to display in the select menu */\n  options: React.ReactElement[];\n  /** Props to be passed down to the Select component */\n  editableSelectProps?: SelectProps;\n  /** arbitrary data to pass to the internal select component in the editable select input cell */\n  [key: string]: any;\n}\n"]},"metadata":{},"sourceType":"module"}