{"ast":null,"code":"/**\n * header-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { HeaderCellInfoWrapper } from '../HeaderCellInfoWrapper';\nexport const HeaderRow = _ref => {\n  let {\n    rowData,\n    rowIndex,\n    renderers,\n    onRow = () => ({})\n  } = _ref;\n  return React.createElement(renderers.row, onRow(rowData, {\n    rowIndex\n  }), rowData.map((column, columnIndex) => {\n    const {\n      property,\n      header = {},\n      props = {}\n    } = column;\n    const evaluatedProperty = property || header && header.property;\n    const {\n      label,\n      transforms = [],\n      formatters = [],\n      info = {}\n    } = header;\n    const extraParameters = {\n      columnIndex,\n      property: evaluatedProperty,\n      column\n    };\n    const transformedProps = evaluateTransforms(transforms, label, extraParameters);\n\n    if (!transformedProps) {\n      // tslint:disable-next-line:no-console\n      console.warn('Table.Header - Failed to receive a transformed result'); // eslint-disable-line max-len, no-console\n    }\n\n    let cellNode;\n    const {\n      tooltip,\n      tooltipProps,\n      popover,\n      popoverProps,\n      ariaLabel,\n      className\n    } = info; // consumer can specify header cell tooltip/popover in two ways, but the transforms approach is preferred,\n    // especially for sorting tables that use `transforms: [sortable]`\n    // {\n    //   title: 'Repositories',\n    //   header: {\n    //     info: {\n    //       tooltip: 'More information about repositories',\n    //       className: 'repositories-info-tip',\n    //       tooltipProps: {\n    //         isContentLeftAligned: true\n    //       }\n    //     }\n    //   }\n    // }\n    //\n    // {\n    //   title: 'Repositories',\n    //   transforms: [\n    //     info({\n    //       tooltip: 'More information about repositories',\n    //       className: 'repositories-info-tip',\n    //       tooltipProps: {\n    //         isContentLeftAligned: true\n    //       }\n    //     }),\n    //     sortable\n    //   ]\n    // },\n\n    if (tooltip) {\n      cellNode = React.createElement(HeaderCellInfoWrapper, {\n        variant: \"tooltip\",\n        info: tooltip,\n        tooltipProps: tooltipProps,\n        ariaLabel: ariaLabel,\n        className: className\n      }, transformedProps.children || evaluateFormatters(formatters)(label, extraParameters));\n    } else if (popover) {\n      cellNode = React.createElement(HeaderCellInfoWrapper, {\n        variant: \"popover\",\n        info: popover,\n        popoverProps: popoverProps,\n        ariaLabel: ariaLabel,\n        className: className\n      }, transformedProps.children || evaluateFormatters(formatters)(label, extraParameters));\n    } else {\n      cellNode = transformedProps.children || evaluateFormatters(formatters)(label, extraParameters);\n    }\n\n    return React.createElement(renderers.cell, Object.assign({\n      key: `${columnIndex}-header`\n    }, mergeProps(props, header && header.props, transformedProps)), cellNode);\n  }));\n};\nHeaderRow.displayName = 'HeaderRow';","map":{"version":3,"mappings":"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","names":["React","evaluateFormatters","evaluateTransforms","mergeProps","HeaderCellInfoWrapper","HeaderRow","rowData","rowIndex","renderers","onRow","createElement","row","map","column","columnIndex","property","header","props","evaluatedProperty","label","transforms","formatters","info","extraParameters","transformedProps","console","warn","cellNode","tooltip","tooltipProps","popover","popoverProps","ariaLabel","className","variant","children","cell","Object","key","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/base/header-row.tsx"],"sourcesContent":["/**\n * header-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { createElementType, ColumnType, HeaderType, RowsType, RendererType } from './types';\nimport { HeaderCellInfoWrapper } from '../HeaderCellInfoWrapper';\n\nexport interface HeaderRowProps {\n  rowData: RowsType;\n  rowIndex: number;\n  renderers: RendererType;\n  onRow?: Function;\n}\n\nexport const HeaderRow: React.FunctionComponent<HeaderRowProps> = ({\n  rowData,\n  rowIndex,\n  renderers,\n  onRow = () => ({})\n}: HeaderRowProps) =>\n  React.createElement(\n    renderers.row as createElementType,\n    onRow(rowData, { rowIndex }),\n    (rowData as []).map((column: ColumnType, columnIndex: number) => {\n      const { property, header = {} as HeaderType, props = {} } = column;\n      const evaluatedProperty = property || (header && header.property);\n      const { label, transforms = [], formatters = [], info = {} } = header;\n      const extraParameters = {\n        columnIndex,\n        property: evaluatedProperty,\n        column\n      };\n      const transformedProps = evaluateTransforms(transforms, label, extraParameters);\n\n      if (!transformedProps) {\n        // tslint:disable-next-line:no-console\n        console.warn('Table.Header - Failed to receive a transformed result'); // eslint-disable-line max-len, no-console\n      }\n\n      let cellNode;\n      const { tooltip, tooltipProps, popover, popoverProps, ariaLabel, className } = info;\n      // consumer can specify header cell tooltip/popover in two ways, but the transforms approach is preferred,\n      // especially for sorting tables that use `transforms: [sortable]`\n      // {\n      //   title: 'Repositories',\n      //   header: {\n      //     info: {\n      //       tooltip: 'More information about repositories',\n      //       className: 'repositories-info-tip',\n      //       tooltipProps: {\n      //         isContentLeftAligned: true\n      //       }\n      //     }\n      //   }\n      // }\n      //\n      // {\n      //   title: 'Repositories',\n      //   transforms: [\n      //     info({\n      //       tooltip: 'More information about repositories',\n      //       className: 'repositories-info-tip',\n      //       tooltipProps: {\n      //         isContentLeftAligned: true\n      //       }\n      //     }),\n      //     sortable\n      //   ]\n      // },\n      if (tooltip) {\n        cellNode = (\n          <HeaderCellInfoWrapper\n            variant=\"tooltip\"\n            info={tooltip}\n            tooltipProps={tooltipProps}\n            ariaLabel={ariaLabel}\n            className={className}\n          >\n            {transformedProps.children || evaluateFormatters(formatters)(label, extraParameters)}\n          </HeaderCellInfoWrapper>\n        );\n      } else if (popover) {\n        cellNode = (\n          <HeaderCellInfoWrapper\n            variant=\"popover\"\n            info={popover}\n            popoverProps={popoverProps}\n            ariaLabel={ariaLabel}\n            className={className}\n          >\n            {transformedProps.children || evaluateFormatters(formatters)(label, extraParameters)}\n          </HeaderCellInfoWrapper>\n        );\n      } else {\n        cellNode = transformedProps.children || evaluateFormatters(formatters)(label, extraParameters);\n      }\n\n      return React.createElement(\n        renderers.cell as createElementType,\n        {\n          key: `${columnIndex}-header`,\n          ...mergeProps(props, header && header.props, transformedProps)\n        },\n        cellNode\n      );\n    })\n  );\nHeaderRow.displayName = 'HeaderRow';\n"]},"metadata":{},"sourceType":"module"}