{"ast":null,"code":"import { useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form. All validation is done on change of input.\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Functions to validate inputs with\n * @param callback - Function to call when submitting user input data\n *\n * Both initValues and validators are objects whose keys are equal to ids of input elements.\n */\nexport const useForm = (initValues, validators, callback) => {\n  // are all form inputs valid?\n  const [isFormDisabled, setIsFormDisabled] = useState(false); // has user made any changes to the newly loaded form?\n  // at least one change must be to in order to submit form\n\n  const [hasChanged, setHasChanged] = useState(false); // input values\n\n  const [fieldValues, setFieldValues] = useState(initValues); // input error messages\n\n  const [fieldErrors, setFieldErrors] = useState({}); // inpur validation functons\n\n  const [fieldValidators, setFieldValidators] = useState(validators); // submitting state\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const initFieldStates = { ...initValues\n  };\n  Object.keys(initFieldStates).forEach(key => {\n    initFieldStates[key] = 'default';\n  }); // input states - 'default' | 'success' | 'error'\n\n  const [fieldStates, setFieldStates] = useState(initFieldStates);\n  useEffect(() => {\n    if (!Object.keys(fieldErrors).length && hasChanged) {\n      setIsFormDisabled(false);\n\n      if (isSubmitting) {\n        callback(fieldValues); // reset state to 'default' (valid inputs wont be highlighted)\n\n        setFieldStates(initFieldStates);\n      }\n    } else {\n      setIsFormDisabled(true);\n    }\n\n    setIsSubmitting(false);\n  }, [fieldErrors, hasChanged]);\n\n  const onChange = event => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n    setFieldValues({ ...fieldValues,\n      [fieldName]: fieldValue\n    });\n    setHasChanged(true); // if has any validator\n\n    if (fieldValidators[fieldName]) {\n      const error = fieldValidators[fieldName](fieldValue);\n      setError(fieldName, fieldValue, error);\n    }\n  };\n\n  const setError = (fieldName, fieldValue, error) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors,\n        [fieldName]: error\n      });\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'error'\n      });\n    } else {\n      const newErrors = { ...fieldErrors\n      };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n\n      if (fieldValue) {\n        setFieldStates({ ...fieldStates,\n          [fieldName]: 'success'\n        });\n      } else {\n        setFieldStates({ ...fieldStates,\n          [fieldName]: 'default'\n        });\n      }\n    }\n  };\n\n  const onSubmit = () => {\n    let errors = {}; // check all validated inputs before submit\n\n    for (const key in fieldValidators) {\n      const error = fieldValidators[key](fieldValues[key]);\n      if (error) errors[key] = error;\n    }\n\n    setFieldErrors(errors);\n    const fieldStates = { ...errors\n    };\n    Object.keys(fieldStates).forEach(key => {\n      fieldStates[key] = 'error';\n    });\n    setFieldStates(fieldStates);\n    setIsSubmitting(true);\n  };\n\n  return {\n    fieldValues,\n    fieldErrors,\n    fieldStates,\n    isFormDisabled,\n    onChange,\n    setFieldValues,\n    onSubmit\n  };\n};","map":{"version":3,"names":["useEffect","useState","useForm","initValues","validators","callback","isFormDisabled","setIsFormDisabled","hasChanged","setHasChanged","fieldValues","setFieldValues","fieldErrors","setFieldErrors","fieldValidators","setFieldValidators","isSubmitting","setIsSubmitting","initFieldStates","Object","keys","forEach","key","fieldStates","setFieldStates","length","onChange","event","fieldName","currentTarget","name","fieldValue","value","error","setError","newErrors","onSubmit","errors"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { BlobOptions } from 'buffer';\nimport { FunctionComponentFactory, useEffect, useState } from 'react';\n\ninterface IFieldValues {\n  [key: string]: string;\n}\n\ninterface IFieldErrors {\n  [key: string]: string | undefined;\n}\n\ninterface IFieldValidators {\n  [key: string]: IValidator;\n}\n\ninterface IValidator {\n  isRequired: boolean;\n  validator: Function;\n}\n\n/**\n * Hook to manage input values, validation and states of a form. All validation is done on change of input.\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Functions to validate inputs with\n * @param callback - Function to call when submitting user input data\n *\n * Both initValues and validators are objects whose keys are equal to ids of input elements.\n */\nexport const useForm = (initValues: IFieldValues, validators: IFieldValidators, callback: Function) => {\n  // are all form inputs valid?\n  const [isFormDisabled, setIsFormDisabled] = useState<boolean>(false);\n  // has user made any changes to the newly loaded form?\n  // at least one change must be to in order to submit form\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // input values\n  const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  // input error messages\n  const [fieldErrors, setFieldErrors] = useState<IFieldErrors>({});\n  // inpur validation functons\n  const [fieldValidators, setFieldValidators] = useState<IFieldValidators>(validators);\n\n  // submitting state\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n  const initFieldStates = { ...initValues };\n  Object.keys(initFieldStates).forEach((key) => {\n    initFieldStates[key] = 'default';\n  });\n  // input states - 'default' | 'success' | 'error'\n  const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n\n  useEffect(() => {\n    if (!Object.keys(fieldErrors).length && hasChanged) {\n      setIsFormDisabled(false);\n      if (isSubmitting) {\n        callback(fieldValues);\n        // reset state to 'default' (valid inputs wont be highlighted)\n        setFieldStates(initFieldStates);\n      }\n    } else {\n      setIsFormDisabled(true);\n    }\n\n    setIsSubmitting(false);\n  }, [fieldErrors, hasChanged]);\n\n  const onChange = (event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n    setFieldValues({ ...fieldValues, [fieldName]: fieldValue });\n    setHasChanged(true);\n\n    // if has any validator\n    if (fieldValidators[fieldName]) {\n      const error = fieldValidators[fieldName](fieldValue);\n      setError(fieldName, fieldValue, error);\n    }\n  };\n\n  const setError = (fieldName: string, fieldValue: string, error: string) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors, [fieldName]: error });\n      setFieldStates({ ...fieldStates, [fieldName]: 'error' });\n    } else {\n      const newErrors = { ...fieldErrors };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      if (fieldValue) {\n        setFieldStates({ ...fieldStates, [fieldName]: 'success' });\n      } else {\n        setFieldStates({ ...fieldStates, [fieldName]: 'default' });\n      }\n    }\n  };\n\n  const onSubmit = () => {\n    let errors: IFieldErrors = {};\n\n    // check all validated inputs before submit\n    for (const key in fieldValidators) {\n      const error = fieldValidators[key](fieldValues[key]);\n      if (error) errors[key] = error;\n    }\n\n    setFieldErrors(errors);\n    const fieldStates = { ...errors };\n    Object.keys(fieldStates).forEach((key) => {\n      fieldStates[key] = 'error';\n    });\n    setFieldStates(fieldStates);\n\n    setIsSubmitting(true);\n  };\n\n  return { fieldValues, fieldErrors, fieldStates, isFormDisabled, onChange, setFieldValues, onSubmit };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}