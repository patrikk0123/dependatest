{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport class NavList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      scrollViewAtStart: false,\n      scrollViewAtEnd: false\n    };\n    this.navList = React.createRef();\n\n    this.observer = () => {};\n\n    this.handleScrollButtons = () => {\n      const container = this.navList.current;\n\n      if (container) {\n        // check if it elements are in view\n        const scrollViewAtStart = isElementInView(container, container.firstChild, false);\n        const scrollViewAtEnd = isElementInView(container, container.lastChild, false);\n        this.setState({\n          scrollViewAtStart,\n          scrollViewAtEnd\n        });\n        this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n      }\n    };\n\n    this.scrollLeft = () => {\n      // find first Element that is fully in view on the left, then scroll to the element before it\n      const container = this.navList.current;\n\n      if (container) {\n        const childrenArr = Array.from(container.children);\n        let firstElementInView;\n        let lastElementOutOfView;\n\n        for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            firstElementInView = childrenArr[i];\n            lastElementOutOfView = childrenArr[i - 1];\n          }\n        }\n\n        if (lastElementOutOfView) {\n          container.scrollLeft -= lastElementOutOfView.scrollWidth;\n        }\n\n        this.handleScrollButtons();\n      }\n    };\n\n    this.scrollRight = () => {\n      // find last Element that is fully in view on the right, then scroll to the element after it\n      const container = this.navList.current;\n\n      if (container) {\n        const childrenArr = Array.from(container.children);\n        let lastElementInView;\n        let firstElementOutOfView;\n\n        for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            lastElementInView = childrenArr[i];\n            firstElementOutOfView = childrenArr[i + 1];\n          }\n        }\n\n        if (firstElementOutOfView) {\n          container.scrollLeft += firstElementOutOfView.scrollWidth;\n        }\n\n        this.handleScrollButtons();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons);\n    this.handleScrollButtons();\n  }\n\n  componentWillUnmount() {\n    this.observer();\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      className,\n      ariaLeftScroll,\n      ariaRightScroll\n    } = _a,\n          props = __rest(_a, [\"children\", \"className\", \"ariaLeftScroll\", \"ariaRightScroll\"]);\n\n    const {\n      scrollViewAtStart,\n      scrollViewAtEnd\n    } = this.state;\n    return React.createElement(NavContext.Consumer, null, _ref => {\n      let {\n        isHorizontal\n      } = _ref;\n      return React.createElement(PageSidebarContext.Consumer, null, _ref2 => {\n        let {\n          isNavOpen\n        } = _ref2;\n        return React.createElement(React.Fragment, null, isHorizontal && React.createElement(\"button\", {\n          className: css(styles.navScrollButton),\n          \"aria-label\": ariaLeftScroll,\n          onClick: this.scrollLeft,\n          disabled: scrollViewAtStart,\n          tabIndex: isNavOpen ? null : -1\n        }, React.createElement(AngleLeftIcon, null)), React.createElement(\"ul\", Object.assign({\n          ref: this.navList,\n          className: css(styles.navList, className),\n          onScroll: this.handleScrollButtons\n        }, props), children), isHorizontal && React.createElement(\"button\", {\n          className: css(styles.navScrollButton),\n          \"aria-label\": ariaRightScroll,\n          onClick: this.scrollRight,\n          disabled: scrollViewAtEnd,\n          tabIndex: isNavOpen ? null : -1\n        }, React.createElement(AngleRightIcon, null)));\n      });\n    });\n  }\n\n}\nNavList.displayName = 'NavList';\nNavList.contextType = NavContext;\nNavList.defaultProps = {\n  ariaLeftScroll: 'Scroll left',\n  ariaRightScroll: 'Scroll right'\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","AngleLeftIcon","AngleRightIcon","isElementInView","NavContext","PageSidebarContext","getResizeObserver","NavList","Component","constructor","scrollViewAtStart","scrollViewAtEnd","createRef","container","navList","current","firstChild","lastChild","setState","context","updateIsScrollable","childrenArr","Array","from","children","firstElementInView","lastElementOutOfView","i","length","scrollLeft","scrollWidth","handleScrollButtons","lastElementInView","firstElementOutOfView","componentDidMount","observer","componentWillUnmount","render","_a","props","className","ariaLeftScroll","ariaRightScroll","state","Consumer","isHorizontal","isNavOpen","Fragment","navScrollButton","onClick","disabled","tabIndex","ref","onScroll","scrollRight"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Nav/NavList.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\n\nexport interface NavListProps\n  extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement> {\n  /** Children nodes */\n  children?: React.ReactNode;\n  /** Additional classes added to the list */\n  className?: string;\n  /** Aria-label for the left scroll button */\n  ariaLeftScroll?: string;\n  /** Aria-label for the right scroll button */\n  ariaRightScroll?: string;\n}\n\nexport class NavList extends React.Component<NavListProps> {\n  static displayName = 'NavList';\n  static contextType = NavContext;\n  context!: React.ContextType<typeof NavContext>;\n  static defaultProps: NavListProps = {\n    ariaLeftScroll: 'Scroll left',\n    ariaRightScroll: 'Scroll right'\n  };\n\n  state = {\n    scrollViewAtStart: false,\n    scrollViewAtEnd: false\n  };\n\n  navList = React.createRef<HTMLUListElement>();\n  observer: any = () => {};\n\n  handleScrollButtons = () => {\n    const container = this.navList.current;\n    if (container) {\n      // check if it elements are in view\n      const scrollViewAtStart = isElementInView(container, container.firstChild as HTMLElement, false);\n      const scrollViewAtEnd = isElementInView(container, container.lastChild as HTMLElement, false);\n      this.setState({\n        scrollViewAtStart,\n        scrollViewAtEnd\n      });\n      this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n    }\n  };\n\n  scrollLeft = () => {\n    // find first Element that is fully in view on the left, then scroll to the element before it\n    const container = this.navList.current;\n    if (container) {\n      const childrenArr = Array.from(container.children);\n      let firstElementInView: Element;\n      let lastElementOutOfView: Element;\n      for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          firstElementInView = childrenArr[i];\n          lastElementOutOfView = childrenArr[i - 1];\n        }\n      }\n      if (lastElementOutOfView) {\n        container.scrollLeft -= lastElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  };\n\n  scrollRight = () => {\n    // find last Element that is fully in view on the right, then scroll to the element after it\n    const container = this.navList.current;\n    if (container) {\n      const childrenArr = Array.from(container.children);\n      let lastElementInView: Element;\n      let firstElementOutOfView: Element;\n      for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          lastElementInView = childrenArr[i];\n          firstElementOutOfView = childrenArr[i + 1];\n        }\n      }\n      if (firstElementOutOfView) {\n        container.scrollLeft += firstElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  };\n\n  componentDidMount() {\n    this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons);\n    this.handleScrollButtons();\n  }\n\n  componentWillUnmount() {\n    this.observer();\n  }\n\n  render() {\n    const { children, className, ariaLeftScroll, ariaRightScroll, ...props } = this.props;\n    const { scrollViewAtStart, scrollViewAtEnd } = this.state;\n\n    return (\n      <NavContext.Consumer>\n        {({ isHorizontal }) => (\n          <PageSidebarContext.Consumer>\n            {({ isNavOpen }) => (\n              <React.Fragment>\n                {isHorizontal && (\n                  <button\n                    className={css(styles.navScrollButton)}\n                    aria-label={ariaLeftScroll}\n                    onClick={this.scrollLeft}\n                    disabled={scrollViewAtStart}\n                    tabIndex={isNavOpen ? null : -1}\n                  >\n                    <AngleLeftIcon />\n                  </button>\n                )}\n                <ul\n                  ref={this.navList}\n                  className={css(styles.navList, className)}\n                  onScroll={this.handleScrollButtons}\n                  {...props}\n                >\n                  {children}\n                </ul>\n                {isHorizontal && (\n                  <button\n                    className={css(styles.navScrollButton)}\n                    aria-label={ariaRightScroll}\n                    onClick={this.scrollRight}\n                    disabled={scrollViewAtEnd}\n                    tabIndex={isNavOpen ? null : -1}\n                  >\n                    <AngleRightIcon />\n                  </button>\n                )}\n              </React.Fragment>\n            )}\n          </PageSidebarContext.Consumer>\n        )}\n      </NavContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}