{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { createFocusTrap } from 'focus-trap';\nexport var FocusTrap = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusTrap, _React$Component);\n\n  var _super = _createSuper(FocusTrap);\n\n  function FocusTrap(props) {\n    var _this;\n\n    _classCallCheck(this, FocusTrap);\n\n    _this = _super.call(this, props);\n    _this.divRef = React.createRef();\n\n    if (typeof document !== 'undefined') {\n      _this.previouslyFocusedElement = document.activeElement;\n    }\n\n    return _this;\n  }\n\n  _createClass(FocusTrap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // We need to hijack the returnFocusOnDeactivate option,\n      // because React can move focus into the element before we arrived at\n      // this lifecycle hook (e.g. with autoFocus inputs). So the component\n      // captures the previouslyFocusedElement in componentWillMount,\n      // then (optionally) returns focus to it in componentWillUnmount.\n      this.focusTrap = createFocusTrap(this.divRef.current, Object.assign(Object.assign({}, this.props.focusTrapOptions), {\n        returnFocusOnDeactivate: false\n      }));\n\n      if (this.props.active) {\n        this.focusTrap.activate();\n      }\n\n      if (this.props.paused) {\n        this.focusTrap.pause();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.active && !this.props.active) {\n        this.focusTrap.deactivate();\n      } else if (!prevProps.active && this.props.active) {\n        this.focusTrap.activate();\n      }\n\n      if (prevProps.paused && !this.props.paused) {\n        this.focusTrap.unpause();\n      } else if (!prevProps.paused && this.props.paused) {\n        this.focusTrap.pause();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.focusTrap.deactivate();\n\n      if (this.props.focusTrapOptions.returnFocusOnDeactivate !== false && this.previouslyFocusedElement && this.previouslyFocusedElement.focus) {\n        this.previouslyFocusedElement.focus({\n          preventScroll: this.props.preventScrollOnDeactivate\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var _a = this.props,\n          children = _a.children,\n          className = _a.className,\n          focusTrapOptions = _a.focusTrapOptions,\n          active = _a.active,\n          paused = _a.paused,\n          preventScrollOnDeactivate = _a.preventScrollOnDeactivate,\n          rest = __rest(_a, [\"children\", \"className\", \"focusTrapOptions\", \"active\", \"paused\", \"preventScrollOnDeactivate\"]);\n\n      return React.createElement(\"div\", Object.assign({\n        ref: this.divRef,\n        className: className\n      }, rest), children);\n    }\n  }]);\n\n  return FocusTrap;\n}(React.Component);\nFocusTrap.displayName = 'FocusTrap';\nFocusTrap.defaultProps = {\n  active: true,\n  paused: false,\n  focusTrapOptions: {},\n  preventScrollOnDeactivate: false\n};","map":{"version":3,"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,eAAT,QAAsF,YAAtF;AAYA,WAAaC,SAAb;EAAA;;EAAA;;EAaE,mBAAYC,KAAZ,EAAiC;IAAA;;IAAA;;IAC/B,0BAAMA,KAAN;IAVF,eAASH,KAAK,CAACI,SAAN,EAAT;;IAYE,IAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;MACnC,MAAKC,wBAAL,GAAgCD,QAAQ,CAACE,aAAzC;IACD;;IAL8B;EAMhC;;EAnBH;IAAA;IAAA,OAqBE,6BAAiB;MACf;MACA;MACA;MACA;MACA;MACA,KAAKC,SAAL,GAAiBP,eAAe,CAAC,KAAKQ,MAAL,CAAYC,OAAb,EAAoBC,gCAC/C,KAAKR,KAAL,CAAWS,gBADoC,GACpB;QAC9BC,uBAAuB,EAAE;MADK,CADoB,CAApB,CAAhC;;MAIA,IAAI,KAAKV,KAAL,CAAWW,MAAf,EAAuB;QACrB,KAAKN,SAAL,CAAeO,QAAf;MACD;;MACD,IAAI,KAAKZ,KAAL,CAAWa,MAAf,EAAuB;QACrB,KAAKR,SAAL,CAAeS,KAAf;MACD;IACF;EArCH;IAAA;IAAA,OAuCE,4BAAmBC,SAAnB,EAA4C;MAC1C,IAAIA,SAAS,CAACJ,MAAV,IAAoB,CAAC,KAAKX,KAAL,CAAWW,MAApC,EAA4C;QAC1C,KAAKN,SAAL,CAAeW,UAAf;MACD,CAFD,MAEO,IAAI,CAACD,SAAS,CAACJ,MAAX,IAAqB,KAAKX,KAAL,CAAWW,MAApC,EAA4C;QACjD,KAAKN,SAAL,CAAeO,QAAf;MACD;;MAED,IAAIG,SAAS,CAACF,MAAV,IAAoB,CAAC,KAAKb,KAAL,CAAWa,MAApC,EAA4C;QAC1C,KAAKR,SAAL,CAAeY,OAAf;MACD,CAFD,MAEO,IAAI,CAACF,SAAS,CAACF,MAAX,IAAqB,KAAKb,KAAL,CAAWa,MAApC,EAA4C;QACjD,KAAKR,SAAL,CAAeS,KAAf;MACD;IACF;EAnDH;IAAA;IAAA,OAqDE,gCAAoB;MAClB,KAAKT,SAAL,CAAeW,UAAf;;MACA,IACE,KAAKhB,KAAL,CAAWS,gBAAX,CAA4BC,uBAA5B,KAAwD,KAAxD,IACA,KAAKP,wBADL,IAEA,KAAKA,wBAAL,CAA8Be,KAHhC,EAIE;QACA,KAAKf,wBAAL,CAA8Be,KAA9B,CAAoC;UAAEC,aAAa,EAAE,KAAKnB,KAAL,CAAWoB;QAA5B,CAApC;MACD;IACF;EA9DH;IAAA;IAAA,OAgEE,kBAAM;MACJ;MACM,SAAgG,KAAKpB,KAArG;MAAA,IAAEqB,QAAF,GAAkFC,EAAlF,CAAED,QAAF;MAAA,IAAYE,SAAZ,GAAkFD,EAAlF,CAAYC,SAAZ;MAAA,IAAuBd,gBAAvB,GAAkFa,EAAlF,CAAuBb,gBAAvB;MAAA,IAAyCE,MAAzC,GAAkFW,EAAlF,CAAyCX,MAAzC;MAAA,IAAiDE,MAAjD,GAAkFS,EAAlF,CAAiDT,MAAjD;MAAA,IAAyDO,yBAAzD,GAAkFE,EAAlF,CAAyDF,yBAAzD;MAAA,IAAuFI,IAAvF,GAA2FC,WAA3F,8FAA2F,CAA3F;;MACN,OACE5B;QAAK6B,GAAG,EAAE,KAAKpB,MAAf;QAAuBiB,SAAS,EAAEA;MAAlC,GAAiDC,IAAjD,GACGH,QADH,CADF;IAKD;EAxEH;;EAAA;AAAA,EAA+BxB,KAAK,CAAC8B,SAArC;AACS5B,wBAAc,WAAd;AAKAA,yBAAe;EACpBY,MAAM,EAAE,IADY;EAEpBE,MAAM,EAAE,KAFY;EAGpBJ,gBAAgB,EAAE,EAHE;EAIpBW,yBAAyB,EAAE;AAJP,CAAf","names":["React","createFocusTrap","FocusTrap","props","createRef","document","previouslyFocusedElement","activeElement","focusTrap","divRef","current","Object","focusTrapOptions","returnFocusOnDeactivate","active","activate","paused","pause","prevProps","deactivate","unpause","focus","preventScroll","preventScrollOnDeactivate","children","_a","className","rest","__rest","ref","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/FocusTrap/FocusTrap.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createFocusTrap, Options as FocusTrapOptions, FocusTrap as IFocusTrap } from 'focus-trap';\n\ninterface FocusTrapProps extends React.HTMLProps<HTMLDivElement> {\n  children: React.ReactNode;\n  className?: string;\n  active?: boolean;\n  paused?: boolean;\n  focusTrapOptions?: FocusTrapOptions;\n  /** Prevent from scrolling to the previously focused element on deactivation */\n  preventScrollOnDeactivate?: boolean;\n}\n\nexport class FocusTrap extends React.Component<FocusTrapProps> {\n  static displayName = 'FocusTrap';\n  previouslyFocusedElement: HTMLElement;\n  focusTrap: IFocusTrap;\n  divRef = React.createRef<HTMLDivElement>();\n\n  static defaultProps = {\n    active: true,\n    paused: false,\n    focusTrapOptions: {},\n    preventScrollOnDeactivate: false\n  };\n\n  constructor(props: FocusTrapProps) {\n    super(props);\n\n    if (typeof document !== 'undefined') {\n      this.previouslyFocusedElement = document.activeElement as HTMLElement;\n    }\n  }\n\n  componentDidMount() {\n    // We need to hijack the returnFocusOnDeactivate option,\n    // because React can move focus into the element before we arrived at\n    // this lifecycle hook (e.g. with autoFocus inputs). So the component\n    // captures the previouslyFocusedElement in componentWillMount,\n    // then (optionally) returns focus to it in componentWillUnmount.\n    this.focusTrap = createFocusTrap(this.divRef.current, {\n      ...this.props.focusTrapOptions,\n      returnFocusOnDeactivate: false\n    });\n    if (this.props.active) {\n      this.focusTrap.activate();\n    }\n    if (this.props.paused) {\n      this.focusTrap.pause();\n    }\n  }\n\n  componentDidUpdate(prevProps: FocusTrapProps) {\n    if (prevProps.active && !this.props.active) {\n      this.focusTrap.deactivate();\n    } else if (!prevProps.active && this.props.active) {\n      this.focusTrap.activate();\n    }\n\n    if (prevProps.paused && !this.props.paused) {\n      this.focusTrap.unpause();\n    } else if (!prevProps.paused && this.props.paused) {\n      this.focusTrap.pause();\n    }\n  }\n\n  componentWillUnmount() {\n    this.focusTrap.deactivate();\n    if (\n      this.props.focusTrapOptions.returnFocusOnDeactivate !== false &&\n      this.previouslyFocusedElement &&\n      this.previouslyFocusedElement.focus\n    ) {\n      this.previouslyFocusedElement.focus({ preventScroll: this.props.preventScrollOnDeactivate });\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { children, className, focusTrapOptions, active, paused, preventScrollOnDeactivate, ...rest } = this.props;\n    return (\n      <div ref={this.divRef} className={className} {...rest}>\n        {children}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}