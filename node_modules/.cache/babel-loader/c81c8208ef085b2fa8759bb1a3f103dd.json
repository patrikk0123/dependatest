{"ast":null,"code":"import { __rest } from \"tslib\";\n/* eslint-disable no-console */\n\nimport * as React from 'react';\nimport { Button, ButtonVariant } from '../../components/Button';\nimport { PageContextConsumer } from './Page';\nexport const PageToggleButton = _a => {\n  var {\n    children,\n    isNavOpen = true,\n    onNavToggle = () => undefined\n  } = _a,\n      props = __rest(_a, [\"children\", \"isNavOpen\", \"onNavToggle\"]);\n\n  return React.createElement(PageContextConsumer, null, _ref => {\n    let {\n      isManagedSidebar,\n      onNavToggle: managedOnNavToggle,\n      isNavOpen: managedIsNavOpen\n    } = _ref;\n    const navToggle = isManagedSidebar ? managedOnNavToggle : onNavToggle;\n    const navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n    return React.createElement(Button, Object.assign({\n      id: \"nav-toggle\",\n      onClick: navToggle,\n      \"aria-label\": \"Side navigation toggle\",\n      \"aria-expanded\": navOpen ? 'true' : 'false',\n      variant: ButtonVariant.plain\n    }, props), children);\n  });\n};\nPageToggleButton.displayName = 'PageToggleButton';","map":{"version":3,"mappings":";AAAA;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAA8BC,aAA9B,QAAmD,yBAAnD;AACA,SAASC,mBAAT,QAAsD,QAAtD;AAWA,OAAO,MAAMC,gBAAgB,GAAoDC,EAAD,IAKpD;MALqD;IAC/EC,QAD+E;IAE/EC,SAAS,GAAG,IAFmE;IAG/EC,WAAW,GAAG,MAAMC;EAH2D,IAG3CJ;MACjCK,KAAK,cAJuE,wCAIvE;;EACmB,OAC3BV,oBAACG,mBAAD,EAAoB,IAApB,EACG,QAAyG;IAAA,IAAxG;MAAEQ,gBAAF;MAAoBH,WAAW,EAAEI,kBAAjC;MAAqDL,SAAS,EAAEM;IAAhE,CAAwG;IACxG,MAAMC,SAAS,GAAGH,gBAAgB,GAAGC,kBAAH,GAAwBJ,WAA1D;IACA,MAAMO,OAAO,GAAGJ,gBAAgB,GAAGE,gBAAH,GAAsBN,SAAtD;IAEA,OACEP,oBAACC,MAAD,EAAOe;MACLC,EAAE,EAAC,YADE;MAELC,OAAO,EAAEJ,SAFJ;MAEa,cACP,wBAHN;MAG8B,iBACpBC,OAAO,GAAG,MAAH,GAAY,OAJ7B;MAKLI,OAAO,EAAEjB,aAAa,CAACkB;IALlB,GAMDV,KANC,CAAP,EAQGJ,QARH,CADF;EAYD,CAjBH,CAD2B;AAoB5B,CAzBM;AA0BPF,gBAAgB,CAACiB,WAAjB,GAA+B,kBAA/B","names":["React","Button","ButtonVariant","PageContextConsumer","PageToggleButton","_a","children","isNavOpen","onNavToggle","undefined","props","isManagedSidebar","managedOnNavToggle","managedIsNavOpen","navToggle","navOpen","Object","id","onClick","variant","plain","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Page/PageToggleButton.tsx"],"sourcesContent":["/* eslint-disable no-console */\nimport * as React from 'react';\nimport { Button, ButtonProps, ButtonVariant } from '../../components/Button';\nimport { PageContextConsumer, PageContextProps } from './Page';\n\nexport interface PageToggleButtonProps extends ButtonProps {\n  /** Content of the page toggle button */\n  children?: React.ReactNode;\n  /** True if the side nav is shown  */\n  isNavOpen?: boolean;\n  /** Callback function to handle the side nav toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true */\n  onNavToggle?: () => void;\n}\n\nexport const PageToggleButton: React.FunctionComponent<PageToggleButtonProps> = ({\n  children,\n  isNavOpen = true,\n  onNavToggle = () => undefined as any,\n  ...props\n}: PageToggleButtonProps) => (\n  <PageContextConsumer>\n    {({ isManagedSidebar, onNavToggle: managedOnNavToggle, isNavOpen: managedIsNavOpen }: PageContextProps) => {\n      const navToggle = isManagedSidebar ? managedOnNavToggle : onNavToggle;\n      const navOpen = isManagedSidebar ? managedIsNavOpen : isNavOpen;\n\n      return (\n        <Button\n          id=\"nav-toggle\"\n          onClick={navToggle}\n          aria-label=\"Side navigation toggle\"\n          aria-expanded={navOpen ? 'true' : 'false'}\n          variant={ButtonVariant.plain}\n          {...props}\n        >\n          {children}\n        </Button>\n      );\n    }}\n  </PageContextConsumer>\n);\nPageToggleButton.displayName = 'PageToggleButton';\n"]},"metadata":{},"sourceType":"module"}