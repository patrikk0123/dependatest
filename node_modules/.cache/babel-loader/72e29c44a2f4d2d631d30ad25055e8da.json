{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx\";\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute and current filter text value\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param displayDescription - should options display description? (if any)\n */\nexport const SearchSelect = _ref => {\n  let {\n    fetchCallback,\n    attribute,\n    onSelect,\n    delay = 200,\n    pageSize = 20,\n    displayDescription = false\n  } = _ref;\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState([]); // data downloaded on first load\n\n  const [defaultData, setDefaultData] = useState([]); // currenyly selected option\n\n  const [selected, setSelected] = useState();\n  const [isSelectOpen, setIsSelectOpen] = useState(false); // used to fetch data after delay\n\n  const timeout = useRef();\n  const fetchData = useCallback(function () {\n    let filterText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let setDefaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const config = {\n      params: {\n        pageSize\n      }\n    };\n\n    if (filterText) {\n      config.params.q = `${attribute}=like=\"%${filterText}%\"`;\n    }\n\n    fetchCallback(config).then(response => {\n      const data = response.data.content;\n      setCurrentData(data);\n      if (setDefaults) setDefaultData(data);\n      return data;\n    });\n  }, [fetchCallback, attribute, pageSize]);\n  useEffect(() => {\n    fetchData('', true);\n  }, [fetchData]);\n\n  const clearSelection = () => {\n    setSelected(undefined);\n    setIsSelectOpen(false);\n    setCurrentData(defaultData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    variant: SelectVariant.typeahead,\n    onToggle: isOpen => {\n      setIsSelectOpen(isOpen);\n    },\n    onSelect: (event, selection, isPlaceholder) => {\n      if (isPlaceholder) clearSelection();else {\n        if (event) {\n          fetchData(selection);\n        }\n\n        setSelected(selection);\n        setIsSelectOpen(false);\n        onSelect(selection);\n      }\n    },\n    onTypeaheadInputChanged: val => {\n      if (val !== '') {\n        clearTimeout(timeout === null || timeout === void 0 ? void 0 : timeout.current);\n        timeout.current = setTimeout(() => fetchData(val), delay);\n      } else {\n        setCurrentData(defaultData);\n      }\n    },\n    isInputFilterPersisted: true,\n    isInputValuePersisted: true,\n    onClear: clearSelection,\n    onFilter: () => {\n      // filtering is not done here\n      return undefined;\n    },\n    selections: selected,\n    isOpen: isSelectOpen,\n    hasInlineFilter: true,\n    children: currentData.map((option, index) => /*#__PURE__*/_jsxDEV(SelectOption, {\n      description: displayDescription && option['description'],\n      value: option[attribute]\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Select","SelectOption","SelectVariant","useCallback","useEffect","useRef","useState","SearchSelect","fetchCallback","attribute","onSelect","delay","pageSize","displayDescription","currentData","setCurrentData","defaultData","setDefaultData","selected","setSelected","isSelectOpen","setIsSelectOpen","timeout","fetchData","filterText","setDefaults","config","params","q","then","response","data","content","clearSelection","undefined","typeahead","isOpen","event","selection","isPlaceholder","val","clearTimeout","current","setTimeout","map","option","index"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx"],"sourcesContent":["import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { AxiosRequestConfig } from 'axios';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\ninterface ISearchSelectProps {\n  fetchCallback: Function;\n  attribute: string;\n  onSelect: Function;\n  delay?: number;\n  pageSize?: number;\n  displayDescription?: boolean;\n}\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute and current filter text value\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param displayDescription - should options display description? (if any)\n */\nexport const SearchSelect = ({\n  fetchCallback,\n  attribute,\n  onSelect,\n  delay = 200,\n  pageSize = 20,\n  displayDescription = false,\n}: ISearchSelectProps) => {\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState<any[]>([]);\n  // data downloaded on first load\n  const [defaultData, setDefaultData] = useState<any[]>([]);\n  // currenyly selected option\n  const [selected, setSelected] = useState<string | undefined>();\n  const [isSelectOpen, setIsSelectOpen] = useState<boolean>(false);\n  // used to fetch data after delay\n  const timeout = useRef<NodeJS.Timeout>();\n\n  const fetchData = useCallback(\n    (filterText: string = '', setDefaults: boolean = true) => {\n      const config: AxiosRequestConfig = { params: { pageSize } };\n      if (filterText) {\n        config.params.q = `${attribute}=like=\"%${filterText}%\"`;\n      }\n\n      fetchCallback(config).then((response: any) => {\n        const data = response.data.content;\n        setCurrentData(data);\n        if (setDefaults) setDefaultData(data);\n        return data;\n      });\n    },\n    [fetchCallback, attribute, pageSize]\n  );\n\n  useEffect(() => {\n    fetchData('', true);\n  }, [fetchData]);\n\n  const clearSelection = () => {\n    setSelected(undefined);\n    setIsSelectOpen(false);\n    setCurrentData(defaultData);\n  };\n\n  return (\n    <Select\n      variant={SelectVariant.typeahead}\n      onToggle={(isOpen) => {\n        setIsSelectOpen(isOpen);\n      }}\n      onSelect={(event, selection, isPlaceholder) => {\n        if (isPlaceholder) clearSelection();\n        else {\n          if (event) {\n            fetchData(selection as string);\n          }\n          setSelected(selection as string);\n          setIsSelectOpen(false);\n          onSelect(selection);\n        }\n      }}\n      onTypeaheadInputChanged={(val: string) => {\n        if (val !== '') {\n          clearTimeout(timeout?.current);\n          timeout.current = setTimeout(() => fetchData(val), delay);\n        } else {\n          setCurrentData(defaultData);\n        }\n      }}\n      isInputFilterPersisted={true}\n      isInputValuePersisted={true}\n      onClear={clearSelection}\n      onFilter={() => {\n        // filtering is not done here\n        return undefined;\n      }}\n      selections={selected}\n      isOpen={isSelectOpen}\n      hasInlineFilter={true}\n    >\n      {currentData.map((option: any, index: any) => (\n        <SelectOption key={index} description={displayDescription && option['description']} value={option[attribute]} />\n      ))}\n    </Select>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}