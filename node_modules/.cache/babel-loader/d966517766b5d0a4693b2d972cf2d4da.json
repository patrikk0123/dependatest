{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport const TreeView = _a => {\n  var {\n    data,\n    isNested = false,\n    hasChecks = false,\n    hasBadges = false,\n    hasGuides = false,\n    variant = 'default',\n    defaultAllExpanded = false,\n    allExpanded,\n    icon,\n    expandedIcon,\n    parentItem,\n    onSelect,\n    onCheck,\n    toolbar,\n    activeItems,\n    compareItems = (item, itemToCheck) => item.id === itemToCheck.id,\n    className,\n    useMemo\n  } = _a,\n      props = __rest(_a, [\"data\", \"isNested\", \"hasChecks\", \"hasBadges\", \"hasGuides\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\"]);\n\n  const treeViewList = React.createElement(TreeViewList, {\n    isNested: isNested,\n    toolbar: toolbar\n  }, data.map(item => {\n    var _a;\n\n    return React.createElement(TreeViewListItem, Object.assign({\n      key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || item.name.toString(),\n      name: item.name,\n      title: item.title,\n      id: item.id,\n      isExpanded: allExpanded,\n      defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n      onSelect: onSelect,\n      onCheck: onCheck,\n      hasCheck: item.hasCheck !== undefined ? item.hasCheck : hasChecks,\n      checkProps: item.checkProps,\n      hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n      customBadgeContent: item.customBadgeContent,\n      badgeProps: item.badgeProps,\n      activeItems: activeItems,\n      parentItem: parentItem,\n      itemData: item,\n      icon: item.icon !== undefined ? item.icon : icon,\n      expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon,\n      action: item.action,\n      compareItems: compareItems,\n      isCompact: variant === 'compact' || variant === 'compactNoBackground',\n      useMemo: useMemo\n    }, item.children && {\n      children: React.createElement(TreeView, {\n        data: item.children,\n        isNested: true,\n        parentItem: item,\n        hasChecks: hasChecks,\n        hasBadges: hasBadges,\n        hasGuides: hasGuides,\n        variant: variant,\n        allExpanded: allExpanded,\n        defaultAllExpanded: defaultAllExpanded,\n        onSelect: onSelect,\n        onCheck: onCheck,\n        activeItems: activeItems,\n        icon: icon,\n        expandedIcon: expandedIcon\n      })\n    }));\n  }));\n  return React.createElement(React.Fragment, null, parentItem ? treeViewList : React.createElement(TreeViewRoot, Object.assign({\n    hasChecks: hasChecks,\n    hasGuides: hasGuides,\n    variant: variant,\n    className: className\n  }, props), treeViewList));\n};\nTreeView.displayName = 'TreeView';","map":{"version":3,"mappings":"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","names":["React","TreeViewList","TreeViewListItem","TreeViewRoot","TreeView","_a","data","isNested","hasChecks","hasBadges","hasGuides","variant","defaultAllExpanded","allExpanded","icon","expandedIcon","parentItem","onSelect","onCheck","toolbar","activeItems","compareItems","item","itemToCheck","id","className","useMemo","props","treeViewList","map","Object","key","toString","name","title","isExpanded","defaultExpanded","undefined","hasCheck","checkProps","hasBadge","customBadgeContent","badgeProps","itemData","action","isCompact","children","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/TreeView/TreeView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewCheckProps, TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\n\nexport interface TreeViewDataItem {\n  /** Internal content of a tree view item */\n  name: React.ReactNode;\n  /** Title a tree view item. Only used in Compact presentations. */\n  title?: React.ReactNode;\n  /** ID of a tree view item */\n  id?: string;\n  /** Child nodes of a tree view item */\n  children?: TreeViewDataItem[];\n  /** Flag indicating if node is expanded by default */\n  defaultExpanded?: boolean;\n  /** Default icon of a tree view item */\n  icon?: React.ReactNode;\n  /** Expanded icon of a tree view item */\n  expandedIcon?: React.ReactNode;\n  /** Flag indicating if a tree view item has a checkbox */\n  hasCheck?: boolean;\n  /** Additional properties of the tree view item checkbox */\n  checkProps?: TreeViewCheckProps;\n  /** Flag indicating if a tree view item has a badge */\n  hasBadge?: boolean;\n  /** Optional prop for custom badge */\n  customBadgeContent?: React.ReactNode;\n  /** Additional properties of the tree view item badge */\n  badgeProps?: any;\n  /** Action of a tree view item, can be a Button or Dropdown */\n  action?: React.ReactNode;\n}\n\nexport interface TreeViewProps {\n  /** Data of the tree view */\n  data: TreeViewDataItem[];\n  /** ID of the tree view */\n  id?: string;\n  /** Flag indicating if the tree view is nested */\n  isNested?: boolean;\n  /** Flag indicating if all nodes in the tree view should have checkboxes */\n  hasChecks?: boolean;\n  /** Flag indicating if all nodes in the tree view should have badges */\n  hasBadges?: boolean;\n  /** Flag indicating if tree view has guide lines. */\n  hasGuides?: boolean;\n  /** Variant presentation styles for the tree view. */\n  variant?: 'default' | 'compact' | 'compactNoBackground';\n  /** Icon for all leaf or unexpanded node items */\n  icon?: React.ReactNode;\n  /** Icon for all expanded node items */\n  expandedIcon?: React.ReactNode;\n  /** Sets the expanded state on all tree nodes, overriding default behavior and current internal state */\n  allExpanded?: boolean;\n  /** Sets the default expanded behavior */\n  defaultAllExpanded?: boolean;\n  /** Callback for item selection */\n  onSelect?: (event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void;\n  /** Callback for item checkbox selection */\n  onCheck?: (event: React.ChangeEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void;\n  /** Active items of tree view */\n  activeItems?: TreeViewDataItem[];\n  /** Internal. Parent item of a TreeViewListItem */\n  parentItem?: TreeViewDataItem;\n  /** Comparison function for determining active items */\n  compareItems?: (item: TreeViewDataItem, itemToCheck: TreeViewDataItem) => boolean;\n  /** Class to add to add if not passed a parentItem */\n  className?: string;\n  /** Toolbar to display above the tree view */\n  toolbar?: React.ReactNode;\n  /** Flag indicating the TreeView should utilize memoization to help render large data sets. Setting this property requires that `activeItems` pass in an array containing every node in the selected item's path. */\n  useMemo?: boolean;\n}\n\nexport const TreeView: React.FunctionComponent<TreeViewProps> = ({\n  data,\n  isNested = false,\n  hasChecks = false,\n  hasBadges = false,\n  hasGuides = false,\n  variant = 'default',\n  defaultAllExpanded = false,\n  allExpanded,\n  icon,\n  expandedIcon,\n  parentItem,\n  onSelect,\n  onCheck,\n  toolbar,\n  activeItems,\n  compareItems = (item, itemToCheck) => item.id === itemToCheck.id,\n  className,\n  useMemo,\n  ...props\n}: TreeViewProps) => {\n  const treeViewList = (\n    <TreeViewList isNested={isNested} toolbar={toolbar}>\n      {data.map(item => (\n        <TreeViewListItem\n          key={item.id?.toString() || item.name.toString()}\n          name={item.name}\n          title={item.title}\n          id={item.id}\n          isExpanded={allExpanded}\n          defaultExpanded={item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded}\n          onSelect={onSelect}\n          onCheck={onCheck}\n          hasCheck={item.hasCheck !== undefined ? item.hasCheck : hasChecks}\n          checkProps={item.checkProps}\n          hasBadge={item.hasBadge !== undefined ? item.hasBadge : hasBadges}\n          customBadgeContent={item.customBadgeContent}\n          badgeProps={item.badgeProps}\n          activeItems={activeItems}\n          parentItem={parentItem}\n          itemData={item}\n          icon={item.icon !== undefined ? item.icon : icon}\n          expandedIcon={item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon}\n          action={item.action}\n          compareItems={compareItems}\n          isCompact={variant === 'compact' || variant === 'compactNoBackground'}\n          useMemo={useMemo}\n          {...(item.children && {\n            children: (\n              <TreeView\n                data={item.children}\n                isNested\n                parentItem={item}\n                hasChecks={hasChecks}\n                hasBadges={hasBadges}\n                hasGuides={hasGuides}\n                variant={variant}\n                allExpanded={allExpanded}\n                defaultAllExpanded={defaultAllExpanded}\n                onSelect={onSelect}\n                onCheck={onCheck}\n                activeItems={activeItems}\n                icon={icon}\n                expandedIcon={expandedIcon}\n              />\n            )\n          })}\n        />\n      ))}\n    </TreeViewList>\n  );\n  return (\n    <>\n      {parentItem ? (\n        treeViewList\n      ) : (\n        <TreeViewRoot hasChecks={hasChecks} hasGuides={hasGuides} variant={variant} className={className} {...props}>\n          {treeViewList}\n        </TreeViewRoot>\n      )}\n    </>\n  );\n};\n\nTreeView.displayName = 'TreeView';\n"]},"metadata":{},"sourceType":"module"}