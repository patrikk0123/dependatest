{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport progressStyle from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport { ProgressBar } from './ProgressBar';\nexport var ProgressMeasureLocation;\n\n(function (ProgressMeasureLocation) {\n  ProgressMeasureLocation[\"outside\"] = \"outside\";\n  ProgressMeasureLocation[\"inside\"] = \"inside\";\n  ProgressMeasureLocation[\"top\"] = \"top\";\n  ProgressMeasureLocation[\"none\"] = \"none\";\n})(ProgressMeasureLocation || (ProgressMeasureLocation = {}));\n\nexport var ProgressVariant;\n\n(function (ProgressVariant) {\n  ProgressVariant[\"danger\"] = \"danger\";\n  ProgressVariant[\"success\"] = \"success\";\n  ProgressVariant[\"warning\"] = \"warning\";\n})(ProgressVariant || (ProgressVariant = {}));\n\nvar variantToIcon = {\n  danger: TimesCircleIcon,\n  success: CheckCircleIcon,\n  warning: ExclamationTriangleIcon\n};\nexport var ProgressContainer = function ProgressContainer(_ref) {\n  var progressBarAriaProps = _ref.progressBarAriaProps,\n      value = _ref.value,\n      _ref$title = _ref.title,\n      title = _ref$title === void 0 ? '' : _ref$title,\n      parentId = _ref.parentId,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? null : _ref$label,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? null : _ref$variant,\n      _ref$measureLocation = _ref.measureLocation,\n      measureLocation = _ref$measureLocation === void 0 ? ProgressMeasureLocation.top : _ref$measureLocation,\n      _ref$isTitleTruncated = _ref.isTitleTruncated,\n      isTitleTruncated = _ref$isTitleTruncated === void 0 ? false : _ref$isTitleTruncated,\n      tooltipPosition = _ref.tooltipPosition;\n  var StatusIcon = variantToIcon.hasOwnProperty(variant) && variantToIcon[variant];\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tooltip = _React$useState2[0],\n      setTooltip = _React$useState2[1];\n\n  var onMouseEnter = function onMouseEnter(event) {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      setTooltip(title || event.target.innerHTML);\n    } else {\n      setTooltip('');\n    }\n  };\n\n  var Title = React.createElement(\"div\", {\n    className: css(progressStyle.progressDescription, isTitleTruncated && typeof title === 'string' && progressStyle.modifiers.truncate),\n    id: \"\".concat(parentId, \"-description\"),\n    \"aria-hidden\": \"true\",\n    onMouseEnter: isTitleTruncated && typeof title === 'string' ? onMouseEnter : null\n  }, title);\n  return React.createElement(React.Fragment, null, tooltip ? React.createElement(Tooltip, {\n    position: tooltipPosition,\n    content: tooltip,\n    isVisible: true\n  }, Title) : Title, React.createElement(\"div\", {\n    className: css(progressStyle.progressStatus),\n    \"aria-hidden\": \"true\"\n  }, (measureLocation === ProgressMeasureLocation.top || measureLocation === ProgressMeasureLocation.outside) && React.createElement(\"span\", {\n    className: css(progressStyle.progressMeasure)\n  }, label || \"\".concat(value, \"%\")), variantToIcon.hasOwnProperty(variant) && React.createElement(\"span\", {\n    className: css(progressStyle.progressStatusIcon)\n  }, React.createElement(StatusIcon, null))), React.createElement(ProgressBar, {\n    role: \"progressbar\",\n    progressBarAriaProps: progressBarAriaProps,\n    value: value\n  }, measureLocation === ProgressMeasureLocation.inside && \"\".concat(value, \"%\")));\n};\nProgressContainer.displayName = 'ProgressContainer';","map":{"version":3,"mappings":"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","names":["React","progressStyle","css","Tooltip","CheckCircleIcon","TimesCircleIcon","ExclamationTriangleIcon","ProgressBar","ProgressMeasureLocation","ProgressVariant","variantToIcon","danger","success","warning","ProgressContainer","progressBarAriaProps","value","title","parentId","label","variant","measureLocation","top","isTitleTruncated","tooltipPosition","StatusIcon","hasOwnProperty","useState","tooltip","setTooltip","onMouseEnter","event","target","offsetWidth","scrollWidth","innerHTML","Title","className","progressDescription","modifiers","truncate","id","Fragment","position","content","isVisible","progressStatus","outside","progressMeasure","progressStatusIcon","role","inside","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Progress/ProgressContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport progressStyle from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport { AriaProps, ProgressBar } from './ProgressBar';\n\nexport enum ProgressMeasureLocation {\n  outside = 'outside',\n  inside = 'inside',\n  top = 'top',\n  none = 'none'\n}\n\nexport enum ProgressVariant {\n  danger = 'danger',\n  success = 'success',\n  warning = 'warning'\n}\n\nexport interface ProgressContainerProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label' | 'title'> {\n  /** Properties needed for aria support */\n  progressBarAriaProps?: AriaProps;\n  /** Progress component DOM ID. */\n  parentId: string;\n  /** Progress title. The isTitleTruncated property will only affect string titles. Node title truncation must be handled manually. */\n  title?: React.ReactNode;\n  /** Label to indicate what progress is showing. */\n  label?: React.ReactNode;\n  /** Type of progress status. */\n  variant?: 'danger' | 'success' | 'warning';\n  /** Location of progress value. */\n  measureLocation?: 'outside' | 'inside' | 'top' | 'none';\n  /** Actual progress value. */\n  value: number;\n  /** Whether string title should be truncated */\n  isTitleTruncated?: boolean;\n  /** Position of the tooltip which is displayed if title is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\nconst variantToIcon = {\n  danger: TimesCircleIcon,\n  success: CheckCircleIcon,\n  warning: ExclamationTriangleIcon\n};\n\nexport const ProgressContainer: React.FunctionComponent<ProgressContainerProps> = ({\n  progressBarAriaProps,\n  value,\n  title = '',\n  parentId,\n  label = null,\n  variant = null,\n  measureLocation = ProgressMeasureLocation.top,\n  isTitleTruncated = false,\n  tooltipPosition\n}: ProgressContainerProps) => {\n  const StatusIcon = variantToIcon.hasOwnProperty(variant) && variantToIcon[variant];\n  const [tooltip, setTooltip] = React.useState('');\n  const onMouseEnter = (event: any) => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      setTooltip(title || event.target.innerHTML);\n    } else {\n      setTooltip('');\n    }\n  };\n  const Title = (\n    <div\n      className={css(\n        progressStyle.progressDescription,\n        isTitleTruncated && typeof title === 'string' && progressStyle.modifiers.truncate\n      )}\n      id={`${parentId}-description`}\n      aria-hidden=\"true\"\n      onMouseEnter={isTitleTruncated && typeof title === 'string' ? onMouseEnter : null}\n    >\n      {title}\n    </div>\n  );\n\n  return (\n    <React.Fragment>\n      {tooltip ? (\n        <Tooltip position={tooltipPosition} content={tooltip} isVisible>\n          {Title}\n        </Tooltip>\n      ) : (\n        Title\n      )}\n      <div className={css(progressStyle.progressStatus)} aria-hidden=\"true\">\n        {(measureLocation === ProgressMeasureLocation.top || measureLocation === ProgressMeasureLocation.outside) && (\n          <span className={css(progressStyle.progressMeasure)}>{label || `${value}%`}</span>\n        )}\n        {variantToIcon.hasOwnProperty(variant) && (\n          <span className={css(progressStyle.progressStatusIcon)}>\n            <StatusIcon />\n          </span>\n        )}\n      </div>\n      <ProgressBar role=\"progressbar\" progressBarAriaProps={progressBarAriaProps} value={value}>\n        {measureLocation === ProgressMeasureLocation.inside && `${value}%`}\n      </ProgressBar>\n    </React.Fragment>\n  );\n};\nProgressContainer.displayName = 'ProgressContainer';\n"]},"metadata":{},"sourceType":"module"}