{"ast":null,"code":"import _defineProperty from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useCallback,useEffect,useState}from'react';import{copyAndSetValues}from'../utils/utils';/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Objects consisting of whether is input required and validation function\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> fieldValues - values of input fields\n *  -> fieldErrors - error messages of inout fields\n *  -> fieldStates - 'default' | 'success' | 'error'\n *  -> isSubmitDisabled - submit disabled or not\n *  -> onChange - callback for input fields on change\n *  -> setFieldValues - set all field values\n *  -> onSubmit - callback for submit button\n *\n * initValues, validators, fieldValues, fieldErrors, fieldStates are objects whose keys are equal to ids of inputs fields.\n * example: validators.projectUrl.isRequired\n */export var useForm=function useForm(initValues,validators,callback){// is submit button disabled?\nvar _useState=useState(true),_useState2=_slicedToArray(_useState,2),isSubmitDisabled=_useState2[0],setIsSubmitDisabled=_useState2[1];// has any field been changed?\n// important for edit page (do not submit until any new content)\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),hasChanged=_useState4[0],setHasChanged=_useState4[1];// input values\nvar _useState5=useState(initValues),_useState6=_slicedToArray(_useState5,2),fieldValues=_useState6[0],setFieldValues=_useState6[1];// input error messages\nvar _useState7=useState({}),_useState8=_slicedToArray(_useState7,2),fieldErrors=_useState8[0],setFieldErrors=_useState8[1];// inpur validation functions\nvar _useState9=useState(validators),_useState10=_slicedToArray(_useState9,1),fieldValidators=_useState10[0];var initFieldStates=copyAndSetValues(initValues,'default');// input states - 'default' | 'success' | 'error'\nvar _useState11=useState(initFieldStates),_useState12=_slicedToArray(_useState11,2),fieldStates=_useState12[0],setFieldStates=_useState12[1];// are all validated inputs valid?\nvar isFormValid=useCallback(function(){return!Object.keys(fieldErrors).length;},[fieldErrors]);// are all required inputs filled?\nvar areRequiredFilled=useCallback(function(){for(var _key in fieldValidators){if(fieldValidators[_key].isRequired&&!fieldValues[_key]){return false;}}return true;},[fieldValidators,fieldValues]);// callback (on change of input)\nvar onChange=function onChange(event){var fieldName=event.currentTarget.name;var fieldValue=event.currentTarget.value;setFieldValues(_objectSpread(_objectSpread({},fieldValues),{},_defineProperty({},fieldName,fieldValue)));validate(fieldName,fieldValue);setHasChanged(true);};// validate field\nvar validate=function validate(fieldName,fieldValue){if(fieldValidators[fieldName]){var isRequired=fieldValidators[fieldName].isRequired;var validator=fieldValidators[fieldName].validator;if(isRequired){var error=fieldValue?'':'Field must be filled!';setError(fieldName,fieldValue,error);}else if(validator){var _error=validator(fieldValue);setError(fieldName,fieldValue,_error);}}};// set error message and state\nvar setError=function setError(fieldName,fieldValue,error){if(error){setFieldErrors(_objectSpread(_objectSpread({},fieldErrors),{},_defineProperty({},fieldName,error)));setFieldStates(_objectSpread(_objectSpread({},fieldStates),{},_defineProperty({},fieldName,'error')));}else{// if no error, delete old error (if any)\nvar newErrors=_objectSpread({},fieldErrors);delete newErrors[fieldName];setFieldErrors(newErrors);// display success state only if not empty\nif(fieldValue){setFieldStates(_objectSpread(_objectSpread({},fieldStates),{},_defineProperty({},fieldName,'success')));}else{setFieldStates(_objectSpread(_objectSpread({},fieldStates),{},_defineProperty({},fieldName,'default')));}}};// callback (on submit of form)\nvar onSubmit=function onSubmit(){callback(fieldValues);// reset state to 'default' (valid inputs wont be highlighted)\nsetFieldStates(initFieldStates);setIsSubmitDisabled(true);};useEffect(function(){if(isFormValid()&&areRequiredFilled()&&hasChanged){setIsSubmitDisabled(false);}else{setIsSubmitDisabled(true);}},[fieldValues,hasChanged,isFormValid,areRequiredFilled]);return{fieldValues:fieldValues,fieldErrors:fieldErrors,fieldStates:fieldStates,isSubmitDisabled:isSubmitDisabled,onChange:onChange,setFieldValues:setFieldValues,onSubmit:onSubmit};};","map":{"version":3,"names":["useCallback","useEffect","useState","copyAndSetValues","useForm","initValues","validators","callback","isSubmitDisabled","setIsSubmitDisabled","hasChanged","setHasChanged","fieldValues","setFieldValues","fieldErrors","setFieldErrors","fieldValidators","initFieldStates","fieldStates","setFieldStates","isFormValid","Object","keys","length","areRequiredFilled","key","isRequired","onChange","event","fieldName","currentTarget","name","fieldValue","value","validate","validator","error","setError","newErrors","onSubmit"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { copyAndSetValues } from '../utils/utils';\n\ninterface IFieldValues {\n  [key: string]: string;\n}\n\ninterface IFieldErrors {\n  [key: string]: string | undefined;\n}\n\ninterface IFieldValidators {\n  [key: string]: IValidator;\n}\n\ninterface IValidator {\n  isRequired?: boolean;\n  validator?: Function;\n}\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Objects consisting of whether is input required and validation function\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> fieldValues - values of input fields\n *  -> fieldErrors - error messages of inout fields\n *  -> fieldStates - 'default' | 'success' | 'error'\n *  -> isSubmitDisabled - submit disabled or not\n *  -> onChange - callback for input fields on change\n *  -> setFieldValues - set all field values\n *  -> onSubmit - callback for submit button\n *\n * initValues, validators, fieldValues, fieldErrors, fieldStates are objects whose keys are equal to ids of inputs fields.\n * example: validators.projectUrl.isRequired\n */\nexport const useForm = (initValues: IFieldValues, validators: IFieldValidators, callback: Function) => {\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  // has any field been changed?\n  // important for edit page (do not submit until any new content)\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // input values\n  const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  // input error messages\n  const [fieldErrors, setFieldErrors] = useState<IFieldErrors>({});\n  // inpur validation functions\n  const [fieldValidators] = useState<IFieldValidators>(validators);\n\n  const initFieldStates = copyAndSetValues(initValues, 'default');\n  // input states - 'default' | 'success' | 'error'\n  const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n\n  // are all validated inputs valid?\n  const isFormValid = useCallback(() => {\n    return !Object.keys(fieldErrors).length;\n  }, [fieldErrors]);\n\n  // are all required inputs filled?\n  const areRequiredFilled = useCallback(() => {\n    for (const key in fieldValidators) {\n      if (fieldValidators[key].isRequired && !fieldValues[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }, [fieldValidators, fieldValues]);\n\n  // callback (on change of input)\n  const onChange = (event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n\n    setFieldValues({ ...fieldValues, [fieldName]: fieldValue });\n    validate(fieldName, fieldValue);\n    setHasChanged(true);\n  };\n\n  // validate field\n  const validate = (fieldName: string, fieldValue: string) => {\n    if (fieldValidators[fieldName]) {\n      const isRequired = fieldValidators[fieldName].isRequired;\n      const validator = fieldValidators[fieldName].validator;\n      if (isRequired) {\n        const error = fieldValue ? '' : 'Field must be filled!';\n        setError(fieldName, fieldValue, error);\n      } else if (validator) {\n        const error = validator(fieldValue);\n        setError(fieldName, fieldValue, error);\n      }\n    }\n  };\n\n  // set error message and state\n  const setError = (fieldName: string, fieldValue: string, error: string) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors, [fieldName]: error });\n      setFieldStates({ ...fieldStates, [fieldName]: 'error' });\n    } else {\n      // if no error, delete old error (if any)\n      const newErrors = { ...fieldErrors };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      // display success state only if not empty\n      if (fieldValue) {\n        setFieldStates({ ...fieldStates, [fieldName]: 'success' });\n      } else {\n        setFieldStates({ ...fieldStates, [fieldName]: 'default' });\n      }\n    }\n  };\n\n  // callback (on submit of form)\n  const onSubmit = () => {\n    callback(fieldValues);\n    // reset state to 'default' (valid inputs wont be highlighted)\n    setFieldStates(initFieldStates);\n    setIsSubmitDisabled(true);\n  };\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fieldValues, hasChanged, isFormValid, areRequiredFilled]);\n\n  return { fieldValues, fieldErrors, fieldStates, isSubmitDisabled, onChange, setFieldValues, onSubmit };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}