{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tabs/tabs';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\nimport { getUniqueId, isElementInView, formatBreakpointMods } from '../../helpers/util';\nimport { TabContent } from './TabContent';\nimport { TabsContextProvider } from './TabsContext';\nimport { Button } from '../Button';\nimport { getOUIAProps, getDefaultOUIAId, canUseDOM } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport var TabsComponent;\n\n(function (TabsComponent) {\n  TabsComponent[\"div\"] = \"div\";\n  TabsComponent[\"nav\"] = \"nav\";\n})(TabsComponent || (TabsComponent = {}));\n\nconst variantStyle = {\n  default: '',\n  light300: styles.modifiers.colorSchemeLight_300\n};\nexport class Tabs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.tabList = React.createRef();\n    this.scrollTimeout = null;\n\n    this.handleScrollButtons = () => {\n      // add debounce to the scroll event\n      clearTimeout(this.scrollTimeout);\n      this.scrollTimeout = setTimeout(() => {\n        const container = this.tabList.current;\n        let disableLeftScrollButton = true;\n        let disableRightScrollButton = true;\n        let showScrollButtons = false;\n\n        if (container && !this.props.isVertical) {\n          // get first element and check if it is in view\n          const overflowOnLeft = !isElementInView(container, container.firstChild, false); // get last element and check if it is in view\n\n          const overflowOnRight = !isElementInView(container, container.lastChild, false);\n          showScrollButtons = overflowOnLeft || overflowOnRight;\n          disableLeftScrollButton = !overflowOnLeft;\n          disableRightScrollButton = !overflowOnRight;\n        }\n\n        this.setState({\n          showScrollButtons,\n          disableLeftScrollButton,\n          disableRightScrollButton\n        });\n      }, 100);\n    };\n\n    this.scrollLeft = () => {\n      // find first Element that is fully in view on the left, then scroll to the element before it\n      if (this.tabList.current) {\n        const container = this.tabList.current;\n        const childrenArr = Array.from(container.children);\n        let firstElementInView;\n        let lastElementOutOfView;\n        let i;\n\n        for (i = 0; i < childrenArr.length && !firstElementInView; i++) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            firstElementInView = childrenArr[i];\n            lastElementOutOfView = childrenArr[i - 1];\n          }\n        }\n\n        if (lastElementOutOfView) {\n          container.scrollLeft -= lastElementOutOfView.scrollWidth;\n        }\n      }\n    };\n\n    this.scrollRight = () => {\n      // find last Element that is fully in view on the right, then scroll to the element after it\n      if (this.tabList.current) {\n        const container = this.tabList.current;\n        const childrenArr = Array.from(container.children);\n        let lastElementInView;\n        let firstElementOutOfView;\n\n        for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            lastElementInView = childrenArr[i];\n            firstElementOutOfView = childrenArr[i + 1];\n          }\n        }\n\n        if (firstElementOutOfView) {\n          container.scrollLeft += firstElementOutOfView.scrollWidth;\n        }\n      }\n    };\n\n    this.state = {\n      showScrollButtons: false,\n      disableLeftScrollButton: true,\n      disableRightScrollButton: true,\n      shownKeys: this.props.defaultActiveKey !== undefined ? [this.props.defaultActiveKey] : [this.props.activeKey],\n      uncontrolledActiveKey: this.props.defaultActiveKey,\n      uncontrolledIsExpandedLocal: this.props.defaultIsExpanded,\n      ouiaStateId: getDefaultOUIAId(Tabs.displayName)\n    };\n\n    if (this.props.isVertical && this.props.expandable !== undefined) {\n      if (!this.props.toggleAriaLabel && !this.props.toggleText) {\n        // eslint-disable-next-line no-console\n        console.error('Tabs:', 'toggleAriaLabel or the toggleText prop is required to make the toggle button accessible');\n      }\n    }\n  }\n\n  handleTabClick(event, eventKey, tabContentRef) {\n    const {\n      shownKeys\n    } = this.state;\n    const {\n      onSelect,\n      defaultActiveKey\n    } = this.props; // if defaultActiveKey Tabs are uncontrolled, set new active key internally\n\n    if (defaultActiveKey !== undefined) {\n      this.setState({\n        uncontrolledActiveKey: eventKey\n      });\n    } else {\n      onSelect(event, eventKey);\n    } // process any tab content sections outside of the component\n\n\n    if (tabContentRef) {\n      React.Children.toArray(this.props.children).map(child => child).filter(child => child.props && child.props.tabContentRef && child.props.tabContentRef.current).forEach(child => child.props.tabContentRef.current.hidden = true); // most recently selected tabContent\n\n      if (tabContentRef.current) {\n        tabContentRef.current.hidden = false;\n      }\n    }\n\n    if (this.props.mountOnEnter) {\n      this.setState({\n        shownKeys: shownKeys.concat(eventKey)\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (!this.props.isVertical) {\n      if (canUseDOM) {\n        window.addEventListener('resize', this.handleScrollButtons, false);\n      } // call the handle resize function to check if scroll buttons should be shown\n\n\n      this.handleScrollButtons();\n    }\n  }\n\n  componentWillUnmount() {\n    if (!this.props.isVertical) {\n      if (canUseDOM) {\n        window.removeEventListener('resize', this.handleScrollButtons, false);\n      }\n    }\n\n    clearTimeout(this.scrollTimeout);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      activeKey,\n      mountOnEnter,\n      children\n    } = this.props;\n    const {\n      shownKeys\n    } = this.state;\n\n    if (prevProps.activeKey !== activeKey && mountOnEnter && shownKeys.indexOf(activeKey) < 0) {\n      this.setState({\n        shownKeys: shownKeys.concat(activeKey)\n      });\n    }\n\n    if (prevProps.children && children && React.Children.toArray(prevProps.children).length !== React.Children.toArray(children).length) {\n      this.handleScrollButtons();\n    }\n  }\n\n  render() {\n    var _this = this;\n\n    const _a = this.props,\n          {\n      className,\n      children,\n      activeKey,\n      defaultActiveKey,\n      id,\n      isFilled,\n      isSecondary,\n      isVertical,\n      isBox,\n      hasBorderBottom,\n      hasSecondaryBorderBottom,\n      leftScrollAriaLabel,\n      rightScrollAriaLabel,\n      'aria-label': ariaLabel,\n      component,\n      ouiaId,\n      ouiaSafe,\n      mountOnEnter,\n      unmountOnExit,\n      usePageInsets,\n      inset,\n      variant,\n      expandable,\n      isExpanded,\n      defaultIsExpanded,\n      toggleText,\n      toggleAriaLabel,\n      addButtonAriaLabel,\n      onToggle,\n      onClose,\n      onAdd\n    } = _a,\n          props = __rest(_a, [\"className\", \"children\", \"activeKey\", \"defaultActiveKey\", \"id\", \"isFilled\", \"isSecondary\", \"isVertical\", \"isBox\", \"hasBorderBottom\", \"hasSecondaryBorderBottom\", \"leftScrollAriaLabel\", \"rightScrollAriaLabel\", 'aria-label', \"component\", \"ouiaId\", \"ouiaSafe\", \"mountOnEnter\", \"unmountOnExit\", \"usePageInsets\", \"inset\", \"variant\", \"expandable\", \"isExpanded\", \"defaultIsExpanded\", \"toggleText\", \"toggleAriaLabel\", \"addButtonAriaLabel\", \"onToggle\", \"onClose\", \"onAdd\"]);\n\n    const {\n      showScrollButtons,\n      disableLeftScrollButton,\n      disableRightScrollButton,\n      shownKeys,\n      uncontrolledActiveKey,\n      uncontrolledIsExpandedLocal\n    } = this.state;\n    const filteredChildren = React.Children.toArray(children).filter(Boolean).filter(child => !child.props.isHidden);\n    const uniqueId = id || getUniqueId();\n    const Component = component === TabsComponent.nav ? 'nav' : 'div';\n    const localActiveKey = defaultActiveKey !== undefined ? uncontrolledActiveKey : activeKey;\n    const isExpandedLocal = defaultIsExpanded !== undefined ? uncontrolledIsExpandedLocal : isExpanded;\n    /*  Uncontrolled expandable tabs */\n\n    const toggleTabs = newValue => {\n      if (isExpanded === undefined) {\n        this.setState({\n          uncontrolledIsExpandedLocal: newValue\n        });\n      } else {\n        onToggle(newValue);\n      }\n    };\n\n    return React.createElement(TabsContextProvider, {\n      value: {\n        variant,\n        mountOnEnter,\n        unmountOnExit,\n        localActiveKey,\n        uniqueId,\n        handleTabClick: function () {\n          return _this.handleTabClick(...arguments);\n        },\n        handleTabClose: onClose\n      }\n    }, React.createElement(Component, Object.assign({\n      \"aria-label\": ariaLabel,\n      className: css(styles.tabs, isFilled && styles.modifiers.fill, isSecondary && styles.modifiers.secondary, isVertical && styles.modifiers.vertical, isVertical && expandable && formatBreakpointMods(expandable, styles), isVertical && expandable && isExpandedLocal && styles.modifiers.expanded, isBox && styles.modifiers.box, showScrollButtons && !isVertical && styles.modifiers.scrollable, usePageInsets && styles.modifiers.pageInsets, !hasBorderBottom && styles.modifiers.noBorderBottom, hasSecondaryBorderBottom && styles.modifiers.borderBottom, formatBreakpointMods(inset, styles), variantStyle[variant], className)\n    }, getOUIAProps(Tabs.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), {\n      id: id && id\n    }, props), expandable && isVertical && React.createElement(GenerateId, null, randomId => React.createElement(\"div\", {\n      className: css(styles.tabsToggle)\n    }, React.createElement(\"div\", {\n      className: css(styles.tabsToggleButton)\n    }, React.createElement(Button, {\n      onClick: () => toggleTabs(!isExpandedLocal),\n      variant: \"plain\",\n      \"aria-label\": toggleAriaLabel,\n      \"aria-expanded\": isExpandedLocal,\n      id: `${randomId}-button`,\n      \"aria-labelledby\": `${randomId}-text ${randomId}-button`\n    }, React.createElement(\"span\", {\n      className: css(styles.tabsToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"arian-hidden\": \"true\"\n    })), toggleText && React.createElement(\"span\", {\n      className: css('pf-c-tabs__toggle-text'),\n      id: `${randomId}-text`\n    }, toggleText))))), React.createElement(\"button\", {\n      className: css(styles.tabsScrollButton, isSecondary && buttonStyles.modifiers.secondary),\n      \"aria-label\": leftScrollAriaLabel,\n      onClick: this.scrollLeft,\n      disabled: disableLeftScrollButton,\n      \"aria-hidden\": disableLeftScrollButton\n    }, React.createElement(AngleLeftIcon, null)), React.createElement(\"ul\", {\n      className: css(styles.tabsList),\n      ref: this.tabList,\n      onScroll: this.handleScrollButtons,\n      role: \"tablist\"\n    }, filteredChildren), React.createElement(\"button\", {\n      className: css(styles.tabsScrollButton, isSecondary && buttonStyles.modifiers.secondary),\n      \"aria-label\": rightScrollAriaLabel,\n      onClick: this.scrollRight,\n      disabled: disableRightScrollButton,\n      \"aria-hidden\": disableRightScrollButton\n    }, React.createElement(AngleRightIcon, null)), onAdd !== undefined && React.createElement(\"span\", {\n      className: css(styles.tabsAdd)\n    }, React.createElement(Button, {\n      variant: \"plain\",\n      \"aria-label\": addButtonAriaLabel || 'Add tab',\n      onClick: onAdd\n    }, React.createElement(PlusIcon, null)))), filteredChildren.filter(child => child.props.children && !(unmountOnExit && child.props.eventKey !== localActiveKey) && !(mountOnEnter && shownKeys.indexOf(child.props.eventKey) === -1)).map(child => React.createElement(TabContent, {\n      key: child.props.eventKey,\n      activeKey: localActiveKey,\n      child: child,\n      id: child.props.id || uniqueId,\n      ouiaId: child.props.ouiaId\n    })));\n  }\n\n}\nTabs.displayName = 'Tabs';\nTabs.defaultProps = {\n  activeKey: 0,\n  onSelect: () => undefined,\n  isFilled: false,\n  isSecondary: false,\n  isVertical: false,\n  isBox: false,\n  hasBorderBottom: true,\n  leftScrollAriaLabel: 'Scroll left',\n  rightScrollAriaLabel: 'Scroll right',\n  component: TabsComponent.div,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  ouiaSafe: true,\n  variant: 'default',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: isExpanded => undefined\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,mDAAnB;AACA,OAAOC,YAAP,MAAyB,uDAAzB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA,OAAOC,aAAP,MAA0B,wDAA1B;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,oBAAvC,QAAmE,oBAAnE;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,mBAAT,QAAoC,eAApC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,YAAT,EAAkCC,gBAAlC,EAAoDC,SAApD,QAAqE,eAArE;AACA,SAASC,UAAT,QAA2B,qCAA3B;AAEA,WAAYC,aAAZ;;AAAA,WAAYA,aAAZ,EAAyB;EACvBA;EACAA;AACD,CAHD,EAAYA,aAAa,KAAbA,aAAa,MAAzB;;AAkFA,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,EADU;EAEnBC,QAAQ,EAAEnB,MAAM,CAACoB,SAAP,CAAiBC;AAFR,CAArB;AAeA,OAAM,MAAOC,IAAP,SAAoBvB,KAAK,CAACwB,SAA1B,CAAyD;EAG7DC,YAAYC,KAAZ,EAA4B;IAC1B,MAAMA,KAAN;IAFF,eAAU1B,KAAK,CAAC2B,SAAN,EAAV;IAwBA,qBAAgC,IAAhC;;IAuDA,2BAAsB,MAAK;MACzB;MACAC,YAAY,CAAC,KAAKC,aAAN,CAAZ;MACA,KAAKA,aAAL,GAAqBC,UAAU,CAAC,MAAK;QACnC,MAAMC,SAAS,GAAG,KAAKC,OAAL,CAAaC,OAA/B;QACA,IAAIC,uBAAuB,GAAG,IAA9B;QACA,IAAIC,wBAAwB,GAAG,IAA/B;QACA,IAAIC,iBAAiB,GAAG,KAAxB;;QAEA,IAAIL,SAAS,IAAI,CAAC,KAAKL,KAAL,CAAWW,UAA7B,EAAyC;UACvC;UACA,MAAMC,cAAc,GAAG,CAAC9B,eAAe,CAACuB,SAAD,EAAYA,SAAS,CAACQ,UAAtB,EAAiD,KAAjD,CAAvC,CAFuC,CAIvC;;UACA,MAAMC,eAAe,GAAG,CAAChC,eAAe,CAACuB,SAAD,EAAYA,SAAS,CAACU,SAAtB,EAAgD,KAAhD,CAAxC;UAEAL,iBAAiB,GAAGE,cAAc,IAAIE,eAAtC;UAEAN,uBAAuB,GAAG,CAACI,cAA3B;UACAH,wBAAwB,GAAG,CAACK,eAA5B;QACD;;QACD,KAAKE,QAAL,CAAc;UACZN,iBADY;UAEZF,uBAFY;UAGZC;QAHY,CAAd;MAKD,CAvB8B,EAuB5B,GAvB4B,CAA/B;IAwBD,CA3BD;;IA6BA,kBAAa,MAAK;MAChB;MACA,IAAI,KAAKH,OAAL,CAAaC,OAAjB,EAA0B;QACxB,MAAMF,SAAS,GAAG,KAAKC,OAAL,CAAaC,OAA/B;QACA,MAAMU,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWd,SAAS,CAACe,QAArB,CAApB;QACA,IAAIC,kBAAJ;QACA,IAAIC,oBAAJ;QACA,IAAIC,CAAJ;;QACA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGN,WAAW,CAACO,MAAhB,IAA0B,CAACH,kBAAvC,EAA2DE,CAAC,EAA5D,EAAgE;UAC9D,IAAIzC,eAAe,CAACuB,SAAD,EAAYY,WAAW,CAACM,CAAD,CAAvB,EAA2C,KAA3C,CAAnB,EAAsE;YACpEF,kBAAkB,GAAGJ,WAAW,CAACM,CAAD,CAAhC;YACAD,oBAAoB,GAAGL,WAAW,CAACM,CAAC,GAAG,CAAL,CAAlC;UACD;QACF;;QACD,IAAID,oBAAJ,EAA0B;UACxBjB,SAAS,CAACoB,UAAV,IAAwBH,oBAAoB,CAACI,WAA7C;QACD;MACF;IACF,CAlBD;;IAoBA,mBAAc,MAAK;MACjB;MACA,IAAI,KAAKpB,OAAL,CAAaC,OAAjB,EAA0B;QACxB,MAAMF,SAAS,GAAG,KAAKC,OAAL,CAAaC,OAA/B;QACA,MAAMU,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAWd,SAAS,CAACe,QAArB,CAApB;QACA,IAAIO,iBAAJ;QACA,IAAIC,qBAAJ;;QACA,KAAK,IAAIL,CAAC,GAAGN,WAAW,CAACO,MAAZ,GAAqB,CAAlC,EAAqCD,CAAC,IAAI,CAAL,IAAU,CAACI,iBAAhD,EAAmEJ,CAAC,EAApE,EAAwE;UACtE,IAAIzC,eAAe,CAACuB,SAAD,EAAYY,WAAW,CAACM,CAAD,CAAvB,EAA2C,KAA3C,CAAnB,EAAsE;YACpEI,iBAAiB,GAAGV,WAAW,CAACM,CAAD,CAA/B;YACAK,qBAAqB,GAAGX,WAAW,CAACM,CAAC,GAAG,CAAL,CAAnC;UACD;QACF;;QACD,IAAIK,qBAAJ,EAA2B;UACzBvB,SAAS,CAACoB,UAAV,IAAwBG,qBAAqB,CAACF,WAA9C;QACD;MACF;IACF,CAjBD;;IA7HE,KAAKG,KAAL,GAAa;MACXnB,iBAAiB,EAAE,KADR;MAEXF,uBAAuB,EAAE,IAFd;MAGXC,wBAAwB,EAAE,IAHf;MAIXqB,SAAS,EAAE,KAAK9B,KAAL,CAAW+B,gBAAX,KAAgCC,SAAhC,GAA4C,CAAC,KAAKhC,KAAL,CAAW+B,gBAAZ,CAA5C,GAA4E,CAAC,KAAK/B,KAAL,CAAWiC,SAAZ,CAJ5E;MAKXC,qBAAqB,EAAE,KAAKlC,KAAL,CAAW+B,gBALvB;MAMXI,2BAA2B,EAAE,KAAKnC,KAAL,CAAWoC,iBAN7B;MAOXC,WAAW,EAAEjD,gBAAgB,CAACS,IAAI,CAACyC,WAAN;IAPlB,CAAb;;IAUA,IAAI,KAAKtC,KAAL,CAAWW,UAAX,IAAyB,KAAKX,KAAL,CAAWuC,UAAX,KAA0BP,SAAvD,EAAkE;MAChE,IAAI,CAAC,KAAKhC,KAAL,CAAWwC,eAAZ,IAA+B,CAAC,KAAKxC,KAAL,CAAWyC,UAA/C,EAA2D;QACzD;QACAC,OAAO,CAACC,KAAR,CACE,OADF,EAEE,yFAFF;MAID;IACF;EACF;;EAuBDC,cAAc,CACZC,KADY,EAEZC,QAFY,EAGZC,aAHY,EAGuB;IAEnC,MAAM;MAAEjB;IAAF,IAAgB,KAAKD,KAA3B;IACA,MAAM;MAAEmB,QAAF;MAAYjB;IAAZ,IAAiC,KAAK/B,KAA5C,CAHmC,CAInC;;IACA,IAAI+B,gBAAgB,KAAKC,SAAzB,EAAoC;MAClC,KAAKhB,QAAL,CAAc;QACZkB,qBAAqB,EAAEY;MADX,CAAd;IAGD,CAJD,MAIO;MACLE,QAAQ,CAACH,KAAD,EAAQC,QAAR,CAAR;IACD,CAXkC,CAanC;;;IACA,IAAIC,aAAJ,EAAmB;MACjBzE,KAAK,CAAC2E,QAAN,CAAeC,OAAf,CAAuB,KAAKlD,KAAL,CAAWoB,QAAlC,EACG+B,GADH,CACOC,KAAK,IAAIA,KADhB,EAEGC,MAFH,CAEUD,KAAK,IAAIA,KAAK,CAACpD,KAAN,IAAeoD,KAAK,CAACpD,KAAN,CAAY+C,aAA3B,IAA4CK,KAAK,CAACpD,KAAN,CAAY+C,aAAZ,CAA0BxC,OAFzF,EAGG+C,OAHH,CAGWF,KAAK,IAAKA,KAAK,CAACpD,KAAN,CAAY+C,aAAZ,CAA0BxC,OAA1B,CAAkCgD,MAAlC,GAA2C,IAHhE,EADiB,CAKjB;;MACA,IAAIR,aAAa,CAACxC,OAAlB,EAA2B;QACzBwC,aAAa,CAACxC,OAAd,CAAsBgD,MAAtB,GAA+B,KAA/B;MACD;IACF;;IACD,IAAI,KAAKvD,KAAL,CAAWwD,YAAf,EAA6B;MAC3B,KAAKxC,QAAL,CAAc;QACZc,SAAS,EAAEA,SAAS,CAAC2B,MAAV,CAAiBX,QAAjB;MADC,CAAd;IAGD;EACF;;EAsEDY,iBAAiB;IACf,IAAI,CAAC,KAAK1D,KAAL,CAAWW,UAAhB,EAA4B;MAC1B,IAAItB,SAAJ,EAAe;QACbsE,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,mBAAvC,EAA4D,KAA5D;MACD,CAHyB,CAI1B;;;MACA,KAAKA,mBAAL;IACD;EACF;;EAEDC,oBAAoB;IAClB,IAAI,CAAC,KAAK9D,KAAL,CAAWW,UAAhB,EAA4B;MAC1B,IAAItB,SAAJ,EAAe;QACbsE,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqC,KAAKF,mBAA1C,EAA+D,KAA/D;MACD;IACF;;IACD3D,YAAY,CAAC,KAAKC,aAAN,CAAZ;EACD;;EAED6D,kBAAkB,CAACC,SAAD,EAAqB;IACrC,MAAM;MAAEhC,SAAF;MAAauB,YAAb;MAA2BpC;IAA3B,IAAwC,KAAKpB,KAAnD;IACA,MAAM;MAAE8B;IAAF,IAAgB,KAAKD,KAA3B;;IACA,IAAIoC,SAAS,CAAChC,SAAV,KAAwBA,SAAxB,IAAqCuB,YAArC,IAAqD1B,SAAS,CAACoC,OAAV,CAAkBjC,SAAlB,IAA+B,CAAxF,EAA2F;MACzF,KAAKjB,QAAL,CAAc;QACZc,SAAS,EAAEA,SAAS,CAAC2B,MAAV,CAAiBxB,SAAjB;MADC,CAAd;IAGD;;IAED,IACEgC,SAAS,CAAC7C,QAAV,IACAA,QADA,IAEA9C,KAAK,CAAC2E,QAAN,CAAeC,OAAf,CAAuBe,SAAS,CAAC7C,QAAjC,EAA2CI,MAA3C,KAAsDlD,KAAK,CAAC2E,QAAN,CAAeC,OAAf,CAAuB9B,QAAvB,EAAiCI,MAHzF,EAIE;MACA,KAAKqC,mBAAL;IACD;EACF;;EAEDM,MAAM;IAAA;;IACJ,MAAMC,KAiCF,KAAKpE,KAjCT;IAAA,MAAM;MACJqE,SADI;MAEJjD,QAFI;MAGJa,SAHI;MAIJF,gBAJI;MAKJuC,EALI;MAMJC,QANI;MAOJC,WAPI;MAQJ7D,UARI;MASJ8D,KATI;MAUJC,eAVI;MAWJC,wBAXI;MAYJC,mBAZI;MAaJC,oBAbI;MAcJ,cAAcC,SAdV;MAeJC,SAfI;MAgBJC,MAhBI;MAiBJC,QAjBI;MAkBJzB,YAlBI;MAmBJ0B,aAnBI;MAoBJC,aApBI;MAqBJC,KArBI;MAsBJC,OAtBI;MAuBJ9C,UAvBI;MAwBJ+C,UAxBI;MAyBJlD,iBAzBI;MA0BJK,UA1BI;MA2BJD,eA3BI;MA4BJ+C,kBA5BI;MA6BJC,QA7BI;MA8BJC,OA9BI;MA+BJC;IA/BI,IA+BCtB,EA/BP;IAAA,MAgCKpE,KAAK,cAhCJ,+cAgCI,CAhCV;;IAkCA,MAAM;MACJU,iBADI;MAEJF,uBAFI;MAGJC,wBAHI;MAIJqB,SAJI;MAKJI,qBALI;MAMJC;IANI,IAOF,KAAKN,KAPT;IAQA,MAAM8D,gBAAgB,GAAIrH,KAAK,CAAC2E,QAAN,CAAeC,OAAf,CAAuB9B,QAAvB,EACvBiC,MADuB,CAChBuC,OADgB,EAEvBvC,MAFuB,CAEhBD,KAAK,IAAI,CAACA,KAAK,CAACpD,KAAN,CAAY6F,QAFN,CAA1B;IAIA,MAAMC,QAAQ,GAAGxB,EAAE,IAAIzF,WAAW,EAAlC;IACA,MAAMiB,SAAS,GAAQiF,SAAS,KAAKxF,aAAa,CAACwG,GAA5B,GAAkC,KAAlC,GAA0C,KAAjE;IACA,MAAMC,cAAc,GAAGjE,gBAAgB,KAAKC,SAArB,GAAiCE,qBAAjC,GAAyDD,SAAhF;IAEA,MAAMgE,eAAe,GAAG7D,iBAAiB,KAAKJ,SAAtB,GAAkCG,2BAAlC,GAAgEmD,UAAxF;IACA;;IACA,MAAMY,UAAU,GAAIC,QAAD,IAAsB;MACvC,IAAIb,UAAU,KAAKtD,SAAnB,EAA8B;QAC5B,KAAKhB,QAAL,CAAc;UAAEmB,2BAA2B,EAAEgE;QAA/B,CAAd;MACD,CAFD,MAEO;QACLX,QAAQ,CAACW,QAAD,CAAR;MACD;IACF,CAND;;IAQA,OACE7H,oBAACW,mBAAD,EAAoB;MAClBmH,KAAK,EAAE;QACLf,OADK;QAEL7B,YAFK;QAGL0B,aAHK;QAILc,cAJK;QAKLF,QALK;QAMLlD,cAAc,EAAE;UAAA,OAAa,KAAI,CAACA,cAAL,CAAoB,YAApB,CAAb;QAAA,CANX;QAOLyD,cAAc,EAAEZ;MAPX;IADW,CAApB,EAWEnH,oBAACwB,SAAD,EAAUwG;MAAA,cACIxB,SADJ;MAERT,SAAS,EAAE5F,GAAG,CACZF,MAAM,CAACgI,IADK,EAEZhC,QAAQ,IAAIhG,MAAM,CAACoB,SAAP,CAAiB6G,IAFjB,EAGZhC,WAAW,IAAIjG,MAAM,CAACoB,SAAP,CAAiB8G,SAHpB,EAIZ9F,UAAU,IAAIpC,MAAM,CAACoB,SAAP,CAAiB+G,QAJnB,EAKZ/F,UAAU,IAAI4B,UAAd,IAA4BxD,oBAAoB,CAACwD,UAAD,EAAahE,MAAb,CALpC,EAMZoC,UAAU,IAAI4B,UAAd,IAA4B0D,eAA5B,IAA+C1H,MAAM,CAACoB,SAAP,CAAiBgH,QANpD,EAOZlC,KAAK,IAAIlG,MAAM,CAACoB,SAAP,CAAiBiH,GAPd,EAQZlG,iBAAiB,IAAI,CAACC,UAAtB,IAAoCpC,MAAM,CAACoB,SAAP,CAAiBkH,UARzC,EASZ1B,aAAa,IAAI5G,MAAM,CAACoB,SAAP,CAAiBmH,UATtB,EAUZ,CAACpC,eAAD,IAAoBnG,MAAM,CAACoB,SAAP,CAAiBoH,cAVzB,EAWZpC,wBAAwB,IAAIpG,MAAM,CAACoB,SAAP,CAAiBqH,YAXjC,EAYZjI,oBAAoB,CAACqG,KAAD,EAAQ7G,MAAR,CAZR,EAaZiB,YAAY,CAAC6F,OAAD,CAbA,EAcZhB,SAdY;IAFN,GAkBJlF,YAAY,CAACU,IAAI,CAACyC,WAAN,EAAmB0C,MAAM,KAAKhD,SAAX,GAAuBgD,MAAvB,GAAgC,KAAKnD,KAAL,CAAWQ,WAA9D,EAA2E4C,QAA3E,CAlBR,EAkB4F;MACpGX,EAAE,EAAEA,EAAE,IAAIA;IAD0F,CAlB5F,EAoBJtE,KApBI,CAAV,EAsBGuC,UAAU,IAAI5B,UAAd,IACCrC,oBAACgB,UAAD,EAAW,IAAX,EACG2H,QAAQ,IACP3I;MAAK+F,SAAS,EAAE5F,GAAG,CAACF,MAAM,CAAC2I,UAAR;IAAnB,GACE5I;MAAK+F,SAAS,EAAE5F,GAAG,CAACF,MAAM,CAAC4I,gBAAR;IAAnB,GACE7I,oBAACY,MAAD,EAAO;MACLkI,OAAO,EAAE,MAAMlB,UAAU,CAAC,CAACD,eAAF,CADpB;MAELZ,OAAO,EAAC,OAFH;MAEU,cACH7C,eAHP;MAGsB,iBACZyD,eAJV;MAKL3B,EAAE,EAAE,GAAG2C,QAAQ,SALV;MAKmB,mBACP,GAAGA,QAAQ,SAASA,QAAQ;IANxC,CAAP,EAQE3I;MAAM+F,SAAS,EAAE5F,GAAG,CAACF,MAAM,CAAC8I,cAAR;IAApB,GACE/I,oBAACK,cAAD,EAAe;MAAA,gBAAc;IAAd,CAAf,CADF,CARF,EAWG8D,UAAU,IACTnE;MAAM+F,SAAS,EAAE5F,GAAG,CAAC,wBAAD,CAApB;MAAgD6F,EAAE,EAAE,GAAG2C,QAAQ;IAA/D,GACGxE,UADH,CAZJ,CADF,CADF,CAFJ,CAvBJ,EAiDEnE;MACE+F,SAAS,EAAE5F,GAAG,CAACF,MAAM,CAAC+I,gBAAR,EAA0B9C,WAAW,IAAIhG,YAAY,CAACmB,SAAb,CAAuB8G,SAAhE,CADhB;MAC0F,cAC5E7B,mBAFd;MAGEwC,OAAO,EAAE,KAAK3F,UAHhB;MAIE8F,QAAQ,EAAE/G,uBAJZ;MAImC,eACpBA;IALf,GAOElC,oBAACI,aAAD,EAAc,IAAd,CAPF,CAjDF,EA0DEJ;MAAI+F,SAAS,EAAE5F,GAAG,CAACF,MAAM,CAACiJ,QAAR,CAAlB;MAAqCC,GAAG,EAAE,KAAKnH,OAA/C;MAAwDoH,QAAQ,EAAE,KAAK7D,mBAAvE;MAA4F8D,IAAI,EAAC;IAAjG,GACGhC,gBADH,CA1DF,EA6DErH;MACE+F,SAAS,EAAE5F,GAAG,CAACF,MAAM,CAAC+I,gBAAR,EAA0B9C,WAAW,IAAIhG,YAAY,CAACmB,SAAb,CAAuB8G,SAAhE,CADhB;MAC0F,cAC5E5B,oBAFd;MAGEuC,OAAO,EAAE,KAAKQ,WAHhB;MAIEL,QAAQ,EAAE9G,wBAJZ;MAIoC,eACrBA;IALf,GAOEnC,oBAACK,cAAD,EAAe,IAAf,CAPF,CA7DF,EAsEG+G,KAAK,KAAK1D,SAAV,IACC1D;MAAM+F,SAAS,EAAE5F,GAAG,CAACF,MAAM,CAACsJ,OAAR;IAApB,GACEvJ,oBAACY,MAAD,EAAO;MAACmG,OAAO,EAAC,OAAT;MAAgB,cAAaE,kBAAkB,IAAI,SAAnD;MAA8D6B,OAAO,EAAE1B;IAAvE,CAAP,EACEpH,oBAACM,QAAD,EAAS,IAAT,CADF,CADF,CAvEJ,CAXF,EAyFG+G,gBAAgB,CACdtC,MADF,CAEGD,KAAK,IACHA,KAAK,CAACpD,KAAN,CAAYoB,QAAZ,IACA,EAAE8D,aAAa,IAAI9B,KAAK,CAACpD,KAAN,CAAY8C,QAAZ,KAAyBkD,cAA5C,CADA,IAEA,EAAExC,YAAY,IAAI1B,SAAS,CAACoC,OAAV,CAAkBd,KAAK,CAACpD,KAAN,CAAY8C,QAA9B,MAA4C,CAAC,CAA/D,CALL,EAOEK,GAPF,CAOMC,KAAK,IACR9E,oBAACU,UAAD,EAAW;MACT8I,GAAG,EAAE1E,KAAK,CAACpD,KAAN,CAAY8C,QADR;MAETb,SAAS,EAAE+D,cAFF;MAGT5C,KAAK,EAAEA,KAHE;MAITkB,EAAE,EAAElB,KAAK,CAACpD,KAAN,CAAYsE,EAAZ,IAAkBwB,QAJb;MAKTd,MAAM,EAAE5B,KAAK,CAACpD,KAAN,CAAYgF;IALX,CAAX,CARH,CAzFH,CADF;EA4GD;;AAnW4D;AACtDnF,mBAAc,MAAd;AA2BAA,oBAAwC;EAC7CoC,SAAS,EAAE,CADkC;EAE7Ce,QAAQ,EAAE,MAAMhB,SAF6B;EAG7CuC,QAAQ,EAAE,KAHmC;EAI7CC,WAAW,EAAE,KAJgC;EAK7C7D,UAAU,EAAE,KALiC;EAM7C8D,KAAK,EAAE,KANsC;EAO7CC,eAAe,EAAE,IAP4B;EAQ7CE,mBAAmB,EAAE,aARwB;EAS7CC,oBAAoB,EAAE,cATuB;EAU7CE,SAAS,EAAExF,aAAa,CAACwI,GAVoB;EAW7CvE,YAAY,EAAE,KAX+B;EAY7C0B,aAAa,EAAE,KAZ8B;EAa7CD,QAAQ,EAAE,IAbmC;EAc7CI,OAAO,EAAE,SAdoC;EAe7C;EACAG,QAAQ,EAAGF,UAAD,IAAsBtD;AAhBa,CAAxC","names":["React","styles","buttonStyles","css","AngleLeftIcon","AngleRightIcon","PlusIcon","getUniqueId","isElementInView","formatBreakpointMods","TabContent","TabsContextProvider","Button","getOUIAProps","getDefaultOUIAId","canUseDOM","GenerateId","TabsComponent","variantStyle","default","light300","modifiers","colorSchemeLight_300","Tabs","Component","constructor","props","createRef","clearTimeout","scrollTimeout","setTimeout","container","tabList","current","disableLeftScrollButton","disableRightScrollButton","showScrollButtons","isVertical","overflowOnLeft","firstChild","overflowOnRight","lastChild","setState","childrenArr","Array","from","children","firstElementInView","lastElementOutOfView","i","length","scrollLeft","scrollWidth","lastElementInView","firstElementOutOfView","state","shownKeys","defaultActiveKey","undefined","activeKey","uncontrolledActiveKey","uncontrolledIsExpandedLocal","defaultIsExpanded","ouiaStateId","displayName","expandable","toggleAriaLabel","toggleText","console","error","handleTabClick","event","eventKey","tabContentRef","onSelect","Children","toArray","map","child","filter","forEach","hidden","mountOnEnter","concat","componentDidMount","window","addEventListener","handleScrollButtons","componentWillUnmount","removeEventListener","componentDidUpdate","prevProps","indexOf","render","_a","className","id","isFilled","isSecondary","isBox","hasBorderBottom","hasSecondaryBorderBottom","leftScrollAriaLabel","rightScrollAriaLabel","ariaLabel","component","ouiaId","ouiaSafe","unmountOnExit","usePageInsets","inset","variant","isExpanded","addButtonAriaLabel","onToggle","onClose","onAdd","filteredChildren","Boolean","isHidden","uniqueId","nav","localActiveKey","isExpandedLocal","toggleTabs","newValue","value","handleTabClose","Object","tabs","fill","secondary","vertical","expanded","box","scrollable","pageInsets","noBorderBottom","borderBottom","randomId","tabsToggle","tabsToggleButton","onClick","tabsToggleIcon","tabsScrollButton","disabled","tabsList","ref","onScroll","role","scrollRight","tabsAdd","key","div"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Tabs/Tabs.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Tabs/tabs';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\nimport { getUniqueId, isElementInView, formatBreakpointMods } from '../../helpers/util';\nimport { TabContent } from './TabContent';\nimport { TabProps } from './Tab';\nimport { TabsContextProvider } from './TabsContext';\nimport { Button } from '../Button';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId, canUseDOM } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport enum TabsComponent {\n  div = 'div',\n  nav = 'nav'\n}\n\nexport interface TabsProps extends Omit<React.HTMLProps<HTMLElement | HTMLDivElement>, 'onSelect'>, OUIAProps {\n  /** Content rendered inside the tabs component. Must be React.ReactElement<TabProps>[] */\n  children: React.ReactNode;\n  /** Additional classes added to the tabs */\n  className?: string;\n  /** Tabs background color variant */\n  variant?: 'default' | 'light300';\n  /** The index of the active tab */\n  activeKey?: number | string;\n  /** The index of the default active tab. Set this for uncontrolled Tabs */\n  defaultActiveKey?: number | string;\n  /** Callback to handle tab selection */\n  onSelect?: (event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string) => void;\n  /** @beta Callback to handle tab closing */\n  onClose?: (event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string) => void;\n  /** @beta Callback for the add button. Passing this property inserts the add button */\n  onAdd?: () => void;\n  /** @beta Aria-label for the add button */\n  addButtonAriaLabel?: string;\n  /** Uniquely identifies the tabs */\n  id?: string;\n  /** Enables the filled tab list layout */\n  isFilled?: boolean;\n  /** Enables secondary tab styling */\n  isSecondary?: boolean;\n  /** Enables box styling to the tab component */\n  isBox?: boolean;\n  /** Enables vertical tab styling */\n  isVertical?: boolean;\n  /** Enables border bottom tab styling on tabs. Defaults to true. To remove the bottom border, set this prop to false. */\n  hasBorderBottom?: boolean;\n  /** Enables border bottom styling for secondary tabs */\n  hasSecondaryBorderBottom?: boolean;\n  /** Aria-label for the left scroll button */\n  leftScrollAriaLabel?: string;\n  /** Aria-label for the right scroll button */\n  rightScrollAriaLabel?: string;\n  /** Determines what tag is used around the tabs. Use \"nav\" to define the tabs inside a navigation region */\n  component?: 'div' | 'nav';\n  /** Provides an accessible label for the tabs. Labels should be unique for each set of tabs that are present on a page. When component is set to nav, this prop should be defined to differentiate the tabs from other navigation regions on the page. */\n  'aria-label'?: string;\n  /** Waits until the first \"enter\" transition to mount tab children (add them to the DOM) */\n  mountOnEnter?: boolean;\n  /** Unmounts tab children (removes them from the DOM) when they are no longer visible */\n  unmountOnExit?: boolean;\n  /** Flag indicates that the tabs should use page insets. */\n  usePageInsets?: boolean;\n  /** Insets at various breakpoints. */\n  inset?: {\n    default?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    sm?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    md?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    lg?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    xl?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    '2xl'?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  };\n  /** Enable expandable vertical tabs at various breakpoints. (isVertical should be set to true for this to work) */\n  expandable?: {\n    default?: 'expandable' | 'nonExpandable';\n    sm?: 'expandable' | 'nonExpandable';\n    md?: 'expandable' | 'nonExpandable';\n    lg?: 'expandable' | 'nonExpandable';\n    xl?: 'expandable' | 'nonExpandable';\n    '2xl'?: 'expandable' | 'nonExpandable';\n  };\n  /** Flag to indicate if the vertical tabs are expanded */\n  isExpanded?: boolean;\n  /** Flag indicating the default expanded state for uncontrolled expand/collapse of */\n  defaultIsExpanded?: boolean;\n  /** Text that appears in the expandable toggle */\n  toggleText?: string;\n  /** Aria-label for the expandable toggle */\n  toggleAriaLabel?: string;\n  /** Callback function to toggle the expandable tabs. */\n  onToggle?: (isExpanded: boolean) => void;\n}\n\nconst variantStyle = {\n  default: '',\n  light300: styles.modifiers.colorSchemeLight_300\n};\n\ninterface TabsState {\n  showScrollButtons: boolean;\n  disableLeftScrollButton: boolean;\n  disableRightScrollButton: boolean;\n  shownKeys: (string | number)[];\n  uncontrolledActiveKey: number | string;\n  uncontrolledIsExpandedLocal: boolean;\n  ouiaStateId: string;\n}\n\nexport class Tabs extends React.Component<TabsProps, TabsState> {\n  static displayName = 'Tabs';\n  tabList = React.createRef<HTMLUListElement>();\n  constructor(props: TabsProps) {\n    super(props);\n    this.state = {\n      showScrollButtons: false,\n      disableLeftScrollButton: true,\n      disableRightScrollButton: true,\n      shownKeys: this.props.defaultActiveKey !== undefined ? [this.props.defaultActiveKey] : [this.props.activeKey], // only for mountOnEnter case\n      uncontrolledActiveKey: this.props.defaultActiveKey,\n      uncontrolledIsExpandedLocal: this.props.defaultIsExpanded,\n      ouiaStateId: getDefaultOUIAId(Tabs.displayName)\n    };\n\n    if (this.props.isVertical && this.props.expandable !== undefined) {\n      if (!this.props.toggleAriaLabel && !this.props.toggleText) {\n        // eslint-disable-next-line no-console\n        console.error(\n          'Tabs:',\n          'toggleAriaLabel or the toggleText prop is required to make the toggle button accessible'\n        );\n      }\n    }\n  }\n\n  scrollTimeout: NodeJS.Timeout = null;\n\n  static defaultProps: PickOptional<TabsProps> = {\n    activeKey: 0,\n    onSelect: () => undefined as any,\n    isFilled: false,\n    isSecondary: false,\n    isVertical: false,\n    isBox: false,\n    hasBorderBottom: true,\n    leftScrollAriaLabel: 'Scroll left',\n    rightScrollAriaLabel: 'Scroll right',\n    component: TabsComponent.div,\n    mountOnEnter: false,\n    unmountOnExit: false,\n    ouiaSafe: true,\n    variant: 'default',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (isExpanded): void => undefined\n  };\n\n  handleTabClick(\n    event: React.MouseEvent<HTMLElement, MouseEvent>,\n    eventKey: number | string,\n    tabContentRef: React.RefObject<any>\n  ) {\n    const { shownKeys } = this.state;\n    const { onSelect, defaultActiveKey } = this.props;\n    // if defaultActiveKey Tabs are uncontrolled, set new active key internally\n    if (defaultActiveKey !== undefined) {\n      this.setState({\n        uncontrolledActiveKey: eventKey\n      });\n    } else {\n      onSelect(event, eventKey);\n    }\n\n    // process any tab content sections outside of the component\n    if (tabContentRef) {\n      React.Children.toArray(this.props.children)\n        .map(child => child as React.ReactElement<TabProps>)\n        .filter(child => child.props && child.props.tabContentRef && child.props.tabContentRef.current)\n        .forEach(child => (child.props.tabContentRef.current.hidden = true));\n      // most recently selected tabContent\n      if (tabContentRef.current) {\n        tabContentRef.current.hidden = false;\n      }\n    }\n    if (this.props.mountOnEnter) {\n      this.setState({\n        shownKeys: shownKeys.concat(eventKey)\n      });\n    }\n  }\n\n  handleScrollButtons = () => {\n    // add debounce to the scroll event\n    clearTimeout(this.scrollTimeout);\n    this.scrollTimeout = setTimeout(() => {\n      const container = this.tabList.current;\n      let disableLeftScrollButton = true;\n      let disableRightScrollButton = true;\n      let showScrollButtons = false;\n\n      if (container && !this.props.isVertical) {\n        // get first element and check if it is in view\n        const overflowOnLeft = !isElementInView(container, container.firstChild as HTMLElement, false);\n\n        // get last element and check if it is in view\n        const overflowOnRight = !isElementInView(container, container.lastChild as HTMLElement, false);\n\n        showScrollButtons = overflowOnLeft || overflowOnRight;\n\n        disableLeftScrollButton = !overflowOnLeft;\n        disableRightScrollButton = !overflowOnRight;\n      }\n      this.setState({\n        showScrollButtons,\n        disableLeftScrollButton,\n        disableRightScrollButton\n      });\n    }, 100);\n  };\n\n  scrollLeft = () => {\n    // find first Element that is fully in view on the left, then scroll to the element before it\n    if (this.tabList.current) {\n      const container = this.tabList.current;\n      const childrenArr = Array.from(container.children);\n      let firstElementInView: any;\n      let lastElementOutOfView: any;\n      let i;\n      for (i = 0; i < childrenArr.length && !firstElementInView; i++) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          firstElementInView = childrenArr[i];\n          lastElementOutOfView = childrenArr[i - 1];\n        }\n      }\n      if (lastElementOutOfView) {\n        container.scrollLeft -= lastElementOutOfView.scrollWidth;\n      }\n    }\n  };\n\n  scrollRight = () => {\n    // find last Element that is fully in view on the right, then scroll to the element after it\n    if (this.tabList.current) {\n      const container = this.tabList.current as any;\n      const childrenArr = Array.from(container.children);\n      let lastElementInView: any;\n      let firstElementOutOfView: any;\n      for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          lastElementInView = childrenArr[i];\n          firstElementOutOfView = childrenArr[i + 1];\n        }\n      }\n      if (firstElementOutOfView) {\n        container.scrollLeft += firstElementOutOfView.scrollWidth;\n      }\n    }\n  };\n\n  componentDidMount() {\n    if (!this.props.isVertical) {\n      if (canUseDOM) {\n        window.addEventListener('resize', this.handleScrollButtons, false);\n      }\n      // call the handle resize function to check if scroll buttons should be shown\n      this.handleScrollButtons();\n    }\n  }\n\n  componentWillUnmount() {\n    if (!this.props.isVertical) {\n      if (canUseDOM) {\n        window.removeEventListener('resize', this.handleScrollButtons, false);\n      }\n    }\n    clearTimeout(this.scrollTimeout);\n  }\n\n  componentDidUpdate(prevProps: TabsProps) {\n    const { activeKey, mountOnEnter, children } = this.props;\n    const { shownKeys } = this.state;\n    if (prevProps.activeKey !== activeKey && mountOnEnter && shownKeys.indexOf(activeKey) < 0) {\n      this.setState({\n        shownKeys: shownKeys.concat(activeKey)\n      });\n    }\n\n    if (\n      prevProps.children &&\n      children &&\n      React.Children.toArray(prevProps.children).length !== React.Children.toArray(children).length\n    ) {\n      this.handleScrollButtons();\n    }\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      activeKey,\n      defaultActiveKey,\n      id,\n      isFilled,\n      isSecondary,\n      isVertical,\n      isBox,\n      hasBorderBottom,\n      hasSecondaryBorderBottom,\n      leftScrollAriaLabel,\n      rightScrollAriaLabel,\n      'aria-label': ariaLabel,\n      component,\n      ouiaId,\n      ouiaSafe,\n      mountOnEnter,\n      unmountOnExit,\n      usePageInsets,\n      inset,\n      variant,\n      expandable,\n      isExpanded,\n      defaultIsExpanded,\n      toggleText,\n      toggleAriaLabel,\n      addButtonAriaLabel,\n      onToggle,\n      onClose,\n      onAdd,\n      ...props\n    } = this.props;\n    const {\n      showScrollButtons,\n      disableLeftScrollButton,\n      disableRightScrollButton,\n      shownKeys,\n      uncontrolledActiveKey,\n      uncontrolledIsExpandedLocal\n    } = this.state;\n    const filteredChildren = (React.Children.toArray(children) as React.ReactElement<TabProps>[])\n      .filter(Boolean)\n      .filter(child => !child.props.isHidden);\n\n    const uniqueId = id || getUniqueId();\n    const Component: any = component === TabsComponent.nav ? 'nav' : 'div';\n    const localActiveKey = defaultActiveKey !== undefined ? uncontrolledActiveKey : activeKey;\n\n    const isExpandedLocal = defaultIsExpanded !== undefined ? uncontrolledIsExpandedLocal : isExpanded;\n    /*  Uncontrolled expandable tabs */\n    const toggleTabs = (newValue: boolean) => {\n      if (isExpanded === undefined) {\n        this.setState({ uncontrolledIsExpandedLocal: newValue });\n      } else {\n        onToggle(newValue);\n      }\n    };\n\n    return (\n      <TabsContextProvider\n        value={{\n          variant,\n          mountOnEnter,\n          unmountOnExit,\n          localActiveKey,\n          uniqueId,\n          handleTabClick: (...args) => this.handleTabClick(...args),\n          handleTabClose: onClose\n        }}\n      >\n        <Component\n          aria-label={ariaLabel}\n          className={css(\n            styles.tabs,\n            isFilled && styles.modifiers.fill,\n            isSecondary && styles.modifiers.secondary,\n            isVertical && styles.modifiers.vertical,\n            isVertical && expandable && formatBreakpointMods(expandable, styles),\n            isVertical && expandable && isExpandedLocal && styles.modifiers.expanded,\n            isBox && styles.modifiers.box,\n            showScrollButtons && !isVertical && styles.modifiers.scrollable,\n            usePageInsets && styles.modifiers.pageInsets,\n            !hasBorderBottom && styles.modifiers.noBorderBottom,\n            hasSecondaryBorderBottom && styles.modifiers.borderBottom,\n            formatBreakpointMods(inset, styles),\n            variantStyle[variant],\n            className\n          )}\n          {...getOUIAProps(Tabs.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n          id={id && id}\n          {...props}\n        >\n          {expandable && isVertical && (\n            <GenerateId>\n              {randomId => (\n                <div className={css(styles.tabsToggle)}>\n                  <div className={css(styles.tabsToggleButton)}>\n                    <Button\n                      onClick={() => toggleTabs(!isExpandedLocal)}\n                      variant=\"plain\"\n                      aria-label={toggleAriaLabel}\n                      aria-expanded={isExpandedLocal}\n                      id={`${randomId}-button`}\n                      aria-labelledby={`${randomId}-text ${randomId}-button`}\n                    >\n                      <span className={css(styles.tabsToggleIcon)}>\n                        <AngleRightIcon arian-hidden=\"true\" />\n                      </span>\n                      {toggleText && (\n                        <span className={css('pf-c-tabs__toggle-text')} id={`${randomId}-text`}>\n                          {toggleText}\n                        </span>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </GenerateId>\n          )}\n          <button\n            className={css(styles.tabsScrollButton, isSecondary && buttonStyles.modifiers.secondary)}\n            aria-label={leftScrollAriaLabel}\n            onClick={this.scrollLeft}\n            disabled={disableLeftScrollButton}\n            aria-hidden={disableLeftScrollButton}\n          >\n            <AngleLeftIcon />\n          </button>\n          <ul className={css(styles.tabsList)} ref={this.tabList} onScroll={this.handleScrollButtons} role=\"tablist\">\n            {filteredChildren}\n          </ul>\n          <button\n            className={css(styles.tabsScrollButton, isSecondary && buttonStyles.modifiers.secondary)}\n            aria-label={rightScrollAriaLabel}\n            onClick={this.scrollRight}\n            disabled={disableRightScrollButton}\n            aria-hidden={disableRightScrollButton}\n          >\n            <AngleRightIcon />\n          </button>\n          {onAdd !== undefined && (\n            <span className={css(styles.tabsAdd)}>\n              <Button variant=\"plain\" aria-label={addButtonAriaLabel || 'Add tab'} onClick={onAdd}>\n                <PlusIcon />\n              </Button>\n            </span>\n          )}\n        </Component>\n        {filteredChildren\n          .filter(\n            child =>\n              child.props.children &&\n              !(unmountOnExit && child.props.eventKey !== localActiveKey) &&\n              !(mountOnEnter && shownKeys.indexOf(child.props.eventKey) === -1)\n          )\n          .map(child => (\n            <TabContent\n              key={child.props.eventKey}\n              activeKey={localActiveKey}\n              child={child}\n              id={child.props.id || uniqueId}\n              ouiaId={child.props.ouiaId}\n            />\n          ))}\n      </TabsContextProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}