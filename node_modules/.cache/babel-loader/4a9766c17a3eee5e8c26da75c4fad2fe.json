{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport const FormGroup = _a => {\n  var {\n    children = null,\n    className = '',\n    label,\n    labelInfo,\n    labelIcon,\n    isRequired = false,\n    validated = 'default',\n    isInline = false,\n    hasNoPaddingTop = false,\n    isStack = false,\n    helperText,\n    isHelperTextBeforeField = false,\n    helperTextInvalid,\n    helperTextIcon,\n    helperTextInvalidIcon,\n    fieldId,\n    role\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"label\", \"labelInfo\", \"labelIcon\", \"isRequired\", \"validated\", \"isInline\", \"hasNoPaddingTop\", \"isStack\", \"helperText\", \"isHelperTextBeforeField\", \"helperTextInvalid\", \"helperTextIcon\", \"helperTextInvalidIcon\", \"fieldId\", \"role\"]);\n\n  const validHelperText = typeof helperText !== 'string' ? helperText : React.createElement(\"div\", {\n    className: css(styles.formHelperText, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n    id: `${fieldId}-helper`,\n    \"aria-live\": \"polite\"\n  }, helperTextIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextIcon), helperText);\n  const inValidHelperText = typeof helperTextInvalid !== 'string' ? helperTextInvalid : React.createElement(\"div\", {\n    className: css(styles.formHelperText, styles.modifiers.error),\n    id: `${fieldId}-helper`,\n    \"aria-live\": \"polite\"\n  }, helperTextInvalidIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextInvalidIcon), helperTextInvalid);\n\n  const showValidHelperTxt = validationType => validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n\n  const helperTextToDisplay = validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n  const isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n  const LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n  const labelContent = React.createElement(React.Fragment, null, React.createElement(LabelComponent, Object.assign({\n    className: css(styles.formLabel)\n  }, !isGroupOrRadioGroup && {\n    htmlFor: fieldId\n  }), React.createElement(\"span\", {\n    className: css(styles.formLabelText)\n  }, label), isRequired && React.createElement(\"span\", {\n    className: css(styles.formLabelRequired),\n    \"aria-hidden\": \"true\"\n  }, ' ', ASTERISK)), ' ', React.isValidElement(labelIcon) && labelIcon);\n  return React.createElement(GenerateId, null, randomId => React.createElement(\"div\", Object.assign({\n    className: css(styles.formGroup, className)\n  }, role && {\n    role\n  }, isGroupOrRadioGroup && {\n    'aria-labelledby': `${fieldId || randomId}-legend`\n  }, props), label && React.createElement(\"div\", Object.assign({\n    className: css(styles.formGroupLabel, labelInfo && styles.modifiers.info, hasNoPaddingTop && styles.modifiers.noPaddingTop)\n  }, isGroupOrRadioGroup && {\n    id: `${fieldId || randomId}-legend`\n  }), labelInfo && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: css(styles.formGroupLabelMain)\n  }, labelContent), React.createElement(\"div\", {\n    className: css(styles.formGroupLabelInfo)\n  }, labelInfo)), !labelInfo && labelContent), React.createElement(\"div\", {\n    className: css(styles.formGroupControl, isInline && styles.modifiers.inline, isStack && styles.modifiers.stack)\n  }, isHelperTextBeforeField && helperTextToDisplay, children, !isHelperTextBeforeField && helperTextToDisplay)));\n};\nFormGroup.displayName = 'FormGroup';","map":{"version":3,"mappings":"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","names":["React","styles","ASTERISK","css","ValidatedOptions","GenerateId","FormGroup","_a","children","className","label","labelInfo","labelIcon","isRequired","validated","isInline","hasNoPaddingTop","isStack","helperText","isHelperTextBeforeField","helperTextInvalid","helperTextIcon","helperTextInvalidIcon","fieldId","role","props","validHelperText","formHelperText","success","modifiers","warning","id","formHelperTextIcon","inValidHelperText","error","showValidHelperTxt","validationType","helperTextToDisplay","isGroupOrRadioGroup","LabelComponent","labelContent","Fragment","Object","formLabel","htmlFor","formLabelText","formLabelRequired","isValidElement","randomId","formGroup","formGroupLabel","info","noPaddingTop","formGroupLabelMain","formGroupLabelInfo","formGroupControl","inline","stack","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Form/FormGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface FormGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as FormGroup content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the FormGroup. */\n  className?: string;\n  /** Label text before the field. */\n  label?: React.ReactNode;\n  /** Additional label information displayed after the label. */\n  labelInfo?: React.ReactNode;\n  /** Sets an icon for the label. For providing additional context. Host element for Popover  */\n  labelIcon?: React.ReactElement;\n  /** Sets the FormGroup required. */\n  isRequired?: boolean;\n  /**\n   * Sets the FormGroup validated. If you set to success, text color of helper text will be modified to indicate valid state.\n   * If set to error, text color of helper text will be modified to indicate error state.\n   * If set to warning, text color of helper text will be modified to indicate warning state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Sets the FormGroup isInline. */\n  isInline?: boolean;\n  /** Sets the FormGroupControl to be stacked */\n  isStack?: boolean;\n  /** Removes top spacer from label. */\n  hasNoPaddingTop?: boolean;\n  /** Helper text regarding the field. It can be a simple text or an object. */\n  helperText?: React.ReactNode;\n  /** Flag to position the helper text before the field. False by default */\n  isHelperTextBeforeField?: boolean;\n  /** Helper text after the field when the field is invalid. It can be a simple text or an object. */\n  helperTextInvalid?: React.ReactNode;\n  /** Icon displayed to the left of the helper text. */\n  helperTextIcon?: React.ReactNode;\n  /** Icon displayed to the left of the helper text when the field is invalid. */\n  helperTextInvalidIcon?: React.ReactNode;\n  /** ID of an individual field or a group of multiple fields. Required when a role of \"group\" or \"radiogroup\" is passed in.\n   * If only one field is included, its ID attribute and this prop must be the same.\n   */\n  fieldId?: string;\n  /** Sets the role of the form group. Pass in \"radiogroup\" when the form group contains multiple\n   * radio inputs, or pass in \"group\" when the form group contains multiple of any other input type.\n   */\n  role?: string;\n}\n\nexport const FormGroup: React.FunctionComponent<FormGroupProps> = ({\n  children = null,\n  className = '',\n  label,\n  labelInfo,\n  labelIcon,\n  isRequired = false,\n  validated = 'default',\n  isInline = false,\n  hasNoPaddingTop = false,\n  isStack = false,\n  helperText,\n  isHelperTextBeforeField = false,\n  helperTextInvalid,\n  helperTextIcon,\n  helperTextInvalidIcon,\n  fieldId,\n  role,\n  ...props\n}: FormGroupProps) => {\n  const validHelperText =\n    typeof helperText !== 'string' ? (\n      helperText\n    ) : (\n      <div\n        className={css(\n          styles.formHelperText,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        id={`${fieldId}-helper`}\n        aria-live=\"polite\"\n      >\n        {helperTextIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextIcon}</span>}\n        {helperText}\n      </div>\n    );\n\n  const inValidHelperText =\n    typeof helperTextInvalid !== 'string' ? (\n      helperTextInvalid\n    ) : (\n      <div className={css(styles.formHelperText, styles.modifiers.error)} id={`${fieldId}-helper`} aria-live=\"polite\">\n        {helperTextInvalidIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextInvalidIcon}</span>}\n        {helperTextInvalid}\n      </div>\n    );\n\n  const showValidHelperTxt = (validationType: 'success' | 'warning' | 'error' | 'default') =>\n    validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n\n  const helperTextToDisplay =\n    validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n\n  const isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n  const LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n\n  const labelContent = (\n    <React.Fragment>\n      <LabelComponent className={css(styles.formLabel)} {...(!isGroupOrRadioGroup && { htmlFor: fieldId })}>\n        <span className={css(styles.formLabelText)}>{label}</span>\n        {isRequired && (\n          <span className={css(styles.formLabelRequired)} aria-hidden=\"true\">\n            {' '}\n            {ASTERISK}\n          </span>\n        )}\n      </LabelComponent>{' '}\n      {React.isValidElement(labelIcon) && labelIcon}\n    </React.Fragment>\n  );\n\n  return (\n    <GenerateId>\n      {randomId => (\n        <div\n          className={css(styles.formGroup, className)}\n          {...(role && { role })}\n          {...(isGroupOrRadioGroup && { 'aria-labelledby': `${fieldId || randomId}-legend` })}\n          {...props}\n        >\n          {label && (\n            <div\n              className={css(\n                styles.formGroupLabel,\n                labelInfo && styles.modifiers.info,\n                hasNoPaddingTop && styles.modifiers.noPaddingTop\n              )}\n              {...(isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` })}\n            >\n              {labelInfo && (\n                <React.Fragment>\n                  <div className={css(styles.formGroupLabelMain)}>{labelContent}</div>\n                  <div className={css(styles.formGroupLabelInfo)}>{labelInfo}</div>\n                </React.Fragment>\n              )}\n              {!labelInfo && labelContent}\n            </div>\n          )}\n          <div\n            className={css(\n              styles.formGroupControl,\n              isInline && styles.modifiers.inline,\n              isStack && styles.modifiers.stack\n            )}\n          >\n            {isHelperTextBeforeField && helperTextToDisplay}\n            {children}\n            {!isHelperTextBeforeField && helperTextToDisplay}\n          </div>\n        </div>\n      )}\n    </GenerateId>\n  );\n};\nFormGroup.displayName = 'FormGroup';\n"]},"metadata":{},"sourceType":"module"}