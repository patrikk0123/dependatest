{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nexport const useDataBuffer = function () {\n  let preprocessor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : lines => lines;\n  const [data, setData] = useState([]);\n  const [buffer, setBuffer] = useState([]);\n  const [currentLineCount, setCurrentLineCount] = useState(1);\n  const savedTimer = useRef();\n  useEffect(() => {\n    if (data.length > buffer.length) {\n      savedTimer.current = setTimeout(() => {\n        setBuffer(data.slice(0, buffer.length + 5));\n      }, 1500);\n    }\n\n    return () => {\n      clearTimeout(savedTimer.current);\n    };\n  }, [data, buffer.length]);\n  useEffect(() => {\n    setBuffer(data.slice(0, currentLineCount)); // if (currentLineCount > initLogData.length) {\n    //   clearInterval(savedTimer.current);\n    // } else {\n    //   // setLogData(initLogData.slice(0, currentLineCount));\n    //   addLines(initLogData.slice(currentLineCount - 3, currentLineCount));\n    // }\n  }, [currentLineCount]);\n  const addLines = useCallback(lines => {\n    setData([...data, ...preprocessor(lines)]);\n  }, [data, preprocessor]);\n  return {\n    buffer,\n    addLines\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","useDataBuffer","preprocessor","lines","data","setData","buffer","setBuffer","currentLineCount","setCurrentLineCount","savedTimer","length","current","setTimeout","slice","clearTimeout","addLines"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useDataBuffer.ts"],"sourcesContent":["import { MutableRefObject, useCallback, useEffect, useRef, useState } from 'react';\n\nexport const useDataBuffer = (preprocessor: Function = (lines: string[]) => lines) => {\n  const [data, setData] = useState<string[]>([]);\n  const [buffer, setBuffer] = useState<string[]>([]);\n  const [currentLineCount, setCurrentLineCount] = useState<number>(1);\n  const savedTimer: MutableRefObject<NodeJS.Timer | undefined> = useRef();\n\n  useEffect(() => {\n    if (data.length > buffer.length) {\n      savedTimer.current = setTimeout(() => {\n        setBuffer(data.slice(0, buffer.length + 5));\n      }, 1500);\n    }\n    return () => {\n      clearTimeout(savedTimer.current);\n    };\n  }, [data, buffer.length]);\n\n  useEffect(() => {\n    setBuffer(data.slice(0, currentLineCount));\n    // if (currentLineCount > initLogData.length) {\n    //   clearInterval(savedTimer.current);\n    // } else {\n    //   // setLogData(initLogData.slice(0, currentLineCount));\n    //   addLines(initLogData.slice(currentLineCount - 3, currentLineCount));\n    // }\n  }, [currentLineCount]);\n\n  const addLines = useCallback(\n    (lines: string[]) => {\n      setData([...data, ...preprocessor(lines)]);\n    },\n    [data, preprocessor]\n  );\n\n  return { buffer, addLines };\n};\n"],"mappings":"AAAA,SAA2BA,WAA3B,EAAwCC,SAAxC,EAAmDC,MAAnD,EAA2DC,QAA3D,QAA2E,OAA3E;AAEA,OAAO,MAAMC,aAAa,GAAG,YAAyD;EAAA,IAAxDC,YAAwD,uEAA9BC,KAAD,IAAqBA,KAAU;EACpF,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAW,EAAX,CAAhC;EACA,MAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAW,EAAX,CAApC;EACA,MAAM,CAACQ,gBAAD,EAAmBC,mBAAnB,IAA0CT,QAAQ,CAAS,CAAT,CAAxD;EACA,MAAMU,UAAsD,GAAGX,MAAM,EAArE;EAEAD,SAAS,CAAC,MAAM;IACd,IAAIM,IAAI,CAACO,MAAL,GAAcL,MAAM,CAACK,MAAzB,EAAiC;MAC/BD,UAAU,CAACE,OAAX,GAAqBC,UAAU,CAAC,MAAM;QACpCN,SAAS,CAACH,IAAI,CAACU,KAAL,CAAW,CAAX,EAAcR,MAAM,CAACK,MAAP,GAAgB,CAA9B,CAAD,CAAT;MACD,CAF8B,EAE5B,IAF4B,CAA/B;IAGD;;IACD,OAAO,MAAM;MACXI,YAAY,CAACL,UAAU,CAACE,OAAZ,CAAZ;IACD,CAFD;EAGD,CATQ,EASN,CAACR,IAAD,EAAOE,MAAM,CAACK,MAAd,CATM,CAAT;EAWAb,SAAS,CAAC,MAAM;IACdS,SAAS,CAACH,IAAI,CAACU,KAAL,CAAW,CAAX,EAAcN,gBAAd,CAAD,CAAT,CADc,CAEd;IACA;IACA;IACA;IACA;IACA;EACD,CARQ,EAQN,CAACA,gBAAD,CARM,CAAT;EAUA,MAAMQ,QAAQ,GAAGnB,WAAW,CACzBM,KAAD,IAAqB;IACnBE,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU,GAAGF,YAAY,CAACC,KAAD,CAAzB,CAAD,CAAP;EACD,CAHyB,EAI1B,CAACC,IAAD,EAAOF,YAAP,CAJ0B,CAA5B;EAOA,OAAO;IAAEI,MAAF;IAAUU;EAAV,CAAP;AACD,CAnCM"},"metadata":{},"sourceType":"module"}