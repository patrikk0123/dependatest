{"ast":null,"code":"// @ts-nocheck\nimport getWindow from './getWindow';\nimport getDocumentElement from './getDocumentElement';\nimport getWindowScrollBarX from './getWindowScrollBarX';\n/**\n * @param element\n */\n\nexport default function getViewportRect(element) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n  // can be obscured underneath it.\n  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n  // if it isn't open, so if this isn't available, the popper will be detected\n  // to overflow the bottom of the screen too early.\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n    // errors due to floating point numbers, so we need to check precision.\n    // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n    // Feature detection fails in mobile emulation mode in Chrome.\n    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n    // 0.001\n    // Fallback here: \"Not Safari\" userAgent\n\n    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + getWindowScrollBarX(element),\n    y: y\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AAEA;;;;AAGA,eAAc,SAAUC,eAAV,CAA0BC,OAA1B,EAA0C;EACtD,IAAMC,GAAG,GAAGL,SAAS,CAACI,OAAD,CAArB;EACA,IAAME,IAAI,GAAGL,kBAAkB,CAACG,OAAD,CAA/B;EACA,IAAMG,cAAc,GAAGF,GAAG,CAACE,cAA3B;EAEA,IAAIC,KAAK,GAAGF,IAAI,CAACG,WAAjB;EACA,IAAIC,MAAM,GAAGJ,IAAI,CAACK,YAAlB;EACA,IAAIC,CAAC,GAAG,CAAR;EACA,IAAIC,CAAC,GAAG,CAAR,CARsD,CAUtD;EACA;EACA;EACA;EACA;;EACA,IAAIN,cAAJ,EAAoB;IAClBC,KAAK,GAAGD,cAAc,CAACC,KAAvB;IACAE,MAAM,GAAGH,cAAc,CAACG,MAAxB,CAFkB,CAIlB;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;;IACA,IAAI,CAAC,iCAAiCI,IAAjC,CAAsCC,SAAS,CAACC,SAAhD,CAAL,EAAiE;MAC/DJ,CAAC,GAAGL,cAAc,CAACU,UAAnB;MACAJ,CAAC,GAAGN,cAAc,CAACW,SAAnB;IACD;EACF;;EAED,OAAO;IACLV,KAAK,EAALA,KADK;IAELE,MAAM,EAANA,MAFK;IAGLE,CAAC,EAAEA,CAAC,GAAGV,mBAAmB,CAACE,OAAD,CAHrB;IAILS,CAAC,EAADA;EAJK,CAAP;AAMD","names":["getWindow","getDocumentElement","getWindowScrollBarX","getViewportRect","element","win","html","visualViewport","width","clientWidth","height","clientHeight","x","y","test","navigator","userAgent","offsetLeft","offsetTop"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/dom-utils/getViewportRect.ts"],"sourcesContent":["// @ts-nocheck\nimport getWindow from './getWindow';\nimport getDocumentElement from './getDocumentElement';\nimport getWindowScrollBarX from './getWindowScrollBarX';\n\n/**\n * @param element\n */\nexport default function getViewportRect(element: Element) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n\n  // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n  // can be obscured underneath it.\n  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n  // if it isn't open, so if this isn't available, the popper will be detected\n  // to overflow the bottom of the screen too early.\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n\n    // Uses Layout Viewport (like Chrome; Safari does not currently)\n    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n    // errors due to floating point numbers, so we need to check precision.\n    // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n\n    // Feature detection fails in mobile emulation mode in Chrome.\n    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n    // 0.001\n    // Fallback here: \"Not Safari\" userAgent\n    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width,\n    height,\n    x: x + getWindowScrollBarX(element),\n    y\n  };\n}\n"]},"metadata":{},"sourceType":"module"}