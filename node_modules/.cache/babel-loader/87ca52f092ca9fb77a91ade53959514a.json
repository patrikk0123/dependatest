{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport class ExpandableSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isExpanded: props.isExpanded\n    };\n  }\n\n  calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {\n    if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n      return toggleTextExpanded;\n    }\n\n    if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n      return toggleTextCollapsed;\n    }\n\n    return toggleText;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      onToggle: onToggleProp,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isActive,\n      className,\n      toggleText,\n      toggleTextExpanded,\n      toggleTextCollapsed,\n      toggleContent,\n      children,\n      isExpanded,\n      isDetached,\n      displaySize,\n      isWidthLimited,\n      isIndented,\n      contentId\n    } = _a,\n          props = __rest(_a, [\"onToggle\", \"isActive\", \"className\", \"toggleText\", \"toggleTextExpanded\", \"toggleTextCollapsed\", \"toggleContent\", \"children\", \"isExpanded\", \"isDetached\", \"displaySize\", \"isWidthLimited\", \"isIndented\", \"contentId\"]);\n\n    let onToggle = onToggleProp;\n    let propOrStateIsExpanded = isExpanded; // uncontrolled\n\n    if (isExpanded === undefined) {\n      propOrStateIsExpanded = this.state.isExpanded;\n\n      onToggle = isOpen => {\n        this.setState({\n          isExpanded: isOpen\n        }, () => onToggleProp(this.state.isExpanded));\n      };\n    }\n\n    const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);\n    return React.createElement(\"div\", Object.assign({}, props, {\n      className: css(styles.expandableSection, propOrStateIsExpanded && styles.modifiers.expanded, isActive && styles.modifiers.active, isDetached && styles.modifiers.detached, displaySize === 'large' && styles.modifiers.displayLg, isWidthLimited && styles.modifiers.limitWidth, isIndented && styles.modifiers.indented, className)\n    }), !isDetached && React.createElement(\"button\", {\n      className: css(styles.expandableSectionToggle),\n      type: \"button\",\n      \"aria-expanded\": propOrStateIsExpanded,\n      onClick: () => onToggle(!propOrStateIsExpanded)\n    }, React.createElement(\"span\", {\n      className: css(styles.expandableSectionToggleIcon)\n    }, React.createElement(AngleRightIcon, {\n      \"aria-hidden\": true\n    })), React.createElement(\"span\", {\n      className: css(styles.expandableSectionToggleText)\n    }, toggleContent || computedToggleText)), React.createElement(\"div\", {\n      className: css(styles.expandableSectionContent),\n      hidden: !propOrStateIsExpanded,\n      id: contentId\n    }, children));\n  }\n\n}\nExpandableSection.displayName = 'ExpandableSection';\nExpandableSection.defaultProps = {\n  className: '',\n  toggleText: '',\n  toggleTextExpanded: '',\n  toggleTextCollapsed: '',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: isExpanded => undefined,\n  isActive: false,\n  isDetached: false,\n  displaySize: 'default',\n  isWidthLimited: false,\n  isIndented: false,\n  contentId: ''\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","AngleRightIcon","ExpandableSection","Component","constructor","props","state","isExpanded","calculateToggleText","toggleText","toggleTextExpanded","toggleTextCollapsed","propOrStateIsExpanded","render","_a","onToggle","onToggleProp","isActive","className","toggleContent","children","isDetached","displaySize","isWidthLimited","isIndented","contentId","undefined","isOpen","setState","computedToggleText","expandableSection","modifiers","expanded","active","detached","displayLg","limitWidth","indented","expandableSectionToggle","type","onClick","expandableSectionToggleIcon","expandableSectionToggleText","expandableSectionContent","hidden","id"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ExpandableSection/ExpandableSection.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ExpandableSectionProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the Expandable Component */\n  children?: React.ReactNode;\n  /** Additional classes added to the Expandable Component */\n  className?: string;\n  /** Flag to indicate if the content is expanded */\n  isExpanded?: boolean;\n  /** Text that appears in the attached toggle */\n  toggleText?: string;\n  /** Text that appears in the attached toggle when expanded (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */\n  toggleTextExpanded?: string;\n  /** Text that appears in the attached toggle when collapsed (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */\n  toggleTextCollapsed?: string;\n  /** React node that appears in the attached toggle in place of toggle text */\n  toggleContent?: React.ReactNode;\n  /** Callback function to toggle the expandable content. Detached expandable sections should use the onToggle property of ExpandableSectionToggle. */\n  onToggle?: (isExpanded: boolean) => void;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Indicates the expandable section has a detached toggle */\n  isDetached?: boolean;\n  /** ID of the content of the expandable section */\n  contentId?: string;\n  /** Display size variant. Set to large for disclosure styling. */\n  displaySize?: 'default' | 'large';\n  /** Flag to indicate the width of the component is limited. Set to true for disclosure styling. */\n  isWidthLimited?: boolean;\n  /** Flag to indicate if the content is indented */\n  isIndented?: boolean;\n}\n\ninterface ExpandableSectionState {\n  isExpanded: boolean;\n}\n\nexport class ExpandableSection extends React.Component<ExpandableSectionProps, ExpandableSectionState> {\n  static displayName = 'ExpandableSection';\n  constructor(props: ExpandableSectionProps) {\n    super(props);\n\n    this.state = {\n      isExpanded: props.isExpanded\n    };\n  }\n\n  static defaultProps: PickOptional<ExpandableSectionProps> = {\n    className: '',\n    toggleText: '',\n    toggleTextExpanded: '',\n    toggleTextCollapsed: '',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (isExpanded): void => undefined,\n    isActive: false,\n    isDetached: false,\n    displaySize: 'default',\n    isWidthLimited: false,\n    isIndented: false,\n    contentId: ''\n  };\n\n  private calculateToggleText(\n    toggleText: string,\n    toggleTextExpanded: string,\n    toggleTextCollapsed: string,\n    propOrStateIsExpanded: boolean\n  ) {\n    if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n      return toggleTextExpanded;\n    }\n    if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n      return toggleTextCollapsed;\n    }\n    return toggleText;\n  }\n\n  render() {\n    const {\n      onToggle: onToggleProp,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isActive,\n      className,\n      toggleText,\n      toggleTextExpanded,\n      toggleTextCollapsed,\n      toggleContent,\n      children,\n      isExpanded,\n      isDetached,\n      displaySize,\n      isWidthLimited,\n      isIndented,\n      contentId,\n      ...props\n    } = this.props;\n    let onToggle = onToggleProp;\n    let propOrStateIsExpanded = isExpanded;\n\n    // uncontrolled\n    if (isExpanded === undefined) {\n      propOrStateIsExpanded = this.state.isExpanded;\n      onToggle = isOpen => {\n        this.setState({ isExpanded: isOpen }, () => onToggleProp(this.state.isExpanded));\n      };\n    }\n\n    const computedToggleText = this.calculateToggleText(\n      toggleText,\n      toggleTextExpanded,\n      toggleTextCollapsed,\n      propOrStateIsExpanded\n    );\n\n    return (\n      <div\n        {...props}\n        className={css(\n          styles.expandableSection,\n          propOrStateIsExpanded && styles.modifiers.expanded,\n          isActive && styles.modifiers.active,\n          isDetached && styles.modifiers.detached,\n          displaySize === 'large' && styles.modifiers.displayLg,\n          isWidthLimited && styles.modifiers.limitWidth,\n          isIndented && styles.modifiers.indented,\n          className\n        )}\n      >\n        {!isDetached && (\n          <button\n            className={css(styles.expandableSectionToggle)}\n            type=\"button\"\n            aria-expanded={propOrStateIsExpanded}\n            onClick={() => onToggle(!propOrStateIsExpanded)}\n          >\n            <span className={css(styles.expandableSectionToggleIcon)}>\n              <AngleRightIcon aria-hidden />\n            </span>\n            <span className={css(styles.expandableSectionToggleText)}>{toggleContent || computedToggleText}</span>\n          </button>\n        )}\n        <div className={css(styles.expandableSectionContent)} hidden={!propOrStateIsExpanded} id={contentId}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}