{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardBody } from './WizardBody';\nexport const WizardToggle = _ref => {\n  let {\n    isNavOpen,\n    onNavToggle,\n    nav,\n    steps,\n    activeStep,\n    children,\n    hasNoBodyPadding = false,\n    'aria-label': ariaLabel = 'Wizard Toggle',\n    mainAriaLabelledBy = null,\n    mainAriaLabel = null,\n    isInPage = true,\n    hasDrawer,\n    isDrawerExpanded\n  } = _ref;\n  let activeStepIndex;\n  let activeStepName;\n  let activeStepSubName;\n\n  for (let i = 0; i < steps.length; i++) {\n    if (activeStep.id && steps[i].id === activeStep.id || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      for (const step of steps[i].steps) {\n        if (activeStep.id && step.id === activeStep.id || step.name === activeStep.name) {\n          activeStepIndex = i + 1;\n          activeStepName = steps[i].name;\n          activeStepSubName = step.name;\n          break;\n        }\n      }\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: () => onNavToggle(!isNavOpen),\n    className: css(styles.wizardToggle, isNavOpen && 'pf-m-expanded'),\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isNavOpen\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleList)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleNum)\n  }, activeStepIndex), \" \", activeStepName, activeStepSubName && React.createElement(AngleRightIcon, {\n    className: css(styles.wizardToggleSeparator),\n    \"aria-hidden\": \"true\"\n  })), activeStepSubName && React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, activeStepSubName)), React.createElement(\"span\", {\n    className: css(styles.wizardToggleIcon)\n  }, React.createElement(CaretDownIcon, {\n    \"aria-hidden\": \"true\"\n  }))), React.createElement(\"div\", {\n    className: css(styles.wizardOuterWrap)\n  }, React.createElement(\"div\", {\n    className: css(styles.wizardInnerWrap)\n  }, nav(isNavOpen), React.createElement(WizardBody, {\n    mainComponent: isInPage ? 'div' : 'main',\n    \"aria-label\": mainAriaLabel,\n    \"aria-labelledby\": mainAriaLabelledBy,\n    hasNoBodyPadding: hasNoBodyPadding,\n    activeStep: activeStep,\n    isDrawerExpanded: isDrawerExpanded,\n    hasDrawer: hasDrawer\n  }, hasDrawer && !isDrawerExpanded && activeStep.drawerToggleButton, activeStep.component)), children));\n};\nWizardToggle.displayName = 'WizardToggle';","map":{"version":3,"mappings":"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","names":["React","css","styles","AngleRightIcon","CaretDownIcon","WizardBody","WizardToggle","isNavOpen","onNavToggle","nav","steps","activeStep","children","hasNoBodyPadding","ariaLabel","mainAriaLabelledBy","mainAriaLabel","isInPage","hasDrawer","isDrawerExpanded","activeStepIndex","activeStepName","activeStepSubName","i","length","id","name","step","Fragment","onClick","className","wizardToggle","wizardToggleList","wizardToggleListItem","wizardToggleNum","wizardToggleSeparator","wizardToggleIcon","wizardOuterWrap","wizardInnerWrap","mainComponent","drawerToggleButton","component","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Wizard/WizardToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardStep } from './Wizard';\nimport { WizardBody } from './WizardBody';\n\nexport interface WizardToggleProps {\n  /** Function that returns the WizardNav component */\n  nav: (isWizardNavOpen: boolean) => React.ReactElement;\n  /** The wizard steps */\n  steps: WizardStep[];\n  /** The currently active WizardStep */\n  activeStep: WizardStep;\n  /** The WizardFooter */\n  children?: React.ReactNode;\n  /** Set to true to remove body padding */\n  hasNoBodyPadding: boolean;\n  /** If the nav is open */\n  isNavOpen: boolean;\n  /** Callback function for when the nav is toggled */\n  onNavToggle: (isOpen: boolean) => void;\n  /** The button's aria-label */\n  'aria-label'?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** The main's aria-label */\n  mainAriaLabel?: string;\n  /** If the wizard is in-page */\n  isInPage?: boolean;\n  /** @beta Flag indicating the wizard has a drawer for at least one of the wizard steps */\n  hasDrawer?: boolean;\n  /** @beta Flag indicating the wizard drawer is expanded */\n  isDrawerExpanded?: boolean;\n}\n\nexport const WizardToggle: React.FunctionComponent<WizardToggleProps> = ({\n  isNavOpen,\n  onNavToggle,\n  nav,\n  steps,\n  activeStep,\n  children,\n  hasNoBodyPadding = false,\n  'aria-label': ariaLabel = 'Wizard Toggle',\n  mainAriaLabelledBy = null,\n  mainAriaLabel = null,\n  isInPage = true,\n  hasDrawer,\n  isDrawerExpanded\n}: WizardToggleProps) => {\n  let activeStepIndex;\n  let activeStepName;\n  let activeStepSubName;\n  for (let i = 0; i < steps.length; i++) {\n    if ((activeStep.id && steps[i].id === activeStep.id) || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      for (const step of steps[i].steps) {\n        if ((activeStep.id && step.id === activeStep.id) || step.name === activeStep.name) {\n          activeStepIndex = i + 1;\n          activeStepName = steps[i].name;\n          activeStepSubName = step.name;\n          break;\n        }\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <button\n        onClick={() => onNavToggle(!isNavOpen)}\n        className={css(styles.wizardToggle, isNavOpen && 'pf-m-expanded')}\n        aria-label={ariaLabel}\n        aria-expanded={isNavOpen}\n      >\n        <span className={css(styles.wizardToggleList)}>\n          <span className={css(styles.wizardToggleListItem)}>\n            <span className={css(styles.wizardToggleNum)}>{activeStepIndex}</span> {activeStepName}\n            {activeStepSubName && <AngleRightIcon className={css(styles.wizardToggleSeparator)} aria-hidden=\"true\" />}\n          </span>\n          {activeStepSubName && <span className={css(styles.wizardToggleListItem)}>{activeStepSubName}</span>}\n        </span>\n        <span className={css(styles.wizardToggleIcon)}>\n          <CaretDownIcon aria-hidden=\"true\" />\n        </span>\n      </button>\n      <div className={css(styles.wizardOuterWrap)}>\n        <div className={css(styles.wizardInnerWrap)}>\n          {nav(isNavOpen)}\n          <WizardBody\n            mainComponent={isInPage ? 'div' : 'main'}\n            aria-label={mainAriaLabel}\n            aria-labelledby={mainAriaLabelledBy}\n            hasNoBodyPadding={hasNoBodyPadding}\n            activeStep={activeStep}\n            isDrawerExpanded={isDrawerExpanded}\n            hasDrawer={hasDrawer}\n          >\n            {hasDrawer && !isDrawerExpanded && activeStep.drawerToggleButton}\n            {activeStep.component}\n          </WizardBody>\n        </div>\n        {children}\n      </div>\n    </React.Fragment>\n  );\n};\nWizardToggle.displayName = 'WizardToggle';\n"]},"metadata":{},"sourceType":"module"}