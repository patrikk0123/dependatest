{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nexport var DataListCheck = function DataListCheck(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$onChange = _a.onChange,\n      _onChange = _a$onChange === void 0 ? function (checked, event) {} : _a$onChange,\n      _a$isValid = _a.isValid,\n      isValid = _a$isValid === void 0 ? true : _a$isValid,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isChecked = _a.isChecked,\n      isChecked = _a$isChecked === void 0 ? null : _a$isChecked,\n      _a$checked = _a.checked,\n      checked = _a$checked === void 0 ? null : _a$checked,\n      defaultChecked = _a.defaultChecked,\n      _a$otherControls = _a.otherControls,\n      otherControls = _a$otherControls === void 0 ? false : _a$otherControls,\n      props = __rest(_a, [\"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"checked\", \"defaultChecked\", \"otherControls\"]);\n\n  var check = React.createElement(\"div\", {\n    className: css(styles.dataListCheck)\n  }, React.createElement(\"input\", Object.assign({}, props, {\n    type: \"checkbox\",\n    onChange: function onChange(event) {\n      return _onChange(event.currentTarget.checked, event);\n    },\n    \"aria-invalid\": !isValid,\n    disabled: isDisabled\n  }, [true, false].includes(defaultChecked) && {\n    defaultChecked: defaultChecked\n  }, ![true, false].includes(defaultChecked) && {\n    checked: isChecked || checked\n  })));\n  return React.createElement(React.Fragment, null, !otherControls && React.createElement(\"div\", {\n    className: css(styles.dataListItemControl, className)\n  }, check), otherControls && check);\n};\nDataListCheck.displayName = 'DataListCheck';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,4DAAnB;AA+BA,OAAO,IAAMC,aAAa,GAAgD,SAA7DA,aAA6D,CAACC,EAAD,EAWjD;qBAFFA,GARrBC;MAAAA,sCAAY;oBAQSD,GANrBE;MAAAA,qCAAW,UAACC,OAAD,EAAmBC,KAAnB,EAA+D,CAAG;mBAMxDJ,GALrBK;MAAAA,kCAAU;sBAKWL,GAJrBM;MAAAA,wCAAa;qBAIQN,GAHrBO;MAAAA,sCAAY;mBAGSP,GAFrBG;MAAAA,kCAAU;MACVK,iBACqBR,GADrBQ;yBACqBR,GAArBS;MAAAA,8CAAgB;MACbC,QAAKC,WAViE,6GAUjE;;EAER,IAAMC,KAAK,GACThB;IAAKK,SAAS,EAAEJ,GAAG,CAACC,MAAM,CAACe,aAAR;EAAnB,GACEjB,+CACMc,KADN,EACW;IACTI,IAAI,EAAC,UADI;IAETZ,QAAQ,EAAE,uBAAK;MAAA,OAAIA,SAAQ,CAACE,KAAK,CAACW,aAAN,CAAoBZ,OAArB,EAA8BC,KAA9B,CAAZ;IAAA,CAFN;IAEsD,gBACjD,CAACC,OAHN;IAITW,QAAQ,EAAEV;EAJD,CADX,EAMO,CAAC,IAAD,EAAO,KAAP,EAAcW,QAAd,CAAuBT,cAAvB,KAA0C;IAAEA,cAAc,EAAdA;EAAF,CANjD,EAOO,CAAC,CAAC,IAAD,EAAO,KAAP,EAAcS,QAAd,CAAuBT,cAAvB,CAAD,IAA2C;IAAEL,OAAO,EAAEI,SAAS,IAAIJ;EAAxB,CAPlD,EADF,CADF;EAaA,OACEP,oBAACA,KAAK,CAACsB,QAAP,EAAe,IAAf,EACG,CAACT,aAAD,IAAkBb;IAAKK,SAAS,EAAEJ,GAAG,CAACC,MAAM,CAACqB,mBAAR,EAA6BlB,SAA7B;EAAnB,GAA6DW,KAA7D,CADrB,EAEGH,aAAa,IAAIG,KAFpB,CADF;AAMD,CA/BM;AAgCPb,aAAa,CAACqB,WAAd,GAA4B,eAA5B","names":["React","css","styles","DataListCheck","_a","className","onChange","checked","event","isValid","isDisabled","isChecked","defaultChecked","otherControls","props","__rest","check","dataListCheck","type","currentTarget","disabled","includes","Fragment","dataListItemControl","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataListCheck.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\n\nexport interface DataListCheckProps extends Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'checked'> {\n  /** Additional classes added to the DataList item checkbox */\n  className?: string;\n  /** Flag to show if the DataList checkbox selection is valid or invalid */\n  isValid?: boolean;\n  /** Flag to show if the DataList checkbox is disabled */\n  isDisabled?: boolean;\n  /** Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\n   * but only use one.\n   * To make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.\n   */\n  isChecked?: boolean;\n  /** Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\n   * but only use one.\n   * To make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.\n   */\n  checked?: boolean;\n  /** Flag to set default value of DataList checkbox when it is uncontrolled by React state.\n   * To make the DataList checkbox controlled, instead use the isChecked prop, but do not use both.\n   */\n  defaultChecked?: boolean;\n  /** A callback for when the DataList checkbox selection changes */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Aria-labelledby of the DataList checkbox */\n  'aria-labelledby': string;\n  /** Flag to indicate if other controls are used in the DataListItem */\n  otherControls?: boolean;\n}\n\nexport const DataListCheck: React.FunctionComponent<DataListCheckProps> = ({\n  className = '',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onChange = (checked: boolean, event: React.FormEvent<HTMLInputElement>) => {},\n  isValid = true,\n  isDisabled = false,\n  isChecked = null,\n  checked = null,\n  defaultChecked,\n  otherControls = false,\n  ...props\n}: DataListCheckProps) => {\n  const check = (\n    <div className={css(styles.dataListCheck)}>\n      <input\n        {...props}\n        type=\"checkbox\"\n        onChange={event => onChange(event.currentTarget.checked, event)}\n        aria-invalid={!isValid}\n        disabled={isDisabled}\n        {...([true, false].includes(defaultChecked) && { defaultChecked })}\n        {...(![true, false].includes(defaultChecked) && { checked: isChecked || checked })}\n      />\n    </div>\n  );\n  return (\n    <React.Fragment>\n      {!otherControls && <div className={css(styles.dataListItemControl, className)}>{check}</div>}\n      {otherControls && check}\n    </React.Fragment>\n  );\n};\nDataListCheck.displayName = 'DataListCheck';\n"]},"metadata":{},"sourceType":"module"}