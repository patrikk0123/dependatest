{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { getDefaultOUIAId } from '@patternfly/react-core';\nimport { DropdownDirection, DropdownPosition } from '@patternfly/react-core/dist/esm/components/Dropdown/dropdownConstants';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport { css } from '@patternfly/react-styles';\nimport { Provider } from './base';\nimport { BodyCell } from './BodyCell';\nimport { HeaderCell } from './HeaderCell';\nimport { RowWrapper } from './RowWrapper';\nimport { BodyWrapper } from './BodyWrapper';\nimport { calculateColumns } from './utils/headerUtils';\nimport { RowSelectVariant } from './SelectColumn';\nimport { TableContext } from './TableContext';\nimport { TableGridBreakpoint } from './TableTypes';\nimport { TreeRowWrapper } from './TreeRowWrapper';\nexport class Table extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(Table.displayName)\n    };\n\n    this.isSelected = row => row.selected === true;\n\n    this.areAllRowsSelected = rows => {\n      if (rows === undefined || rows.length === 0) {\n        return false;\n      }\n\n      return rows.every(row => this.isSelected(row) || row.disableSelection || row.hasOwnProperty('parent') && !row.showSelect);\n    };\n\n    this.areAllExpanded = rows => {\n      if (rows === undefined || rows.length === 0) {\n        return false;\n      }\n\n      return rows.every(row => row.isOpen === undefined || row.isOpen);\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      'aria-label': ariaLabel,\n      caption,\n      header,\n      onSort,\n      onSelect,\n      canSelectAll,\n      canCollapseAll,\n      isHeaderSelectDisabled,\n      selectVariant,\n      collapseAllAriaLabel,\n      sortBy,\n      children,\n      actions,\n      actionResolver,\n      areActionsDisabled,\n      onCollapse,\n      onExpand,\n      onRowEdit,\n      rowLabeledBy,\n      dropdownPosition,\n      dropdownDirection,\n      actionsToggle,\n      contentId,\n      expandId,\n      variant,\n      rows,\n      cells,\n      bodyWrapper,\n      rowWrapper,\n      role,\n      borders,\n      onFavorite,\n      canSortFavorites\n    } = _a,\n          props = __rest(_a, ['aria-label', \"caption\", \"header\", \"onSort\", \"onSelect\", \"canSelectAll\", \"canCollapseAll\", \"isHeaderSelectDisabled\", \"selectVariant\", \"collapseAllAriaLabel\", \"sortBy\", \"children\", \"actions\", \"actionResolver\", \"areActionsDisabled\", \"onCollapse\", \"onExpand\", \"onRowEdit\", \"rowLabeledBy\", \"dropdownPosition\", \"dropdownDirection\", \"actionsToggle\", \"contentId\", \"expandId\", \"variant\", \"rows\", \"cells\", \"bodyWrapper\", \"rowWrapper\", \"role\", \"borders\", \"onFavorite\", \"canSortFavorites\"]);\n\n    if (!ariaLabel && !caption && !header && role !== 'presentation') {\n      // eslint-disable-next-line no-console\n      console.error('Table: Specify at least one of: header, caption, aria-label');\n    }\n\n    const headerData = calculateColumns(cells, {\n      sortBy,\n      onSort,\n      onSelect,\n      canSelectAll: selectVariant === RowSelectVariant.radio ? false : canSelectAll,\n      canCollapseAll,\n      isHeaderSelectDisabled,\n      selectVariant,\n      collapseAllAriaLabel,\n      allRowsSelected: onSelect ? this.areAllRowsSelected(rows) : false,\n      allRowsExpanded: onCollapse ? this.areAllExpanded(rows) : false,\n      actions,\n      actionResolver,\n      areActionsDisabled,\n      onCollapse,\n      onRowEdit,\n      onExpand,\n      rowLabeledBy,\n      expandId,\n      contentId,\n      dropdownPosition,\n      dropdownDirection,\n      actionsToggle,\n      onFavorite,\n      canSortFavorites,\n      // order of columns: Collapsible | Selectable | Favoritable\n      firstUserColumnIndex: [onCollapse, onSelect, onFavorite].filter(callback => callback).length\n    });\n    const table = React.createElement(TableContext.Provider, {\n      value: {\n        headerData,\n        headerRows: null,\n        rows\n      }\n    }, header, React.createElement(Provider, Object.assign({}, props, {\n      \"aria-label\": ariaLabel,\n      renderers: {\n        body: {\n          wrapper: bodyWrapper || BodyWrapper,\n          row: rowWrapper || (this.props.isTreeTable ? TreeRowWrapper : RowWrapper),\n          cell: BodyCell\n        },\n        header: {\n          cell: HeaderCell\n        }\n      },\n      columns: headerData,\n      role: role,\n      variant: variant,\n      borders: borders\n    }), caption && React.createElement(\"caption\", null, caption), children));\n\n    if (onRowEdit) {\n      return React.createElement(\"form\", {\n        className: css(inlineStyles.inlineEdit)\n      }, table);\n    }\n\n    return table;\n  }\n\n}\nTable.displayName = 'Table';\nTable.hasWarnBeta = false;\nTable.defaultProps = {\n  children: null,\n  className: '',\n  variant: null,\n  borders: true,\n  rowLabeledBy: 'simple-node',\n  expandId: 'expandable-toggle',\n  contentId: 'expanded-content',\n  dropdownPosition: DropdownPosition.right,\n  dropdownDirection: DropdownDirection.down,\n  header: undefined,\n  caption: undefined,\n  'aria-label': undefined,\n  gridBreakPoint: TableGridBreakpoint.gridMd,\n  role: 'grid',\n  canSelectAll: true,\n  canCollapseAll: false,\n  isHeaderSelectDisabled: false,\n  selectVariant: 'checkbox',\n  collapseAllAriaLabel: '',\n  ouiaSafe: true,\n  isStickyHeader: false,\n  canSortFavorites: true,\n  isTreeTable: false,\n  isNested: false\n};","map":{"version":3,"mappings":"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","names":["React","getDefaultOUIAId","DropdownDirection","DropdownPosition","inlineStyles","css","Provider","BodyCell","HeaderCell","RowWrapper","BodyWrapper","calculateColumns","RowSelectVariant","TableContext","TableGridBreakpoint","TreeRowWrapper","Table","Component","constructor","ouiaStateId","displayName","row","selected","rows","undefined","length","every","isSelected","disableSelection","hasOwnProperty","showSelect","isOpen","render","_a","props","ariaLabel","caption","header","onSort","onSelect","canSelectAll","canCollapseAll","isHeaderSelectDisabled","selectVariant","collapseAllAriaLabel","sortBy","children","actions","actionResolver","areActionsDisabled","onCollapse","onExpand","onRowEdit","rowLabeledBy","dropdownPosition","dropdownDirection","actionsToggle","contentId","expandId","variant","cells","bodyWrapper","rowWrapper","role","borders","onFavorite","canSortFavorites","console","error","headerData","radio","allRowsSelected","areAllRowsSelected","allRowsExpanded","areAllExpanded","firstUserColumnIndex","filter","callback","table","value","headerRows","Object","renderers","body","wrapper","isTreeTable","cell","columns","className","inlineEdit","right","down","gridBreakPoint","gridMd","ouiaSafe","isStickyHeader","isNested"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/Table.tsx"],"sourcesContent":["import * as React from 'react';\nimport { OUIAProps, getDefaultOUIAId } from '@patternfly/react-core';\nimport {\n  DropdownDirection,\n  DropdownPosition\n} from '@patternfly/react-core/dist/esm/components/Dropdown/dropdownConstants';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport { css } from '@patternfly/react-styles';\nimport { Provider } from './base';\nimport { BodyCell } from './BodyCell';\nimport { HeaderCell } from './HeaderCell';\nimport { RowWrapper, RowWrapperProps } from './RowWrapper';\nimport { BodyWrapper } from './BodyWrapper';\nimport { calculateColumns } from './utils/headerUtils';\nimport { RowSelectVariant } from './SelectColumn';\nimport { TableContext } from './TableContext';\nimport {\n  ISortBy,\n  OnCollapse,\n  OnExpand,\n  OnSelect,\n  OnRowEdit,\n  OnSort,\n  IActions,\n  IActionsResolver,\n  IAreActionsDisabled,\n  IRow,\n  ICell,\n  TableVariant,\n  TableGridBreakpoint,\n  IHeaderRow,\n  OnFavorite\n} from './TableTypes';\nimport { TreeRowWrapper } from './TreeRowWrapper';\nimport { CustomActionsToggleProps } from './ActionsColumn';\n\nexport interface TableProps extends OUIAProps {\n  /** Adds an accessible name for the Table */\n  'aria-label'?: string;\n  /** Content rendered inside the Table */\n  children?: React.ReactNode;\n  /** Additional classes added to the Table  */\n  className?: string;\n  /** Style variant for the Table  */\n  variant?: 'compact';\n  /**\n   * Render borders\n   * Borders can only currently be disabled if the variant is set to 'compact'\n   * https://github.com/patternfly/patternfly/issues/3650\n   */\n  borders?: boolean;\n  /** Specifies the grid breakpoints  */\n  gridBreakPoint?: '' | 'grid' | 'grid-md' | 'grid-lg' | 'grid-xl' | 'grid-2xl';\n  /** Specifies the initial sorting pattern for the table - asc/desc and the index of the column to sort by */\n  sortBy?: ISortBy;\n  /** Function triggered when an expandable content is collapsed. When this is used, one expandable toggle button will be positioned in the first cell of a non-expandable row, preceding an expandable row */\n  onCollapse?: OnCollapse;\n  /** Function triggered when a compound expandable item is clicked */\n  onExpand?: OnExpand;\n  /** Function triggered when a row's checkbox is selected. When this is used, one checkbox/radio button will be positioned in the first or second cell of a non-expandable row */\n  onSelect?: OnSelect;\n  /** Enables or disables the ability to select all - this is mutually exclusive with radio button select variant */\n  canSelectAll?: boolean;\n  /** Enables or disables the ability to expand all */\n  canCollapseAll?: boolean;\n  /** Flag indicating the select all checkbox is disabled */\n  isHeaderSelectDisabled?: boolean;\n  /** Specifies the type of the select element variant - can be one of checkbox or radio button */\n  selectVariant?: 'checkbox' | 'radio';\n  /** An optional alternative aria label for the expand collapse all table header */\n  collapseAllAriaLabel?: string;\n  /** Function triggered when a row's inline edit is activated. Adds a column for inline edit when present. */\n  onRowEdit?: OnRowEdit;\n  /** Function triggered when sort icon is clicked */\n  onSort?: OnSort;\n  /** Actions to add to the Table */\n  actions?: IActions;\n  /** Resolver for the given action  */\n  actionResolver?: IActionsResolver;\n  /** Specifies if the Kebab for actions is disabled */\n  areActionsDisabled?: IAreActionsDisabled;\n  /** Component to place in the header */\n  header?: React.ReactNode;\n  /** Component used for caption*/\n  caption?: React.ReactNode;\n  /** label for row */\n  rowLabeledBy?: string;\n  /** ID for expand */\n  expandId?: string;\n  /** ID for content */\n  contentId?: string;\n  /** The desired position to show the dropdown when clicking on the actions Kebab. Can only be used together with `actions` property */\n  dropdownPosition?: 'right' | 'left';\n  /** The desired direction to show the dropdown when clicking on the actions Kebab. Can only be used together with `actions` property */\n  dropdownDirection?: 'up' | 'down';\n  /** The toggle of the actions menu dropdown. A KebabToggle or DropdownToggle component */\n  actionsToggle?: (props: CustomActionsToggleProps) => React.ReactNode;\n  /** Row data */\n  rows: (IRow | string[])[];\n  /** Cell/column data */\n  cells: (ICell | string)[];\n  /** Wrapper for the body  */\n  bodyWrapper?: Function;\n  /** Wrapper for the row */\n  rowWrapper?: (props: RowWrapperProps) => JSX.Element;\n  /** A valid WAI-ARIA role to be applied to the table element */\n  role?: string;\n  /** If set to true, the table header sticks to the top of its container */\n  isStickyHeader?: boolean;\n  /**\n   * Enables favorites column\n   * Callback triggered when a row is favorited/unfavorited\n   */\n  onFavorite?: OnFavorite;\n  /** Along with the onSort prop, enables favorites sorting, defaults to true */\n  canSortFavorites?: boolean;\n  /** Flag indicating table is a tree table */\n  isTreeTable?: boolean;\n  /** Flag indicating this table is nested within another table */\n  isNested?: boolean;\n  /** Flag indicating this table is striped */\n  isStriped?: boolean;\n  /** Flag indicating this table contains expandable rows to maintain proper striping */\n  isExpandable?: boolean;\n}\n\nexport class Table extends React.Component<TableProps, {}> {\n  static displayName = 'Table';\n  static hasWarnBeta = false;\n  static defaultProps: Partial<TableProps> = {\n    children: null as React.ReactNode,\n    className: '',\n    variant: null as TableVariant,\n    borders: true,\n    rowLabeledBy: 'simple-node',\n    expandId: 'expandable-toggle',\n    contentId: 'expanded-content',\n    dropdownPosition: DropdownPosition.right,\n    dropdownDirection: DropdownDirection.down,\n    header: undefined as React.ReactNode,\n    caption: undefined as React.ReactNode,\n    'aria-label': undefined as string,\n    gridBreakPoint: TableGridBreakpoint.gridMd,\n    role: 'grid',\n    canSelectAll: true,\n    canCollapseAll: false,\n    isHeaderSelectDisabled: false,\n    selectVariant: 'checkbox',\n    collapseAllAriaLabel: '',\n    ouiaSafe: true,\n    isStickyHeader: false,\n    canSortFavorites: true,\n    isTreeTable: false,\n    isNested: false\n  };\n  state = {\n    ouiaStateId: getDefaultOUIAId(Table.displayName)\n  };\n\n  isSelected = (row: IRow) => row.selected === true;\n\n  areAllRowsSelected = (rows: IRow[]) => {\n    if (rows === undefined || rows.length === 0) {\n      return false;\n    }\n    return rows.every(\n      row => this.isSelected(row) || row.disableSelection || (row.hasOwnProperty('parent') && !row.showSelect)\n    );\n  };\n\n  areAllExpanded = (rows: IRow[]) => {\n    if (rows === undefined || rows.length === 0) {\n      return false;\n    }\n    return rows.every(row => row.isOpen === undefined || row.isOpen);\n  };\n\n  render() {\n    const {\n      'aria-label': ariaLabel,\n      caption,\n      header,\n      onSort,\n      onSelect,\n      canSelectAll,\n      canCollapseAll,\n      isHeaderSelectDisabled,\n      selectVariant,\n      collapseAllAriaLabel,\n      sortBy,\n      children,\n      actions,\n      actionResolver,\n      areActionsDisabled,\n      onCollapse,\n      onExpand,\n      onRowEdit,\n      rowLabeledBy,\n      dropdownPosition,\n      dropdownDirection,\n      actionsToggle,\n      contentId,\n      expandId,\n      variant,\n      rows,\n      cells,\n      bodyWrapper,\n      rowWrapper,\n      role,\n      borders,\n      onFavorite,\n      canSortFavorites,\n      ...props\n    } = this.props;\n\n    if (!ariaLabel && !caption && !header && role !== 'presentation') {\n      // eslint-disable-next-line no-console\n      console.error('Table: Specify at least one of: header, caption, aria-label');\n    }\n\n    const headerData = calculateColumns(cells, {\n      sortBy,\n      onSort,\n      onSelect,\n      canSelectAll: selectVariant === RowSelectVariant.radio ? false : canSelectAll,\n      canCollapseAll,\n      isHeaderSelectDisabled,\n      selectVariant,\n      collapseAllAriaLabel,\n      allRowsSelected: onSelect ? this.areAllRowsSelected(rows as IRow[]) : false,\n      allRowsExpanded: onCollapse ? this.areAllExpanded(rows as IRow[]) : false,\n      actions,\n      actionResolver,\n      areActionsDisabled,\n      onCollapse,\n      onRowEdit,\n      onExpand,\n      rowLabeledBy,\n      expandId,\n      contentId,\n      dropdownPosition,\n      dropdownDirection,\n      actionsToggle,\n      onFavorite,\n      canSortFavorites,\n      // order of columns: Collapsible | Selectable | Favoritable\n      firstUserColumnIndex: [onCollapse, onSelect, onFavorite].filter(callback => callback).length\n    });\n\n    const table = (\n      <TableContext.Provider\n        value={{\n          headerData,\n          headerRows: null as IHeaderRow[],\n          rows\n        }}\n      >\n        {header}\n        <Provider\n          {...props}\n          aria-label={ariaLabel}\n          renderers={{\n            body: {\n              wrapper: bodyWrapper || BodyWrapper,\n              row: rowWrapper || (this.props.isTreeTable ? TreeRowWrapper : RowWrapper),\n              cell: BodyCell\n            },\n            header: {\n              cell: HeaderCell\n            }\n          }}\n          columns={headerData}\n          role={role}\n          variant={variant}\n          borders={borders}\n        >\n          {caption && <caption>{caption}</caption>}\n          {children}\n        </Provider>\n      </TableContext.Provider>\n    );\n\n    if (onRowEdit) {\n      return <form className={css(inlineStyles.inlineEdit)}>{table}</form>;\n    }\n\n    return table;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}