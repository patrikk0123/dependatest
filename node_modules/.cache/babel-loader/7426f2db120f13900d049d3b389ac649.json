{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nconst TreeViewListItemBase = _ref => {\n  let {\n    name,\n    title,\n    id,\n    isExpanded,\n    defaultExpanded = false,\n    children = null,\n    onSelect,\n    onCheck,\n    hasCheck = false,\n    checkProps = {\n      checked: false\n    },\n    hasBadge = false,\n    customBadgeContent,\n    badgeProps = {\n      isRead: true\n    },\n    isCompact,\n    activeItems = [],\n    itemData,\n    parentItem,\n    icon,\n    expandedIcon,\n    action,\n    compareItems,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    useMemo\n  } = _ref;\n  const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n  useEffect(() => {\n    if (isExpanded !== undefined && isExpanded !== null) {\n      setIsExpanded(isExpanded);\n    } else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n      setIsExpanded(internalIsExpanded || defaultExpanded);\n    }\n  }, [isExpanded, defaultExpanded]);\n  const Component = hasCheck ? 'div' : 'button';\n  const ToggleComponent = hasCheck ? 'button' : 'div';\n\n  const renderToggle = randomId => React.createElement(ToggleComponent, Object.assign({\n    className: css(styles.treeViewNodeToggle),\n    onClick: () => {\n      if (hasCheck) {\n        setIsExpanded(!internalIsExpanded);\n      }\n    }\n  }, hasCheck && {\n    'aria-labelledby': `label-${randomId}`\n  }, {\n    tabIndex: -1\n  }), React.createElement(\"span\", {\n    className: css(styles.treeViewNodeToggleIcon)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": \"true\"\n  })));\n\n  const renderCheck = randomId => React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCheck)\n  }, React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    onChange: evt => onCheck && onCheck(evt, itemData, parentItem),\n    onClick: evt => evt.stopPropagation(),\n    ref: elem => elem && (elem.indeterminate = checkProps.checked === null)\n  }, checkProps, {\n    checked: checkProps.checked === null ? false : checkProps.checked,\n    id: randomId,\n    tabIndex: -1\n  })));\n\n  const iconRendered = React.createElement(\"span\", {\n    className: css(styles.treeViewNodeIcon)\n  }, !internalIsExpanded && icon, internalIsExpanded && (expandedIcon || icon));\n\n  const renderNodeContent = randomId => {\n    const content = React.createElement(React.Fragment, null, isCompact && title && React.createElement(\"span\", {\n      className: css(styles.treeViewNodeTitle)\n    }, title), hasCheck ? React.createElement(\"label\", {\n      className: css(styles.treeViewNodeText),\n      htmlFor: randomId,\n      id: `label-${randomId}`\n    }, name) : React.createElement(\"span\", {\n      className: css(styles.treeViewNodeText)\n    }, name));\n    return isCompact ? React.createElement(\"div\", {\n      className: css(styles.treeViewNodeContent)\n    }, content) : content;\n  };\n\n  const badgeRendered = React.createElement(React.Fragment, null, hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length)), hasBadge && !children && customBadgeContent !== undefined && React.createElement(\"span\", {\n    className: css(styles.treeViewNodeCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)));\n  return React.createElement(\"li\", Object.assign({\n    id: id,\n    className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded)\n  }, internalIsExpanded && {\n    'aria-expanded': 'true'\n  }, {\n    role: \"treeitem\",\n    tabIndex: -1\n  }), React.createElement(\"div\", {\n    className: css(styles.treeViewContent)\n  }, React.createElement(GenerateId, {\n    prefix: \"checkbox-id\"\n  }, randomId => React.createElement(Component, {\n    className: css(styles.treeViewNode, !children && activeItems && activeItems.length > 0 && activeItems.some(item => compareItems && item && compareItems(item, itemData)) ? styles.modifiers.current : ''),\n    onClick: evt => {\n      if (!hasCheck) {\n        onSelect && onSelect(evt, itemData, parentItem);\n\n        if (children && evt.isDefaultPrevented() !== true) {\n          setIsExpanded(!internalIsExpanded);\n        }\n      }\n    },\n    tabIndex: -1\n  }, React.createElement(\"div\", {\n    className: css(styles.treeViewNodeContainer)\n  }, children && renderToggle(randomId), hasCheck && renderCheck(randomId), icon && iconRendered, renderNodeContent(randomId), badgeRendered))), action && React.createElement(\"div\", {\n    className: css(styles.treeViewAction)\n  }, action)), internalIsExpanded && children);\n};\n\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  const prevIncludes = prevProps.activeItems && prevProps.activeItems.length > 0 && prevProps.activeItems.some(item => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));\n  const nextIncludes = nextProps.activeItems && nextProps.activeItems.length > 0 && nextProps.activeItems.some(item => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));\n\n  if (prevIncludes || nextIncludes) {\n    return false;\n  }\n\n  if (prevProps.name !== nextProps.name || prevProps.title !== nextProps.title || prevProps.id !== nextProps.id || prevProps.isExpanded !== nextProps.isExpanded || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.onSelect !== nextProps.onSelect || prevProps.onCheck !== nextProps.onCheck || prevProps.hasCheck !== nextProps.hasCheck || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.customBadgeContent !== nextProps.customBadgeContent || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isCompact !== nextProps.isCompact || prevProps.icon !== nextProps.icon || prevProps.expandedIcon !== nextProps.expandedIcon || prevProps.action !== nextProps.action || prevProps.parentItem !== nextProps.parentItem || prevProps.itemData !== nextProps.itemData) {\n    return false;\n  }\n\n  return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","css","styles","AngleRightIcon","Badge","GenerateId","TreeViewListItemBase","name","title","id","isExpanded","defaultExpanded","children","onSelect","onCheck","hasCheck","checkProps","checked","hasBadge","customBadgeContent","badgeProps","isRead","isCompact","activeItems","itemData","parentItem","icon","expandedIcon","action","compareItems","useMemo","internalIsExpanded","setIsExpanded","undefined","Component","ToggleComponent","renderToggle","randomId","Object","className","treeViewNodeToggle","onClick","tabIndex","treeViewNodeToggleIcon","renderCheck","treeViewNodeCheck","type","onChange","evt","stopPropagation","ref","elem","indeterminate","iconRendered","treeViewNodeIcon","renderNodeContent","content","treeViewNodeTitle","treeViewNodeText","htmlFor","treeViewNodeContent","badgeRendered","treeViewNodeCount","props","data","length","treeViewListItem","modifiers","expanded","role","treeViewContent","prefix","treeViewNode","some","item","current","isDefaultPrevented","treeViewNodeContainer","treeViewAction","TreeViewListItem","memo","prevProps","nextProps","prevIncludes","nextIncludes","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/TreeView/TreeViewListItem.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { TreeViewDataItem } from './TreeView';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface TreeViewCheckProps extends Partial<React.InputHTMLAttributes<HTMLInputElement>> {\n  checked?: boolean | null;\n}\n\nexport interface TreeViewListItemProps {\n  /** Internal content of a tree view item */\n  name: React.ReactNode;\n  /** Title a tree view item */\n  title: React.ReactNode;\n  /** ID of a tree view item */\n  id?: string;\n  /** Flag indicating if the node is expanded, overrides internal state */\n  isExpanded?: boolean;\n  /** Flag indicating if node is expanded by default */\n  defaultExpanded?: boolean;\n  /** Child nodes of a tree view item */\n  children?: React.ReactNode;\n  /** Callback for item selection. Note: calling event.preventDefault() will prevent the node from toggling. */\n  onSelect?: (event: React.MouseEvent, item: TreeViewDataItem, parent: TreeViewDataItem) => void;\n  /** Callback for item checkbox selection */\n  onCheck?: (event: React.ChangeEvent, item: TreeViewDataItem, parent: TreeViewDataItem) => void;\n  /** Flag indicating if a tree view item has a checkbox */\n  hasCheck?: boolean;\n  /** Additional properties of the tree view item checkbox */\n  checkProps?: TreeViewCheckProps;\n  /** Flag indicating if a tree view item has a badge */\n  hasBadge?: boolean;\n  /** Optional prop for custom badge */\n  customBadgeContent?: React.ReactNode;\n  /** Additional properties of the tree view item badge */\n  badgeProps?: any;\n  /** Flag indicating if the tree view is using a compact variation. */\n  isCompact?: boolean;\n  /** Active items of tree view */\n  activeItems?: TreeViewDataItem[];\n  /** Data structure of tree view item */\n  itemData?: TreeViewDataItem;\n  /** Parent item of tree view item */\n  parentItem?: TreeViewDataItem;\n  /** Default icon of a tree view item */\n  icon?: React.ReactNode;\n  /** Expanded icon of a tree view item */\n  expandedIcon?: React.ReactNode;\n  /** Action of a tree view item, can be a Button or Dropdown */\n  action?: React.ReactNode;\n  /** Callback for item comparison function */\n  compareItems?: (item: TreeViewDataItem, itemToCheck: TreeViewDataItem) => boolean;\n  /** Flag indicating the TreeView should utilize memoization to help render large data sets. Setting this property requires that `activeItems` pass in an array containing every node in the selected item's path. */\n  useMemo?: boolean;\n}\n\nconst TreeViewListItemBase: React.FunctionComponent<TreeViewListItemProps> = ({\n  name,\n  title,\n  id,\n  isExpanded,\n  defaultExpanded = false,\n  children = null,\n  onSelect,\n  onCheck,\n  hasCheck = false,\n  checkProps = {\n    checked: false\n  },\n  hasBadge = false,\n  customBadgeContent,\n  badgeProps = { isRead: true },\n  isCompact,\n  activeItems = [],\n  itemData,\n  parentItem,\n  icon,\n  expandedIcon,\n  action,\n  compareItems,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  useMemo\n}: TreeViewListItemProps) => {\n  const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n  useEffect(() => {\n    if (isExpanded !== undefined && isExpanded !== null) {\n      setIsExpanded(isExpanded);\n    } else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n      setIsExpanded(internalIsExpanded || defaultExpanded);\n    }\n  }, [isExpanded, defaultExpanded]);\n\n  const Component = hasCheck ? 'div' : 'button';\n  const ToggleComponent = hasCheck ? 'button' : 'div';\n  const renderToggle = (randomId: string) => (\n    <ToggleComponent\n      className={css(styles.treeViewNodeToggle)}\n      onClick={() => {\n        if (hasCheck) {\n          setIsExpanded(!internalIsExpanded);\n        }\n      }}\n      {...(hasCheck && { 'aria-labelledby': `label-${randomId}` })}\n      tabIndex={-1}\n    >\n      <span className={css(styles.treeViewNodeToggleIcon)}>\n        <AngleRightIcon aria-hidden=\"true\" />\n      </span>\n    </ToggleComponent>\n  );\n  const renderCheck = (randomId: string) => (\n    <span className={css(styles.treeViewNodeCheck)}>\n      <input\n        type=\"checkbox\"\n        onChange={(evt: React.ChangeEvent) => onCheck && onCheck(evt, itemData, parentItem)}\n        onClick={(evt: React.MouseEvent) => evt.stopPropagation()}\n        ref={elem => elem && (elem.indeterminate = checkProps.checked === null)}\n        {...checkProps}\n        checked={checkProps.checked === null ? false : checkProps.checked}\n        id={randomId}\n        tabIndex={-1}\n      />\n    </span>\n  );\n  const iconRendered = (\n    <span className={css(styles.treeViewNodeIcon)}>\n      {!internalIsExpanded && icon}\n      {internalIsExpanded && (expandedIcon || icon)}\n    </span>\n  );\n  const renderNodeContent = (randomId: string) => {\n    const content = (\n      <>\n        {isCompact && title && <span className={css(styles.treeViewNodeTitle)}>{title}</span>}\n        {hasCheck ? (\n          <label className={css(styles.treeViewNodeText)} htmlFor={randomId} id={`label-${randomId}`}>\n            {name}\n          </label>\n        ) : (\n          <span className={css(styles.treeViewNodeText)}>{name}</span>\n        )}\n      </>\n    );\n    return isCompact ? <div className={css(styles.treeViewNodeContent)}>{content}</div> : content;\n  };\n  const badgeRendered = (\n    <>\n      {hasBadge && children && (\n        <span className={css(styles.treeViewNodeCount)}>\n          <Badge {...badgeProps}>\n            {customBadgeContent ? customBadgeContent : (children as React.ReactElement).props.data.length}\n          </Badge>\n        </span>\n      )}\n      {hasBadge && !children && customBadgeContent !== undefined && (\n        <span className={css(styles.treeViewNodeCount)}>\n          <Badge {...badgeProps}>{customBadgeContent}</Badge>\n        </span>\n      )}\n    </>\n  );\n  return (\n    <li\n      id={id}\n      className={css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded)}\n      {...(internalIsExpanded && { 'aria-expanded': 'true' })}\n      role=\"treeitem\"\n      tabIndex={-1}\n    >\n      <div className={css(styles.treeViewContent)}>\n        <GenerateId prefix=\"checkbox-id\">\n          {randomId => (\n            <Component\n              className={css(\n                styles.treeViewNode,\n                !children &&\n                  activeItems &&\n                  activeItems.length > 0 &&\n                  activeItems.some(item => compareItems && item && compareItems(item, itemData))\n                  ? styles.modifiers.current\n                  : ''\n              )}\n              onClick={(evt: React.MouseEvent) => {\n                if (!hasCheck) {\n                  onSelect && onSelect(evt, itemData, parentItem);\n                  if (children && evt.isDefaultPrevented() !== true) {\n                    setIsExpanded(!internalIsExpanded);\n                  }\n                }\n              }}\n              tabIndex={-1}\n            >\n              <div className={css(styles.treeViewNodeContainer)}>\n                {children && renderToggle(randomId)}\n                {hasCheck && renderCheck(randomId)}\n                {icon && iconRendered}\n                {renderNodeContent(randomId)}\n                {badgeRendered}\n              </div>\n            </Component>\n          )}\n        </GenerateId>\n        {action && <div className={css(styles.treeViewAction)}>{action}</div>}\n      </div>\n      {internalIsExpanded && children}\n    </li>\n  );\n};\n\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  const prevIncludes =\n    prevProps.activeItems &&\n    prevProps.activeItems.length > 0 &&\n    prevProps.activeItems.some(\n      item => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData)\n    );\n  const nextIncludes =\n    nextProps.activeItems &&\n    nextProps.activeItems.length > 0 &&\n    nextProps.activeItems.some(\n      item => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData)\n    );\n\n  if (prevIncludes || nextIncludes) {\n    return false;\n  }\n\n  if (\n    prevProps.name !== nextProps.name ||\n    prevProps.title !== nextProps.title ||\n    prevProps.id !== nextProps.id ||\n    prevProps.isExpanded !== nextProps.isExpanded ||\n    prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n    prevProps.onSelect !== nextProps.onSelect ||\n    prevProps.onCheck !== nextProps.onCheck ||\n    prevProps.hasCheck !== nextProps.hasCheck ||\n    prevProps.checkProps !== nextProps.checkProps ||\n    prevProps.hasBadge !== nextProps.hasBadge ||\n    prevProps.customBadgeContent !== nextProps.customBadgeContent ||\n    prevProps.badgeProps !== nextProps.badgeProps ||\n    prevProps.isCompact !== nextProps.isCompact ||\n    prevProps.icon !== nextProps.icon ||\n    prevProps.expandedIcon !== nextProps.expandedIcon ||\n    prevProps.action !== nextProps.action ||\n    prevProps.parentItem !== nextProps.parentItem ||\n    prevProps.itemData !== nextProps.itemData\n  ) {\n    return false;\n  }\n\n  return true;\n});\n\nTreeViewListItem.displayName = 'TreeViewListItem';\n"]},"metadata":{},"sourceType":"module"}