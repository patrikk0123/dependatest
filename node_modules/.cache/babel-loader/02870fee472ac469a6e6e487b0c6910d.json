{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\nexport var OptionsMenuToggle = function OptionsMenuToggle(_a) {\n  var _a$isPlain = _a.isPlain,\n      isPlain = _a$isPlain === void 0 ? false : _a$isPlain,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isOpen = _a.isOpen,\n      isOpen = _a$isOpen === void 0 ? false : _a$isOpen,\n      _a$parentId = _a.parentId,\n      parentId = _a$parentId === void 0 ? '' : _a$parentId,\n      _a$toggleTemplate = _a.toggleTemplate,\n      toggleTemplate = _a$toggleTemplate === void 0 ? React.createElement(React.Fragment, null) : _a$toggleTemplate,\n      _a$hideCaret = _a.hideCaret,\n      hideCaret = _a$hideCaret === void 0 ? false : _a$hideCaret,\n      _a$isActive = _a.isActive,\n      isActive = _a$isActive === void 0 ? false : _a$isActive,\n      _a$isSplitButton = _a.isSplitButton,\n      isSplitButton = _a$isSplitButton === void 0 ? false : _a$isSplitButton,\n      type = _a.type,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Options menu' : _a$ariaLabel,\n      props = __rest(_a, [\"isPlain\", \"isDisabled\", \"isOpen\", \"parentId\", \"toggleTemplate\", \"hideCaret\", \"isActive\", \"isSplitButton\", \"type\", 'aria-label']);\n\n  return React.createElement(DropdownContext.Consumer, null, function (_ref) {\n    var contextId = _ref.id;\n    return React.createElement(DropdownToggle, Object.assign({}, (isPlain || hideCaret) && {\n      toggleIndicator: null\n    }, props, {\n      isPlain: isPlain,\n      isOpen: isOpen,\n      isDisabled: isDisabled,\n      isActive: isActive,\n      id: parentId ? \"\".concat(parentId, \"-toggle\") : \"\".concat(contextId, \"-toggle\"),\n      \"aria-haspopup\": \"listbox\",\n      \"aria-label\": ariaLabel,\n      \"aria-expanded\": isOpen\n    }, toggleTemplate ? {\n      children: toggleTemplate\n    } : {}));\n  });\n};\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,aAAhD;AA4BA,OAAO,IAAMC,iBAAiB,GAAoD,SAArEA,iBAAqE,CAACC,EAAD,EAerD;mBAFaA,GAZxCC;MAAAA,kCAAU;sBAY8BD,GAXxCE;MAAAA,wCAAa;kBAW2BF,GAVxCG;MAAAA,gCAAS;oBAU+BH,GATxCI;MAAAA,oCAAW;0BAS6BJ,GARxCK;MAAAA,gDAAiBT,oBAACA,KAAK,CAACU,QAAP,EAAe,IAAf;qBAQuBN,GAPxCO;MAAAA,sCAAY;oBAO4BP,GALxCQ;MAAAA,oCAAW;yBAK6BR,GAHxCS;MAAAA,8CAAgB;MAEhBC,OACwCV,GADxCU;qBACwCV,GAAxC;MAAcW,sCAAY;MACvBC,QAAKC,WAdyE,iIAczE;;EACoB,OAC5BjB,oBAACE,eAAe,CAACgB,QAAjB,EAAyB,IAAzB,EACG;IAAA,IAAOC,SAAP,QAAGC,EAAH;IAAA,OACCpB,oBAACC,cAAD,EAAeoB,kBACR,CAAChB,OAAO,IAAIM,SAAZ,KAA0B;MAAEW,eAAe,EAAE;IAAnB,CADlB,EAETN,KAFS,EAEJ;MACTX,OAAO,EAAEA,OADA;MAETE,MAAM,EAAEA,MAFC;MAGTD,UAAU,EAAEA,UAHH;MAITM,QAAQ,EAAEA,QAJD;MAKTQ,EAAE,EAAEZ,QAAQ,aAAMA,QAAN,yBAA6BW,SAA7B,YALH;MAKkD,iBAC7C,SANL;MAMc,cACXJ,SAPH;MAOY,iBACNR;IARN,CAFI,EAWRE,cAAc,GAAG;MAAEc,QAAQ,EAAEd;IAAZ,CAAH,GAAkC,EAXxC,CAAf,CADD;EAAA,CADH,CAD4B;AAkB7B,CAjCM;AAkCPN,iBAAiB,CAACqB,WAAlB,GAAgC,mBAAhC","names":["React","DropdownToggle","DropdownContext","OptionsMenuToggle","_a","isPlain","isDisabled","isOpen","parentId","toggleTemplate","Fragment","hideCaret","isActive","isSplitButton","type","ariaLabel","props","__rest","Consumer","contextId","id","Object","toggleIndicator","children","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/OptionsMenu/OptionsMenuToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\n\nexport interface OptionsMenuToggleProps extends React.HTMLProps<HTMLButtonElement> {\n  /** Id of the parent options menu component */\n  parentId?: string;\n  /** Callback for when this options menu is toggled */\n  onToggle?: (isOpen: boolean) => void;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if the button is plain */\n  isPlain?: boolean;\n  isSplitButton?: boolean;\n  /** Forces display of the active state of the options menu */\n  isActive?: boolean;\n  /** Disables the options menu toggle */\n  isDisabled?: boolean;\n  /** hide the toggle caret */\n  hideCaret?: boolean;\n  /** Provides an accessible name for the button when an icon is used instead of text */\n  'aria-label'?: string;\n  /** @hide Internal function to implement enter click */\n  onEnter?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** @hide Internal parent reference */\n  parentRef?: HTMLElement;\n  /** Content to be rendered in the options menu toggle button */\n  toggleTemplate?: React.ReactNode;\n}\n\nexport const OptionsMenuToggle: React.FunctionComponent<OptionsMenuToggleProps> = ({\n  isPlain = false,\n  isDisabled = false,\n  isOpen = false,\n  parentId = '',\n  toggleTemplate = <React.Fragment />,\n  hideCaret = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isActive = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isSplitButton = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  type,\n  'aria-label': ariaLabel = 'Options menu',\n  ...props\n}: OptionsMenuToggleProps) => (\n  <DropdownContext.Consumer>\n    {({ id: contextId }) => (\n      <DropdownToggle\n        {...((isPlain || hideCaret) && { toggleIndicator: null })}\n        {...props}\n        isPlain={isPlain}\n        isOpen={isOpen}\n        isDisabled={isDisabled}\n        isActive={isActive}\n        id={parentId ? `${parentId}-toggle` : `${contextId}-toggle`}\n        aria-haspopup=\"listbox\"\n        aria-label={ariaLabel}\n        aria-expanded={isOpen}\n        {...(toggleTemplate ? { children: toggleTemplate } : {})}\n      />\n    )}\n  </DropdownContext.Consumer>\n);\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';\n"]},"metadata":{},"sourceType":"module"}