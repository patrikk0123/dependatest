{"ast":null,"code":"import * as React from 'react';\n/** This is a custom React hook in a format suggest by Dan Abramov in a blog post here:\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/. It allows setInterval to be used\n * declaratively in functional React components.\n */\n\nexport function useInterval(callback, delay) {\n  var savedCallback = React.useRef(function () {});\n  React.useEffect(function () {\n    savedCallback.current = callback;\n  }, [callback]);\n  React.useEffect(function () {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      var id = setInterval(tick, delay);\n      return function () {\n        return clearInterval(id);\n      };\n    }\n  }, [delay]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA;;;;;AAKA,OAAM,SAAUC,WAAV,CAAsBC,QAAtB,EAA4CC,KAA5C,EAAgE;EACpE,IAAMC,aAAa,GAAGJ,KAAK,CAACK,MAAN,CAAa,YAAK,CAAG,CAArB,CAAtB;EAEAL,KAAK,CAACM,SAAN,CAAgB,YAAK;IACnBF,aAAa,CAACG,OAAd,GAAwBL,QAAxB;EACD,CAFD,EAEG,CAACA,QAAD,CAFH;EAIAF,KAAK,CAACM,SAAN,CAAgB,YAAK;IACnB,SAASE,IAAT,GAAa;MACXJ,aAAa,CAACG,OAAd;IACD;;IAED,IAAIJ,KAAK,KAAK,IAAd,EAAoB;MAClB,IAAMM,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOL,KAAP,CAAtB;MACA,OAAO;QAAA,OAAMQ,aAAa,CAACF,EAAD,CAAnB;MAAA,CAAP;IACD;EACF,CATD,EASG,CAACN,KAAD,CATH;AAUD","names":["React","useInterval","callback","delay","savedCallback","useRef","useEffect","current","tick","id","setInterval","clearInterval"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/useInterval.ts"],"sourcesContent":["import * as React from 'react';\n\n/** This is a custom React hook in a format suggest by Dan Abramov in a blog post here:\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/. It allows setInterval to be used\n * declaratively in functional React components.\n */\n\nexport function useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = React.useRef(() => {});\n\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  React.useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n"]},"metadata":{},"sourceType":"module"}