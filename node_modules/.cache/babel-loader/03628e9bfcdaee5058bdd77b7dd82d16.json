{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util'; // Recursively find JumpLinkItems and return an array of all their scrollNodes\n\nconst getScrollItems = (children, res) => {\n  React.Children.forEach(children, child => {\n    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n      const scrollNode = child.props.node || child.props.href;\n\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)));\n        } else {\n          res.push(document.querySelector(scrollNode));\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\n\nfunction isResponsive(jumpLinks) {\n  // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return jumpLinks && getComputedStyle(jumpLinks).getPropertyValue(cssToggleDisplayVar.name).includes('block');\n}\n\nexport const JumpLinks = _a => {\n  var {\n    isCentered,\n    isVertical,\n    children,\n    label,\n    'aria-label': ariaLabel = typeof label === 'string' ? label : null,\n    scrollableSelector,\n    activeIndex: activeIndexProp = 0,\n    offset = 0,\n    expandable,\n    isExpanded: isExpandedProp = false,\n    alwaysShowLabel = true,\n    toggleAriaLabel = 'Toggle jump links',\n    className\n  } = _a,\n      props = __rest(_a, [\"isCentered\", \"isVertical\", \"children\", \"label\", 'aria-label', \"scrollableSelector\", \"activeIndex\", \"offset\", \"expandable\", \"isExpanded\", \"alwaysShowLabel\", \"toggleAriaLabel\", \"className\"]);\n\n  const hasScrollSpy = Boolean(scrollableSelector);\n  const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n  const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n  const [isExpanded, setIsExpanded] = React.useState(isExpandedProp); // Boolean to disable scroll listener from overriding active state of clicked jumplink\n\n  const isLinkClicked = React.useRef(false); // Allow expanding to be controlled for a niche use case\n\n  React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n  const navRef = React.useRef();\n  let scrollableElement;\n  const scrollSpy = React.useCallback(() => {\n    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n\n    if (isLinkClicked.current) {\n      isLinkClicked.current = false;\n      return;\n    }\n\n    const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n    window.requestAnimationFrame(() => {\n      let newScrollItems = scrollItems; // Items might have rendered after this component. Do a quick refresh.\n\n      if (!newScrollItems[0] || newScrollItems.includes(null)) {\n        newScrollItems = getScrollItems(children, []);\n        setScrollItems(newScrollItems);\n      }\n\n      const scrollElements = newScrollItems.map((e, index) => ({\n        y: e ? e.offsetTop : null,\n        index\n      })).filter(_ref => {\n        let {\n          y\n        } = _ref;\n        return y !== null;\n      }).sort((e1, e2) => e2.y - e1.y);\n\n      for (const {\n        y,\n        index\n      } of scrollElements) {\n        if (scrollPosition >= y) {\n          return setActiveIndex(index);\n        }\n      }\n    });\n  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n  React.useEffect(() => {\n    scrollableElement = document.querySelector(scrollableSelector);\n\n    if (!(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n\n    scrollableElement.addEventListener('scroll', scrollSpy);\n    return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n  }, [scrollableSelector, scrollSpy]);\n  React.useEffect(() => {\n    scrollSpy();\n  }, []);\n  let jumpLinkIndex = 0;\n\n  const cloneChildren = children => !hasScrollSpy ? children : React.Children.map(children, child => {\n    if (child.type === JumpLinksItem) {\n      const {\n        onClick: onClickProp,\n        isActive: isActiveProp\n      } = child.props;\n      const itemIndex = jumpLinkIndex++;\n      const scrollItem = scrollItems[itemIndex];\n      return React.cloneElement(child, {\n        onClick(ev) {\n          isLinkClicked.current = true; // Items might have rendered after this component. Do a quick refresh.\n\n          let newScrollItems;\n\n          if (!scrollItem) {\n            newScrollItems = getScrollItems(children, []);\n            setScrollItems(newScrollItems);\n          }\n\n          const newScrollItem = scrollItem || newScrollItems[itemIndex];\n\n          if (newScrollItem) {\n            // we have to support scrolling to an offset due to sticky sidebar\n            const scrollableElement = document.querySelector(scrollableSelector);\n\n            if (scrollableElement instanceof HTMLElement) {\n              if (isResponsive(navRef.current)) {\n                // Remove class immediately so we can get collapsed height\n                if (navRef.current) {\n                  navRef.current.classList.remove(styles.modifiers.expanded);\n                }\n\n                let stickyParent = navRef.current && navRef.current.parentElement;\n\n                while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                  stickyParent = stickyParent.parentElement;\n                }\n\n                setIsExpanded(false);\n\n                if (stickyParent) {\n                  offset += stickyParent.scrollHeight;\n                }\n              }\n\n              scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n            }\n\n            newScrollItem.focus();\n            ev.preventDefault();\n            setActiveIndex(itemIndex);\n          }\n\n          if (onClickProp) {\n            onClickProp(ev);\n          }\n        },\n\n        isActive: isActiveProp || activeIndex === itemIndex,\n        children: cloneChildren(child.props.children)\n      });\n    } else if (child.type === React.Fragment) {\n      return cloneChildren(child.props.children);\n    } else if (child.type === JumpLinksList) {\n      return React.cloneElement(child, {\n        children: cloneChildren(child.props.children)\n      });\n    }\n\n    return child;\n  });\n\n  return React.createElement(\"nav\", Object.assign({\n    className: css(styles.jumpLinks, isCentered && styles.modifiers.center, isVertical && styles.modifiers.vertical, formatBreakpointMods(expandable, styles), isExpanded && styles.modifiers.expanded, className),\n    \"aria-label\": ariaLabel,\n    ref: navRef\n  }, props), React.createElement(\"div\", {\n    className: styles.jumpLinksMain\n  }, React.createElement(\"div\", {\n    className: css('pf-c-jump-links__header')\n  }, expandable && React.createElement(\"div\", {\n    className: styles.jumpLinksToggle\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    onClick: () => setIsExpanded(!isExpanded),\n    \"aria-label\": toggleAriaLabel,\n    \"aria-expanded\": isExpanded\n  }, React.createElement(\"span\", {\n    className: styles.jumpLinksToggleIcon\n  }, React.createElement(AngleRightIcon, null)), label && React.createElement(\"span\", {\n    className: css(styles.jumpLinksToggleText)\n  }, \" \", label, \" \"))), label && alwaysShowLabel && React.createElement(\"div\", {\n    className: css(styles.jumpLinksLabel)\n  }, label)), React.createElement(\"ul\", {\n    className: styles.jumpLinksList\n  }, cloneChildren(children))));\n};\nJumpLinks.displayName = 'JumpLinks';","map":{"version":3,"mappings":"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","names":["React","css","styles","sidebarStyles","JumpLinksItem","JumpLinksList","formatBreakpointMods","Button","AngleRightIcon","cssToggleDisplayVar","canUseDOM","getScrollItems","children","res","Children","forEach","child","document","getElementById","querySelector","type","scrollNode","props","node","href","startsWith","push","substr","HTMLElement","Fragment","includes","isResponsive","jumpLinks","getComputedStyle","getPropertyValue","name","JumpLinks","_a","isCentered","isVertical","label","ariaLabel","scrollableSelector","activeIndex","activeIndexProp","offset","expandable","isExpanded","isExpandedProp","alwaysShowLabel","toggleAriaLabel","className","hasScrollSpy","Boolean","scrollItems","setScrollItems","useState","setActiveIndex","setIsExpanded","isLinkClicked","useRef","useEffect","navRef","scrollableElement","scrollSpy","useCallback","current","scrollPosition","Math","ceil","scrollTop","window","requestAnimationFrame","newScrollItems","scrollElements","map","e","index","y","offsetTop","filter","sort","e1","e2","addEventListener","removeEventListener","jumpLinkIndex","cloneChildren","onClick","onClickProp","isActive","isActiveProp","itemIndex","scrollItem","cloneElement","ev","newScrollItem","classList","remove","modifiers","expanded","stickyParent","parentElement","contains","sticky","scrollHeight","scrollTo","focus","preventDefault","center","vertical","ref","jumpLinksMain","jumpLinksToggle","variant","jumpLinksToggleIcon","jumpLinksToggleText","jumpLinksLabel","jumpLinksList","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/JumpLinks/JumpLinks.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/JumpLinks/jump-links';\nimport sidebarStyles from '@patternfly/react-styles/css/components/Sidebar/sidebar';\nimport { JumpLinksItem, JumpLinksItemProps } from './JumpLinksItem';\nimport { JumpLinksList } from './JumpLinksList';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { Button } from '../Button';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport cssToggleDisplayVar from '@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display';\nimport { canUseDOM } from '../../helpers/util';\n\nexport interface JumpLinksProps extends Omit<React.HTMLProps<HTMLElement>, 'label'> {\n  /** Whether to center children. */\n  isCentered?: boolean;\n  /** Whether the layout of children is vertical or horizontal. */\n  isVertical?: boolean;\n  /** Label to add to nav element. */\n  label?: React.ReactNode;\n  /** Flag to always show the label when using `expandable` */\n  alwaysShowLabel?: boolean;\n  /** Aria-label to add to nav element. Defaults to label. */\n  'aria-label'?: string;\n  /** Selector for the scrollable element to spy on. Not passing a selector disables spying. */\n  scrollableSelector?: string;\n  /** The index of the child Jump link to make active. */\n  activeIndex?: number;\n  /** Children nodes */\n  children?: React.ReactNode;\n  /** Offset to add to `scrollPosition`, potentially for a masthead which content scrolls under. */\n  offset?: number;\n  /** When to collapse/expand at different breakpoints */\n  expandable?: {\n    default?: 'expandable' | 'nonExpandable';\n    sm?: 'expandable' | 'nonExpandable';\n    md?: 'expandable' | 'nonExpandable';\n    lg?: 'expandable' | 'nonExpandable';\n    xl?: 'expandable' | 'nonExpandable';\n    '2xl'?: 'expandable' | 'nonExpandable';\n  };\n  /** On mobile whether or not the JumpLinks starts out expanded */\n  isExpanded?: boolean;\n  /** Aria label for expandable toggle */\n  toggleAriaLabel?: string;\n  /** Class for nav */\n  className?: string;\n}\n\n// Recursively find JumpLinkItems and return an array of all their scrollNodes\nconst getScrollItems = (children: React.ReactNode, res: HTMLElement[]) => {\n  React.Children.forEach(children, (child: any) => {\n    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {\n      const scrollNode = child.props.node || child.props.href;\n      if (typeof scrollNode === 'string') {\n        if (scrollNode.startsWith('#')) {\n          // Allow spaces and other special characters as `id`s to be nicer to consumers\n          // https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\n          res.push(document.getElementById(scrollNode.substr(1)) as HTMLElement);\n        } else {\n          res.push(document.querySelector(scrollNode) as HTMLElement);\n        }\n      } else if (scrollNode instanceof HTMLElement) {\n        res.push(scrollNode);\n      }\n    }\n    if ([React.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {\n      getScrollItems(child.props.children, res);\n    }\n  });\n  return res;\n};\n\nfunction isResponsive(jumpLinks: HTMLElement) {\n  // https://github.com/patternfly/patternfly/blob/main/src/patternfly/components/JumpLinks/jump-links.scss#L103\n  return (\n    jumpLinks &&\n    getComputedStyle(jumpLinks)\n      .getPropertyValue(cssToggleDisplayVar.name)\n      .includes('block')\n  );\n}\n\nexport const JumpLinks: React.FunctionComponent<JumpLinksProps> = ({\n  isCentered,\n  isVertical,\n  children,\n  label,\n  'aria-label': ariaLabel = typeof label === 'string' ? label : null,\n  scrollableSelector,\n  activeIndex: activeIndexProp = 0,\n  offset = 0,\n  expandable,\n  isExpanded: isExpandedProp = false,\n  alwaysShowLabel = true,\n  toggleAriaLabel = 'Toggle jump links',\n  className,\n  ...props\n}: JumpLinksProps) => {\n  const hasScrollSpy = Boolean(scrollableSelector);\n  const [scrollItems, setScrollItems] = React.useState(hasScrollSpy ? getScrollItems(children, []) : []);\n  const [activeIndex, setActiveIndex] = React.useState(activeIndexProp);\n  const [isExpanded, setIsExpanded] = React.useState(isExpandedProp);\n  // Boolean to disable scroll listener from overriding active state of clicked jumplink\n  const isLinkClicked = React.useRef(false);\n  // Allow expanding to be controlled for a niche use case\n  React.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);\n  const navRef = React.useRef<HTMLElement>();\n\n  let scrollableElement: HTMLElement;\n\n  const scrollSpy = React.useCallback(() => {\n    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    if (isLinkClicked.current) {\n      isLinkClicked.current = false;\n      return;\n    }\n    const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);\n    window.requestAnimationFrame(() => {\n      let newScrollItems = scrollItems;\n      // Items might have rendered after this component. Do a quick refresh.\n      if (!newScrollItems[0] || newScrollItems.includes(null)) {\n        newScrollItems = getScrollItems(children, []);\n        setScrollItems(newScrollItems);\n      }\n      const scrollElements = newScrollItems\n        .map((e, index) => ({\n          y: e ? e.offsetTop : null,\n          index\n        }))\n        .filter(({ y }) => y !== null)\n        .sort((e1, e2) => e2.y - e1.y);\n      for (const { y, index } of scrollElements) {\n        if (scrollPosition >= y) {\n          return setActiveIndex(index);\n        }\n      }\n    });\n  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);\n\n  React.useEffect(() => {\n    scrollableElement = document.querySelector(scrollableSelector) as HTMLElement;\n    if (!(scrollableElement instanceof HTMLElement)) {\n      return;\n    }\n    scrollableElement.addEventListener('scroll', scrollSpy);\n\n    return () => scrollableElement.removeEventListener('scroll', scrollSpy);\n  }, [scrollableSelector, scrollSpy]);\n\n  React.useEffect(() => {\n    scrollSpy();\n  }, []);\n\n  let jumpLinkIndex = 0;\n  const cloneChildren = (children: React.ReactNode): React.ReactNode =>\n    !hasScrollSpy\n      ? children\n      : React.Children.map(children, (child: any) => {\n          if (child.type === JumpLinksItem) {\n            const { onClick: onClickProp, isActive: isActiveProp } = child.props;\n            const itemIndex = jumpLinkIndex++;\n            const scrollItem = scrollItems[itemIndex];\n            return React.cloneElement(child as React.ReactElement<JumpLinksItemProps>, {\n              onClick(ev: React.MouseEvent<HTMLAnchorElement>) {\n                isLinkClicked.current = true;\n                // Items might have rendered after this component. Do a quick refresh.\n                let newScrollItems;\n                if (!scrollItem) {\n                  newScrollItems = getScrollItems(children, []);\n                  setScrollItems(newScrollItems);\n                }\n                const newScrollItem = scrollItem || newScrollItems[itemIndex];\n\n                if (newScrollItem) {\n                  // we have to support scrolling to an offset due to sticky sidebar\n                  const scrollableElement = document.querySelector(scrollableSelector) as HTMLElement;\n                  if (scrollableElement instanceof HTMLElement) {\n                    if (isResponsive(navRef.current)) {\n                      // Remove class immediately so we can get collapsed height\n                      if (navRef.current) {\n                        navRef.current.classList.remove(styles.modifiers.expanded);\n                      }\n                      let stickyParent = navRef.current && navRef.current.parentElement;\n                      while (stickyParent && !stickyParent.classList.contains(sidebarStyles.modifiers.sticky)) {\n                        stickyParent = stickyParent.parentElement;\n                      }\n                      setIsExpanded(false);\n                      if (stickyParent) {\n                        offset += stickyParent.scrollHeight;\n                      }\n                    }\n                    scrollableElement.scrollTo(0, newScrollItem.offsetTop - offset);\n                  }\n                  newScrollItem.focus();\n                  ev.preventDefault();\n                  setActiveIndex(itemIndex);\n                }\n                if (onClickProp) {\n                  onClickProp(ev);\n                }\n              },\n              isActive: isActiveProp || activeIndex === itemIndex,\n              children: cloneChildren(child.props.children)\n            });\n          } else if (child.type === React.Fragment) {\n            return cloneChildren(child.props.children);\n          } else if (child.type === JumpLinksList) {\n            return React.cloneElement(child, { children: cloneChildren(child.props.children) });\n          }\n          return child;\n        });\n\n  return (\n    <nav\n      className={css(\n        styles.jumpLinks,\n        isCentered && styles.modifiers.center,\n        isVertical && styles.modifiers.vertical,\n        formatBreakpointMods(expandable, styles),\n        isExpanded && styles.modifiers.expanded,\n        className\n      )}\n      aria-label={ariaLabel}\n      ref={navRef}\n      {...props}\n    >\n      <div className={styles.jumpLinksMain}>\n        <div className={css('pf-c-jump-links__header')}>\n          {expandable && (\n            <div className={styles.jumpLinksToggle}>\n              <Button\n                variant=\"plain\"\n                onClick={() => setIsExpanded(!isExpanded)}\n                aria-label={toggleAriaLabel}\n                aria-expanded={isExpanded}\n              >\n                <span className={styles.jumpLinksToggleIcon}>\n                  <AngleRightIcon />\n                </span>\n                {label && <span className={css(styles.jumpLinksToggleText)}> {label} </span>}\n              </Button>\n            </div>\n          )}\n          {label && alwaysShowLabel && <div className={css(styles.jumpLinksLabel)}>{label}</div>}\n        </div>\n        <ul className={styles.jumpLinksList}>{cloneChildren(children)}</ul>\n      </div>\n    </nav>\n  );\n};\nJumpLinks.displayName = 'JumpLinks';\n"]},"metadata":{},"sourceType":"module"}