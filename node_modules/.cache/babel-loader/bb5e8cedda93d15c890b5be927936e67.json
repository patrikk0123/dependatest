{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nlet isResizing = null;\nlet newSize = 0;\nexport const DrawerPanelContent = _a => {\n  var {\n    className = '',\n    id,\n    children,\n    hasNoBorder = false,\n    isResizable = false,\n    onResize,\n    minSize,\n    defaultSize,\n    maxSize,\n    increment = 5,\n    resizeAriaLabel = 'Resize',\n    widths,\n    colorVariant = DrawerColorVariant.default,\n    drawerContentRef\n  } = _a,\n      props = __rest(_a, [\"className\", \"id\", \"children\", \"hasNoBorder\", \"isResizable\", \"onResize\", \"minSize\", \"defaultSize\", \"maxSize\", \"increment\", \"resizeAriaLabel\", \"widths\", \"colorVariant\", \"drawerContentRef\"]);\n\n  const panel = React.useRef();\n  const splitterRef = React.useRef();\n  const [separatorValue, setSeparatorValue] = React.useState(0);\n  const {\n    position,\n    isExpanded,\n    isStatic,\n    onExpand,\n    drawerRef,\n    isInline\n  } = React.useContext(DrawerContext);\n  const hidden = isStatic ? false : !isExpanded;\n  const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n  let currWidth = 0;\n  let panelRect;\n  let right;\n  let left;\n  let bottom;\n  let setInitialVals = true;\n  React.useEffect(() => {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n\n  const calcValueNow = () => {\n    let splitterPos;\n    let drawerSize;\n\n    if (isInline && position === 'right') {\n      splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (isInline && position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (position === 'right') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'bottom') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n    }\n\n    const newSplitterPos = splitterPos / drawerSize * 100;\n    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n  };\n\n  const handleTouchStart = e => {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n\n  const handleMousedown = e => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n\n  const handleMouseMove = e => {\n    const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n\n  const handleTouchMove = e => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n\n  const handleControlMove = (e, controlPosition) => {\n    e.stopPropagation();\n\n    if (!isResizing) {\n      return;\n    }\n\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n\n    const mousePos = controlPosition;\n    let newSize = 0;\n\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  const handleMouseup = () => {\n    if (!isResizing) {\n      return;\n    }\n\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n\n  const handleTouchEnd = e => {\n    e.stopPropagation();\n\n    if (!isResizing) {\n      return;\n    }\n\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n\n  const callbackMouseMove = React.useCallback(handleMouseMove, []);\n  const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  const callbackTouchMove = React.useCallback(handleTouchMove, []);\n  const callbackMouseUp = React.useCallback(handleMouseup, []);\n\n  const handleKeys = e => {\n    const key = e.key;\n\n    if (key !== 'Escape' && key !== 'Enter' && key !== 'ArrowUp' && key !== 'ArrowDown' && key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      if (isResizing) {\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n\n    if (key === 'Escape' || key === 'Enter') {\n      onResize && onResize(currWidth, id);\n    }\n\n    const panelRect = panel.current.getBoundingClientRect();\n    newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    let delta = 0;\n\n    if (key === 'ArrowRight') {\n      delta = position === 'left' ? increment : -increment;\n    } else if (key === 'ArrowLeft') {\n      delta = position === 'left' ? -increment : increment;\n    } else if (key === 'ArrowUp') {\n      delta = increment;\n    } else if (key === 'ArrowDown') {\n      delta = -increment;\n    }\n\n    newSize = newSize + delta;\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  const boundaryCssVars = {};\n\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n\n  return React.createElement(GenerateId, {\n    prefix: \"pf-drawer-panel-\"\n  }, panelId => React.createElement(\"div\", Object.assign({\n    id: id || panelId,\n    className: css(styles.drawerPanel, isResizable && styles.modifiers.resizable, hasNoBorder && styles.modifiers.noBorder, formatBreakpointMods(widths, styles), colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200, className),\n    ref: panel,\n    onTransitionEnd: ev => {\n      if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n        onExpand();\n      }\n\n      setIsExpandedInternal(!hidden);\n    },\n    hidden: hidden\n  }, (defaultSize || minSize || maxSize) && {\n    style: boundaryCssVars\n  }, props), isExpandedInternal && React.createElement(React.Fragment, null, isResizable && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical),\n    role: \"separator\",\n    tabIndex: 0,\n    \"aria-orientation\": position === 'bottom' ? 'horizontal' : 'vertical',\n    \"aria-label\": resizeAriaLabel,\n    \"aria-valuenow\": separatorValue,\n    \"aria-valuemin\": 0,\n    \"aria-valuemax\": 100,\n    \"aria-controls\": id || panelId,\n    onMouseDown: handleMousedown,\n    onKeyDown: handleKeys,\n    onTouchStart: handleTouchStart,\n    ref: splitterRef\n  }, React.createElement(\"div\", {\n    className: css(styles.drawerSplitterHandle),\n    \"aria-hidden\": true\n  })), React.createElement(\"div\", {\n    className: css(styles.drawerPanelMain)\n  }, children)), !isResizable && children)));\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';","map":{"version":3,"mappings":"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","names":["React","styles","css","DrawerColorVariant","DrawerContext","formatBreakpointMods","GenerateId","isResizing","newSize","DrawerPanelContent","_a","className","id","children","hasNoBorder","isResizable","onResize","minSize","defaultSize","maxSize","increment","resizeAriaLabel","widths","colorVariant","default","drawerContentRef","props","panel","useRef","splitterRef","separatorValue","setSeparatorValue","useState","position","isExpanded","isStatic","onExpand","drawerRef","isInline","useContext","hidden","isExpandedInternal","setIsExpandedInternal","currWidth","panelRect","right","left","bottom","setInitialVals","useEffect","calcValueNow","splitterPos","drawerSize","current","getBoundingClientRect","top","newSplitterPos","Math","round","Number","EPSILON","handleTouchStart","e","stopPropagation","document","addEventListener","callbackTouchMove","passive","callbackTouchEnd","handleMousedown","preventDefault","callbackMouseMove","callbackMouseUp","classList","add","modifiers","resizing","handleMouseMove","mousePos","clientY","clientX","handleControlMove","handleTouchMove","stopImmediatePropagation","touchPos","touches","controlPosition","style","overflowAnchor","setProperty","handleMouseup","remove","removeEventListener","handleTouchEnd","useCallback","handleKeys","key","height","width","delta","boundaryCssVars","prefix","panelId","drawerPanel","resizable","noBorder","light200","light_200","ref","onTransitionEnd","ev","nativeEvent","propertyName","Fragment","drawerSplitter","vertical","role","tabIndex","onMouseDown","onKeyDown","onTouchStart","drawerSplitterHandle","drawerPanelMain","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Drawer/DrawerPanelContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface DrawerPanelContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the drawer. */\n  className?: string;\n  /** ID of the drawer panel */\n  id?: string;\n  /** Content to be rendered in the drawer panel. */\n  children?: React.ReactNode;\n  /** Flag indicating that the drawer panel should not have a border. */\n  hasNoBorder?: boolean;\n  /** Flag indicating that the drawer panel should be resizable. */\n  isResizable?: boolean;\n  /** Callback for resize end. */\n  onResize?: (width: number, id: string) => void;\n  /** The minimum size of a drawer, in either pixels or percentage. */\n  minSize?: string;\n  /** The starting size of a resizable drawer, in either pixels or percentage. */\n  defaultSize?: string;\n  /** The maximum size of a drawer, in either pixels or percentage. */\n  maxSize?: string;\n  /** The increment amount for keyboard drawer resizing, in pixels. */\n  increment?: number;\n  /** Aria label for the resizable drawer splitter. */\n  resizeAriaLabel?: string;\n  /** Width for drawer panel at various breakpoints. Overriden by resizable drawer minSize and defaultSize. */\n  widths?: {\n    default?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    lg?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    xl?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    '2xl'?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  };\n  /** Color variant of the background of the drawer panel */\n  colorVariant?: DrawerColorVariant | 'light-200' | 'default';\n  /** @hide Internal ref to drawer content */\n  drawerContentRef?: React.RefObject<HTMLDivElement>;\n}\nlet isResizing: boolean = null;\nlet newSize: number = 0;\n\nexport const DrawerPanelContent: React.FunctionComponent<DrawerPanelContentProps> = ({\n  className = '',\n  id,\n  children,\n  hasNoBorder = false,\n  isResizable = false,\n  onResize,\n  minSize,\n  defaultSize,\n  maxSize,\n  increment = 5,\n  resizeAriaLabel = 'Resize',\n  widths,\n  colorVariant = DrawerColorVariant.default,\n  drawerContentRef,\n  ...props\n}: DrawerPanelContentProps) => {\n  const panel = React.useRef<HTMLDivElement>();\n  const splitterRef = React.useRef<HTMLDivElement>();\n  const [separatorValue, setSeparatorValue] = React.useState(0);\n  const { position, isExpanded, isStatic, onExpand, drawerRef, isInline } = React.useContext(DrawerContext);\n  const hidden = isStatic ? false : !isExpanded;\n  const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n  let currWidth: number = 0;\n  let panelRect: DOMRect;\n  let right: number;\n  let left: number;\n  let bottom: number;\n  let setInitialVals: boolean = true;\n\n  React.useEffect(() => {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n\n  const calcValueNow = () => {\n    let splitterPos;\n    let drawerSize;\n\n    if (isInline && position === 'right') {\n      splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (isInline && position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (position === 'right') {\n      splitterPos =\n        drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'left') {\n      splitterPos =\n        splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'bottom') {\n      splitterPos =\n        drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n    }\n\n    const newSplitterPos = (splitterPos / drawerSize) * 100;\n    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n  };\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, { passive: false });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n\n  const handleMousedown = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n\n  const handleTouchMove = (e: TouchEvent) => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n\n  const handleControlMove = (e: MouseEvent | TouchEvent, controlPosition: number) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n    const mousePos = controlPosition;\n    let newSize = 0;\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  const handleMouseup = () => {\n    if (!isResizing) {\n      return;\n    }\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n\n  const handleTouchEnd = (e: TouchEvent) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n\n  const callbackMouseMove = React.useCallback(handleMouseMove, []);\n  const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  const callbackTouchMove = React.useCallback(handleTouchMove, []);\n  const callbackMouseUp = React.useCallback(handleMouseup, []);\n\n  const handleKeys = (e: React.KeyboardEvent) => {\n    const key = e.key;\n    if (\n      key !== 'Escape' &&\n      key !== 'Enter' &&\n      key !== 'ArrowUp' &&\n      key !== 'ArrowDown' &&\n      key !== 'ArrowLeft' &&\n      key !== 'ArrowRight'\n    ) {\n      if (isResizing) {\n        e.preventDefault();\n      }\n      return;\n    }\n    e.preventDefault();\n\n    if (key === 'Escape' || key === 'Enter') {\n      onResize && onResize(currWidth, id);\n    }\n    const panelRect = panel.current.getBoundingClientRect();\n    newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    let delta = 0;\n    if (key === 'ArrowRight') {\n      delta = position === 'left' ? increment : -increment;\n    } else if (key === 'ArrowLeft') {\n      delta = position === 'left' ? -increment : increment;\n    } else if (key === 'ArrowUp') {\n      delta = increment;\n    } else if (key === 'ArrowDown') {\n      delta = -increment;\n    }\n    newSize = newSize + delta;\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n  const boundaryCssVars: any = {};\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n  return (\n    <GenerateId prefix=\"pf-drawer-panel-\">\n      {panelId => (\n        <div\n          id={id || panelId}\n          className={css(\n            styles.drawerPanel,\n            isResizable && styles.modifiers.resizable,\n            hasNoBorder && styles.modifiers.noBorder,\n            formatBreakpointMods(widths, styles),\n            colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200,\n            className\n          )}\n          ref={panel}\n          onTransitionEnd={ev => {\n            if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n              onExpand();\n            }\n            setIsExpandedInternal(!hidden);\n          }}\n          hidden={hidden}\n          {...((defaultSize || minSize || maxSize) && {\n            style: boundaryCssVars as React.CSSProperties\n          })}\n          {...props}\n        >\n          {isExpandedInternal && (\n            <React.Fragment>\n              {isResizable && (\n                <React.Fragment>\n                  <div\n                    className={css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical)}\n                    role=\"separator\"\n                    tabIndex={0}\n                    aria-orientation={position === 'bottom' ? 'horizontal' : 'vertical'}\n                    aria-label={resizeAriaLabel}\n                    aria-valuenow={separatorValue}\n                    aria-valuemin={0}\n                    aria-valuemax={100}\n                    aria-controls={id || panelId}\n                    onMouseDown={handleMousedown}\n                    onKeyDown={handleKeys}\n                    onTouchStart={handleTouchStart}\n                    ref={splitterRef}\n                  >\n                    <div className={css(styles.drawerSplitterHandle)} aria-hidden></div>\n                  </div>\n                  <div className={css(styles.drawerPanelMain)}>{children}</div>\n                </React.Fragment>\n              )}\n              {!isResizable && children}\n            </React.Fragment>\n          )}\n        </div>\n      )}\n    </GenerateId>\n  );\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';\n"]},"metadata":{},"sourceType":"module"}