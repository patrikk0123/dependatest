{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nexport var TextAreResizeOrientation;\n\n(function (TextAreResizeOrientation) {\n  TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n  TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n  TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\n\nexport class TextAreaBase extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n      const field = event.currentTarget;\n\n      if (this.props.autoResize && canUseDOM) {\n        field.style.setProperty(heightToken.name, 'inherit');\n        const computed = window.getComputedStyle(field); // Calculate the height\n\n        const height = parseInt(computed.getPropertyValue('border-top-width')) + parseInt(computed.getPropertyValue('padding-top')) + field.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom')) + parseInt(computed.getPropertyValue('border-bottom-width'));\n        field.style.setProperty(heightToken.name, `${height}px`);\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(field.value, event);\n      }\n    };\n\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      value,\n      validated,\n      isRequired,\n      isDisabled,\n      isIconSprite,\n      isReadOnly,\n      resizeOrientation,\n      innerRef,\n      readOnly,\n      disabled,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      autoResize,\n      onChange\n    } = _a,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"isReadOnly\", \"resizeOrientation\", \"innerRef\", \"readOnly\", \"disabled\", \"autoResize\", \"onChange\"]);\n\n    const orientation = `resize${capitalize(resizeOrientation)}`;\n    return React.createElement(\"textarea\", Object.assign({\n      className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n      onChange: this.handleChange\n    }, typeof this.props.defaultValue !== 'string' && {\n      value\n    }, {\n      \"aria-invalid\": validated === ValidatedOptions.error,\n      required: isRequired,\n      disabled: isDisabled || disabled,\n      readOnly: isReadOnly || readOnly,\n      ref: innerRef\n    }, props));\n  }\n\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n  innerRef: React.createRef(),\n  className: '',\n  isRequired: false,\n  isDisabled: false,\n  isIconSprite: false,\n  validated: 'default',\n  resizeOrientation: 'both',\n  'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => React.createElement(TextAreaBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTextArea.displayName = 'TextArea';","map":{"version":3,"mappings":"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","names":["React","styles","heightToken","css","capitalize","ValidatedOptions","canUseDOM","TextAreResizeOrientation","TextAreaBase","Component","constructor","props","event","field","currentTarget","autoResize","style","setProperty","name","computed","window","getComputedStyle","height","parseInt","getPropertyValue","scrollHeight","onChange","value","id","console","error","render","_a","className","validated","isRequired","isDisabled","isIconSprite","isReadOnly","resizeOrientation","innerRef","readOnly","disabled","orientation","formControl","modifiers","iconSprite","both","success","warning","handleChange","defaultValue","required","ref","createRef","TextArea","forwardRef","Object","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/TextArea/TextArea.tsx"],"sourcesContent":["import * as React from 'react';\nimport { HTMLProps } from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\n\nexport enum TextAreResizeOrientation {\n  horizontal = 'horizontal',\n  vertical = 'vertical',\n  both = 'both'\n}\n\nexport interface TextAreaProps extends Omit<HTMLProps<HTMLTextAreaElement>, 'onChange' | 'ref'> {\n  /** Additional classes added to the TextArea. */\n  className?: string;\n  /** Flag to show if the TextArea is required. */\n  isRequired?: boolean;\n  /** Flag to show if the TextArea is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the TextArea is read only. */\n  isReadOnly?: boolean;\n  /** Use the external file instead of a data URI */\n  isIconSprite?: boolean;\n  /** Flag to modify height based on contents. */\n  autoResize?: boolean;\n  /** Value to indicate if the textarea is modified to show that validation state.\n   * If set to success, textarea will be modified to indicate valid state.\n   * If set to error, textarea will be modified to indicate error state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Value of the TextArea. */\n  value?: string | number;\n  /** A callback for when the TextArea value changes. */\n  onChange?: (value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  /** Sets the orientation to limit the resize to */\n  resizeOrientation?: 'horizontal' | 'vertical' | 'both';\n  /** Custom flag to show that the TextArea requires an associated id or aria-label. */\n  'aria-label'?: string;\n  /** A reference object to attach to the textarea. */\n  innerRef?: React.RefObject<any>;\n}\n\nexport class TextAreaBase extends React.Component<TextAreaProps> {\n  static displayName = 'TextArea';\n  static defaultProps: TextAreaProps = {\n    innerRef: React.createRef<HTMLTextAreaElement>(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    isIconSprite: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null as string\n  };\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  private handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n    const field = event.currentTarget;\n    if (this.props.autoResize && canUseDOM) {\n      field.style.setProperty(heightToken.name, 'inherit');\n      const computed = window.getComputedStyle(field);\n      // Calculate the height\n      const height =\n        parseInt(computed.getPropertyValue('border-top-width')) +\n        parseInt(computed.getPropertyValue('padding-top')) +\n        field.scrollHeight +\n        parseInt(computed.getPropertyValue('padding-bottom')) +\n        parseInt(computed.getPropertyValue('border-bottom-width'));\n      field.style.setProperty(heightToken.name, `${height}px`);\n    }\n    if (this.props.onChange) {\n      this.props.onChange(field.value, event);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      value,\n      validated,\n      isRequired,\n      isDisabled,\n      isIconSprite,\n      isReadOnly,\n      resizeOrientation,\n      innerRef,\n      readOnly,\n      disabled,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      autoResize,\n      onChange,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const orientation = `resize${capitalize(resizeOrientation)}` as 'resizeVertical' | 'resizeHorizontal';\n    return (\n      <textarea\n        className={css(\n          styles.formControl,\n          isIconSprite && styles.modifiers.iconSprite,\n          className,\n          resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation],\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        onChange={this.handleChange}\n        {...(typeof this.props.defaultValue !== 'string' && { value })}\n        aria-invalid={validated === ValidatedOptions.error}\n        required={isRequired}\n        disabled={isDisabled || disabled}\n        readOnly={isReadOnly || readOnly}\n        ref={innerRef}\n        {...props}\n      />\n    );\n  }\n}\n\nexport const TextArea = React.forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => (\n  <TextAreaBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nTextArea.displayName = 'TextArea';\n"]},"metadata":{},"sourceType":"module"}