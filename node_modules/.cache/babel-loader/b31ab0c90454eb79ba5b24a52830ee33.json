{"ast":null,"code":"export let AUTH_ROLE;\n\n(function (AUTH_ROLE) {\n  AUTH_ROLE[\"Admin\"] = \"admin\";\n  AUTH_ROLE[\"User\"] = \"user\";\n  AUTH_ROLE[\"System\"] = \"system-user\";\n  AUTH_ROLE[\"Power\"] = \"power-user\";\n})(AUTH_ROLE || (AUTH_ROLE = {}));\n\nclass KeycloakServiceMock {\n  constructor() {\n    this.initialized = false;\n    this.user = void 0;\n    this.isLogin = false;\n    this.roles = ['Admin'];\n    this.initialized = true;\n  }\n\n  isInitialized() {\n    return new Promise(resolve => {\n      resolve(this.initialized);\n    });\n  }\n\n  isAuthenticated() {\n    return this.isLogin;\n  }\n\n  login(user) {\n    this.user = user;\n    this.isLogin = true;\n    return new Promise(resolve => {\n      resolve(true);\n    });\n  }\n\n  logout() {\n    this.isLogin = false;\n    this.user = undefined;\n  }\n\n  getToken() {\n    return 'example_token';\n  }\n\n  getUser() {\n    return this.user;\n  }\n\n  hasRealmRole(role) {\n    if (this.roles.includes(role)) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexport const keycloakService = new KeycloakServiceMock();","map":{"version":3,"names":["AUTH_ROLE","KeycloakServiceMock","constructor","initialized","user","isLogin","roles","isInitialized","Promise","resolve","isAuthenticated","login","logout","undefined","getToken","getUser","hasRealmRole","role","includes","keycloakService"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/services/__mocks__/keycloakService.ts"],"sourcesContent":["export enum AUTH_ROLE {\n  Admin = 'admin',\n  User = 'user',\n  System = 'system-user',\n  Power = 'power-user',\n}\n\nclass KeycloakServiceMock {\n  private initialized: boolean = false;\n  private user: any;\n  private isLogin: boolean = false;\n  private roles: String[] = ['Admin'];\n\n  constructor() {\n    this.initialized = true;\n  }\n\n  public isInitialized(): Promise<any> {\n    return new Promise<any>((resolve) => {\n      resolve(this.initialized);\n    });\n  }\n\n  public isAuthenticated(): boolean {\n    return this.isLogin;\n  }\n\n  public login(user: String): Promise<any> {\n    this.user = user;\n    this.isLogin = true;\n    return new Promise<any>((resolve) => {\n      resolve(true);\n    });\n  }\n\n  public logout(): void {\n    this.isLogin = false;\n    this.user = undefined;\n  }\n\n  public getToken(): String {\n    return 'example_token';\n  }\n\n  public getUser(): String {\n    return this.user;\n  }\n\n  public hasRealmRole(role: String): boolean {\n    if (this.roles.includes(role)) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport const keycloakService = new KeycloakServiceMock();\n"],"mappings":"AAAA,WAAYA,SAAZ;;WAAYA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;GAAAA,S,KAAAA,S;;AAOZ,MAAMC,mBAAN,CAA0B;EAMxBC,WAAW,GAAG;IAAA,KALNC,WAKM,GALiB,KAKjB;IAAA,KAJNC,IAIM;IAAA,KAHNC,OAGM,GAHa,KAGb;IAAA,KAFNC,KAEM,GAFY,CAAC,OAAD,CAEZ;IACZ,KAAKH,WAAL,GAAmB,IAAnB;EACD;;EAEMI,aAAa,GAAiB;IACnC,OAAO,IAAIC,OAAJ,CAAkBC,OAAD,IAAa;MACnCA,OAAO,CAAC,KAAKN,WAAN,CAAP;IACD,CAFM,CAAP;EAGD;;EAEMO,eAAe,GAAY;IAChC,OAAO,KAAKL,OAAZ;EACD;;EAEMM,KAAK,CAACP,IAAD,EAA6B;IACvC,KAAKA,IAAL,GAAYA,IAAZ;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,OAAO,IAAIG,OAAJ,CAAkBC,OAAD,IAAa;MACnCA,OAAO,CAAC,IAAD,CAAP;IACD,CAFM,CAAP;EAGD;;EAEMG,MAAM,GAAS;IACpB,KAAKP,OAAL,GAAe,KAAf;IACA,KAAKD,IAAL,GAAYS,SAAZ;EACD;;EAEMC,QAAQ,GAAW;IACxB,OAAO,eAAP;EACD;;EAEMC,OAAO,GAAW;IACvB,OAAO,KAAKX,IAAZ;EACD;;EAEMY,YAAY,CAACC,IAAD,EAAwB;IACzC,IAAI,KAAKX,KAAL,CAAWY,QAAX,CAAoBD,IAApB,CAAJ,EAA+B;MAC7B,OAAO,IAAP;IACD;;IACD,OAAO,KAAP;EACD;;AA9CuB;;AAiD1B,OAAO,MAAME,eAAe,GAAG,IAAIlB,mBAAJ,EAAxB"},"metadata":{},"sourceType":"module"}