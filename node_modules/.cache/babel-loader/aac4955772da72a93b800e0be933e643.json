{"ast":null,"code":"import _toConsumableArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nvar gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid',\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\nexport var DataListWrapModifier;\n\n(function (DataListWrapModifier) {\n  DataListWrapModifier[\"nowrap\"] = \"nowrap\";\n  DataListWrapModifier[\"truncate\"] = \"truncate\";\n  DataListWrapModifier[\"breakWord\"] = \"breakWord\";\n})(DataListWrapModifier || (DataListWrapModifier = {}));\n\nexport var DataListContext = React.createContext({\n  isSelectable: false\n});\n\nvar moveItem = function moveItem(arr, i1, toIndex) {\n  var fromIndex = arr.indexOf(i1);\n\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n\n  var temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n  return arr;\n};\n\nexport var DataList = /*#__PURE__*/function (_React$Component) {\n  _inherits(DataList, _React$Component);\n\n  var _super = _createSuper(DataList);\n\n  function DataList(props) {\n    var _this;\n\n    _classCallCheck(this, DataList);\n\n    _this = _super.call(this, props);\n    _this.dragFinished = false;\n    _this.html5DragDrop = false;\n    _this.arrayCopy = React.Children.toArray(_this.props.children);\n    _this.ref = React.createRef();\n    _this.state = {\n      tempItemOrder: [],\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    };\n\n    _this.getIndex = function (id) {\n      return Array.from(_this.ref.current.children).findIndex(function (item) {\n        return item.id === id;\n      });\n    };\n\n    _this.move = function (itemOrder) {\n      var ulNode = _this.ref.current;\n      var nodes = Array.from(ulNode.children);\n\n      if (nodes.map(function (node) {\n        return node.id;\n      }).every(function (id, i) {\n        return id === itemOrder[i];\n      })) {\n        return;\n      }\n\n      while (ulNode.firstChild) {\n        ulNode.removeChild(ulNode.lastChild);\n      }\n\n      itemOrder.forEach(function (id) {\n        ulNode.appendChild(nodes.find(function (n) {\n          return n.id === id;\n        }));\n      });\n    };\n\n    _this.dragStart0 = function (el) {\n      var onDragStart = _this.props.onDragStart;\n      var draggedItemId = el.id;\n      el.classList.add(styles.modifiers.ghostRow);\n      el.setAttribute('aria-pressed', 'true');\n\n      _this.setState({\n        draggedItemId: draggedItemId,\n        dragging: true\n      });\n\n      onDragStart && onDragStart(draggedItemId);\n    };\n\n    _this.dragStart = function (evt) {\n      evt.dataTransfer.effectAllowed = 'move';\n      evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n\n      _this.dragStart0(evt.currentTarget);\n    };\n\n    _this.onDragCancel = function () {\n      _this.move(_this.props.itemOrder);\n\n      Array.from(_this.ref.current.children).forEach(function (el) {\n        el.classList.remove(styles.modifiers.ghostRow);\n        el.classList.remove(styles.modifiers.dragOver);\n        el.setAttribute('aria-pressed', 'false');\n      });\n\n      _this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n\n      if (_this.props.onDragCancel) {\n        _this.props.onDragCancel();\n      }\n    };\n\n    _this.dragLeave = function (evt) {\n      // This event false fires when we call `this.move()`, so double check we're out of zone\n      if (!_this.isValidDrop(evt)) {\n        _this.move(_this.props.itemOrder);\n\n        _this.setState({\n          draggingToItemIndex: null\n        });\n      }\n    };\n\n    _this.dragEnd0 = function (el) {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n\n      _this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n    };\n\n    _this.dragEnd = function (evt) {\n      _this.dragEnd0(evt.target);\n    };\n\n    _this.isValidDrop = function (evt) {\n      var ulRect = _this.ref.current.getBoundingClientRect();\n\n      return evt.clientX > ulRect.x && evt.clientX < ulRect.x + ulRect.width && evt.clientY > ulRect.y && evt.clientY < ulRect.y + ulRect.height;\n    };\n\n    _this.drop = function (evt) {\n      if (_this.isValidDrop(evt)) {\n        _this.props.onDragFinish(_this.state.tempItemOrder);\n      } else {\n        _this.onDragCancel();\n      }\n    };\n\n    _this.dragOver0 = function (id) {\n      var draggingToItemIndex = Array.from(_this.ref.current.children).findIndex(function (item) {\n        return item.id === id;\n      });\n\n      if (draggingToItemIndex !== _this.state.draggingToItemIndex) {\n        var tempItemOrder = moveItem(_toConsumableArray(_this.props.itemOrder), _this.state.draggedItemId, draggingToItemIndex);\n\n        _this.move(tempItemOrder);\n\n        _this.setState({\n          draggingToItemIndex: draggingToItemIndex,\n          tempItemOrder: tempItemOrder\n        });\n      }\n    };\n\n    _this.dragOver = function (evt) {\n      evt.preventDefault();\n      var curListItem = evt.target.closest('li');\n\n      if (!curListItem || !_this.ref.current.contains(curListItem) || curListItem.id === _this.state.draggedItemId) {\n        // We're going nowhere, don't bother calling `dragOver0`\n        return null;\n      } else {\n        _this.dragOver0(curListItem.id);\n      }\n    };\n\n    _this.handleDragButtonKeys = function (evt) {\n      var dragging = _this.state.dragging;\n\n      if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !_this.html5DragDrop) {\n        if (dragging) {\n          evt.preventDefault();\n        }\n\n        return;\n      }\n\n      evt.preventDefault();\n      var dragItem = evt.target.closest('li');\n\n      if (evt.key === ' ' || evt.key === 'Enter' && !dragging) {\n        _this.dragStart0(dragItem);\n      } else if (dragging) {\n        if (evt.key === 'Escape' || evt.key === 'Enter') {\n          _this.setState({\n            dragging: false\n          });\n\n          _this.dragFinished = true;\n\n          if (evt.key === 'Enter') {\n            _this.dragEnd0(dragItem);\n\n            _this.props.onDragFinish(_this.state.tempItemOrder);\n          } else {\n            _this.onDragCancel();\n          }\n        } else if (evt.key === 'ArrowUp') {\n          var nextSelection = dragItem.previousSibling;\n\n          if (nextSelection) {\n            _this.dragOver0(nextSelection.id);\n\n            dragItem.querySelector(\".\".concat(styles.dataListItemDraggableButton)).focus();\n          }\n        } else if (evt.key === 'ArrowDown') {\n          var _nextSelection = dragItem.nextSibling;\n\n          if (_nextSelection) {\n            _this.dragOver0(_nextSelection.id);\n\n            dragItem.querySelector(\".\".concat(styles.dataListItemDraggableButton)).focus();\n          }\n        }\n      }\n    };\n\n    _this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n\n    if (_this.html5DragDrop) {\n      // eslint-disable-next-line no-console\n      console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n    }\n\n    return _this;\n  }\n\n  _createClass(DataList, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps) {\n      if (this.dragFinished) {\n        this.dragFinished = false;\n        this.setState({\n          tempItemOrder: _toConsumableArray(this.props.itemOrder),\n          draggedItemId: null,\n          dragging: false\n        });\n      }\n\n      if (oldProps.itemOrder !== this.props.itemOrder) {\n        this.move(this.props.itemOrder);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          onSelectDataListItem = _a.onSelectDataListItem,\n          selectedDataListItemId = _a.selectedDataListItemId,\n          isCompact = _a.isCompact,\n          wrapModifier = _a.wrapModifier,\n          onDragStart = _a.onDragStart,\n          onDragMove = _a.onDragMove,\n          onDragCancel = _a.onDragCancel,\n          onDragFinish = _a.onDragFinish,\n          gridBreakpoint = _a.gridBreakpoint,\n          itemOrder = _a.itemOrder,\n          selectableRow = _a.selectableRow,\n          props = __rest(_a, [\"className\", \"children\", \"onSelectDataListItem\", \"selectedDataListItemId\", \"isCompact\", \"wrapModifier\", \"onDragStart\", \"onDragMove\", \"onDragCancel\", \"onDragFinish\", \"gridBreakpoint\", \"itemOrder\", \"selectableRow\"]);\n\n      var dragging = this.state.dragging;\n      var isSelectable = onSelectDataListItem !== undefined;\n\n      var updateSelectedDataListItem = function updateSelectedDataListItem(id) {\n        onSelectDataListItem(id);\n      };\n\n      var dragProps = this.html5DragDrop && {\n        onDragOver: this.dragOver,\n        onDrop: this.dragOver,\n        onDragLeave: this.dragLeave\n      };\n      return React.createElement(DataListContext.Provider, {\n        value: {\n          isSelectable: isSelectable,\n          selectedDataListItemId: selectedDataListItemId,\n          updateSelectedDataListItem: updateSelectedDataListItem,\n          selectableRow: selectableRow,\n          isDraggable: this.html5DragDrop,\n          dragStart: this.dragStart,\n          dragEnd: this.dragEnd,\n          drop: this.drop,\n          dragKeyHandler: this.handleDragButtonKeys\n        }\n      }, React.createElement(\"ul\", Object.assign({\n        className: css(styles.dataList, isCompact && styles.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && styles.modifiers[wrapModifier], dragging && styles.modifiers.dragOver, className),\n        style: props.style\n      }, props, dragProps, {\n        ref: this.ref\n      }), children));\n    }\n  }]);\n\n  return DataList;\n}(React.Component);\nDataList.displayName = 'DataList';\nDataList.defaultProps = {\n  children: null,\n  className: '',\n  selectedDataListItemId: '',\n  isCompact: false,\n  gridBreakpoint: 'md',\n  wrapModifier: null\n};","map":{"version":3,"mappings":"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","names":["React","css","styles","stylesGrid","gridBreakpointClasses","none","modifiers","gridNone","always","sm","gridSm","md","gridMd","lg","gridLg","xl","gridXl","grid_2xl","DataListWrapModifier","DataListContext","createContext","isSelectable","moveItem","arr","i1","toIndex","fromIndex","indexOf","temp","splice","DataList","props","Children","toArray","children","createRef","tempItemOrder","draggedItemId","draggingToItemIndex","dragging","id","Array","from","ref","current","findIndex","item","itemOrder","ulNode","nodes","map","node","every","i","firstChild","removeChild","lastChild","forEach","appendChild","find","n","el","onDragStart","classList","add","ghostRow","setAttribute","setState","evt","dataTransfer","effectAllowed","setData","currentTarget","dragStart0","move","remove","dragOver","onDragCancel","isValidDrop","dragEnd0","target","ulRect","getBoundingClientRect","clientX","x","width","clientY","y","height","onDragFinish","state","preventDefault","curListItem","closest","contains","dragOver0","includes","key","html5DragDrop","dragItem","dragFinished","nextSelection","previousSibling","querySelector","dataListItemDraggableButton","focus","nextSibling","Boolean","onDragMove","console","warn","oldProps","className","_a","onSelectDataListItem","selectedDataListItemId","isCompact","wrapModifier","gridBreakpoint","selectableRow","__rest","undefined","updateSelectedDataListItem","dragProps","onDragOver","onDrop","onDragLeave","dragLeave","Provider","value","isDraggable","dragStart","dragEnd","drop","dragKeyHandler","handleDragButtonKeys","dataList","compact","style","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nconst gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid', // Placeholder per https://github.com/patternfly/patternfly-react/issues/4965#issuecomment-704984236\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\n\nexport enum DataListWrapModifier {\n  nowrap = 'nowrap',\n  truncate = 'truncate',\n  breakWord = 'breakWord'\n}\n\nexport interface SelectableRowObject {\n  /** Determines if only one of the selectable rows should be selectable at a time */\n  type: 'multiple' | 'single';\n  /** Callback that executes when the screen reader accessible element receives a change event */\n  onChange: (id: string, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport interface DataListProps extends Omit<React.HTMLProps<HTMLUListElement>, 'onDragStart' | 'ref'> {\n  /** Content rendered inside the DataList list */\n  children?: React.ReactNode;\n  /** Additional classes added to the DataList list */\n  className?: string;\n  /** Adds accessible text to the DataList list */\n  'aria-label': string;\n  /** Optional callback to make DataList selectable, fired when DataListItem selected */\n  onSelectDataListItem?: (id: string) => void;\n  /** @deprecated Optional callback to make DataList draggable, fired when dragging ends */\n  onDragFinish?: (newItemOrder: string[]) => void;\n  /** @deprecated Optional informational callback for dragging, fired when dragging starts */\n  onDragStart?: (id: string) => void;\n  /** @deprecated Optional informational callback for dragging, fired when an item moves */\n  onDragMove?: (oldIndex: number, newIndex: number) => void;\n  /** @deprecated Optional informational callback for dragging, fired when dragging is cancelled */\n  onDragCancel?: () => void;\n  /** Id of DataList item currently selected */\n  selectedDataListItemId?: string;\n  /** Flag indicating if DataList should have compact styling */\n  isCompact?: boolean;\n  /** Specifies the grid breakpoints  */\n  gridBreakpoint?: 'none' | 'always' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Determines which wrapping modifier to apply to the DataList */\n  wrapModifier?: DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord';\n  /** @deprecated Order of items in a draggable DataList */\n  itemOrder?: string[];\n  /** @beta Object that causes the data list to render hidden inputs which improve selectable item a11y */\n  selectableRow?: SelectableRowObject;\n}\n\ninterface DataListState {\n  draggedItemId: string;\n  draggingToItemIndex: number;\n  dragging: boolean;\n  tempItemOrder: string[];\n}\n\ninterface DataListContextProps {\n  isSelectable: boolean;\n  selectedDataListItemId: string;\n  updateSelectedDataListItem: (id: string) => void;\n  selectableRow?: SelectableRowObject;\n  isDraggable: boolean;\n  dragStart: (e: React.DragEvent) => void;\n  dragEnd: (e: React.DragEvent) => void;\n  drop: (e: React.DragEvent) => void;\n  dragKeyHandler: (e: React.KeyboardEvent) => void;\n}\n\nexport const DataListContext = React.createContext<Partial<DataListContextProps>>({\n  isSelectable: false\n});\n\nconst moveItem = (arr: string[], i1: string, toIndex: number) => {\n  const fromIndex = arr.indexOf(i1);\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n  const temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n\n  return arr;\n};\n\nexport class DataList extends React.Component<DataListProps, DataListState> {\n  static displayName = 'DataList';\n  static defaultProps: PickOptional<DataListProps> = {\n    children: null,\n    className: '',\n    selectedDataListItemId: '',\n    isCompact: false,\n    gridBreakpoint: 'md',\n    wrapModifier: null\n  };\n  dragFinished: boolean = false;\n  html5DragDrop: boolean = false;\n  arrayCopy: React.ReactElement[] = React.Children.toArray(this.props.children) as React.ReactElement[];\n  ref = React.createRef<HTMLUListElement>();\n\n  state: DataListState = {\n    tempItemOrder: [],\n    draggedItemId: null,\n    draggingToItemIndex: null,\n    dragging: false\n  };\n\n  constructor(props: DataListProps) {\n    super(props);\n\n    this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n    if (this.html5DragDrop) {\n      // eslint-disable-next-line no-console\n      console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n    }\n  }\n\n  componentDidUpdate(oldProps: DataListProps) {\n    if (this.dragFinished) {\n      this.dragFinished = false;\n\n      this.setState({\n        tempItemOrder: [...this.props.itemOrder],\n        draggedItemId: null,\n        dragging: false\n      });\n    }\n    if (oldProps.itemOrder !== this.props.itemOrder) {\n      this.move(this.props.itemOrder);\n    }\n  }\n\n  getIndex = (id: string) => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n\n  move = (itemOrder: string[]) => {\n    const ulNode = this.ref.current;\n    const nodes = Array.from(ulNode.children);\n    if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n      return;\n    }\n    while (ulNode.firstChild) {\n      ulNode.removeChild(ulNode.lastChild);\n    }\n\n    itemOrder.forEach(id => {\n      ulNode.appendChild(nodes.find(n => n.id === id));\n    });\n  };\n\n  dragStart0 = (el: HTMLElement) => {\n    const { onDragStart } = this.props;\n    const draggedItemId = el.id;\n\n    el.classList.add(styles.modifiers.ghostRow);\n    el.setAttribute('aria-pressed', 'true');\n    this.setState({\n      draggedItemId,\n      dragging: true\n    });\n    onDragStart && onDragStart(draggedItemId);\n  };\n\n  dragStart = (evt: React.DragEvent) => {\n    evt.dataTransfer.effectAllowed = 'move';\n    evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n    this.dragStart0(evt.currentTarget as HTMLElement);\n  };\n\n  onDragCancel = () => {\n    this.move(this.props.itemOrder);\n    Array.from(this.ref.current.children).forEach(el => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n    });\n    this.setState({\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    });\n\n    if (this.props.onDragCancel) {\n      this.props.onDragCancel();\n    }\n  };\n\n  dragLeave = (evt: React.DragEvent) => {\n    // This event false fires when we call `this.move()`, so double check we're out of zone\n    if (!this.isValidDrop(evt)) {\n      this.move(this.props.itemOrder);\n      this.setState({\n        draggingToItemIndex: null\n      });\n    }\n  };\n\n  dragEnd0 = (el: HTMLElement) => {\n    el.classList.remove(styles.modifiers.ghostRow);\n    el.classList.remove(styles.modifiers.dragOver);\n    el.setAttribute('aria-pressed', 'false');\n    this.setState({\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    });\n  };\n\n  dragEnd = (evt: React.DragEvent) => {\n    this.dragEnd0(evt.target as HTMLElement);\n  };\n\n  isValidDrop = (evt: React.DragEvent) => {\n    const ulRect = this.ref.current.getBoundingClientRect();\n    return (\n      evt.clientX > ulRect.x &&\n      evt.clientX < ulRect.x + ulRect.width &&\n      evt.clientY > ulRect.y &&\n      evt.clientY < ulRect.y + ulRect.height\n    );\n  };\n\n  drop = (evt: React.DragEvent) => {\n    if (this.isValidDrop(evt)) {\n      this.props.onDragFinish(this.state.tempItemOrder);\n    } else {\n      this.onDragCancel();\n    }\n  };\n\n  dragOver0 = (id: string) => {\n    const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n    if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n      const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n      this.move(tempItemOrder);\n\n      this.setState({\n        draggingToItemIndex,\n        tempItemOrder\n      });\n    }\n  };\n\n  dragOver = (evt: React.DragEvent): string | null => {\n    evt.preventDefault();\n\n    const curListItem = (evt.target as HTMLElement).closest('li');\n    if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n      // We're going nowhere, don't bother calling `dragOver0`\n      return null;\n    } else {\n      this.dragOver0(curListItem.id);\n    }\n  };\n\n  handleDragButtonKeys = (evt: React.KeyboardEvent) => {\n    const { dragging } = this.state;\n    if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !this.html5DragDrop) {\n      if (dragging) {\n        evt.preventDefault();\n      }\n      return;\n    }\n    evt.preventDefault();\n\n    const dragItem = (evt.target as Element).closest('li');\n\n    if (evt.key === ' ' || (evt.key === 'Enter' && !dragging)) {\n      this.dragStart0(dragItem);\n    } else if (dragging) {\n      if (evt.key === 'Escape' || evt.key === 'Enter') {\n        this.setState({\n          dragging: false\n        });\n        this.dragFinished = true;\n        if (evt.key === 'Enter') {\n          this.dragEnd0(dragItem);\n          this.props.onDragFinish(this.state.tempItemOrder);\n        } else {\n          this.onDragCancel();\n        }\n      } else if (evt.key === 'ArrowUp') {\n        const nextSelection = dragItem.previousSibling as HTMLElement;\n        if (nextSelection) {\n          this.dragOver0(nextSelection.id);\n          (dragItem.querySelector(`.${styles.dataListItemDraggableButton}`) as HTMLElement).focus();\n        }\n      } else if (evt.key === 'ArrowDown') {\n        const nextSelection = dragItem.nextSibling as HTMLElement;\n        if (nextSelection) {\n          this.dragOver0(nextSelection.id);\n          (dragItem.querySelector(`.${styles.dataListItemDraggableButton}`) as HTMLElement).focus();\n        }\n      }\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      onSelectDataListItem,\n      selectedDataListItemId,\n      isCompact,\n      wrapModifier,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onDragStart,\n      onDragMove,\n      onDragCancel,\n      onDragFinish,\n      gridBreakpoint,\n      itemOrder,\n      selectableRow,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const { dragging } = this.state;\n    const isSelectable = onSelectDataListItem !== undefined;\n\n    const updateSelectedDataListItem = (id: string) => {\n      onSelectDataListItem(id);\n    };\n\n    const dragProps = this.html5DragDrop && {\n      onDragOver: this.dragOver,\n      onDrop: this.dragOver,\n      onDragLeave: this.dragLeave\n    };\n\n    return (\n      <DataListContext.Provider\n        value={{\n          isSelectable,\n          selectedDataListItemId,\n          updateSelectedDataListItem,\n          selectableRow,\n          isDraggable: this.html5DragDrop,\n          dragStart: this.dragStart,\n          dragEnd: this.dragEnd,\n          drop: this.drop,\n          dragKeyHandler: this.handleDragButtonKeys\n        }}\n      >\n        <ul\n          className={css(\n            styles.dataList,\n            isCompact && styles.modifiers.compact,\n            gridBreakpointClasses[gridBreakpoint],\n            wrapModifier && styles.modifiers[wrapModifier],\n            dragging && styles.modifiers.dragOver,\n            className\n          )}\n          style={props.style}\n          {...props}\n          {...dragProps}\n          ref={this.ref}\n        >\n          {children}\n        </ul>\n      </DataListContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}