{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps } from '../../helpers';\nexport var ChipGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChipGroup, _React$Component);\n\n  var _super = _createSuper(ChipGroup);\n\n  function ChipGroup(props) {\n    var _this;\n\n    _classCallCheck(this, ChipGroup);\n\n    _this = _super.call(this, props);\n    _this.headingRef = React.createRef();\n\n    _this.toggleCollapse = function () {\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen,\n          isTooltipVisible: Boolean(_this.headingRef.current && _this.headingRef.current.offsetWidth < _this.headingRef.current.scrollWidth)\n        };\n      });\n    };\n\n    _this.state = {\n      isOpen: _this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(ChipGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      });\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel(id) {\n      var _this$props = this.props,\n          categoryName = _this$props.categoryName,\n          tooltipPosition = _this$props.tooltipPosition;\n      var isTooltipVisible = this.state.isTooltipVisible;\n      return isTooltipVisible ? React.createElement(Tooltip, {\n        position: tooltipPosition,\n        content: categoryName\n      }, React.createElement(\"span\", {\n        tabIndex: 0,\n        ref: this.headingRef,\n        className: css(styles.chipGroupLabel)\n      }, React.createElement(\"span\", {\n        id: id\n      }, categoryName))) : React.createElement(\"span\", {\n        ref: this.headingRef,\n        className: css(styles.chipGroupLabel),\n        id: id\n      }, categoryName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          categoryName = _a.categoryName,\n          children = _a.children,\n          className = _a.className,\n          isClosable = _a.isClosable,\n          closeBtnAriaLabel = _a.closeBtnAriaLabel,\n          ariaLabel = _a['aria-label'],\n          onClick = _a.onClick,\n          onOverflowChipClick = _a.onOverflowChipClick,\n          numChips = _a.numChips,\n          expandedText = _a.expandedText,\n          collapsedText = _a.collapsedText,\n          ouiaId = _a.ouiaId,\n          defaultIsOpen = _a.defaultIsOpen,\n          tooltipPosition = _a.tooltipPosition,\n          rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"onOverflowChipClick\", \"numChips\", \"expandedText\", \"collapsedText\", \"ouiaId\", \"defaultIsOpen\", \"tooltipPosition\"]);\n\n      var isOpen = this.state.isOpen;\n      var numChildren = React.Children.count(children);\n      var collapsedTextResult = fillTemplate(collapsedText, {\n        remaining: React.Children.count(children) - numChips\n      });\n\n      var renderChipGroup = function renderChipGroup(id) {\n        var chipArray = !isOpen ? React.Children.toArray(children).slice(0, numChips) : React.Children.toArray(children);\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.chipGroup, className, categoryName && styles.modifiers.category),\n          role: \"group\"\n        }, categoryName && {\n          'aria-labelledby': id\n        }, !categoryName && {\n          'aria-label': ariaLabel\n        }, getOUIAProps(ChipGroup.displayName, ouiaId)), React.createElement(\"div\", {\n          className: css(styles.chipGroupMain)\n        }, categoryName && _this2.renderLabel(id), React.createElement(\"ul\", Object.assign({\n          className: css(styles.chipGroupList)\n        }, categoryName && {\n          'aria-labelledby': id\n        }, !categoryName && {\n          'aria-label': ariaLabel\n        }, {\n          role: \"list\"\n        }, rest), chipArray.map(function (child, i) {\n          return React.createElement(\"li\", {\n            className: css(styles.chipGroupListItem),\n            key: i\n          }, child);\n        }), numChildren > numChips && React.createElement(\"li\", {\n          className: css(styles.chipGroupListItem)\n        }, React.createElement(Chip, {\n          isOverflowChip: true,\n          onClick: function onClick(event) {\n            _this2.toggleCollapse();\n\n            onOverflowChipClick(event);\n          },\n          component: \"button\"\n        }, isOpen ? expandedText : collapsedTextResult)))), isClosable && React.createElement(\"div\", {\n          className: css(styles.chipGroupClose)\n        }, React.createElement(Button, {\n          variant: \"plain\",\n          \"aria-label\": closeBtnAriaLabel,\n          onClick: onClick,\n          id: \"remove_group_\".concat(id),\n          \"aria-labelledby\": \"remove_group_\".concat(id, \" \").concat(id),\n          ouiaId: ouiaId || closeBtnAriaLabel\n        }, React.createElement(TimesCircleIcon, {\n          \"aria-hidden\": \"true\"\n        }))));\n      };\n\n      return numChildren === 0 ? null : React.createElement(GenerateId, null, function (randomId) {\n        return renderChipGroup(_this2.props.id || randomId);\n      });\n    }\n  }]);\n\n  return ChipGroup;\n}(React.Component);\nChipGroup.displayName = 'ChipGroup';\nChipGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numChips: 3,\n  isClosable: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: function onClick(_e) {\n    return undefined;\n  },\n  onOverflowChipClick: function onOverflowChipClick(_e) {\n    return undefined;\n  },\n  closeBtnAriaLabel: 'Close chip group',\n  tooltipPosition: 'top',\n  'aria-label': 'Chip group category'\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","Button","Chip","Tooltip","TimesCircleIcon","fillTemplate","GenerateId","getOUIAProps","ChipGroup","props","createRef","setState","isOpen","prevState","isTooltipVisible","Boolean","headingRef","current","offsetWidth","scrollWidth","state","defaultIsOpen","id","categoryName","tooltipPosition","position","content","tabIndex","ref","className","chipGroupLabel","_a","children","isClosable","closeBtnAriaLabel","ariaLabel","onClick","onOverflowChipClick","numChips","expandedText","collapsedText","ouiaId","rest","__rest","numChildren","Children","count","collapsedTextResult","remaining","renderChipGroup","chipArray","toArray","slice","chipGroup","modifiers","category","role","displayName","chipGroupMain","renderLabel","chipGroupList","map","child","i","chipGroupListItem","key","isOverflowChip","toggleCollapse","event","component","chipGroupClose","variant","randomId","Component","_e","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ChipGroup/ChipGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ChipGroup/chip-group';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Chip } from '../Chip';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface ChipGroupProps extends React.HTMLProps<HTMLUListElement>, OUIAProps {\n  /** Content rendered inside the chip group. Should be <Chip> elements. */\n  children?: React.ReactNode;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag for having the chip group default to expanded */\n  defaultIsOpen?: boolean;\n  /** Customizable \"Show Less\" text string */\n  expandedText?: string;\n  /** Customizeable template string. Use variable \"${remaining}\" for the overflow chip count. */\n  collapsedText?: string;\n  /** Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied */\n  categoryName?: string;\n  /** Aria label for chip group that does not have a category name */\n  'aria-label'?: string;\n  /** Set number of chips to show before overflow */\n  numChips?: number;\n  /** Flag if chip group can be closed*/\n  isClosable?: boolean;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Function that is called when clicking on the chip group close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Function that is called when clicking on the overflow (expand/collapse) chip button */\n  onOverflowChipClick?: (event: React.MouseEvent) => void;\n  /** Position of the tooltip which is displayed if the category name text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\ninterface ChipGroupState {\n  isOpen: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class ChipGroup extends React.Component<ChipGroupProps, ChipGroupState> {\n  static displayName = 'ChipGroup';\n  constructor(props: ChipGroupProps) {\n    super(props);\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  private headingRef = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: ChipGroupProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numChips: 3,\n    isClosable: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    onOverflowChipClick: (_e: React.MouseEvent) => undefined as any,\n    closeBtnAriaLabel: 'Close chip group',\n    tooltipPosition: 'top',\n    'aria-label': 'Chip group category'\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    });\n  }\n\n  toggleCollapse = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen,\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    }));\n  };\n\n  renderLabel(id: string) {\n    const { categoryName, tooltipPosition } = this.props;\n    const { isTooltipVisible } = this.state;\n    return isTooltipVisible ? (\n      <Tooltip position={tooltipPosition} content={categoryName}>\n        <span tabIndex={0} ref={this.headingRef} className={css(styles.chipGroupLabel)}>\n          <span id={id}>{categoryName}</span>\n        </span>\n      </Tooltip>\n    ) : (\n      <span ref={this.headingRef} className={css(styles.chipGroupLabel)} id={id}>\n        {categoryName}\n      </span>\n    );\n  }\n\n  render() {\n    const {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      onOverflowChipClick,\n      numChips,\n      expandedText,\n      collapsedText,\n      ouiaId,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n    const { isOpen } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText as string, {\n      remaining: React.Children.count(children) - numChips\n    });\n\n    const renderChipGroup = (id: string) => {\n      const chipArray = !isOpen\n        ? React.Children.toArray(children).slice(0, numChips)\n        : React.Children.toArray(children);\n\n      return (\n        <div\n          className={css(styles.chipGroup, className, categoryName && styles.modifiers.category)}\n          role=\"group\"\n          {...(categoryName && { 'aria-labelledby': id })}\n          {...(!categoryName && { 'aria-label': ariaLabel })}\n          {...getOUIAProps(ChipGroup.displayName, ouiaId)}\n        >\n          <div className={css(styles.chipGroupMain)}>\n            {categoryName && this.renderLabel(id)}\n            <ul\n              className={css(styles.chipGroupList)}\n              {...(categoryName && { 'aria-labelledby': id })}\n              {...(!categoryName && { 'aria-label': ariaLabel })}\n              role=\"list\"\n              {...rest}\n            >\n              {chipArray.map((child, i) => (\n                <li className={css(styles.chipGroupListItem)} key={i}>\n                  {child}\n                </li>\n              ))}\n              {numChildren > numChips && (\n                <li className={css(styles.chipGroupListItem)}>\n                  <Chip\n                    isOverflowChip\n                    onClick={event => {\n                      this.toggleCollapse();\n                      onOverflowChipClick(event);\n                    }}\n                    component=\"button\"\n                  >\n                    {isOpen ? expandedText : collapsedTextResult}\n                  </Chip>\n                </li>\n              )}\n            </ul>\n          </div>\n          {isClosable && (\n            <div className={css(styles.chipGroupClose)}>\n              <Button\n                variant=\"plain\"\n                aria-label={closeBtnAriaLabel}\n                onClick={onClick}\n                id={`remove_group_${id}`}\n                aria-labelledby={`remove_group_${id} ${id}`}\n                ouiaId={ouiaId || closeBtnAriaLabel}\n              >\n                <TimesCircleIcon aria-hidden=\"true\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      );\n    };\n\n    return numChildren === 0 ? null : <GenerateId>{randomId => renderChipGroup(this.props.id || randomId)}</GenerateId>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}