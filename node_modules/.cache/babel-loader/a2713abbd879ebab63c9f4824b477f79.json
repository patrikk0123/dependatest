{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Tooltip } from '../Tooltip';\nexport const DualListSelectorControlBase = _a => {\n  var {\n    innerRef,\n    children = null,\n    className,\n    'aria-label': ariaLabel,\n    isDisabled = true,\n    onClick = () => {},\n    tooltipContent,\n    tooltipProps = {}\n  } = _a,\n      props = __rest(_a, [\"innerRef\", \"children\", \"className\", 'aria-label', \"isDisabled\", \"onClick\", \"tooltipContent\", \"tooltipProps\"]);\n\n  const ref = innerRef || React.useRef(null);\n  return React.createElement(\"div\", Object.assign({\n    className: css('pf-c-dual-list-selector__controls-item', className)\n  }, props), React.createElement(Button, {\n    isDisabled: isDisabled,\n    \"aria-disabled\": isDisabled,\n    variant: ButtonVariant.plain,\n    onClick: onClick,\n    \"aria-label\": ariaLabel,\n    tabIndex: -1,\n    ref: ref\n  }, children), tooltipContent && React.createElement(Tooltip, Object.assign({\n    content: tooltipContent,\n    position: \"left\",\n    reference: ref\n  }, tooltipProps)));\n};\nDualListSelectorControlBase.displayName = 'DualListSelectorControlBase';\nexport const DualListSelectorControl = React.forwardRef((props, ref) => React.createElement(DualListSelectorControlBase, Object.assign({\n  innerRef: ref\n}, props)));\nDualListSelectorControl.displayName = 'DualListSelectorControl';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,WAAtC;AACA,SAASC,OAAT,QAAwB,YAAxB;AAqBA,OAAO,MAAMC,2BAA2B,GAA2DC,EAAD,IAU/D;MAVgE;IACjGC,QADiG;IAEjGC,QAAQ,GAAG,IAFsF;IAGjGC,SAHiG;IAIjG,cAAcC,SAJmF;IAKjGC,UAAU,GAAG,IALoF;IAMjGC,OAAO,GAAG,MAAK,CAAG,CAN+E;IAOjGC,cAPiG;IAQjGC,YAAY,GAAG;EARkF,IAQzER;MACrBS,KAAK,cATyF,8GASzF;;EAER,MAAMC,GAAG,GAAGT,QAAQ,IAAIP,KAAK,CAACiB,MAAN,CAAa,IAAb,CAAxB;EACA,OACEjB;IAAKS,SAAS,EAAER,GAAG,CAAC,wCAAD,EAA2CQ,SAA3C;EAAnB,GAA8EM,KAA9E,GACEf,oBAACE,MAAD,EAAO;IACLS,UAAU,EAAEA,UADP;IACiB,iBACPA,UAFV;IAGLO,OAAO,EAAEf,aAAa,CAACgB,KAHlB;IAILP,OAAO,EAAEA,OAJJ;IAIW,cACJF,SALP;IAMLU,QAAQ,EAAE,CAAC,CANN;IAOLJ,GAAG,EAAEA;EAPA,CAAP,EASGR,QATH,CADF,EAYGK,cAAc,IAAIb,oBAACI,OAAD,EAAQiB;IAACC,OAAO,EAAET,cAAV;IAA0BU,QAAQ,EAAC,MAAnC;IAA0CC,SAAS,EAAER;EAArD,GAA8DF,YAA9D,CAAR,CAZrB,CADF;AAgBD,CA5BM;AA6BPT,2BAA2B,CAACoB,WAA5B,GAA0C,6BAA1C;AAEA,OAAO,MAAMC,uBAAuB,GAAG1B,KAAK,CAAC2B,UAAN,CAAiB,CAACZ,KAAD,EAAsCC,GAAtC,KACtDhB,oBAACK,2BAAD,EAA4BgB;EAACd,QAAQ,EAAES;AAAX,GAAoBD,KAApB,CAA5B,CADqC,CAAhC;AAIPW,uBAAuB,CAACD,WAAxB,GAAsC,yBAAtC","names":["React","css","Button","ButtonVariant","Tooltip","DualListSelectorControlBase","_a","innerRef","children","className","ariaLabel","isDisabled","onClick","tooltipContent","tooltipProps","props","ref","useRef","variant","plain","tabIndex","Object","content","position","reference","displayName","DualListSelectorControl","forwardRef"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorControl.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Tooltip } from '../Tooltip';\n\nexport interface DualListSelectorControlProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onClick'> {\n  /** Content to be rendered in the dual list selector control. */\n  children?: React.ReactNode;\n  /** @hide forwarded ref */\n  innerRef?: React.Ref<any>;\n  /** Flag indicating the control is disabled. */\n  isDisabled?: boolean;\n  /** Additional classes applied to the dual list selector control. */\n  className?: string;\n  /** Callback fired when dual list selector control is selected. */\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** Accessible label for the dual list selector control. */\n  'aria-label'?: string;\n  /** Content to be displayed in a tooltip on hover of control. */\n  tooltipContent?: React.ReactNode;\n  /** Additional tooltip properties passed to the tooltip. */\n  tooltipProps?: any;\n}\n\nexport const DualListSelectorControlBase: React.FunctionComponent<DualListSelectorControlProps> = ({\n  innerRef,\n  children = null,\n  className,\n  'aria-label': ariaLabel,\n  isDisabled = true,\n  onClick = () => {},\n  tooltipContent,\n  tooltipProps = {} as any,\n  ...props\n}: DualListSelectorControlProps) => {\n  const ref = innerRef || React.useRef(null);\n  return (\n    <div className={css('pf-c-dual-list-selector__controls-item', className)} {...props}>\n      <Button\n        isDisabled={isDisabled}\n        aria-disabled={isDisabled}\n        variant={ButtonVariant.plain}\n        onClick={onClick}\n        aria-label={ariaLabel}\n        tabIndex={-1}\n        ref={ref}\n      >\n        {children}\n      </Button>\n      {tooltipContent && <Tooltip content={tooltipContent} position=\"left\" reference={ref} {...tooltipProps} />}\n    </div>\n  );\n};\nDualListSelectorControlBase.displayName = 'DualListSelectorControlBase';\n\nexport const DualListSelectorControl = React.forwardRef((props: DualListSelectorControlProps, ref: React.Ref<any>) => (\n  <DualListSelectorControlBase innerRef={ref} {...props} />\n));\n\nDualListSelectorControl.displayName = 'DualListSelectorControl';\n"]},"metadata":{},"sourceType":"module"}