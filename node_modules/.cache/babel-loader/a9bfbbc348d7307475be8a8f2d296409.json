{"ast":null,"code":"export function flattenTree(tree) {\n  let result = [];\n  tree.forEach(item => {\n    if (item.children) {\n      result = result.concat(flattenTree(item.children));\n    } else {\n      result.push(item.id);\n    }\n  });\n  return result;\n}\nexport function flattenTreeWithFolders(tree) {\n  let result = [];\n  tree.forEach(item => {\n    result.push(item.id);\n\n    if (item.children) {\n      result = result.concat(flattenTreeWithFolders(item.children));\n    }\n  });\n  return result;\n}\nexport function filterFolders(tree, inputList) {\n  let result = [];\n  tree.forEach(item => {\n    if (item.children) {\n      result = result.concat(filterFolders(item.children, inputList));\n    } else {\n      if (inputList.includes(item.id)) {\n        result.push(item.id);\n      }\n    }\n  });\n  return result;\n}\nexport function filterTreeItems(item, inputList) {\n  if (inputList.includes(item.id)) {\n    return true;\n  }\n\n  if (item.children) {\n    return (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterTreeItems(child, inputList))).length > 0;\n  }\n}\nexport function filterTreeItemsWithoutFolders(item, inputList) {\n  if (item.children) {\n    return (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => child.children ? filterTreeItemsWithoutFolders(child, inputList) : filterTreeItems(child, inputList))).length > 0;\n  }\n\n  if (inputList.includes(item.id)) {\n    return true;\n  }\n}\nexport function filterRestTreeItems(item, inputList) {\n  if (item.children) {\n    const child = (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterRestTreeItems(child, inputList))).length > 0;\n    return child;\n  }\n\n  if (!inputList.includes(item.id)) {\n    return true;\n  }\n}","map":{"version":3,"mappings":"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","names":["flattenTree","tree","result","forEach","item","children","concat","push","id","flattenTreeWithFolders","filterFolders","inputList","includes","filterTreeItems","map","opt","Object","assign","filter","child","length","filterTreeItemsWithoutFolders","filterRestTreeItems"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/treeUtils.ts"],"sourcesContent":["import { DualListSelectorTreeItemData } from './DualListSelectorTree';\n\nexport function flattenTree(tree: DualListSelectorTreeItemData[]): string[] {\n  let result = [] as string[];\n  tree.forEach(item => {\n    if (item.children) {\n      result = result.concat(flattenTree(item.children));\n    } else {\n      result.push(item.id);\n    }\n  });\n  return result;\n}\n\nexport function flattenTreeWithFolders(tree: DualListSelectorTreeItemData[]): string[] {\n  let result = [] as string[];\n  tree.forEach(item => {\n    result.push(item.id);\n    if (item.children) {\n      result = result.concat(flattenTreeWithFolders(item.children));\n    }\n  });\n  return result;\n}\n\nexport function filterFolders(tree: DualListSelectorTreeItemData[], inputList: string[]): string[] {\n  let result = [] as string[];\n  tree.forEach(item => {\n    if (item.children) {\n      result = result.concat(filterFolders(item.children, inputList));\n    } else {\n      if (inputList.includes(item.id)) {\n        result.push(item.id);\n      }\n    }\n  });\n  return result;\n}\n\nexport function filterTreeItems(item: DualListSelectorTreeItemData, inputList: string[]): boolean {\n  if (inputList.includes(item.id)) {\n    return true;\n  }\n  if (item.children) {\n    return (\n      (item.children = item.children\n        .map(opt => Object.assign({}, opt))\n        .filter(child => filterTreeItems(child, inputList))).length > 0\n    );\n  }\n}\n\nexport function filterTreeItemsWithoutFolders(item: DualListSelectorTreeItemData, inputList: string[]): boolean {\n  if (item.children) {\n    return (\n      (item.children = item.children\n        .map(opt => Object.assign({}, opt))\n        .filter(child =>\n          child.children ? filterTreeItemsWithoutFolders(child, inputList) : filterTreeItems(child, inputList)\n        )).length > 0\n    );\n  }\n\n  if (inputList.includes(item.id)) {\n    return true;\n  }\n}\n\nexport function filterRestTreeItems(item: DualListSelectorTreeItemData, inputList: string[]): boolean {\n  if (item.children) {\n    const child =\n      (item.children = item.children\n        .map(opt => Object.assign({}, opt))\n        .filter(child => filterRestTreeItems(child, inputList))).length > 0;\n    return child;\n  }\n\n  if (!inputList.includes(item.id)) {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}