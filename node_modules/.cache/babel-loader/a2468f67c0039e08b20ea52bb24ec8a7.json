{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Button, Checkbox } from '@patternfly/react-core';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport EllipsisHIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-h-icon';\nexport var treeRow = function treeRow(onCollapse, onCheckChange, onToggleRowDetails) {\n  return function (value, _ref) {\n    var rowIndex = _ref.rowIndex,\n        rowData = _ref.rowData;\n    var _rowData$props = rowData.props,\n        isExpanded = _rowData$props.isExpanded,\n        isDetailsExpanded = _rowData$props.isDetailsExpanded,\n        level = _rowData$props['aria-level'],\n        setsize = _rowData$props['aria-setsize'],\n        toggleAriaLabel = _rowData$props.toggleAriaLabel,\n        checkAriaLabel = _rowData$props.checkAriaLabel,\n        showDetailsAriaLabel = _rowData$props.showDetailsAriaLabel,\n        isChecked = _rowData$props.isChecked,\n        checkboxId = _rowData$props.checkboxId,\n        icon = _rowData$props.icon;\n    var content = value.title || value;\n    var text = React.createElement(\"div\", {\n      className: css(stylesTreeView.tableTreeViewText),\n      key: \"tree-view-text\"\n    }, icon && React.createElement(\"span\", {\n      className: css(stylesTreeView.tableTreeViewIcon),\n      key: \"tree-view-text-icon\"\n    }, icon), React.createElement(\"span\", {\n      className: \"pf-c-table__text\",\n      key: \"table-text\"\n    }, content));\n\n    var onChange = function onChange(isChecked, event) {\n      onCheckChange(event, isChecked, rowIndex, content, rowData);\n    };\n\n    return {\n      component: 'th',\n      className: 'pf-c-table__tree-view-title-cell',\n      children: level !== undefined ? React.createElement(\"div\", {\n        className: css(stylesTreeView.tableTreeViewMain)\n      }, setsize > 0 && React.createElement(\"span\", {\n        className: css(stylesTreeView.tableToggle),\n        key: \"table-toggle\"\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        onClick: function onClick(event) {\n          return onCollapse && onCollapse(event, rowIndex, content, rowData);\n        },\n        className: css(isExpanded && styles.modifiers.expanded),\n        \"aria-expanded\": isExpanded,\n        \"aria-label\": toggleAriaLabel || \"\".concat(isExpanded ? 'Collapse' : 'Expand', \" row \").concat(rowIndex)\n      }, React.createElement(\"div\", {\n        className: css(stylesTreeView.tableToggleIcon)\n      }, React.createElement(AngleDownIcon, {\n        \"aria-hidden\": \"true\"\n      })))), !!onCheckChange && React.createElement(\"span\", {\n        className: css(stylesTreeView.tableCheck),\n        key: \"table-check\"\n      }, React.createElement(\"label\", {\n        htmlFor: checkboxId || \"checkbox_\".concat(rowIndex)\n      }, React.createElement(Checkbox, {\n        id: checkboxId || \"checkbox_\".concat(rowIndex),\n        \"aria-label\": checkAriaLabel || \"Row \".concat(rowIndex, \" checkbox\"),\n        isChecked: isChecked,\n        onChange: onChange\n      }))), text, !!onToggleRowDetails && React.createElement(\"span\", {\n        className: css(stylesTreeView.tableTreeViewDetailsToggle),\n        key: \"view-details-toggle\"\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        \"aria-expanded\": isDetailsExpanded,\n        \"aria-label\": showDetailsAriaLabel || 'Show row details',\n        onClick: function onClick(event) {\n          return onToggleRowDetails && onToggleRowDetails(event, rowIndex, content, rowData);\n        }\n      }, React.createElement(\"span\", {\n        className: \"pf-c-table__details-toggle-icon\"\n      }, React.createElement(EllipsisHIcon, {\n        \"aria-hidden\": true\n      }))))) : text\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["React","css","styles","stylesTreeView","Button","Checkbox","AngleDownIcon","EllipsisHIcon","treeRow","onCollapse","onCheckChange","onToggleRowDetails","value","rowIndex","rowData","props","isExpanded","isDetailsExpanded","level","setsize","toggleAriaLabel","checkAriaLabel","showDetailsAriaLabel","isChecked","checkboxId","icon","content","title","text","className","tableTreeViewText","key","tableTreeViewIcon","onChange","event","component","children","undefined","tableTreeViewMain","tableToggle","variant","onClick","modifiers","expanded","tableToggleIcon","tableCheck","htmlFor","id","tableTreeViewDetailsToggle"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/treeRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IExtra, IFormatterValueType, OnCheckChange, OnTreeRowCollapse, OnToggleRowDetails } from '../../TableTypes';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Button, Checkbox } from '@patternfly/react-core';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport EllipsisHIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-h-icon';\n\nexport const treeRow = (\n  onCollapse: OnTreeRowCollapse,\n  onCheckChange?: OnCheckChange,\n  onToggleRowDetails?: OnToggleRowDetails\n) => (value: IFormatterValueType, { rowIndex, rowData }: IExtra) => {\n  const {\n    isExpanded,\n    isDetailsExpanded,\n    'aria-level': level,\n    'aria-setsize': setsize,\n    toggleAriaLabel,\n    checkAriaLabel,\n    showDetailsAriaLabel,\n    isChecked,\n    checkboxId,\n    icon\n  } = rowData.props;\n  const content = value.title || value;\n  const text = (\n    <div className={css(stylesTreeView.tableTreeViewText)} key=\"tree-view-text\">\n      {icon && (\n        <span className={css(stylesTreeView.tableTreeViewIcon)} key=\"tree-view-text-icon\">\n          {icon}\n        </span>\n      )}\n      <span className=\"pf-c-table__text\" key=\"table-text\">\n        {content}\n      </span>\n    </div>\n  );\n  const onChange = (isChecked: boolean, event: React.FormEvent<HTMLInputElement>) => {\n    onCheckChange(event, isChecked, rowIndex, content, rowData);\n  };\n  return {\n    component: 'th',\n    className: 'pf-c-table__tree-view-title-cell',\n    children:\n      level !== undefined ? (\n        <div className={css(stylesTreeView.tableTreeViewMain)}>\n          {setsize > 0 && (\n            <span className={css(stylesTreeView.tableToggle)} key=\"table-toggle\">\n              <Button\n                variant=\"plain\"\n                onClick={event => onCollapse && onCollapse(event, rowIndex, content, rowData)}\n                className={css(isExpanded && styles.modifiers.expanded)}\n                aria-expanded={isExpanded}\n                aria-label={toggleAriaLabel || `${isExpanded ? 'Collapse' : 'Expand'} row ${rowIndex}`}\n              >\n                <div className={css(stylesTreeView.tableToggleIcon)}>\n                  <AngleDownIcon aria-hidden=\"true\" />\n                </div>\n              </Button>\n            </span>\n          )}\n          {!!onCheckChange && (\n            <span className={css(stylesTreeView.tableCheck)} key=\"table-check\">\n              <label htmlFor={checkboxId || `checkbox_${rowIndex}`}>\n                <Checkbox\n                  id={checkboxId || `checkbox_${rowIndex}`}\n                  aria-label={checkAriaLabel || `Row ${rowIndex} checkbox`}\n                  isChecked={isChecked}\n                  onChange={onChange}\n                />\n              </label>\n            </span>\n          )}\n          {text}\n          {!!onToggleRowDetails && (\n            <span className={css(stylesTreeView.tableTreeViewDetailsToggle)} key=\"view-details-toggle\">\n              <Button\n                variant=\"plain\"\n                aria-expanded={isDetailsExpanded}\n                aria-label={showDetailsAriaLabel || 'Show row details'}\n                onClick={event => onToggleRowDetails && onToggleRowDetails(event, rowIndex, content, rowData)}\n              >\n                <span className=\"pf-c-table__details-toggle-icon\">\n                  <EllipsisHIcon aria-hidden />\n                </span>\n              </Button>\n            </span>\n          )}\n        </div>\n      ) : (\n        text\n      )\n  };\n};\n"]},"metadata":{},"sourceType":"module"}