{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\nexport class ToolbarToggleGroup extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.isContentPopup = () => {\n      const viewportSize = canUseDOM ? window.innerWidth : 1200;\n      const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n      return viewportSize < lgBreakpointValue;\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      toggleIcon,\n      variant,\n      visibility,\n      visiblity,\n      breakpoint,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      children\n    } = _a,\n          props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n\n    if (!breakpoint && !toggleIcon) {\n      // eslint-disable-next-line no-console\n      console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n    }\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n\n    return React.createElement(PageContext.Consumer, null, _ref => {\n      let {\n        width,\n        getBreakpoint\n      } = _ref;\n      return React.createElement(ToolbarContext.Consumer, null, _ref2 => {\n        let {\n          isExpanded,\n          toggleIsExpanded\n        } = _ref2;\n        return React.createElement(ToolbarContentContext.Consumer, null, _ref3 => {\n          let {\n            expandableContentRef,\n            expandableContentId\n          } = _ref3;\n\n          if (expandableContentRef.current && expandableContentRef.current.classList) {\n            if (isExpanded) {\n              expandableContentRef.current.classList.add(styles.modifiers.expanded);\n            } else {\n              expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n            }\n          }\n\n          const breakpointMod = {};\n          breakpointMod[breakpoint] = 'show';\n          return React.createElement(\"div\", Object.assign({\n            className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)), formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className)\n          }, props), React.createElement(\"div\", {\n            className: css(styles.toolbarToggle)\n          }, React.createElement(Button, Object.assign({\n            variant: \"plain\",\n            onClick: toggleIsExpanded,\n            \"aria-label\": \"Show Filters\"\n          }, isExpanded && {\n            'aria-expanded': true\n          }, {\n            \"aria-haspopup\": isExpanded && this.isContentPopup(),\n            \"aria-controls\": expandableContentId\n          }), toggleIcon)), isExpanded ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild) : children);\n        });\n      });\n    });\n  }\n\n}\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';","map":{"version":3,"mappings":"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","names":["React","ReactDOM","styles","css","ToolbarContext","ToolbarContentContext","Button","globalBreakpointLg","formatBreakpointMods","toCamel","canUseDOM","PageContext","ToolbarToggleGroup","Component","constructor","viewportSize","window","innerWidth","lgBreakpointValue","parseInt","value","render","_a","props","toggleIcon","variant","visibility","visiblity","breakpoint","alignment","spacer","spaceItems","className","children","console","error","undefined","warn","Consumer","width","getBreakpoint","isExpanded","toggleIsExpanded","expandableContentRef","expandableContentId","current","classList","add","modifiers","expanded","remove","breakpointMod","toolbarGroup","toggleGroup","toolbarToggle","Object","onClick","isContentPopup","createPortal","firstElementChild"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarToggleGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroupProps } from './ToolbarGroup';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\n\nexport interface ToolbarToggleGroupProps extends ToolbarGroupProps {\n  /** An icon to be rendered when the toggle group has collapsed down */\n  toggleIcon: React.ReactNode;\n  /** Controls when filters are shown and when the toggle button is hidden. */\n  breakpoint: 'md' | 'lg' | 'xl' | '2xl';\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Spacers at various breakpoints. */\n  spacer?: {\n    default?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    md?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    lg?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    xl?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    '2xl'?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n  };\n  /** Space items at various breakpoints. */\n  spaceItems?: {\n    default?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    md?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    lg?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    xl?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    '2xl'?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n  };\n}\n\nexport class ToolbarToggleGroup extends React.Component<ToolbarToggleGroupProps> {\n  static displayName = 'ToolbarToggleGroup';\n  isContentPopup = () => {\n    const viewportSize = canUseDOM ? window.innerWidth : 1200;\n    const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n    return viewportSize < lgBreakpointValue;\n  };\n\n  render() {\n    const {\n      toggleIcon,\n      variant,\n      visibility,\n      visiblity,\n      breakpoint,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      children,\n      ...props\n    } = this.props;\n\n    if (!breakpoint && !toggleIcon) {\n      // eslint-disable-next-line no-console\n      console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n    }\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarToggleGroup visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <ToolbarContext.Consumer>\n            {({ isExpanded, toggleIsExpanded }) => (\n              <ToolbarContentContext.Consumer>\n                {({ expandableContentRef, expandableContentId }) => {\n                  if (expandableContentRef.current && expandableContentRef.current.classList) {\n                    if (isExpanded) {\n                      expandableContentRef.current.classList.add(styles.modifiers.expanded);\n                    } else {\n                      expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n                    }\n                  }\n\n                  const breakpointMod: {\n                    md?: 'show';\n                    lg?: 'show';\n                    xl?: 'show';\n                    '2xl'?: 'show';\n                  } = {};\n                  breakpointMod[breakpoint] = 'show';\n\n                  return (\n                    <div\n                      className={css(\n                        styles.toolbarGroup,\n                        styles.modifiers.toggleGroup,\n                        variant &&\n                          styles.modifiers[toCamel(variant) as 'filterGroup' | 'iconButtonGroup' | 'buttonGroup'],\n                        formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spacer, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)),\n                        className\n                      )}\n                      {...props}\n                    >\n                      <div className={css(styles.toolbarToggle)}>\n                        <Button\n                          variant=\"plain\"\n                          onClick={toggleIsExpanded}\n                          aria-label=\"Show Filters\"\n                          {...(isExpanded && { 'aria-expanded': true })}\n                          aria-haspopup={isExpanded && this.isContentPopup()}\n                          aria-controls={expandableContentId}\n                        >\n                          {toggleIcon}\n                        </Button>\n                      </div>\n                      {isExpanded\n                        ? (ReactDOM.createPortal(\n                            children,\n                            expandableContentRef.current.firstElementChild\n                          ) as React.ReactElement)\n                        : children}\n                    </div>\n                  );\n                }}\n              </ToolbarContentContext.Consumer>\n            )}\n          </ToolbarContext.Consumer>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}