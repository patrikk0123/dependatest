{"ast":null,"code":"import { __rest } from \"tslib\";\n/**\n * header.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\n\nimport * as React from 'react';\nimport { ProviderContext } from './provider';\nimport { HeaderRow } from './header-row';\n\nclass BaseHeader extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      children,\n      headerRows,\n      onRow,\n      renderers,\n      columns\n    } = _a,\n          props = __rest(_a, [\"children\", \"headerRows\", \"onRow\", \"renderers\", \"columns\"]); // If headerRows aren't passed, default to bodyColumns as header rows\n\n\n    return React.createElement(renderers.header.wrapper, props, [(headerRows || [columns]).map((rowData, rowIndex) => React.createElement(HeaderRow, {\n      key: `${rowIndex}-header-row`,\n      renderers: renderers.header,\n      onRow,\n      rowData,\n      rowIndex\n    }))].concat(children));\n  }\n\n}\n\nexport const Header = props => React.createElement(ProviderContext.Consumer, null, _ref => {\n  let {\n    columns,\n    renderers\n  } = _ref;\n  return React.createElement(BaseHeader, Object.assign({\n    columns: columns,\n    renderers: renderers\n  }, props));\n});","map":{"version":3,"mappings":";AAAA;;;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,eAAT,QAAgC,YAAhC;AACA,SAASC,SAAT,QAA0B,cAA1B;;AAWA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyD;EACvDC,MAAM;IACJ,MAAMC,KAAgE,KAAKC,KAA3E;IAAA,MAAM;MAAEC,QAAF;MAAYC,UAAZ;MAAwBC,KAAxB;MAA+BC,SAA/B;MAA0CC;IAA1C,IAAiDN,EAAvD;IAAA,MAA4DC,KAAK,cAA3D,2DAA2D,CAAjE,CADI,CAGJ;;;IACA,OAAOP,KAAK,CAACa,aAAN,CACLF,SAAS,CAACG,MAAV,CAAiBC,OADZ,EAELR,KAFK,EAGL,CACE,CAACE,UAAU,IAAK,CAACG,OAAD,CAAhB,EAA2CI,GAA3C,CAA+C,CAACC,OAAD,EAAUC,QAAV,KAC7ClB,KAAK,CAACa,aAAN,CAAoBX,SAApB,EAA+B;MAC7BiB,GAAG,EAAE,GAAGD,QAAQ,aADa;MAE7BP,SAAS,EAAEA,SAAS,CAACG,MAFQ;MAG7BJ,KAH6B;MAI7BO,OAJ6B;MAK7BC;IAL6B,CAA/B,CADF,CADF,EAUEE,MAVF,CAUSZ,QAVT,CAHK,CAAP;EAeD;;AApBsD;;AAuBzD,OAAO,MAAMa,MAAM,GAAId,KAAD,IACpBP,oBAACC,eAAe,CAACqB,QAAjB,EAAyB,IAAzB,EACG;EAAA,IAAC;IAAEV,OAAF;IAAWD;EAAX,CAAD;EAAA,OAA4BX,oBAACG,UAAD,EAAWoB;IAACX,OAAO,EAAEA,OAAV;IAAmBD,SAAS,EAAEA;EAA9B,GAA6CJ,KAA7C,CAAX,CAA5B;AAAA,CADH,CADK","names":["React","ProviderContext","HeaderRow","BaseHeader","Component","render","_a","props","children","headerRows","onRow","renderers","columns","createElement","header","wrapper","map","rowData","rowIndex","key","concat","Header","Consumer","Object"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/base/header.tsx"],"sourcesContent":["/**\n * header.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { createElementType, RowsType, ColumnsType, RenderersTypes } from './types';\nimport { ProviderContext } from './provider';\nimport { HeaderRow } from './header-row';\n\nexport interface HeaderProps {\n  headerRows?: RowsType[] | ColumnsType; // array of rows arrays\n  children?: React.ReactNode;\n  columns?: ColumnsType;\n  renderers?: RenderersTypes['renderers'];\n  onRow?: Function;\n  className?: string;\n}\n\nclass BaseHeader extends React.Component<HeaderProps, {}> {\n  render() {\n    const { children, headerRows, onRow, renderers, columns, ...props } = this.props;\n\n    // If headerRows aren't passed, default to bodyColumns as header rows\n    return React.createElement(\n      renderers.header.wrapper as createElementType,\n      props,\n      [\n        (headerRows || ([columns] as ColumnsType)).map((rowData, rowIndex) =>\n          React.createElement(HeaderRow, {\n            key: `${rowIndex}-header-row`,\n            renderers: renderers.header,\n            onRow,\n            rowData,\n            rowIndex\n          })\n        )\n      ].concat(children as any)\n    );\n  }\n}\n\nexport const Header = (props: HeaderProps) => (\n  <ProviderContext.Consumer>\n    {({ columns, renderers }) => <BaseHeader columns={columns} renderers={renderers} {...props} />}\n  </ProviderContext.Consumer>\n);\n"]},"metadata":{},"sourceType":"module"}