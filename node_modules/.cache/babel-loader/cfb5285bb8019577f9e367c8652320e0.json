{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport EllipsisVIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-v-icon';\nimport { Toggle } from './Toggle';\nexport var KebabToggle = function KebabToggle(_a) {\n  var _a$id = _a.id,\n      id = _a$id === void 0 ? '' : _a$id,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$isOpen = _a.isOpen,\n      isOpen = _a$isOpen === void 0 ? false : _a$isOpen,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Actions' : _a$ariaLabel,\n      _a$parentRef = _a.parentRef,\n      parentRef = _a$parentRef === void 0 ? null : _a$parentRef,\n      _a$getMenuRef = _a.getMenuRef,\n      getMenuRef = _a$getMenuRef === void 0 ? null : _a$getMenuRef,\n      _a$isActive = _a.isActive,\n      isActive = _a$isActive === void 0 ? false : _a$isActive,\n      _a$isPlain = _a.isPlain,\n      isPlain = _a$isPlain === void 0 ? false : _a$isPlain,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$bubbleEvent = _a.bubbleEvent,\n      bubbleEvent = _a$bubbleEvent === void 0 ? false : _a$bubbleEvent,\n      _a$onToggle = _a.onToggle,\n      onToggle = _a$onToggle === void 0 ? function () {\n    return undefined;\n  } : _a$onToggle,\n      ref = _a.ref,\n      props = __rest(_a, [\"id\", \"children\", \"className\", \"isOpen\", 'aria-label', \"parentRef\", \"getMenuRef\", \"isActive\", \"isPlain\", \"isDisabled\", \"bubbleEvent\", \"onToggle\", \"ref\"]);\n\n  return React.createElement(Toggle, Object.assign({\n    id: id,\n    className: className,\n    isOpen: isOpen,\n    \"aria-label\": ariaLabel,\n    parentRef: parentRef,\n    getMenuRef: getMenuRef,\n    isActive: isActive,\n    isPlain: isPlain,\n    isDisabled: isDisabled,\n    onToggle: onToggle,\n    bubbleEvent: bubbleEvent\n  }, props), React.createElement(EllipsisVIcon, null));\n};\nKebabToggle.displayName = 'KebabToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,aAAP,MAA0B,wDAA1B;AACA,SAASC,MAAT,QAAuB,UAAvB;AA+BA,OAAO,IAAMC,WAAW,GAA8C,SAAzDA,WAAyD,CAACC,EAAD,EAiB/C;cAFlBA,GAdHC;MAAAA,wBAAK;oBAcFD,GAZHE;MAAAA,oCAAW;qBAYRF,GAXHG;MAAAA,sCAAY;kBAWTH,GAVHI;MAAAA,gCAAS;qBAUNJ,GATH;MAAcK,sCAAY;qBASvBL,GARHM;MAAAA,sCAAY;sBAQTN,GAPHO;MAAAA,wCAAa;oBAOVP,GANHQ;MAAAA,oCAAW;mBAMRR,GALHS;MAAAA,kCAAU;sBAKPT,GAJHU;MAAAA,wCAAa;uBAIVV,GAHHW;MAAAA,0CAAc;oBAGXX,GAFHY;MAAAA,oCAAW;IAAA,OAAMC,SAAN;EAAA;MAEXC,MAAGd,GAAHc;MACGC,QAAKC,WAhB6D,yJAgB7D;;EACc,OACtBpB,oBAACE,MAAD,EAAOmB;IACLhB,EAAE,EAAEA,EADC;IAELE,SAAS,EAAEA,SAFN;IAGLC,MAAM,EAAEA,MAHH;IAGS,cACFC,SAJP;IAKLC,SAAS,EAAEA,SALN;IAMLC,UAAU,EAAEA,UANP;IAOLC,QAAQ,EAAEA,QAPL;IAQLC,OAAO,EAAEA,OARJ;IASLC,UAAU,EAAEA,UATP;IAULE,QAAQ,EAAEA,QAVL;IAWLD,WAAW,EAAEA;EAXR,GAYDI,KAZC,CAAP,EAcEnB,oBAACC,aAAD,EAAc,IAAd,CAdF,CADsB;AAiBvB,CAlCM;AAmCPE,WAAW,CAACmB,WAAZ,GAA0B,aAA1B","names":["React","EllipsisVIcon","Toggle","KebabToggle","_a","id","children","className","isOpen","ariaLabel","parentRef","getMenuRef","isActive","isPlain","isDisabled","bubbleEvent","onToggle","undefined","ref","props","__rest","Object","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/KebabToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DropdownToggleProps } from './DropdownToggle';\nimport EllipsisVIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-v-icon';\nimport { Toggle } from './Toggle';\n\nexport interface KebabToggleProps extends DropdownToggleProps {\n  /** HTML ID of dropdown toggle */\n  id?: string;\n  /** Anything which can be rendered as dropdown toggle */\n  children?: React.ReactNode;\n  /** Classess applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Label Toggle button */\n  'aria-label'?: string;\n  /** Callback called when toggle is clicked */\n  onToggle?: (value: boolean, event: any) => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** The menu element */\n  getMenuRef?: () => HTMLElement;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Disables the dropdown toggle */\n  isDisabled?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Allows selecting toggle to select parent */\n  bubbleEvent?: boolean;\n}\n\nexport const KebabToggle: React.FunctionComponent<KebabToggleProps> = ({\n  id = '',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  children = null,\n  className = '',\n  isOpen = false,\n  'aria-label': ariaLabel = 'Actions',\n  parentRef = null,\n  getMenuRef = null,\n  isActive = false,\n  isPlain = false,\n  isDisabled = false,\n  bubbleEvent = false,\n  onToggle = () => undefined as void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n  ...props\n}: KebabToggleProps) => (\n  <Toggle\n    id={id}\n    className={className}\n    isOpen={isOpen}\n    aria-label={ariaLabel}\n    parentRef={parentRef}\n    getMenuRef={getMenuRef}\n    isActive={isActive}\n    isPlain={isPlain}\n    isDisabled={isDisabled}\n    onToggle={onToggle}\n    bubbleEvent={bubbleEvent}\n    {...props}\n  >\n    <EllipsisVIcon />\n  </Toggle>\n);\nKebabToggle.displayName = 'KebabToggle';\n"]},"metadata":{},"sourceType":"module"}