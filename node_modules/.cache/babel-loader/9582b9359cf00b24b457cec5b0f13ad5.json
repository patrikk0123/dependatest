{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport const useForm = function (initValues, validators, callback) {\n  let formValid = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  // const [isFormValid, setIsFormValid] = useState<boolean>(formValid);\n  const [hasChanged, setHasChanged] = useState(false);\n  const [fieldValues, setFieldValues] = useState(initValues);\n  const [fieldErrors, setFieldErrors] = useState({});\n  const [fieldValidators, setFieldValidators] = useState(validators);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const initFieldStates = { ...initValues\n  };\n  Object.keys(initFieldStates).forEach(key => {\n    initFieldStates[key] = 'default';\n  });\n  const [fieldStates, setFieldStates] = useState(initFieldStates);\n  useEffect(() => {\n    console.log(Object.keys(fieldErrors).length);\n\n    if (Object.keys(fieldErrors).length) {\n      setIsSubmitting(false);\n    } else {\n      if (isSubmitting) {\n        callback();\n      }\n    }\n  }, [fieldErrors]);\n\n  const onChange = event => {\n    setFieldValues({ ...fieldValues,\n      [event.currentTarget.name]: event.currentTarget.value\n    });\n    setHasChanged(true);\n  };\n\n  const setError = (fieldName, error) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors,\n        [fieldName]: error\n      });\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'error'\n      });\n    } else {\n      const newErrors = { ...fieldErrors\n      };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'success'\n      });\n    }\n  };\n\n  const onBlur = event => {\n    const fieldName = event.currentTarget.name;\n    const error = fieldValidators[fieldName](fieldValues[fieldName]);\n    setError(fieldName, error);\n  };\n\n  const onSubmit = () => {\n    for (const key in fieldValidators) {\n      const error = fieldValidators[key](fieldValues[key]);\n      setError(key, error);\n    }\n\n    setIsSubmitting(true);\n  };\n\n  return {\n    fieldValues,\n    fieldErrors,\n    fieldStates,\n    hasChanged,\n    onChange,\n    onBlur,\n    onSubmit\n  };\n};","map":{"version":3,"names":["useEffect","useState","useForm","initValues","validators","callback","formValid","hasChanged","setHasChanged","fieldValues","setFieldValues","fieldErrors","setFieldErrors","fieldValidators","setFieldValidators","isSubmitting","setIsSubmitting","initFieldStates","Object","keys","forEach","key","fieldStates","setFieldStates","console","log","length","onChange","event","currentTarget","name","value","setError","fieldName","error","newErrors","onBlur","onSubmit"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\ninterface IFieldValues {\n  [key: string]: string;\n}\n\ninterface IFieldErros {\n  [key: string]: string | undefined;\n}\n\ninterface IFieldValidators {\n  [key: string]: Function;\n}\n\nexport const useForm = (\n  initValues: IFieldValues,\n  validators: IFieldValidators,\n  callback: Function,\n  formValid: boolean = false\n) => {\n  // const [isFormValid, setIsFormValid] = useState<boolean>(formValid);\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  const [fieldErrors, setFieldErrors] = useState<IFieldErros>({});\n  const [fieldValidators, setFieldValidators] = useState<IFieldValidators>(validators);\n\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n  const initFieldStates = { ...initValues };\n  Object.keys(initFieldStates).forEach((key) => {\n    initFieldStates[key] = 'default';\n  });\n  const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n\n  useEffect(() => {\n    console.log(Object.keys(fieldErrors).length);\n    if (Object.keys(fieldErrors).length) {\n      setIsSubmitting(false);\n    } else {\n      if (isSubmitting) {\n        callback();\n      }\n    }\n  }, [fieldErrors]);\n\n  const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setFieldValues({ ...fieldValues, [event.currentTarget.name]: event.currentTarget.value });\n    setHasChanged(true);\n  };\n\n  const setError = (fieldName: string, error: string) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors, [fieldName]: error });\n      setFieldStates({ ...fieldStates, [fieldName]: 'error' });\n    } else {\n      const newErrors = { ...fieldErrors };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      setFieldStates({ ...fieldStates, [fieldName]: 'success' });\n    }\n  };\n\n  const onBlur = (event: React.FormEvent<HTMLInputElement>) => {\n    const fieldName = event.currentTarget.name;\n    const error = fieldValidators[fieldName](fieldValues[fieldName]);\n    setError(fieldName, error);\n  };\n\n  const onSubmit = () => {\n    for (const key in fieldValidators) {\n      const error = fieldValidators[key](fieldValues[key]);\n      setError(key, error);\n    }\n\n    setIsSubmitting(true);\n  };\n\n  return { fieldValues, fieldErrors, fieldStates, hasChanged, onChange, onBlur, onSubmit };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}