{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonVariant } from '../Button';\nexport const DataListToggle = _a => {\n  var {\n    className = '',\n    isExpanded = false,\n    'aria-controls': ariaControls = '',\n    'aria-label': ariaLabel = 'Details',\n    rowid = '',\n    id\n  } = _a,\n      props = __rest(_a, [\"className\", \"isExpanded\", 'aria-controls', 'aria-label', \"rowid\", \"id\"]);\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dataListItemControl, className)\n  }, props), React.createElement(\"div\", {\n    className: css(styles.dataListToggle)\n  }, React.createElement(Button, {\n    id: id,\n    variant: ButtonVariant.plain,\n    \"aria-controls\": ariaControls !== '' && ariaControls,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabel !== 'Details' ? null : `${rowid} ${id}`,\n    \"aria-expanded\": isExpanded\n  }, React.createElement(\"div\", {\n    className: css(styles.dataListToggleIcon)\n  }, React.createElement(AngleRightIcon, null)))));\n};\nDataListToggle.displayName = 'DataListToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,OAAOC,MAAP,MAAmB,4DAAnB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,WAAtC;AAmBA,OAAO,MAAMC,cAAc,GAAkDC,EAAD,IAQlD;MARmD;IAC3EC,SAAS,GAAG,EAD+D;IAE3EC,UAAU,GAAG,KAF8D;IAG3E,iBAAiBC,YAAY,GAAG,EAH2C;IAI3E,cAAcC,SAAS,GAAG,SAJiD;IAK3EC,KAAK,GAAG,EALmE;IAM3EC;EAN2E,IAMzEN;MACCO,KAAK,cAPmE,yEAOnE;;EACiB,OACzBd;IAAKQ,SAAS,EAAEP,GAAG,CAACE,MAAM,CAACY,mBAAR,EAA6BP,SAA7B;EAAnB,GAAgEM,KAAhE,GACEd;IAAKQ,SAAS,EAAEP,GAAG,CAACE,MAAM,CAACa,cAAR;EAAnB,GACEhB,oBAACI,MAAD,EAAO;IACLS,EAAE,EAAEA,EADC;IAELI,OAAO,EAAEZ,aAAa,CAACa,KAFlB;IAEuB,iBACbR,YAAY,KAAK,EAAjB,IAAuBA,YAHjC;IAG6C,cACtCC,SAJP;IAIgB,mBACJA,SAAS,KAAK,SAAd,GAA0B,IAA1B,GAAiC,GAAGC,KAAK,IAAIC,EAAE,EAL3D;IAK6D,iBACnDJ;EANV,CAAP,EAQET;IAAKQ,SAAS,EAAEP,GAAG,CAACE,MAAM,CAACgB,kBAAR;EAAnB,GACEnB,oBAACE,cAAD,EAAe,IAAf,CADF,CARF,CADF,CADF,CADyB;AAiB1B,CAzBM;AA0BPI,cAAc,CAACc,WAAf,GAA6B,gBAA7B","names":["React","css","AngleRightIcon","styles","Button","ButtonVariant","DataListToggle","_a","className","isExpanded","ariaControls","ariaLabel","rowid","id","props","dataListItemControl","dataListToggle","variant","plain","dataListToggleIcon","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataListToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonVariant } from '../Button';\n\nexport interface DataListToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the DataList cell */\n  className?: string;\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Identify the DataList toggle number */\n  id: string;\n  /** Id for the row */\n  rowid?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-labelledby'?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-label'?: string;\n  /** Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them. */\n  'aria-controls'?: string;\n}\n\nexport const DataListToggle: React.FunctionComponent<DataListToggleProps> = ({\n  className = '',\n  isExpanded = false,\n  'aria-controls': ariaControls = '',\n  'aria-label': ariaLabel = 'Details',\n  rowid = '',\n  id,\n  ...props\n}: DataListToggleProps) => (\n  <div className={css(styles.dataListItemControl, className)} {...props}>\n    <div className={css(styles.dataListToggle)}>\n      <Button\n        id={id}\n        variant={ButtonVariant.plain}\n        aria-controls={ariaControls !== '' && ariaControls}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabel !== 'Details' ? null : `${rowid} ${id}`}\n        aria-expanded={isExpanded}\n      >\n        <div className={css(styles.dataListToggleIcon)}>\n          <AngleRightIcon />\n        </div>\n      </Button>\n    </div>\n  </div>\n);\nDataListToggle.displayName = 'DataListToggle';\n"]},"metadata":{},"sourceType":"module"}