{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nexport var DataListCell = function DataListCell(_a) {\n  var _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$width = _a.width,\n      width = _a$width === void 0 ? 1 : _a$width,\n      _a$isFilled = _a.isFilled,\n      isFilled = _a$isFilled === void 0 ? true : _a$isFilled,\n      _a$alignRight = _a.alignRight,\n      alignRight = _a$alignRight === void 0 ? false : _a$alignRight,\n      _a$isIcon = _a.isIcon,\n      isIcon = _a$isIcon === void 0 ? false : _a$isIcon,\n      _a$wrapModifier = _a.wrapModifier,\n      wrapModifier = _a$wrapModifier === void 0 ? null : _a$wrapModifier,\n      props = __rest(_a, [\"children\", \"className\", \"width\", \"isFilled\", \"alignRight\", \"isIcon\", \"wrapModifier\"]);\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dataListCell, width > 1 && styles.modifiers[\"flex_\".concat(width)], !isFilled && styles.modifiers.noFill, alignRight && styles.modifiers.alignRight, isIcon && styles.modifiers.icon, className, wrapModifier && styles.modifiers[wrapModifier])\n  }, props), children);\n};\nDataListCell.displayName = 'DataListCell';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,4DAAnB;AAoBA,OAAO,IAAMC,YAAY,GAA+C,SAA3DA,YAA2D,CAACC,EAAD,EAShD;oBAFHA,GANnBC;MAAAA,oCAAW;qBAMQD,GALnBE;MAAAA,sCAAY;iBAKOF,GAJnBG;MAAAA,8BAAQ;oBAIWH,GAHnBI;MAAAA,oCAAW;sBAGQJ,GAFnBK;MAAAA,wCAAa;kBAEML,GADnBM;MAAAA,gCAAS;wBACUN,GAAnBO;MAAAA,4CAAe;MACZC,QAAKC,WAR+D,sFAQ/D;;EACe,OACvBb;IACEM,SAAS,EAAEL,GAAG,CACZC,MAAM,CAACY,YADK,EAEZP,KAAK,GAAG,CAAR,IAAaL,MAAM,CAACa,SAAP,gBAAyBR,KAAzB,EAFD,EAGZ,CAACC,QAAD,IAAaN,MAAM,CAACa,SAAP,CAAiBC,MAHlB,EAIZP,UAAU,IAAIP,MAAM,CAACa,SAAP,CAAiBN,UAJnB,EAKZC,MAAM,IAAIR,MAAM,CAACa,SAAP,CAAiBE,IALf,EAMZX,SANY,EAOZK,YAAY,IAAIT,MAAM,CAACa,SAAP,CAAiBJ,YAAjB,CAPJ;EADhB,GAUMC,KAVN,GAYGP,QAZH,CADuB;AAexB,CAxBM;AAyBPF,YAAY,CAACe,WAAb,GAA2B,cAA3B","names":["React","css","styles","DataListCell","_a","children","className","width","isFilled","alignRight","isIcon","wrapModifier","props","__rest","dataListCell","modifiers","noFill","icon","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataListCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { DataListWrapModifier } from './DataList';\n\nexport interface DataListCellProps extends Omit<React.HTMLProps<HTMLDivElement>, 'width'> {\n  /** Content rendered inside the DataList cell */\n  children?: React.ReactNode;\n  /** Additional classes added to the DataList cell */\n  className?: string;\n  /** Width (from 1-5) to the DataList cell */\n  width?: 1 | 2 | 3 | 4 | 5;\n  /** Enables the body Content to fill the height of the card */\n  isFilled?: boolean;\n  /**  Aligns the cell content to the right of its parent. */\n  alignRight?: boolean;\n  /** Set to true if the cell content is an Icon */\n  isIcon?: boolean;\n  /** Determines which wrapping modifier to apply to the DataListCell */\n  wrapModifier?: DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord';\n}\n\nexport const DataListCell: React.FunctionComponent<DataListCellProps> = ({\n  children = null,\n  className = '',\n  width = 1,\n  isFilled = true,\n  alignRight = false,\n  isIcon = false,\n  wrapModifier = null,\n  ...props\n}: DataListCellProps) => (\n  <div\n    className={css(\n      styles.dataListCell,\n      width > 1 && styles.modifiers[`flex_${width}` as 'flex_2' | 'flex_3' | 'flex_4' | 'flex_5'],\n      !isFilled && styles.modifiers.noFill,\n      alignRight && styles.modifiers.alignRight,\n      isIcon && styles.modifiers.icon,\n      className,\n      wrapModifier && styles.modifiers[wrapModifier]\n    )}\n    {...props}\n  >\n    {children}\n  </div>\n);\nDataListCell.displayName = 'DataListCell';\n"]},"metadata":{},"sourceType":"module"}