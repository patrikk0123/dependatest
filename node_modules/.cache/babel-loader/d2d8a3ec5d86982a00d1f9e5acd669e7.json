{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { DropdownContext } from '../Dropdown';\nimport { DropdownWithContext } from '../Dropdown/DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport var OptionsMenuPosition;\n\n(function (OptionsMenuPosition) {\n  OptionsMenuPosition[\"right\"] = \"right\";\n  OptionsMenuPosition[\"left\"] = \"left\";\n})(OptionsMenuPosition || (OptionsMenuPosition = {}));\n\nexport var OptionsMenuDirection;\n\n(function (OptionsMenuDirection) {\n  OptionsMenuDirection[\"up\"] = \"up\";\n  OptionsMenuDirection[\"down\"] = \"down\";\n})(OptionsMenuDirection || (OptionsMenuDirection = {}));\n\nexport var OptionsMenu = function OptionsMenu(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      menuItems = _a.menuItems,\n      toggle = _a.toggle,\n      _a$isText = _a.isText,\n      isText = _a$isText === void 0 ? false : _a$isText,\n      _a$isGrouped = _a.isGrouped,\n      isGrouped = _a$isGrouped === void 0 ? false : _a$isGrouped,\n      id = _a.id,\n      ref = _a.ref,\n      _a$menuAppendTo = _a.menuAppendTo,\n      menuAppendTo = _a$menuAppendTo === void 0 ? 'inline' : _a$menuAppendTo,\n      ouiaId = _a.ouiaId,\n      _a$ouiaSafe = _a.ouiaSafe,\n      ouiaSafe = _a$ouiaSafe === void 0 ? true : _a$ouiaSafe,\n      props = __rest(_a, [\"className\", \"menuItems\", \"toggle\", \"isText\", \"isGrouped\", \"id\", \"ref\", \"menuAppendTo\", \"ouiaId\", \"ouiaSafe\"]);\n\n  return React.createElement(DropdownContext.Provider, {\n    value: {\n      id: id,\n      onSelect: function onSelect() {\n        return undefined;\n      },\n      toggleIndicatorClass: styles.optionsMenuToggleIcon,\n      toggleTextClass: styles.optionsMenuToggleText,\n      menuClass: styles.optionsMenuMenu,\n      itemClass: styles.optionsMenuMenuItem,\n      toggleClass: isText ? styles.optionsMenuToggleButton : styles.optionsMenuToggle,\n      baseClass: styles.optionsMenu,\n      disabledClass: styles.modifiers.disabled,\n      menuComponent: isGrouped ? 'div' : 'ul',\n      baseComponent: 'div',\n      ouiaId: useOUIAId(OptionsMenu.displayName, ouiaId),\n      ouiaSafe: ouiaSafe,\n      ouiaComponentType: OptionsMenu.displayName\n    }\n  }, React.createElement(DropdownWithContext, Object.assign({\n    id: id,\n    dropdownItems: menuItems,\n    className: className,\n    isGrouped: isGrouped,\n    toggle: toggle,\n    menuAppendTo: menuAppendTo\n  }, props)));\n};\nOptionsMenu.displayName = 'OptionsMenu';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,kEAAnB;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,mBAAT,QAAoC,iCAApC;AACA,SAAoBC,SAApB,QAAqC,eAArC;AAGA,WAAYC,mBAAZ;;AAAA,WAAYA,mBAAZ,EAA+B;EAC7BA;EACAA;AACD,CAHD,EAAYA,mBAAmB,KAAnBA,mBAAmB,MAA/B;;AAKA,WAAYC,oBAAZ;;AAAA,WAAYA,oBAAZ,EAAgC;EAC9BA;EACAA;AACD,CAHD,EAAYA,oBAAoB,KAApBA,oBAAoB,MAAhC;;AAuCA,OAAO,IAAMC,WAAW,GAA8C,SAAzDA,WAAyD,CAACC,EAAD,EAa/C;qBAFNA,GAVfC;MAAAA,sCAAY;MACZC,YASeF,GATfE;MACAC,SAQeH,GARfG;kBAQeH,GAPfI;MAAAA,gCAAS;qBAOMJ,GANfK;MAAAA,sCAAY;MACZC,KAKeN,GALfM;MAEAC,MAGeP,GAHfO;wBAGeP,GAFfQ;MAAAA,4CAAe;MACfC,SACeT,GADfS;oBACeT,GAAfU;MAAAA,oCAAW;MACRC,QAAKC,WAZ6D,8GAY7D;;EACc,OACtBpB,oBAACE,eAAe,CAACmB,QAAjB,EAAyB;IACvBC,KAAK,EAAE;MACLR,EAAE,EAAFA,EADK;MAELS,QAAQ,EAAE;QAAA,OAAMC,SAAN;MAAA,CAFL;MAGLC,oBAAoB,EAAExB,MAAM,CAACyB,qBAHxB;MAILC,eAAe,EAAE1B,MAAM,CAAC2B,qBAJnB;MAKLC,SAAS,EAAE5B,MAAM,CAAC6B,eALb;MAMLC,SAAS,EAAE9B,MAAM,CAAC+B,mBANb;MAOLC,WAAW,EAAErB,MAAM,GAAGX,MAAM,CAACiC,uBAAV,GAAoCjC,MAAM,CAACkC,iBAPzD;MAQLC,SAAS,EAAEnC,MAAM,CAACoC,WARb;MASLC,aAAa,EAAErC,MAAM,CAACsC,SAAP,CAAiBC,QAT3B;MAULC,aAAa,EAAE5B,SAAS,GAAG,KAAH,GAAW,IAV9B;MAWL6B,aAAa,EAAE,KAXV;MAYLzB,MAAM,EAAEb,SAAS,CAACG,WAAW,CAACoC,WAAb,EAA0B1B,MAA1B,CAZZ;MAaLC,QAAQ,EAARA,QAbK;MAcL0B,iBAAiB,EAAErC,WAAW,CAACoC;IAd1B;EADgB,CAAzB,EAkBE3C,oBAACG,mBAAD,EAAoB0C;IAClB/B,EAAE,EAAEA,EADc;IAElBgC,aAAa,EAAEpC,SAFG;IAGlBD,SAAS,EAAEA,SAHO;IAIlBI,SAAS,EAAEA,SAJO;IAKlBF,MAAM,EAAEA,MALU;IAMlBK,YAAY,EAAEA;EANI,GAOdG,KAPc,CAApB,CAlBF,CADsB;AA6BvB,CA1CM;AA2CPZ,WAAW,CAACoC,WAAZ,GAA0B,aAA1B","names":["React","styles","DropdownContext","DropdownWithContext","useOUIAId","OptionsMenuPosition","OptionsMenuDirection","OptionsMenu","_a","className","menuItems","toggle","isText","isGrouped","id","ref","menuAppendTo","ouiaId","ouiaSafe","props","__rest","Provider","value","onSelect","undefined","toggleIndicatorClass","optionsMenuToggleIcon","toggleTextClass","optionsMenuToggleText","menuClass","optionsMenuMenu","itemClass","optionsMenuMenuItem","toggleClass","optionsMenuToggleButton","optionsMenuToggle","baseClass","optionsMenu","disabledClass","modifiers","disabled","menuComponent","baseComponent","displayName","ouiaComponentType","Object","dropdownItems"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/OptionsMenu/OptionsMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { DropdownContext } from '../Dropdown';\nimport { DropdownWithContext } from '../Dropdown/DropdownWithContext';\nimport { OUIAProps, useOUIAId } from '../../helpers';\nimport { ToggleMenuBaseProps } from '../../helpers/Popper/Popper';\n\nexport enum OptionsMenuPosition {\n  right = 'right',\n  left = 'left'\n}\n\nexport enum OptionsMenuDirection {\n  up = 'up',\n  down = 'down'\n}\n\nexport interface OptionsMenuProps\n  extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>,\n    React.HTMLProps<HTMLDivElement>,\n    OUIAProps {\n  /** Classes applied to root element of the options menu */\n  className?: string;\n  /** Id of the root element of the options menu */\n  id: string;\n  /** Array of OptionsMenuItem and/or OptionMenuGroup nodes that will be rendered in the options menu list */\n  menuItems: React.ReactNode[];\n  /** Either an OptionsMenuToggle or an OptionsMenuToggleWithText to use to toggle the options menu */\n  toggle: React.ReactElement;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n  /** Flag to indicate if menu is groupped */\n  isGrouped?: boolean;\n  /** Indicates where menu will be aligned horizontally */\n  position?: 'right' | 'left';\n  /** Menu will open up or open down from the options menu toggle */\n  direction?: 'up' | 'down';\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n}\n\nexport const OptionsMenu: React.FunctionComponent<OptionsMenuProps> = ({\n  className = '',\n  menuItems,\n  toggle,\n  isText = false,\n  isGrouped = false,\n  id,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref,\n  menuAppendTo = 'inline',\n  ouiaId,\n  ouiaSafe = true,\n  ...props\n}: OptionsMenuProps) => (\n  <DropdownContext.Provider\n    value={{\n      id,\n      onSelect: () => undefined,\n      toggleIndicatorClass: styles.optionsMenuToggleIcon,\n      toggleTextClass: styles.optionsMenuToggleText,\n      menuClass: styles.optionsMenuMenu,\n      itemClass: styles.optionsMenuMenuItem,\n      toggleClass: isText ? styles.optionsMenuToggleButton : styles.optionsMenuToggle,\n      baseClass: styles.optionsMenu,\n      disabledClass: styles.modifiers.disabled,\n      menuComponent: isGrouped ? 'div' : 'ul',\n      baseComponent: 'div',\n      ouiaId: useOUIAId(OptionsMenu.displayName, ouiaId),\n      ouiaSafe,\n      ouiaComponentType: OptionsMenu.displayName\n    }}\n  >\n    <DropdownWithContext\n      id={id}\n      dropdownItems={menuItems}\n      className={className}\n      isGrouped={isGrouped}\n      toggle={toggle}\n      menuAppendTo={menuAppendTo}\n      {...props}\n    />\n  </DropdownContext.Provider>\n);\nOptionsMenu.displayName = 'OptionsMenu';\n"]},"metadata":{},"sourceType":"module"}