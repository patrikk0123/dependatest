{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { canUseDOM } from '../../helpers';\nimport { AlertGroupInline } from './AlertGroupInline';\nexport var AlertGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(AlertGroup, _React$Component);\n\n  var _super = _createSuper(AlertGroup);\n\n  function AlertGroup() {\n    var _this;\n\n    _classCallCheck(this, AlertGroup);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      container: undefined\n    };\n    return _this;\n  }\n\n  _createClass(AlertGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var container = document.createElement('div');\n      var target = this.getTargetElement();\n      this.setState({\n        container: container\n      });\n      target.appendChild(container);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var target = this.getTargetElement();\n\n      if (this.state.container) {\n        target.removeChild(this.state.container);\n      }\n    }\n  }, {\n    key: \"getTargetElement\",\n    value: function getTargetElement() {\n      var appendTo = this.props.appendTo;\n\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n\n      return appendTo || document.body;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          isToast = _a.isToast,\n          isLiveRegion = _a.isLiveRegion,\n          onOverflowClick = _a.onOverflowClick,\n          overflowMessage = _a.overflowMessage,\n          props = __rest(_a, [\"className\", \"children\", \"isToast\", \"isLiveRegion\", \"onOverflowClick\", \"overflowMessage\"]);\n\n      var alertGroup = React.createElement(AlertGroupInline, Object.assign({\n        onOverflowClick: onOverflowClick,\n        className: className,\n        isToast: isToast,\n        isLiveRegion: isLiveRegion,\n        overflowMessage: overflowMessage\n      }, props), children);\n\n      if (!this.props.isToast) {\n        return alertGroup;\n      }\n\n      var container = this.state.container;\n\n      if (!canUseDOM || !container) {\n        return null;\n      }\n\n      return ReactDOM.createPortal(alertGroup, container);\n    }\n  }]);\n\n  return AlertGroup;\n}(React.Component);\nAlertGroup.displayName = 'AlertGroup';","map":{"version":3,"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAuBA,WAAaC,UAAb;EAAA;;EAAA;;EAAA;IAAA;;IAAA;;;IAEE,cAAQ;MACNC,SAAS,EAAEC;IADL,CAAR;IAFF;EAsDC;;EAtDD;IAAA;IAAA,OAME,6BAAiB;MACf,IAAMD,SAAS,GAAGE,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB;MACA,IAAMC,MAAM,GAAgB,KAAKC,gBAAL,EAA5B;MACA,KAAKC,QAAL,CAAc;QAAEN,SAAS,EAATA;MAAF,CAAd;MACAI,MAAM,CAACG,WAAP,CAAmBP,SAAnB;IACD;EAXH;IAAA;IAAA,OAaE,gCAAoB;MAClB,IAAMI,MAAM,GAAgB,KAAKC,gBAAL,EAA5B;;MACA,IAAI,KAAKG,KAAL,CAAWR,SAAf,EAA0B;QACxBI,MAAM,CAACK,WAAP,CAAmB,KAAKD,KAAL,CAAWR,SAA9B;MACD;IACF;EAlBH;IAAA;IAAA,OAoBE,4BAAgB;MACd,IAAMU,QAAQ,GAAG,KAAKC,KAAL,CAAWD,QAA5B;;MACA,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;QAClC,OAAOA,QAAQ,EAAf;MACD;;MACD,OAAOA,QAAQ,IAAIR,QAAQ,CAACU,IAA5B;IACD;EA1BH;IAAA;IAAA,OA4BE,kBAAM;MACE,SAA6F,KAAKD,KAAlG;MAAA,IAAEE,SAAF,GAA8EC,EAA9E,CAAED,SAAF;MAAA,IAAaE,QAAb,GAA8ED,EAA9E,CAAaC,QAAb;MAAA,IAAuBC,OAAvB,GAA8EF,EAA9E,CAAuBE,OAAvB;MAAA,IAAgCC,YAAhC,GAA8EH,EAA9E,CAAgCG,YAAhC;MAAA,IAA8CC,eAA9C,GAA8EJ,EAA9E,CAA8CI,eAA9C;MAAA,IAA+DC,eAA/D,GAA8EL,EAA9E,CAA+DK,eAA/D;MAAA,IAAmFR,KAAnF,GAAwFS,WAAxF,0FAAwF,CAAxF;;MACN,IAAMC,UAAU,GACd1B,oBAACG,gBAAD,EAAiBwB;QACfJ,eAAe,EAAEA,eADF;QAEfL,SAAS,EAAEA,SAFI;QAGfG,OAAO,EAAEA,OAHM;QAIfC,YAAY,EAAEA,YAJC;QAKfE,eAAe,EAAEA;MALF,GAMXR,KANW,CAAjB,EAQGI,QARH,CADF;;MAYA,IAAI,CAAC,KAAKJ,KAAL,CAAWK,OAAhB,EAAyB;QACvB,OAAOK,UAAP;MACD;;MAED,IAAMrB,SAAS,GAAG,KAAKQ,KAAL,CAAWR,SAA7B;;MAEA,IAAI,CAACH,SAAD,IAAc,CAACG,SAAnB,EAA8B;QAC5B,OAAO,IAAP;MACD;;MAED,OAAOJ,QAAQ,CAAC2B,YAAT,CAAsBF,UAAtB,EAAkCrB,SAAlC,CAAP;IACD;EArDH;;EAAA;AAAA,EAAgCL,KAAK,CAAC6B,SAAtC;AACSzB,yBAAc,YAAd","names":["React","ReactDOM","canUseDOM","AlertGroupInline","AlertGroup","container","undefined","document","createElement","target","getTargetElement","setState","appendChild","state","removeChild","appendTo","props","body","className","_a","children","isToast","isLiveRegion","onOverflowClick","overflowMessage","__rest","alertGroup","Object","createPortal","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/AlertGroup/AlertGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { canUseDOM } from '../../helpers';\nimport { AlertGroupInline } from './AlertGroupInline';\n\nexport interface AlertGroupProps extends Omit<React.HTMLProps<HTMLUListElement>, 'className'> {\n  /** Additional classes added to the AlertGroup */\n  className?: string;\n  /** Alerts to be rendered in the AlertGroup */\n  children?: React.ReactNode;\n  /** Toast notifications are positioned at the top right corner of the viewport */\n  isToast?: boolean;\n  /** Turns the container into a live region so that changes to content within the AlertGroup, such as appending an Alert, are reliably announced to assistive technology. */\n  isLiveRegion?: boolean;\n  /** Determine where the alert is appended to */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Function to call if user clicks on overflow message */\n  onOverflowClick?: () => void;\n  /** Custom text to show for the overflow message */\n  overflowMessage?: string;\n}\n\ninterface AlertGroupState {\n  container: HTMLElement;\n}\n\nexport class AlertGroup extends React.Component<AlertGroupProps, AlertGroupState> {\n  static displayName = 'AlertGroup';\n  state = {\n    container: undefined\n  } as AlertGroupState;\n\n  componentDidMount() {\n    const container = document.createElement('div');\n    const target: HTMLElement = this.getTargetElement();\n    this.setState({ container });\n    target.appendChild(container);\n  }\n\n  componentWillUnmount() {\n    const target: HTMLElement = this.getTargetElement();\n    if (this.state.container) {\n      target.removeChild(this.state.container);\n    }\n  }\n\n  getTargetElement() {\n    const appendTo = this.props.appendTo;\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  }\n\n  render() {\n    const { className, children, isToast, isLiveRegion, onOverflowClick, overflowMessage, ...props } = this.props;\n    const alertGroup = (\n      <AlertGroupInline\n        onOverflowClick={onOverflowClick}\n        className={className}\n        isToast={isToast}\n        isLiveRegion={isLiveRegion}\n        overflowMessage={overflowMessage}\n        {...props}\n      >\n        {children}\n      </AlertGroupInline>\n    );\n    if (!this.props.isToast) {\n      return alertGroup;\n    }\n\n    const container = this.state.container;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(alertGroup, container);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}