{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initForm - Init form state (just values and validators)\n * @param callback - Function to call when submitting user input data\n *\n * initForm has to specify all inputs (keys to IFormState) - even if just empty objects.\n *\n * @returns form states and access functions\n *  -> form             - whole form state\n *  -> applyValues      - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - is submit button disabled?\n *\n * initForm and form objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessage -- actual error messages (in case of an error)\n *    -> state  -- state of a field ('default', 'success', 'error')\n *    -> validation:    -- means of validation\n *      -> isRequired   -- is field required?\n *      -> validators:  -- validation functions and their error messages\n *        -> validator    -- validation function\n *        -> errorMessage -- error message that should be set in a case of an error\n */\nexport const useForm = (initFields, submitCallback) => {\n  const transformFormData = useCallback(values => {\n    const defaultFields = {};\n\n    for (const key in initFields) {\n      defaultFields[key] = {}; // init data\n\n      defaultFields[key].isRequired = initFields[key].isRequired; // SHALLOW COPY (should not change anyway)\n\n      defaultFields[key].validators = initFields[key].validators; // additional data\n\n      defaultFields[key].state = 'default';\n\n      if (values !== null && values !== void 0 && values[key]) {\n        defaultFields[key].value = values[key];\n      } else if (initFields[key].value) {\n        defaultFields[key].value = initFields[key].value;\n      } else {\n        defaultFields[key].value = '';\n      }\n    }\n\n    return defaultFields;\n  }, [initFields]);\n  const [fields, setFields] = useState(transformFormData()); // is submit button disabled?\n\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true); // has any field been changed?\n  // important for edit page (do not submit until any new content)\n\n  const [hasChanged, setHasChanged] = useState(false); // are all validated inputs valid?\n\n  const isFormValid = useCallback(() => {\n    for (const key in fields) {\n      var _fields$key$errorMess;\n\n      if ((_fields$key$errorMess = fields[key].errorMessages) !== null && _fields$key$errorMess !== void 0 && _fields$key$errorMess.length) return false;\n    }\n\n    return true;\n  }, [fields]); // are all required inputs filled?\n\n  const areRequiredFilled = useCallback(() => {\n    for (const key in fields) {\n      if (fields[key].isRequired && !fields[key].value) {\n        return false;\n      }\n    }\n\n    return true;\n  }, [fields]); // callback (on change of an input)\n\n  const onChange = (fieldName, fieldValue) => {\n    // also delete old error messages, new checks are going to be done\n    const newField = { ...fields[fieldName],\n      value: fieldValue ? fieldValue : '',\n      errorMessages: [],\n      state: 'default'\n    };\n    validate(newField);\n    setFields({ ...fields,\n      [fieldName]: newField\n    });\n    setHasChanged(true);\n  }; // validate field state and change error messages / state\n\n\n  const validate = field => {\n    if (field.isRequired) {\n      const error = field.value ? '' : 'Field must be filled.';\n      addError(field, error);\n      setState(field);\n    }\n\n    if (field.validators) {\n      for (const validator of field.validators) {\n        const error = validator.validator(field.value) ? '' : validator.errorMessage;\n        addError(field, error);\n      }\n\n      setState(field);\n    }\n  }; // add error message to field state\n\n\n  const addError = (field, error) => {\n    if (error) {\n      var _field$errorMessages;\n\n      (_field$errorMessages = field.errorMessages) === null || _field$errorMessages === void 0 ? void 0 : _field$errorMessages.push(error);\n    }\n  }; // set state of a field (errors should have been set before)\n\n\n  const setState = field => {\n    var _field$errorMessages2;\n\n    if ((_field$errorMessages2 = field.errorMessages) !== null && _field$errorMessages2 !== void 0 && _field$errorMessages2.length) {\n      field.state = 'error';\n    } else {\n      // display success state only if not empty\n      if (field.value) {\n        field.state = 'success';\n      } else {\n        field.state = 'default';\n      }\n    }\n  }; // callback (on submit of a form)\n\n\n  const onSubmit = () => {\n    submitCallback().catch(error => {\n      // backend error, just log it at the moment\n      console.error(error); // FUTURE IMPLEMENTATION:\n      // const formCopy = { ...form };\n      // for (const key in error.details.validation) {\n      //   const newField = { ...form[key], error: error.details.validation[key].errorMessage, state: 'error' };\n      //   formCopy[key] = newField;\n      // }\n      // setForm(formCopy);\n    }); // reset state to 'default' (valid inputs wont be highlighted)\n\n    const formCopy = { ...fields\n    };\n\n    for (const key in formCopy) {\n      formCopy[key].state = 'default';\n    }\n\n    setFields(formCopy);\n    setHasChanged(false);\n  }; // set all input field to values (used for edit form)\n\n\n  const reinitialize = useCallback(fieldValues => {\n    setFields(transformFormData(fieldValues));\n  }, [transformFormData]); // on change of a input, check whether submit button should be disabled\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fields, hasChanged, isFormValid, areRequiredFilled]);\n  return {\n    fields,\n    reinitialize,\n    onChange,\n    onSubmit,\n    isSubmitDisabled\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useState","useForm","initFields","submitCallback","transformFormData","values","defaultFields","key","isRequired","validators","state","value","fields","setFields","isSubmitDisabled","setIsSubmitDisabled","hasChanged","setHasChanged","isFormValid","errorMessages","length","areRequiredFilled","onChange","fieldName","fieldValue","newField","validate","field","error","addError","setState","validator","errorMessage","push","onSubmit","catch","console","formCopy","reinitialize","fieldValues"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { TextInputProps } from '@patternfly/react-core';\n\ninterface IFieldValues {\n  [key: string]: string | undefined;\n}\n\ninterface IValidator {\n  validator: Function;\n  errorMessage: string;\n}\n\ninterface IField {\n  value?: string;\n  errorMessages?: string[];\n  state?: TextInputProps['validated'];\n  isRequired?: boolean;\n  validators?: IValidator[];\n}\n\ninterface IFields {\n  [key: string]: IField;\n}\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initForm - Init form state (just values and validators)\n * @param callback - Function to call when submitting user input data\n *\n * initForm has to specify all inputs (keys to IFormState) - even if just empty objects.\n *\n * @returns form states and access functions\n *  -> form             - whole form state\n *  -> applyValues      - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - is submit button disabled?\n *\n * initForm and form objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessage -- actual error messages (in case of an error)\n *    -> state  -- state of a field ('default', 'success', 'error')\n *    -> validation:    -- means of validation\n *      -> isRequired   -- is field required?\n *      -> validators:  -- validation functions and their error messages\n *        -> validator    -- validation function\n *        -> errorMessage -- error message that should be set in a case of an error\n */\nexport const useForm = (initFields: Omit<Omit<IFields, 'errorMessages'>, 'state'>, submitCallback: Function) => {\n  const transformFormData = useCallback(\n    (values?: IFieldValues): IFields => {\n      const defaultFields: IFields = {};\n      for (const key in initFields) {\n        defaultFields[key] = {};\n\n        // init data\n        defaultFields[key].isRequired = initFields[key].isRequired;\n        // SHALLOW COPY (should not change anyway)\n        defaultFields[key].validators = initFields[key].validators;\n\n        // additional data\n        defaultFields[key].state = 'default';\n        if (values?.[key]) {\n          defaultFields[key].value = values[key];\n        } else if (initFields[key].value) {\n          defaultFields[key].value = initFields[key].value;\n        } else {\n          defaultFields[key].value = '';\n        }\n      }\n      return defaultFields;\n    },\n    [initFields]\n  );\n\n  const [fields, setFields] = useState<IFields>(transformFormData());\n\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  // has any field been changed?\n  // important for edit page (do not submit until any new content)\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // are all validated inputs valid?\n  const isFormValid = useCallback(() => {\n    for (const key in fields) {\n      if (fields[key].errorMessages?.length) return false;\n    }\n\n    return true;\n  }, [fields]);\n\n  // are all required inputs filled?\n  const areRequiredFilled = useCallback(() => {\n    for (const key in fields) {\n      if (fields[key].isRequired && !fields[key].value) {\n        return false;\n      }\n    }\n\n    return true;\n  }, [fields]);\n\n  // callback (on change of an input)\n  const onChange = (fieldName: string, fieldValue: any) => {\n    // also delete old error messages, new checks are going to be done\n\n    const newField = {\n      ...fields[fieldName],\n      value: fieldValue ? fieldValue : '',\n      errorMessages: [],\n      state: 'default' as TextInputProps['validated'],\n    };\n    validate(newField);\n    setFields({ ...fields, [fieldName]: newField });\n\n    setHasChanged(true);\n  };\n\n  // validate field state and change error messages / state\n  const validate = (field: IField) => {\n    if (field.isRequired) {\n      const error = field.value ? '' : 'Field must be filled.';\n      addError(field, error);\n      setState(field);\n    }\n    if (field.validators) {\n      for (const validator of field.validators) {\n        const error = validator.validator(field.value) ? '' : validator.errorMessage;\n        addError(field, error);\n      }\n      setState(field);\n    }\n  };\n\n  // add error message to field state\n  const addError = (field: IField, error: string) => {\n    if (error) {\n      field.errorMessages?.push(error);\n    }\n  };\n\n  // set state of a field (errors should have been set before)\n  const setState = (field: IField) => {\n    if (field.errorMessages?.length) {\n      field.state = 'error';\n    } else {\n      // display success state only if not empty\n      if (field.value) {\n        field.state = 'success';\n      } else {\n        field.state = 'default';\n      }\n    }\n  };\n\n  // callback (on submit of a form)\n  const onSubmit = () => {\n    submitCallback().catch((error: any) => {\n      // backend error, just log it at the moment\n      console.error(error);\n\n      // FUTURE IMPLEMENTATION:\n      // const formCopy = { ...form };\n      // for (const key in error.details.validation) {\n      //   const newField = { ...form[key], error: error.details.validation[key].errorMessage, state: 'error' };\n      //   formCopy[key] = newField;\n      // }\n      // setForm(formCopy);\n    });\n\n    // reset state to 'default' (valid inputs wont be highlighted)\n    const formCopy = { ...fields };\n    for (const key in formCopy) {\n      formCopy[key].state = 'default';\n    }\n    setFields(formCopy);\n    setHasChanged(false);\n  };\n\n  // set all input field to values (used for edit form)\n  const reinitialize = useCallback(\n    (fieldValues: IFieldValues) => {\n      setFields(transformFormData(fieldValues));\n    },\n    [transformFormData]\n  );\n\n  // on change of a input, check whether submit button should be disabled\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fields, hasChanged, isFormValid, areRequiredFilled]);\n\n  return { fields, reinitialize, onChange, onSubmit, isSubmitDisabled };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}