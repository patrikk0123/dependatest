{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { InternalFormFieldGroup } from './InternalFormFieldGroup';\nexport var FormFieldGroupExpandable = function FormFieldGroupExpandable(_a) {\n  var children = _a.children,\n      className = _a.className,\n      header = _a.header,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      toggleAriaLabel = _a.toggleAriaLabel,\n      props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpanded\", \"toggleAriaLabel\"]);\n\n  var _useState = useState(isExpanded),\n      _useState2 = _slicedToArray(_useState, 2),\n      localIsExpanded = _useState2[0],\n      setIsExpanded = _useState2[1];\n\n  return React.createElement(InternalFormFieldGroup, Object.assign({\n    className: className,\n    header: header,\n    isExpandable: true,\n    isExpanded: localIsExpanded,\n    toggleAriaLabel: toggleAriaLabel,\n    onToggle: function onToggle() {\n      return setIsExpanded(!localIsExpanded);\n    }\n  }, props), children);\n};\nFormFieldGroupExpandable.displayName = 'FormFieldGroupExpandable';","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAeA,OAAO,IAAMC,wBAAwB,GAA2D,SAAnFA,wBAAmF,CAACC,EAAD,EAO5D;MANlCC,WAIeD,GAJfC;MACAC,YAGeF,GAHfE;MACAC,SAEeH,GAFfG;sBAEeH,GADfI;MAAAA,wCAAa;MACbC,kBAAeL,GAAfK;MACGC,QAAKC,WANuF,oEAMvF;;EAER,gBAAyCV,QAAQ,CAACO,UAAD,CAAjD;EAAA;EAAA,IAAOI,eAAP;EAAA,IAAwBC,aAAxB;;EAEA,OACEb,oBAACE,sBAAD,EAAuBY;IACrBR,SAAS,EAAEA,SADU;IAErBC,MAAM,EAAEA,MAFa;IAGrBQ,YAAY,MAHS;IAIrBP,UAAU,EAAEI,eAJS;IAKrBH,eAAe,EAAEA,eALI;IAMrBO,QAAQ,EAAE;MAAA,OAAMH,aAAa,CAAC,CAACD,eAAF,CAAnB;IAAA;EANW,GAOjBF,KAPiB,CAAvB,EASGL,QATH,CADF;AAaD,CAvBM;AAwBPF,wBAAwB,CAACc,WAAzB,GAAuC,0BAAvC","names":["React","useState","InternalFormFieldGroup","FormFieldGroupExpandable","_a","children","className","header","isExpanded","toggleAriaLabel","props","__rest","localIsExpanded","setIsExpanded","Object","isExpandable","onToggle","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Form/FormFieldGroupExpandable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport { InternalFormFieldGroup } from './InternalFormFieldGroup';\n\nexport interface FormFieldGroupExpandableProps extends React.HTMLProps<HTMLDivElement> {\n  /** Anything that can be rendered as form field group content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the form field group. */\n  className?: string;\n  /** Form field group header */\n  header?: React.ReactNode;\n  /** Flag indicating if the form field group is initially expanded */\n  isExpanded?: boolean;\n  /** Aria-label to use on the form field group toggle button */\n  toggleAriaLabel?: string;\n}\n\nexport const FormFieldGroupExpandable: React.FunctionComponent<FormFieldGroupExpandableProps> = ({\n  children,\n  className,\n  header,\n  isExpanded = false,\n  toggleAriaLabel,\n  ...props\n}: FormFieldGroupExpandableProps) => {\n  const [localIsExpanded, setIsExpanded] = useState(isExpanded);\n\n  return (\n    <InternalFormFieldGroup\n      className={className}\n      header={header}\n      isExpandable\n      isExpanded={localIsExpanded}\n      toggleAriaLabel={toggleAriaLabel}\n      onToggle={() => setIsExpanded(!localIsExpanded)}\n      {...props}\n    >\n      {children}\n    </InternalFormFieldGroup>\n  );\n};\nFormFieldGroupExpandable.displayName = 'FormFieldGroupExpandable';\n"]},"metadata":{},"sourceType":"module"}