{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Backdrop/backdrop';\nimport { canUseDOM } from '../../helpers';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { AboutModalContainer } from './AboutModalContainer';\nexport class AboutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.id = AboutModal.currentId++;\n    this.ariaLabelledBy = `pf-about-modal-title-${this.id}`;\n    this.ariaDescribedBy = `pf-about-modal-content-${this.id}`;\n\n    this.handleEscKeyClick = event => {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.props.isOpen) {\n        this.props.onClose();\n      }\n    };\n\n    this.toggleSiblingsFromScreenReaders = hide => {\n      const {\n        appendTo\n      } = this.props;\n      const target = this.getElement(appendTo);\n      const bodyChildren = target.children;\n\n      for (const child of Array.from(bodyChildren)) {\n        if (child !== this.state.container) {\n          hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');\n        }\n      }\n    };\n\n    this.getElement = appendTo => {\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n\n      return appendTo || document.body;\n    };\n\n    this.state = {\n      container: undefined\n    };\n\n    if (props.brandImageSrc && !props.brandImageAlt) {\n      // eslint-disable-next-line no-console\n      console.error('AboutModal:', 'brandImageAlt is required when a brandImageSrc is specified');\n    }\n  }\n\n  componentDidMount() {\n    const container = document.createElement('div');\n    const target = this.getElement(this.props.appendTo);\n    this.setState({\n      container\n    });\n    target.appendChild(container);\n    target.addEventListener('keydown', this.handleEscKeyClick, false);\n\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n    }\n  }\n\n  componentDidUpdate() {\n    const target = this.getElement(this.props.appendTo);\n\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(true);\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = this.getElement(this.props.appendTo);\n\n    if (this.state.container) {\n      target.removeChild(this.state.container);\n    }\n\n    target.removeEventListener('keydown', this.handleEscKeyClick, false);\n    target.classList.remove(css(styles.backdropOpen));\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n          {\n      appendTo\n    } = _a,\n          props = __rest(_a, [\"appendTo\"]);\n\n    const {\n      container\n    } = this.state;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(React.createElement(AboutModalContainer, Object.assign({\n      aboutModalBoxHeaderId: this.ariaLabelledBy,\n      aboutModalBoxContentId: this.ariaDescribedBy\n    }, props)), container);\n  }\n\n}\nAboutModal.displayName = 'AboutModal';\nAboutModal.currentId = 0;\nAboutModal.defaultProps = {\n  className: '',\n  isOpen: false,\n  onClose: () => undefined,\n  productName: '',\n  trademark: '',\n  backgroundImageSrc: '',\n  noAboutModalBoxContentContainer: false,\n  appendTo: null\n};","map":{"version":3,"mappings":"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","names":["React","ReactDOM","css","styles","canUseDOM","KEY_CODES","AboutModalContainer","AboutModal","Component","constructor","props","currentId","id","event","keyCode","ESCAPE_KEY","isOpen","onClose","hide","appendTo","target","getElement","bodyChildren","children","child","Array","from","state","container","setAttribute","removeAttribute","document","body","undefined","brandImageSrc","brandImageAlt","console","error","componentDidMount","createElement","setState","appendChild","addEventListener","handleEscKeyClick","classList","add","backdropOpen","remove","componentDidUpdate","toggleSiblingsFromScreenReaders","componentWillUnmount","removeChild","removeEventListener","render","_a","createPortal","Object","aboutModalBoxHeaderId","ariaLabelledBy","aboutModalBoxContentId","ariaDescribedBy","className","productName","trademark","backgroundImageSrc","noAboutModalBoxContentContainer"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/AboutModal/AboutModal.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Backdrop/backdrop';\nimport { canUseDOM } from '../../helpers';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { AboutModalContainer } from './AboutModalContainer';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface AboutModalProps {\n  /** Content rendered inside the about modal */\n  children: React.ReactNode;\n  /** Additional classes added to the about modal */\n  className?: string;\n  /** Flag to show the about modal  */\n  isOpen?: boolean;\n  /** A callback for when the close button is clicked  */\n  onClose?: () => void;\n  /** Product name  */\n  productName?: string;\n  /** Trademark information  */\n  trademark?: string;\n  /** The URL of the image for the brand  */\n  brandImageSrc: string;\n  /** The alternate text of the brand image  */\n  brandImageAlt: string;\n  /** The URL of the image for the background  */\n  backgroundImageSrc?: string;\n  /** Prevents the about modal from rendering content inside a container; allows for more flexible layouts  */\n  noAboutModalBoxContentContainer?: boolean;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Set aria label to the close button */\n  closeButtonAriaLabel?: string;\n  /** Flag to disable focus trap */\n  disableFocusTrap?: boolean;\n}\n\ninterface ModalState {\n  container: HTMLElement;\n}\n\nexport class AboutModal extends React.Component<AboutModalProps, ModalState> {\n  static displayName = 'AboutModal';\n  private static currentId = 0;\n  private id = AboutModal.currentId++;\n  ariaLabelledBy = `pf-about-modal-title-${this.id}`;\n  ariaDescribedBy = `pf-about-modal-content-${this.id}`;\n\n  static defaultProps: PickOptional<AboutModalProps> = {\n    className: '',\n    isOpen: false,\n    onClose: (): any => undefined,\n    productName: '',\n    trademark: '',\n    backgroundImageSrc: '',\n    noAboutModalBoxContentContainer: false,\n    appendTo: null as HTMLElement\n  };\n\n  constructor(props: AboutModalProps) {\n    super(props);\n\n    this.state = {\n      container: undefined\n    };\n    if (props.brandImageSrc && !props.brandImageAlt) {\n      // eslint-disable-next-line no-console\n      console.error('AboutModal:', 'brandImageAlt is required when a brandImageSrc is specified');\n    }\n  }\n\n  handleEscKeyClick = (event: KeyboardEvent) => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.props.isOpen) {\n      this.props.onClose();\n    }\n  };\n\n  toggleSiblingsFromScreenReaders = (hide: boolean) => {\n    const { appendTo } = this.props;\n    const target: HTMLElement = this.getElement(appendTo);\n    const bodyChildren = target.children;\n    for (const child of Array.from(bodyChildren)) {\n      if (child !== this.state.container) {\n        hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');\n      }\n    }\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const container = document.createElement('div');\n    const target: HTMLElement = this.getElement(this.props.appendTo);\n    this.setState({ container });\n    target.appendChild(container);\n    target.addEventListener('keydown', this.handleEscKeyClick, false);\n\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n    }\n  }\n\n  componentDidUpdate() {\n    const target: HTMLElement = this.getElement(this.props.appendTo);\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(true);\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target: HTMLElement = this.getElement(this.props.appendTo);\n    if (this.state.container) {\n      target.removeChild(this.state.container);\n    }\n    target.removeEventListener('keydown', this.handleEscKeyClick, false);\n    target.classList.remove(css(styles.backdropOpen));\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { appendTo, ...props } = this.props;\n    const { container } = this.state;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      <AboutModalContainer\n        aboutModalBoxHeaderId={this.ariaLabelledBy}\n        aboutModalBoxContentId={this.ariaDescribedBy}\n        {...props}\n      />,\n      container\n    ) as React.ReactElement;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}