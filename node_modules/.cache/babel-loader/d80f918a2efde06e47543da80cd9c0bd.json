{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nconst buttonVariantStyles = {\n  default: '',\n  primary: styles.modifiers.primary,\n  secondary: styles.modifiers.secondary\n};\nexport class Toggle extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.buttonRef = React.createRef();\n\n    this.componentDidMount = () => {\n      document.addEventListener('click', this.onDocClick);\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.onEscPress);\n    };\n\n    this.componentWillUnmount = () => {\n      document.removeEventListener('click', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.onEscPress);\n    };\n\n    this.onDocClick = event => {\n      const {\n        isOpen,\n        parentRef,\n        onToggle,\n        getMenuRef\n      } = this.props;\n      const menuRef = getMenuRef && getMenuRef();\n      const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n\n      if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n        onToggle(false, event);\n      }\n    };\n\n    this.onEscPress = event => {\n      const {\n        parentRef,\n        getMenuRef\n      } = this.props;\n      const keyCode = event.keyCode || event.which;\n      const menuRef = getMenuRef && getMenuRef();\n      const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target);\n      const escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target);\n\n      if (this.props.isOpen && (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') && (escFromToggle || escFromWithinMenu)) {\n        this.props.onToggle(false, event);\n        this.buttonRef.current.focus();\n      }\n    };\n\n    this.onKeyDown = event => {\n      if (event.key === 'Tab' && !this.props.isOpen) {\n        return;\n      }\n\n      if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && this.props.isOpen) {\n        if (!this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        this.props.onToggle(!this.props.isOpen, event);\n      } else if ((event.key === 'Enter' || event.key === ' ') && !this.props.isOpen) {\n        if (!this.props.bubbleEvent) {\n          event.stopPropagation();\n        }\n\n        event.preventDefault();\n        this.props.onToggle(!this.props.isOpen, event);\n        this.props.onEnter();\n      }\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      children,\n      isOpen,\n      isDisabled,\n      isPlain,\n      isText,\n      isPrimary,\n      isSplitButton,\n      toggleVariant,\n      onToggle,\n      'aria-haspopup': ariaHasPopup,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      bubbleEvent,\n      onEnter,\n      parentRef,\n      getMenuRef,\n\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      id,\n      type\n    } = _a,\n          props = __rest(_a, [\"className\", \"children\", \"isOpen\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"isSplitButton\", \"toggleVariant\", \"onToggle\", 'aria-haspopup', \"isActive\", \"bubbleEvent\", \"onEnter\", \"parentRef\", \"getMenuRef\", \"id\", \"type\"]);\n\n    return React.createElement(DropdownContext.Consumer, null, _ref => {\n      let {\n        toggleClass\n      } = _ref;\n      return React.createElement(\"button\", Object.assign({}, props, {\n        id: id,\n        ref: this.buttonRef,\n        className: css(isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, isPrimary && styles.modifiers.primary, buttonVariantStyles[toggleVariant], className),\n        type: type || 'button',\n        onClick: event => onToggle(!isOpen, event),\n        \"aria-expanded\": isOpen,\n        \"aria-haspopup\": ariaHasPopup,\n        onKeyDown: event => this.onKeyDown(event),\n        disabled: isDisabled\n      }), children);\n    });\n  }\n\n}\nToggle.displayName = 'Toggle';\nToggle.defaultProps = {\n  className: '',\n  isOpen: false,\n  isActive: false,\n  isDisabled: false,\n  isPlain: false,\n  isText: false,\n  isPrimary: false,\n  isSplitButton: false,\n  onToggle: () => {},\n  onEnter: () => {},\n  bubbleEvent: false\n};","map":{"version":3,"mappings":"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","names":["React","styles","DropdownContext","css","KEY_CODES","buttonVariantStyles","default","primary","modifiers","secondary","Toggle","Component","constructor","createRef","document","addEventListener","onDocClick","onEscPress","removeEventListener","event","isOpen","parentRef","onToggle","getMenuRef","props","menuRef","clickedOnToggle","current","contains","target","clickedWithinMenu","keyCode","which","escFromToggle","escFromWithinMenu","ESCAPE_KEY","key","buttonRef","focus","bubbleEvent","stopPropagation","preventDefault","onEnter","render","_a","className","children","isDisabled","isPlain","isText","isPrimary","isSplitButton","toggleVariant","ariaHasPopup","isActive","id","type","Consumer","toggleClass","ref","dropdownToggleButton","dropdownToggle","active","plain","text","onClick","onKeyDown","disabled"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/Toggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToggleProps {\n  /** HTML ID of dropdown toggle */\n  id: string;\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Anything which can be rendered as dropdown toggle */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (\n    isOpen: boolean,\n    event: MouseEvent | TouchEvent | KeyboardEvent | React.KeyboardEvent<any> | React.MouseEvent<HTMLButtonElement>\n  ) => void;\n  /** Callback called when the Enter key is pressed */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** The menu element */\n  getMenuRef?: () => HTMLElement;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Disables the dropdown toggle */\n  isDisabled?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** @deprecated Use `toggleVariant` instead. Display the toggle with a primary button style */\n  isPrimary?: boolean;\n  /** Style the toggle as a child of a split button */\n  isSplitButton?: boolean;\n  /** Alternate styles for the dropdown toggle button */\n  toggleVariant?: 'primary' | 'secondary' | 'default';\n  /** Flag for aria popup */\n  'aria-haspopup'?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'tree';\n  /** Allows selecting toggle to select parent */\n  bubbleEvent?: boolean;\n}\n\nconst buttonVariantStyles = {\n  default: '',\n  primary: styles.modifiers.primary,\n  secondary: styles.modifiers.secondary\n};\n\nexport class Toggle extends React.Component<ToggleProps> {\n  static displayName = 'Toggle';\n  private buttonRef = React.createRef<HTMLButtonElement>();\n\n  static defaultProps: PickOptional<ToggleProps> = {\n    className: '',\n    isOpen: false,\n    isActive: false,\n    isDisabled: false,\n    isPlain: false,\n    isText: false,\n    isPrimary: false,\n    isSplitButton: false,\n    onToggle: () => {},\n    onEnter: () => {},\n    bubbleEvent: false\n  };\n\n  componentDidMount = () => {\n    document.addEventListener('click', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('click', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  };\n\n  onDocClick = (event: MouseEvent | TouchEvent) => {\n    const { isOpen, parentRef, onToggle, getMenuRef } = this.props;\n    const menuRef = getMenuRef && getMenuRef();\n    const clickedOnToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const clickedWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target as Node);\n    if (isOpen && !(clickedOnToggle || clickedWithinMenu)) {\n      onToggle(false, event);\n    }\n  };\n\n  onEscPress = (event: KeyboardEvent) => {\n    const { parentRef, getMenuRef } = this.props;\n    const keyCode = event.keyCode || event.which;\n    const menuRef = getMenuRef && getMenuRef();\n    const escFromToggle = parentRef && parentRef.current && parentRef.current.contains(event.target as Node);\n    const escFromWithinMenu = menuRef && menuRef.contains && menuRef.contains(event.target as Node);\n    if (\n      this.props.isOpen &&\n      (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') &&\n      (escFromToggle || escFromWithinMenu)\n    ) {\n      this.props.onToggle(false, event);\n      this.buttonRef.current.focus();\n    }\n  };\n\n  onKeyDown = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Tab' && !this.props.isOpen) {\n      return;\n    }\n    if ((event.key === 'Tab' || event.key === 'Enter' || event.key === ' ') && this.props.isOpen) {\n      if (!this.props.bubbleEvent) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n\n      this.props.onToggle(!this.props.isOpen, event);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !this.props.isOpen) {\n      if (!this.props.bubbleEvent) {\n        event.stopPropagation();\n      }\n      event.preventDefault();\n\n      this.props.onToggle(!this.props.isOpen, event);\n      this.props.onEnter();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      isOpen,\n      isDisabled,\n      isPlain,\n      isText,\n      isPrimary,\n      isSplitButton,\n      toggleVariant,\n      onToggle,\n      'aria-haspopup': ariaHasPopup,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      bubbleEvent,\n      onEnter,\n      parentRef,\n      getMenuRef,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      id,\n      type,\n      ...props\n    } = this.props;\n    return (\n      <DropdownContext.Consumer>\n        {({ toggleClass }) => (\n          <button\n            {...props}\n            id={id}\n            ref={this.buttonRef}\n            className={css(\n              isSplitButton ? styles.dropdownToggleButton : toggleClass || styles.dropdownToggle,\n              isActive && styles.modifiers.active,\n              isPlain && styles.modifiers.plain,\n              isText && styles.modifiers.text,\n              isPrimary && styles.modifiers.primary,\n              buttonVariantStyles[toggleVariant],\n              className\n            )}\n            type={type || 'button'}\n            onClick={event => onToggle(!isOpen, event)}\n            aria-expanded={isOpen}\n            aria-haspopup={ariaHasPopup}\n            onKeyDown={event => this.onKeyDown(event)}\n            disabled={isDisabled}\n          >\n            {children}\n          </button>\n        )}\n      </DropdownContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}