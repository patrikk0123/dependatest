{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Tooltip } from '../Tooltip';\nexport var DataListText = function DataListText(_a) {\n  var _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'span' : _a$component,\n      _a$wrapModifier = _a.wrapModifier,\n      wrapModifier = _a$wrapModifier === void 0 ? null : _a$wrapModifier,\n      _a$tooltip = _a.tooltip,\n      tooltipProp = _a$tooltip === void 0 ? '' : _a$tooltip,\n      _a$onMouseEnter = _a.onMouseEnter,\n      onMouseEnterProp = _a$onMouseEnter === void 0 ? function () {} : _a$onMouseEnter,\n      props = __rest(_a, [\"children\", \"className\", \"component\", \"wrapModifier\", \"tooltip\", \"onMouseEnter\"]);\n\n  var Component = component;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tooltip = _React$useState2[0],\n      setTooltip = _React$useState2[1];\n\n  var onMouseEnter = function onMouseEnter(event) {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      setTooltip(tooltipProp || event.target.innerHTML);\n    } else {\n      setTooltip('');\n    }\n\n    onMouseEnterProp(event);\n  };\n\n  var text = React.createElement(Component, Object.assign({\n    onMouseEnter: onMouseEnter,\n    className: css(className, wrapModifier && styles.modifiers[wrapModifier], styles.dataListText)\n  }, props), children);\n  return tooltip !== '' ? React.createElement(Tooltip, {\n    content: tooltip,\n    isVisible: true\n  }, text) : text;\n};\nDataListText.displayName = 'DataListText';","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,4DAAnB;AACA,SAASC,OAAT,QAAwB,YAAxB;AAkBA,OAAO,IAAMC,YAAY,GAA+C,SAA3DA,YAA2D,CAACC,EAAD,EAQhD;oBAFmBA,GALzCC;MAAAA,oCAAW;qBAK8BD,GAJzCE;MAAAA,sCAAY;qBAI6BF,GAHzCG;MAAAA,sCAAY;wBAG6BH,GAFzCI;MAAAA,4CAAe;mBAE0BJ,GADzCK;MAASC,sCAAc;wBACkBN,GAAzCO;MAAcC,gDAAmB,YAAK,CAAG;MACtCC,QAAKC,WAP+D,iFAO/D;;EAER,IAAMC,SAAS,GAAGR,SAAlB;;EAEA,sBAA8BR,KAAK,CAACiB,QAAN,CAAe,EAAf,CAA9B;EAAA;EAAA,IAAOP,OAAP;EAAA,IAAgBQ,UAAhB;;EACA,IAAMN,YAAY,GAAG,SAAfA,YAAe,CAACO,KAAD,EAAe;IAClC,IAAIA,KAAK,CAACC,MAAN,CAAaC,WAAb,GAA2BF,KAAK,CAACC,MAAN,CAAaE,WAA5C,EAAyD;MACvDJ,UAAU,CAACP,WAAW,IAAIQ,KAAK,CAACC,MAAN,CAAaG,SAA7B,CAAV;IACD,CAFD,MAEO;MACLL,UAAU,CAAC,EAAD,CAAV;IACD;;IACDL,gBAAgB,CAACM,KAAD,CAAhB;EACD,CAPD;;EASA,IAAMK,IAAI,GACRxB,oBAACgB,SAAD,EAAUS;IACRb,YAAY,EAAEA,YADN;IAERL,SAAS,EAAEN,GAAG,CAACM,SAAD,EAAYE,YAAY,IAAIP,MAAM,CAACwB,SAAP,CAAiBjB,YAAjB,CAA5B,EAA4DP,MAAM,CAACyB,YAAnE;EAFN,GAGJb,KAHI,CAAV,EAKGR,QALH,CADF;EAUA,OAAOI,OAAO,KAAK,EAAZ,GACLV,oBAACG,OAAD,EAAQ;IAACyB,OAAO,EAAElB,OAAV;IAAmBmB,SAAS;EAA5B,CAAR,EACGL,IADH,CADK,GAKLA,IALF;AAOD,CAtCM;AAuCPpB,YAAY,CAAC0B,WAAb,GAA2B,cAA3B","names":["React","css","styles","Tooltip","DataListText","_a","children","className","component","wrapModifier","tooltip","tooltipProp","onMouseEnter","onMouseEnterProp","props","__rest","Component","useState","setTooltip","event","target","offsetWidth","scrollWidth","innerHTML","text","Object","modifiers","dataListText","content","isVisible","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataListText.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Tooltip } from '../Tooltip';\nimport { DataListWrapModifier } from './DataList';\n\nexport interface DataListTextProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered within the data list text */\n  children?: React.ReactNode;\n  /** Additional classes added to the data list text */\n  className?: string;\n  /** Determines which element to render as a data list text. Usually div or span */\n  component?: React.ReactNode;\n  /** Determines which wrapping modifier to apply to the data list text */\n  wrapModifier?: DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord';\n  /** text to display on the tooltip */\n  tooltip?: string;\n  /** callback used to create the tooltip if text is truncated */\n  onMouseEnter?: (event: any) => void;\n}\n\nexport const DataListText: React.FunctionComponent<DataListTextProps> = ({\n  children = null,\n  className = '',\n  component = 'span',\n  wrapModifier = null,\n  tooltip: tooltipProp = '',\n  onMouseEnter: onMouseEnterProp = () => {},\n  ...props\n}: DataListTextProps) => {\n  const Component = component as any;\n\n  const [tooltip, setTooltip] = React.useState('');\n  const onMouseEnter = (event: any) => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      setTooltip(tooltipProp || event.target.innerHTML);\n    } else {\n      setTooltip('');\n    }\n    onMouseEnterProp(event);\n  };\n\n  const text = (\n    <Component\n      onMouseEnter={onMouseEnter}\n      className={css(className, wrapModifier && styles.modifiers[wrapModifier], styles.dataListText)}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n\n  return tooltip !== '' ? (\n    <Tooltip content={tooltip} isVisible>\n      {text}\n    </Tooltip>\n  ) : (\n    text\n  );\n};\nDataListText.displayName = 'DataListText';\n"]},"metadata":{},"sourceType":"module"}