{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport labelStyles from '@patternfly/react-styles/css/components/Label/label';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Label } from '../Label';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport var LabelGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(LabelGroup, _React$Component);\n\n  var _super = _createSuper(LabelGroup);\n\n  function LabelGroup(props) {\n    var _this;\n\n    _classCallCheck(this, LabelGroup);\n\n    _this = _super.call(this, props);\n    _this.headingRef = React.createRef();\n\n    _this.toggleCollapse = function () {\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen,\n          isTooltipVisible: Boolean(_this.headingRef.current && _this.headingRef.current.offsetWidth < _this.headingRef.current.scrollWidth)\n        };\n      });\n    };\n\n    _this.state = {\n      isOpen: _this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(LabelGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      });\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel(id) {\n      var _this$props = this.props,\n          categoryName = _this$props.categoryName,\n          tooltipPosition = _this$props.tooltipPosition;\n      var isTooltipVisible = this.state.isTooltipVisible;\n      return isTooltipVisible ? React.createElement(Tooltip, {\n        position: tooltipPosition,\n        content: categoryName\n      }, React.createElement(\"span\", {\n        tabIndex: 0,\n        ref: this.headingRef,\n        className: css(styles.labelGroupLabel)\n      }, React.createElement(\"span\", {\n        \"aria-hidden\": \"true\",\n        id: id\n      }, categoryName))) : React.createElement(\"span\", {\n        ref: this.headingRef,\n        className: css(styles.labelGroupLabel),\n        \"aria-hidden\": \"true\",\n        id: id\n      }, categoryName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          categoryName = _a.categoryName,\n          children = _a.children,\n          className = _a.className,\n          isClosable = _a.isClosable,\n          isCompact = _a.isCompact,\n          closeBtnAriaLabel = _a.closeBtnAriaLabel,\n          ariaLabel = _a['aria-label'],\n          onClick = _a.onClick,\n          numLabels = _a.numLabels,\n          expandedText = _a.expandedText,\n          collapsedText = _a.collapsedText,\n          defaultIsOpen = _a.defaultIsOpen,\n          tooltipPosition = _a.tooltipPosition,\n          isVertical = _a.isVertical,\n          isEditable = _a.isEditable,\n          hasEditableTextArea = _a.hasEditableTextArea,\n          editableTextAreaProps = _a.editableTextAreaProps,\n          rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"isCompact\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"numLabels\", \"expandedText\", \"collapsedText\", \"defaultIsOpen\", \"tooltipPosition\", \"isVertical\", \"isEditable\", \"hasEditableTextArea\", \"editableTextAreaProps\"]);\n\n      var isOpen = this.state.isOpen;\n      var numChildren = React.Children.count(children);\n      var collapsedTextResult = fillTemplate(collapsedText, {\n        remaining: React.Children.count(children) - numLabels\n      });\n\n      var renderLabelGroup = function renderLabelGroup(id) {\n        var labelArray = !isOpen ? React.Children.toArray(children).slice(0, numLabels) : React.Children.toArray(children);\n        var content = React.createElement(React.Fragment, null, categoryName && _this2.renderLabel(id), React.createElement(\"ul\", Object.assign({\n          className: css(styles.labelGroupList)\n        }, categoryName && {\n          'aria-labelledby': id\n        }, !categoryName && {\n          'aria-label': ariaLabel\n        }, {\n          role: \"list\"\n        }, rest), labelArray.map(function (child, i) {\n          return React.createElement(\"li\", {\n            className: css(styles.labelGroupListItem),\n            key: i\n          }, child);\n        }), numChildren > numLabels && React.createElement(\"li\", {\n          className: css(styles.labelGroupListItem)\n        }, React.createElement(Label, {\n          isOverflowLabel: true,\n          onClick: _this2.toggleCollapse,\n          className: css(isCompact && labelStyles.modifiers.compact)\n        }, isOpen ? expandedText : collapsedTextResult)), isEditable && hasEditableTextArea && React.createElement(\"li\", {\n          className: css(styles.labelGroupListItem, styles.modifiers.textarea)\n        }, React.createElement(\"textarea\", Object.assign({\n          className: css(styles.labelGroupTextarea),\n          rows: 1,\n          tabIndex: 0\n        }, editableTextAreaProps)))));\n        var close = React.createElement(\"div\", {\n          className: css(styles.labelGroupClose)\n        }, React.createElement(Button, {\n          variant: \"plain\",\n          \"aria-label\": closeBtnAriaLabel,\n          onClick: onClick,\n          id: \"remove_group_\".concat(id),\n          \"aria-labelledby\": \"remove_group_\".concat(id, \" \").concat(id)\n        }, React.createElement(TimesCircleIcon, {\n          \"aria-hidden\": \"true\"\n        })));\n        return React.createElement(\"div\", {\n          className: css(styles.labelGroup, className, categoryName && styles.modifiers.category, isVertical && styles.modifiers.vertical, isEditable && styles.modifiers.editable)\n        }, React.createElement(\"div\", {\n          className: css(styles.labelGroupMain)\n        }, content), isClosable && close);\n      };\n\n      return numChildren === 0 ? null : React.createElement(GenerateId, null, function (randomId) {\n        return renderLabelGroup(_this2.props.id || randomId);\n      });\n    }\n  }]);\n\n  return LabelGroup;\n}(React.Component);\nLabelGroup.displayName = 'LabelGroup';\nLabelGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numLabels: 3,\n  isClosable: false,\n  isCompact: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: function onClick(_e) {\n    return undefined;\n  },\n  closeBtnAriaLabel: 'Close label group',\n  tooltipPosition: 'top',\n  'aria-label': 'Label group category',\n  isVertical: false,\n  isEditable: false,\n  hasEditableTextArea: false\n};","map":{"version":3,"mappings":"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","names":["React","styles","labelStyles","css","Button","Label","Tooltip","TimesCircleIcon","fillTemplate","GenerateId","LabelGroup","props","createRef","setState","isOpen","prevState","isTooltipVisible","Boolean","headingRef","current","offsetWidth","scrollWidth","state","defaultIsOpen","id","categoryName","tooltipPosition","position","content","tabIndex","ref","className","labelGroupLabel","_a","children","isClosable","isCompact","closeBtnAriaLabel","ariaLabel","onClick","numLabels","expandedText","collapsedText","isVertical","isEditable","hasEditableTextArea","editableTextAreaProps","rest","__rest","numChildren","Children","count","collapsedTextResult","remaining","renderLabelGroup","labelArray","toArray","slice","Fragment","renderLabel","labelGroupList","role","map","child","i","labelGroupListItem","key","isOverflowLabel","toggleCollapse","modifiers","compact","textarea","labelGroupTextarea","rows","close","labelGroupClose","variant","labelGroup","category","vertical","editable","labelGroupMain","randomId","Component","_e","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/LabelGroup/LabelGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport labelStyles from '@patternfly/react-styles/css/components/Label/label';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Label } from '../Label';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface LabelGroupProps extends React.HTMLProps<HTMLUListElement> {\n  /** Content rendered inside the label group. Should be <Label> elements. */\n  children?: React.ReactNode;\n  /** Additional classes added to the label item */\n  className?: string;\n  /** Flag for having the label group default to expanded */\n  defaultIsOpen?: boolean;\n  /** Customizable \"Show Less\" text string */\n  expandedText?: string;\n  /** Customizeable template string. Use variable \"${remaining}\" for the overflow label count. */\n  collapsedText?: string;\n  /** Category name text for the label group category.  If this prop is supplied the label group with have a label and category styling applied */\n  categoryName?: string;\n  /** Aria label for label group that does not have a category name */\n  'aria-label'?: string;\n  /** Set number of labels to show before overflow */\n  numLabels?: number;\n  /** Flag if label group can be closed */\n  isClosable?: boolean;\n  /** Flag indicating the labels in the group are compact */\n  isCompact?: boolean;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Function that is called when clicking on the label group close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Position of the tooltip which is displayed if the category name text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Flag to implement a vertical layout */\n  isVertical?: boolean;\n  /** @beta Flag indicating contained labels are editable. Allows spacing for a text input after the labels. */\n  isEditable?: boolean;\n  /** @beta Flag indicating the editable label group should be appended with a textarea. */\n  hasEditableTextArea?: boolean;\n  /** @beta Additional props passed to the editable textarea. */\n  editableTextAreaProps?: any;\n}\n\ninterface LabelGroupState {\n  isOpen: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class LabelGroup extends React.Component<LabelGroupProps, LabelGroupState> {\n  static displayName = 'LabelGroup';\n  constructor(props: LabelGroupProps) {\n    super(props);\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  private headingRef = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: LabelGroupProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numLabels: 3,\n    isClosable: false,\n    isCompact: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    closeBtnAriaLabel: 'Close label group',\n    tooltipPosition: 'top',\n    'aria-label': 'Label group category',\n    isVertical: false,\n    isEditable: false,\n    hasEditableTextArea: false\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    });\n  }\n\n  toggleCollapse = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen,\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    }));\n  };\n\n  renderLabel(id: string) {\n    const { categoryName, tooltipPosition } = this.props;\n    const { isTooltipVisible } = this.state;\n    return isTooltipVisible ? (\n      <Tooltip position={tooltipPosition} content={categoryName}>\n        <span tabIndex={0} ref={this.headingRef} className={css(styles.labelGroupLabel)}>\n          <span aria-hidden=\"true\" id={id}>\n            {categoryName}\n          </span>\n        </span>\n      </Tooltip>\n    ) : (\n      <span ref={this.headingRef} className={css(styles.labelGroupLabel)} aria-hidden=\"true\" id={id}>\n        {categoryName}\n      </span>\n    );\n  }\n\n  render() {\n    const {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      isCompact,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      numLabels,\n      expandedText,\n      collapsedText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition,\n      isVertical,\n      isEditable,\n      hasEditableTextArea,\n      editableTextAreaProps,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n    const { isOpen } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText as string, {\n      remaining: React.Children.count(children) - numLabels\n    });\n\n    const renderLabelGroup = (id: string) => {\n      const labelArray = !isOpen\n        ? React.Children.toArray(children).slice(0, numLabels)\n        : React.Children.toArray(children);\n\n      const content = (\n        <React.Fragment>\n          {categoryName && this.renderLabel(id)}\n          <ul\n            className={css(styles.labelGroupList)}\n            {...(categoryName && { 'aria-labelledby': id })}\n            {...(!categoryName && { 'aria-label': ariaLabel })}\n            role=\"list\"\n            {...rest}\n          >\n            {labelArray.map((child, i) => (\n              <li className={css(styles.labelGroupListItem)} key={i}>\n                {child}\n              </li>\n            ))}\n            {numChildren > numLabels && (\n              <li className={css(styles.labelGroupListItem)}>\n                <Label\n                  isOverflowLabel\n                  onClick={this.toggleCollapse}\n                  className={css(isCompact && labelStyles.modifiers.compact)}\n                >\n                  {isOpen ? expandedText : collapsedTextResult}\n                </Label>\n              </li>\n            )}\n            {isEditable && hasEditableTextArea && (\n              <li className={css(styles.labelGroupListItem, styles.modifiers.textarea)}>\n                <textarea className={css(styles.labelGroupTextarea)} rows={1} tabIndex={0} {...editableTextAreaProps} />\n              </li>\n            )}\n          </ul>\n        </React.Fragment>\n      );\n\n      const close = (\n        <div className={css(styles.labelGroupClose)}>\n          <Button\n            variant=\"plain\"\n            aria-label={closeBtnAriaLabel}\n            onClick={onClick}\n            id={`remove_group_${id}`}\n            aria-labelledby={`remove_group_${id} ${id}`}\n          >\n            <TimesCircleIcon aria-hidden=\"true\" />\n          </Button>\n        </div>\n      );\n\n      return (\n        <div\n          className={css(\n            styles.labelGroup,\n            className,\n            categoryName && styles.modifiers.category,\n            isVertical && styles.modifiers.vertical,\n            isEditable && styles.modifiers.editable\n          )}\n        >\n          {<div className={css(styles.labelGroupMain)}>{content}</div>}\n          {isClosable && close}\n        </div>\n      );\n    };\n\n    return numChildren === 0 ? null : (\n      <GenerateId>{randomId => renderLabelGroup(this.props.id || randomId)}</GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}