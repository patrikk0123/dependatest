{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplate } from './ToggleTemplate';\nexport class PaginationOptionsMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.parentRef = React.createRef();\n\n    this.onToggle = isOpen => {\n      this.setState({\n        isOpen\n      });\n    };\n\n    this.onSelect = () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen\n      }));\n    };\n\n    this.handleNewPerPage = (_evt, newPerPage) => {\n      const {\n        page,\n        onPerPageSelect,\n        itemCount,\n        defaultToFullPage\n      } = this.props;\n      let newPage = page;\n\n      while (Math.ceil(itemCount / newPerPage) < newPage) {\n        newPage--;\n      }\n\n      if (defaultToFullPage) {\n        if (itemCount / newPerPage !== newPage) {\n          while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n            newPage--;\n          }\n        }\n      }\n\n      const startIdx = (newPage - 1) * newPerPage;\n      const endIdx = newPage * newPerPage;\n      return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n    };\n\n    this.renderItems = () => {\n      const {\n        perPageOptions,\n        perPage,\n        perPageSuffix\n      } = this.props;\n      return perPageOptions.map(_ref => {\n        let {\n          value,\n          title\n        } = _ref;\n        return React.createElement(DropdownItem, {\n          key: value,\n          component: \"button\",\n          \"data-action\": `per-page-${value}`,\n          className: css(perPage === value && 'pf-m-selected'),\n          onClick: event => this.handleNewPerPage(event, value)\n        }, title, ` ${perPageSuffix}`, perPage === value && React.createElement(\"div\", {\n          className: css(styles.optionsMenuMenuItemIcon)\n        }, React.createElement(CheckIcon, null)));\n      });\n    };\n\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  render() {\n    const {\n      widgetId,\n      isDisabled,\n      itemsPerPageTitle,\n      dropDirection,\n      optionsToggle,\n      perPageOptions,\n      toggleTemplate,\n      firstIndex,\n      lastIndex,\n      itemCount,\n      itemsTitle,\n      ofWord,\n      perPageComponent\n    } = this.props;\n    const {\n      isOpen\n    } = this.state;\n    return React.createElement(DropdownContext.Provider, {\n      value: {\n        id: widgetId,\n        onSelect: this.onSelect,\n        toggleIndicatorClass: perPageComponent === 'div' ? styles.optionsMenuToggleButtonIcon : styles.optionsMenuToggleIcon,\n        toggleTextClass: styles.optionsMenuToggleText,\n        menuClass: styles.optionsMenuMenu,\n        itemClass: styles.optionsMenuMenuItem,\n        toggleClass: ' ',\n        baseClass: styles.optionsMenu,\n        disabledClass: styles.modifiers.disabled,\n        menuComponent: 'ul',\n        baseComponent: 'div',\n        ouiaComponentType: PaginationOptionsMenu.displayName\n      }\n    }, React.createElement(DropdownWithContext, {\n      direction: dropDirection,\n      isOpen: isOpen,\n      toggle: React.createElement(OptionsToggle, {\n        optionsToggle: optionsToggle,\n        itemsPerPageTitle: itemsPerPageTitle,\n        showToggle: perPageOptions && perPageOptions.length > 0,\n        onToggle: this.onToggle,\n        isOpen: isOpen,\n        widgetId: widgetId,\n        firstIndex: firstIndex,\n        lastIndex: lastIndex,\n        itemCount: itemCount,\n        itemsTitle: itemsTitle,\n        ofWord: ofWord,\n        toggleTemplate: toggleTemplate,\n        parentRef: this.parentRef.current,\n        isDisabled: isDisabled,\n        perPageComponent: perPageComponent\n      }),\n      dropdownItems: this.renderItems(),\n      isPlain: true\n    }));\n  }\n\n}\nPaginationOptionsMenu.displayName = 'PaginationOptionsMenu';\nPaginationOptionsMenu.defaultProps = {\n  className: '',\n  widgetId: '',\n  isDisabled: false,\n  dropDirection: DropdownDirection.down,\n  perPageOptions: [],\n  itemsPerPageTitle: 'Items per page',\n  perPageSuffix: 'per page',\n  optionsToggle: '',\n  ofWord: 'of',\n  perPage: 0,\n  firstIndex: 0,\n  lastIndex: 0,\n  defaultToFullPage: false,\n  itemsTitle: 'items',\n  toggleTemplate: ToggleTemplate,\n  onPerPageSelect: () => null,\n  perPageComponent: 'div'\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","DropdownItem","DropdownDirection","DropdownWithContext","DropdownContext","CheckIcon","OptionsToggle","ToggleTemplate","PaginationOptionsMenu","Component","constructor","props","createRef","isOpen","setState","prevState","_evt","newPerPage","page","onPerPageSelect","itemCount","defaultToFullPage","newPage","Math","ceil","startIdx","endIdx","perPageOptions","perPage","perPageSuffix","map","value","title","key","component","className","onClick","event","handleNewPerPage","optionsMenuMenuItemIcon","state","render","widgetId","isDisabled","itemsPerPageTitle","dropDirection","optionsToggle","toggleTemplate","firstIndex","lastIndex","itemsTitle","ofWord","perPageComponent","Provider","id","onSelect","toggleIndicatorClass","optionsMenuToggleButtonIcon","optionsMenuToggleIcon","toggleTextClass","optionsMenuToggleText","menuClass","optionsMenuMenu","itemClass","optionsMenuMenuItem","toggleClass","baseClass","optionsMenu","disabledClass","modifiers","disabled","menuComponent","baseComponent","ouiaComponentType","displayName","direction","toggle","showToggle","length","onToggle","parentRef","current","dropdownItems","renderItems","isPlain","down"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Pagination/PaginationOptionsMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplateProps, ToggleTemplate } from './ToggleTemplate';\nimport { PerPageOptions, OnPerPageSelect } from './Pagination';\n\nexport interface PaginationOptionsMenuProps extends React.HTMLProps<HTMLDivElement> {\n  /** Custom class name added to the pagination options menu */\n  className?: string;\n  /** Id added to the title of the Pagination options menu */\n  widgetId?: string;\n  /** Flag indicating if pagination options menu is disabled */\n  isDisabled?: boolean;\n  /** Menu will open up or open down from the options menu toggle */\n  dropDirection?: 'up' | 'down';\n  /** Array of titles and values which will be the options on the options menu dropdown */\n  perPageOptions?: PerPageOptions[];\n  /** The title of the pagination options menu */\n  itemsPerPageTitle?: string;\n  /** Current page number */\n  page?: number;\n  /** The suffix to be displayed after each option on the options menu dropdown */\n  perPageSuffix?: string;\n  /** The type or title of the items being paginated */\n  itemsTitle?: string;\n  /** Accessible label for the options toggle */\n  optionsToggle?: string;\n  /** The total number of items being paginated */\n  itemCount?: number;\n  /** The first index of the items being paginated */\n  firstIndex?: number;\n  /** The last index of the items being paginated */\n  lastIndex?: number;\n  /** Flag to show last full page of results if perPage selected > remaining rows */\n  defaultToFullPage?: boolean;\n  /** The number of items to be displayed per page */\n  perPage?: number;\n  /** The number of the last page */\n  lastPage?: number;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */\n  toggleTemplate: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Function called when user selects number of items per page. */\n  onPerPageSelect?: OnPerPageSelect;\n  /** Label for the English word \"of\" */\n  ofWord?: string;\n  /** Component to be used for wrapping the toggle contents. Use 'button' when you want\n   * all of the toggle text to be clickable.\n   */\n  perPageComponent?: 'div' | 'button';\n}\n\ninterface PaginationOptionsMenuState {\n  isOpen: boolean;\n}\n\nexport class PaginationOptionsMenu extends React.Component<PaginationOptionsMenuProps, PaginationOptionsMenuState> {\n  static displayName = 'PaginationOptionsMenu';\n  private parentRef = React.createRef<HTMLDivElement>();\n  static defaultProps: PaginationOptionsMenuProps = {\n    className: '',\n    widgetId: '',\n    isDisabled: false,\n    dropDirection: DropdownDirection.down,\n    perPageOptions: [] as PerPageOptions[],\n    itemsPerPageTitle: 'Items per page',\n    perPageSuffix: 'per page',\n    optionsToggle: '',\n    ofWord: 'of',\n    perPage: 0,\n    firstIndex: 0,\n    lastIndex: 0,\n    defaultToFullPage: false,\n    itemsTitle: 'items',\n    toggleTemplate: ToggleTemplate,\n    onPerPageSelect: () => null as any,\n    perPageComponent: 'div'\n  };\n\n  constructor(props: PaginationOptionsMenuProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  onToggle = (isOpen: boolean) => {\n    this.setState({ isOpen });\n  };\n\n  onSelect = () => {\n    this.setState((prevState: PaginationOptionsMenuState) => ({ isOpen: !prevState.isOpen }));\n  };\n\n  handleNewPerPage = (_evt: React.MouseEvent | React.KeyboardEvent | MouseEvent, newPerPage: number) => {\n    const { page, onPerPageSelect, itemCount, defaultToFullPage } = this.props;\n    let newPage = page;\n\n    while (Math.ceil(itemCount / newPerPage) < newPage) {\n      newPage--;\n    }\n\n    if (defaultToFullPage) {\n      if (itemCount / newPerPage !== newPage) {\n        while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n          newPage--;\n        }\n      }\n    }\n    const startIdx = (newPage - 1) * newPerPage;\n    const endIdx = newPage * newPerPage;\n    return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n  };\n\n  renderItems = () => {\n    const { perPageOptions, perPage, perPageSuffix } = this.props;\n\n    return perPageOptions.map(({ value, title }) => (\n      <DropdownItem\n        key={value}\n        component=\"button\"\n        data-action={`per-page-${value}`}\n        className={css(perPage === value && 'pf-m-selected')}\n        onClick={event => this.handleNewPerPage(event, value)}\n      >\n        {title}\n        {` ${perPageSuffix}`}\n        {perPage === value && (\n          <div className={css(styles.optionsMenuMenuItemIcon)}>\n            <CheckIcon />\n          </div>\n        )}\n      </DropdownItem>\n    ));\n  };\n\n  render() {\n    const {\n      widgetId,\n      isDisabled,\n      itemsPerPageTitle,\n      dropDirection,\n      optionsToggle,\n      perPageOptions,\n      toggleTemplate,\n      firstIndex,\n      lastIndex,\n      itemCount,\n      itemsTitle,\n      ofWord,\n      perPageComponent\n    } = this.props;\n    const { isOpen } = this.state;\n\n    return (\n      <DropdownContext.Provider\n        value={{\n          id: widgetId,\n          onSelect: this.onSelect,\n          toggleIndicatorClass:\n            perPageComponent === 'div' ? styles.optionsMenuToggleButtonIcon : styles.optionsMenuToggleIcon,\n          toggleTextClass: styles.optionsMenuToggleText,\n          menuClass: styles.optionsMenuMenu,\n          itemClass: styles.optionsMenuMenuItem,\n          toggleClass: ' ',\n          baseClass: styles.optionsMenu,\n          disabledClass: styles.modifiers.disabled,\n          menuComponent: 'ul',\n          baseComponent: 'div',\n          ouiaComponentType: PaginationOptionsMenu.displayName\n        }}\n      >\n        <DropdownWithContext\n          direction={dropDirection}\n          isOpen={isOpen}\n          toggle={\n            <OptionsToggle\n              optionsToggle={optionsToggle}\n              itemsPerPageTitle={itemsPerPageTitle}\n              showToggle={perPageOptions && perPageOptions.length > 0}\n              onToggle={this.onToggle}\n              isOpen={isOpen}\n              widgetId={widgetId}\n              firstIndex={firstIndex}\n              lastIndex={lastIndex}\n              itemCount={itemCount}\n              itemsTitle={itemsTitle}\n              ofWord={ofWord}\n              toggleTemplate={toggleTemplate}\n              parentRef={this.parentRef.current}\n              isDisabled={isDisabled}\n              perPageComponent={perPageComponent}\n            />\n          }\n          dropdownItems={this.renderItems()}\n          isPlain\n        />\n      </DropdownContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}