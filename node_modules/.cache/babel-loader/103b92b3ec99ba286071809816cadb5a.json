{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport var NavList = /*#__PURE__*/function (_React$Component) {\n  _inherits(NavList, _React$Component);\n\n  var _super = _createSuper(NavList);\n\n  function NavList() {\n    var _this;\n\n    _classCallCheck(this, NavList);\n\n    _this = _super.apply(this, arguments);\n    _this.state = {\n      scrollViewAtStart: false,\n      scrollViewAtEnd: false\n    };\n    _this.navList = React.createRef();\n\n    _this.observer = function () {};\n\n    _this.handleScrollButtons = function () {\n      var container = _this.navList.current;\n\n      if (container) {\n        // check if it elements are in view\n        var scrollViewAtStart = isElementInView(container, container.firstChild, false);\n        var scrollViewAtEnd = isElementInView(container, container.lastChild, false);\n\n        _this.setState({\n          scrollViewAtStart: scrollViewAtStart,\n          scrollViewAtEnd: scrollViewAtEnd\n        });\n\n        _this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n      }\n    };\n\n    _this.scrollLeft = function () {\n      // find first Element that is fully in view on the left, then scroll to the element before it\n      var container = _this.navList.current;\n\n      if (container) {\n        var childrenArr = Array.from(container.children);\n        var firstElementInView;\n        var lastElementOutOfView;\n\n        for (var i = 0; i < childrenArr.length && !firstElementInView; i++) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            firstElementInView = childrenArr[i];\n            lastElementOutOfView = childrenArr[i - 1];\n          }\n        }\n\n        if (lastElementOutOfView) {\n          container.scrollLeft -= lastElementOutOfView.scrollWidth;\n        }\n\n        _this.handleScrollButtons();\n      }\n    };\n\n    _this.scrollRight = function () {\n      // find last Element that is fully in view on the right, then scroll to the element after it\n      var container = _this.navList.current;\n\n      if (container) {\n        var childrenArr = Array.from(container.children);\n        var lastElementInView;\n        var firstElementOutOfView;\n\n        for (var i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n          if (isElementInView(container, childrenArr[i], false)) {\n            lastElementInView = childrenArr[i];\n            firstElementOutOfView = childrenArr[i + 1];\n          }\n        }\n\n        if (firstElementOutOfView) {\n          container.scrollLeft += firstElementOutOfView.scrollWidth;\n        }\n\n        _this.handleScrollButtons();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(NavList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons);\n      this.handleScrollButtons();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.observer();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          children = _a.children,\n          className = _a.className,\n          ariaLeftScroll = _a.ariaLeftScroll,\n          ariaRightScroll = _a.ariaRightScroll,\n          props = __rest(_a, [\"children\", \"className\", \"ariaLeftScroll\", \"ariaRightScroll\"]);\n\n      var _this$state = this.state,\n          scrollViewAtStart = _this$state.scrollViewAtStart,\n          scrollViewAtEnd = _this$state.scrollViewAtEnd;\n      return React.createElement(NavContext.Consumer, null, function (_ref) {\n        var isHorizontal = _ref.isHorizontal;\n        return React.createElement(PageSidebarContext.Consumer, null, function (_ref2) {\n          var isNavOpen = _ref2.isNavOpen;\n          return React.createElement(React.Fragment, null, isHorizontal && React.createElement(\"button\", {\n            className: css(styles.navScrollButton),\n            \"aria-label\": ariaLeftScroll,\n            onClick: _this2.scrollLeft,\n            disabled: scrollViewAtStart,\n            tabIndex: isNavOpen ? null : -1\n          }, React.createElement(AngleLeftIcon, null)), React.createElement(\"ul\", Object.assign({\n            ref: _this2.navList,\n            className: css(styles.navList, className),\n            onScroll: _this2.handleScrollButtons\n          }, props), children), isHorizontal && React.createElement(\"button\", {\n            className: css(styles.navScrollButton),\n            \"aria-label\": ariaRightScroll,\n            onClick: _this2.scrollRight,\n            disabled: scrollViewAtEnd,\n            tabIndex: isNavOpen ? null : -1\n          }, React.createElement(AngleRightIcon, null)));\n        });\n      });\n    }\n  }]);\n\n  return NavList;\n}(React.Component);\nNavList.displayName = 'NavList';\nNavList.contextType = NavContext;\nNavList.defaultProps = {\n  ariaLeftScroll: 'Scroll left',\n  ariaRightScroll: 'Scroll right'\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","AngleLeftIcon","AngleRightIcon","isElementInView","NavContext","PageSidebarContext","getResizeObserver","NavList","scrollViewAtStart","scrollViewAtEnd","createRef","container","navList","current","firstChild","lastChild","setState","context","updateIsScrollable","childrenArr","Array","from","children","firstElementInView","lastElementOutOfView","i","length","scrollLeft","scrollWidth","handleScrollButtons","lastElementInView","firstElementOutOfView","observer","props","_a","className","ariaLeftScroll","ariaRightScroll","__rest","state","Consumer","isHorizontal","isNavOpen","Fragment","navScrollButton","onClick","disabled","tabIndex","ref","onScroll","scrollRight","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Nav/NavList.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Nav/nav';\nimport { css } from '@patternfly/react-styles';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { isElementInView } from '../../helpers/util';\nimport { NavContext } from './Nav';\nimport { PageSidebarContext } from '../Page/PageSidebar';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\n\nexport interface NavListProps\n  extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement> {\n  /** Children nodes */\n  children?: React.ReactNode;\n  /** Additional classes added to the list */\n  className?: string;\n  /** Aria-label for the left scroll button */\n  ariaLeftScroll?: string;\n  /** Aria-label for the right scroll button */\n  ariaRightScroll?: string;\n}\n\nexport class NavList extends React.Component<NavListProps> {\n  static displayName = 'NavList';\n  static contextType = NavContext;\n  context!: React.ContextType<typeof NavContext>;\n  static defaultProps: NavListProps = {\n    ariaLeftScroll: 'Scroll left',\n    ariaRightScroll: 'Scroll right'\n  };\n\n  state = {\n    scrollViewAtStart: false,\n    scrollViewAtEnd: false\n  };\n\n  navList = React.createRef<HTMLUListElement>();\n  observer: any = () => {};\n\n  handleScrollButtons = () => {\n    const container = this.navList.current;\n    if (container) {\n      // check if it elements are in view\n      const scrollViewAtStart = isElementInView(container, container.firstChild as HTMLElement, false);\n      const scrollViewAtEnd = isElementInView(container, container.lastChild as HTMLElement, false);\n      this.setState({\n        scrollViewAtStart,\n        scrollViewAtEnd\n      });\n      this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);\n    }\n  };\n\n  scrollLeft = () => {\n    // find first Element that is fully in view on the left, then scroll to the element before it\n    const container = this.navList.current;\n    if (container) {\n      const childrenArr = Array.from(container.children);\n      let firstElementInView: Element;\n      let lastElementOutOfView: Element;\n      for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          firstElementInView = childrenArr[i];\n          lastElementOutOfView = childrenArr[i - 1];\n        }\n      }\n      if (lastElementOutOfView) {\n        container.scrollLeft -= lastElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  };\n\n  scrollRight = () => {\n    // find last Element that is fully in view on the right, then scroll to the element after it\n    const container = this.navList.current;\n    if (container) {\n      const childrenArr = Array.from(container.children);\n      let lastElementInView: Element;\n      let firstElementOutOfView: Element;\n      for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {\n        if (isElementInView(container, childrenArr[i] as HTMLElement, false)) {\n          lastElementInView = childrenArr[i];\n          firstElementOutOfView = childrenArr[i + 1];\n        }\n      }\n      if (firstElementOutOfView) {\n        container.scrollLeft += firstElementOutOfView.scrollWidth;\n      }\n      this.handleScrollButtons();\n    }\n  };\n\n  componentDidMount() {\n    this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons);\n    this.handleScrollButtons();\n  }\n\n  componentWillUnmount() {\n    this.observer();\n  }\n\n  render() {\n    const { children, className, ariaLeftScroll, ariaRightScroll, ...props } = this.props;\n    const { scrollViewAtStart, scrollViewAtEnd } = this.state;\n\n    return (\n      <NavContext.Consumer>\n        {({ isHorizontal }) => (\n          <PageSidebarContext.Consumer>\n            {({ isNavOpen }) => (\n              <React.Fragment>\n                {isHorizontal && (\n                  <button\n                    className={css(styles.navScrollButton)}\n                    aria-label={ariaLeftScroll}\n                    onClick={this.scrollLeft}\n                    disabled={scrollViewAtStart}\n                    tabIndex={isNavOpen ? null : -1}\n                  >\n                    <AngleLeftIcon />\n                  </button>\n                )}\n                <ul\n                  ref={this.navList}\n                  className={css(styles.navList, className)}\n                  onScroll={this.handleScrollButtons}\n                  {...props}\n                >\n                  {children}\n                </ul>\n                {isHorizontal && (\n                  <button\n                    className={css(styles.navScrollButton)}\n                    aria-label={ariaRightScroll}\n                    onClick={this.scrollRight}\n                    disabled={scrollViewAtEnd}\n                    tabIndex={isNavOpen ? null : -1}\n                  >\n                    <AngleRightIcon />\n                  </button>\n                )}\n              </React.Fragment>\n            )}\n          </PageSidebarContext.Consumer>\n        )}\n      </NavContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}