{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\nexport const DualListSelectorListWrapperBase = _a => {\n  var {\n    className,\n    children,\n    'aria-labelledby': ariaLabelledBy,\n    innerRef,\n    options = [],\n    selectedOptions = [],\n    onOptionSelect,\n    displayOption,\n    id = getUniqueId('dual-list-selector-list'),\n    isDisabled = false\n  } = _a,\n      props = __rest(_a, [\"className\", \"children\", 'aria-labelledby', \"innerRef\", \"options\", \"selectedOptions\", \"onOptionSelect\", \"displayOption\", \"id\", \"isDisabled\"]);\n\n  const [focusedOption, setFocusedOption] = React.useState('');\n  const menuRef = innerRef || React.useRef(null);\n  const {\n    isTree\n  } = React.useContext(DualListSelectorContext); // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n  // handling is applied whether the pane is dynamically built or passed via the children prop.\n\n  const handleKeys = event => {\n    if (!menuRef.current || menuRef.current !== event.target.closest('.pf-c-dual-list-selector__menu') && !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(event.target.closest('.pf-c-dual-list-selector__menu'))) {\n      return;\n    }\n\n    event.stopImmediatePropagation();\n    const validOptions = isTree ? Array.from(menuRef.current.querySelectorAll('.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input')) : Array.from(menuRef.current.getElementsByTagName('LI')).filter(el => !el.classList.contains('pf-m-disabled'));\n    const activeElement = document.activeElement;\n    handleArrows(event, validOptions, element => activeElement.contains(element), element => {\n      if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n        setFocusedOption(element.id);\n      } else {\n        setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n      }\n\n      return element;\n    }, ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'], undefined, false, false, false);\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [menuRef.current]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorMenu, className),\n    ref: menuRef,\n    tabIndex: 0\n  }, props), React.createElement(DualListSelectorListContext.Provider, {\n    value: {\n      setFocusedOption,\n      isTree,\n      focusedOption,\n      ariaLabelledBy,\n      displayOption,\n      selectedOptions,\n      id,\n      options,\n      onOptionSelect,\n      isDisabled\n    }\n  }, children ? children : React.createElement(DualListSelectorList, null)));\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\nexport const DualListSelectorListWrapper = React.forwardRef((props, ref) => React.createElement(DualListSelectorListWrapperBase, Object.assign({\n  innerRef: ref\n}, props)));\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';","map":{"version":3,"mappings":"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","names":["React","styles","css","getUniqueId","handleArrows","DualListSelectorList","DualListSelectorContext","DualListSelectorListContext","DualListSelectorListWrapperBase","_a","className","children","ariaLabelledBy","innerRef","options","selectedOptions","onOptionSelect","displayOption","id","isDisabled","props","focusedOption","setFocusedOption","useState","menuRef","useRef","isTree","useContext","handleKeys","event","current","target","closest","Array","from","getElementsByClassName","includes","stopImmediatePropagation","validOptions","querySelectorAll","getElementsByTagName","filter","el","classList","contains","activeElement","document","element","undefined","useEffect","window","addEventListener","removeEventListener","dualListSelectorMenu","ref","tabIndex","Provider","value","displayName","DualListSelectorListWrapper","forwardRef","Object"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorListWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId, handleArrows } from '../../helpers';\nimport { DualListSelectorList } from './DualListSelectorList';\nimport { DualListSelectorContext, DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorListWrapperProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Anything that can be rendered inside of the list */\n  children?: React.ReactNode;\n  /** Id of the dual list selector list */\n  id?: string;\n  /** Accessibly label for the list */\n  'aria-labelledby': string;\n  /** @hide forwarded ref */\n  innerRef?: React.RefObject<HTMLDivElement>;\n  /** @hide Options to list in the pane. */\n  options?: React.ReactNode[];\n  /** @hide Options currently selected in the pane. */\n  selectedOptions?: string[] | number[];\n  /** @hide Callback for when an option is selected. Optionally used only when options prop is provided. */\n  onOptionSelect?: (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, index: number, id: string) => void;\n  /** @hide Function to determine if an option should be displayed depending on a dynamically built filter value */\n  displayOption?: (option: React.ReactNode) => boolean;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n}\n\nexport const DualListSelectorListWrapperBase: React.FunctionComponent<DualListSelectorListWrapperProps> = ({\n  className,\n  children,\n  'aria-labelledby': ariaLabelledBy,\n  innerRef,\n  options = [],\n  selectedOptions = [],\n  onOptionSelect,\n  displayOption,\n  id = getUniqueId('dual-list-selector-list'),\n  isDisabled = false,\n  ...props\n}: DualListSelectorListWrapperProps) => {\n  const [focusedOption, setFocusedOption] = React.useState('');\n  const menuRef = innerRef || React.useRef(null);\n  const { isTree } = React.useContext(DualListSelectorContext);\n\n  // sets up keyboard focus handling for the dual list selector menu child of the pane. This keyboard\n  // handling is applied whether the pane is dynamically built or passed via the children prop.\n  const handleKeys = (event: KeyboardEvent) => {\n    if (\n      !menuRef.current ||\n      (menuRef.current !== (event.target as HTMLElement).closest('.pf-c-dual-list-selector__menu') &&\n        !Array.from(menuRef.current.getElementsByClassName('pf-c-dual-list-selector__menu')).includes(\n          (event.target as HTMLElement).closest('.pf-c-dual-list-selector__menu')\n        ))\n    ) {\n      return;\n    }\n    event.stopImmediatePropagation();\n    const validOptions = isTree\n      ? (Array.from(\n          menuRef.current.querySelectorAll(\n            '.pf-c-dual-list-selector__item-toggle, .pf-c-dual-list-selector__item-check > input'\n          )\n        ) as Element[])\n      : (Array.from(menuRef.current.getElementsByTagName('LI')) as Element[]).filter(\n          el => !el.classList.contains('pf-m-disabled')\n        );\n    const activeElement = document.activeElement;\n    handleArrows(\n      event,\n      validOptions,\n      (element: Element) => activeElement.contains(element),\n      (element: Element) => {\n        if (element.classList.contains('.pf-c-dual-list-selector__list-item')) {\n          setFocusedOption(element.id);\n        } else {\n          setFocusedOption(element.closest('.pf-c-dual-list-selector__list-item').id);\n        }\n        return element;\n      },\n      ['.pf-c-dual-list-selector__item-toggle', '.pf-c-dual-list-selector__item-check > input'],\n      undefined,\n      false,\n      false,\n      false\n    );\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [menuRef.current]);\n\n  return (\n    <div className={css(styles.dualListSelectorMenu, className)} ref={menuRef} tabIndex={0} {...props}>\n      <DualListSelectorListContext.Provider\n        value={{\n          setFocusedOption,\n          isTree,\n          focusedOption,\n          ariaLabelledBy,\n          displayOption,\n          selectedOptions,\n          id,\n          options,\n          onOptionSelect,\n          isDisabled\n        }}\n      >\n        {children ? children : <DualListSelectorList />}\n      </DualListSelectorListContext.Provider>\n    </div>\n  );\n};\nDualListSelectorListWrapperBase.displayName = 'DualListSelectorListWrapperBase';\n\nexport const DualListSelectorListWrapper = React.forwardRef(\n  (props: DualListSelectorListWrapperProps, ref: React.Ref<HTMLDivElement>) => (\n    <DualListSelectorListWrapperBase innerRef={ref as React.MutableRefObject<any>} {...props} />\n  )\n);\n\nDualListSelectorListWrapper.displayName = 'DualListSelectorListWrapper';\n"]},"metadata":{},"sourceType":"module"}