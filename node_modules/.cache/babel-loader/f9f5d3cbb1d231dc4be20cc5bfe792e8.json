{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport labelStyles from '@patternfly/react-styles/css/components/Label/label';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Label } from '../Label';\nimport { Tooltip } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport class LabelGroup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.headingRef = React.createRef();\n\n    this.toggleCollapse = () => {\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen,\n        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n      }));\n    };\n\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)\n    });\n  }\n\n  renderLabel(id) {\n    const {\n      categoryName,\n      tooltipPosition\n    } = this.props;\n    const {\n      isTooltipVisible\n    } = this.state;\n    return isTooltipVisible ? React.createElement(Tooltip, {\n      position: tooltipPosition,\n      content: categoryName\n    }, React.createElement(\"span\", {\n      tabIndex: 0,\n      ref: this.headingRef,\n      className: css(styles.labelGroupLabel)\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      id: id\n    }, categoryName))) : React.createElement(\"span\", {\n      ref: this.headingRef,\n      className: css(styles.labelGroupLabel),\n      \"aria-hidden\": \"true\",\n      id: id\n    }, categoryName);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      isCompact,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      numLabels,\n      expandedText,\n      collapsedText,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition,\n      isVertical,\n      isEditable,\n      hasEditableTextArea,\n      editableTextAreaProps,\n      addLabelControl\n    } = _a,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    rest = __rest(_a, [\"categoryName\", \"children\", \"className\", \"isClosable\", \"isCompact\", \"closeBtnAriaLabel\", 'aria-label', \"onClick\", \"numLabels\", \"expandedText\", \"collapsedText\", \"defaultIsOpen\", \"tooltipPosition\", \"isVertical\", \"isEditable\", \"hasEditableTextArea\", \"editableTextAreaProps\", \"addLabelControl\"]);\n\n    const {\n      isOpen\n    } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText, {\n      remaining: React.Children.count(children) - numLabels\n    });\n\n    const renderLabelGroup = id => {\n      const labelArray = !isOpen ? React.Children.toArray(children).slice(0, numLabels) : React.Children.toArray(children);\n      const content = React.createElement(React.Fragment, null, categoryName && this.renderLabel(id), React.createElement(\"ul\", Object.assign({\n        className: css(styles.labelGroupList)\n      }, categoryName && {\n        'aria-labelledby': id\n      }, !categoryName && {\n        'aria-label': ariaLabel\n      }, {\n        role: \"list\"\n      }, rest), labelArray.map((child, i) => React.createElement(\"li\", {\n        className: css(styles.labelGroupListItem),\n        key: i\n      }, child)), numChildren > numLabels && React.createElement(\"li\", {\n        className: css(styles.labelGroupListItem)\n      }, React.createElement(Label, {\n        isOverflowLabel: true,\n        onClick: this.toggleCollapse,\n        className: css(isCompact && labelStyles.modifiers.compact)\n      }, isOpen ? expandedText : collapsedTextResult)), addLabelControl && React.createElement(\"li\", {\n        className: css(styles.labelGroupListItem)\n      }, addLabelControl), isEditable && hasEditableTextArea && React.createElement(\"li\", {\n        className: css(styles.labelGroupListItem, styles.modifiers.textarea)\n      }, React.createElement(\"textarea\", Object.assign({\n        className: css(styles.labelGroupTextarea),\n        rows: 1,\n        tabIndex: 0\n      }, editableTextAreaProps)))));\n      const close = React.createElement(\"div\", {\n        className: css(styles.labelGroupClose)\n      }, React.createElement(Button, {\n        variant: \"plain\",\n        \"aria-label\": closeBtnAriaLabel,\n        onClick: onClick,\n        id: `remove_group_${id}`,\n        \"aria-labelledby\": `remove_group_${id} ${id}`\n      }, React.createElement(TimesCircleIcon, {\n        \"aria-hidden\": \"true\"\n      })));\n      return React.createElement(\"div\", {\n        className: css(styles.labelGroup, className, categoryName && styles.modifiers.category, isVertical && styles.modifiers.vertical, isEditable && styles.modifiers.editable)\n      }, React.createElement(\"div\", {\n        className: css(styles.labelGroupMain)\n      }, content), isClosable && close);\n    };\n\n    return numChildren === 0 && addLabelControl === undefined ? null : React.createElement(GenerateId, null, randomId => renderLabelGroup(this.props.id || randomId));\n  }\n\n}\nLabelGroup.displayName = 'LabelGroup';\nLabelGroup.defaultProps = {\n  expandedText: 'Show Less',\n  collapsedText: '${remaining} more',\n  categoryName: '',\n  defaultIsOpen: false,\n  numLabels: 3,\n  isClosable: false,\n  isCompact: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: _e => undefined,\n  closeBtnAriaLabel: 'Close label group',\n  tooltipPosition: 'top',\n  'aria-label': 'Label group category',\n  isVertical: false,\n  isEditable: false,\n  hasEditableTextArea: false\n};","map":{"version":3,"mappings":"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","names":["React","styles","labelStyles","css","Button","Label","Tooltip","TimesCircleIcon","fillTemplate","GenerateId","LabelGroup","Component","constructor","props","createRef","setState","prevState","isOpen","isTooltipVisible","Boolean","headingRef","current","offsetWidth","scrollWidth","state","defaultIsOpen","componentDidMount","renderLabel","id","categoryName","tooltipPosition","position","content","tabIndex","ref","className","labelGroupLabel","render","_a","children","isClosable","isCompact","closeBtnAriaLabel","ariaLabel","onClick","numLabels","expandedText","collapsedText","isVertical","isEditable","hasEditableTextArea","editableTextAreaProps","addLabelControl","rest","numChildren","Children","count","collapsedTextResult","remaining","renderLabelGroup","labelArray","toArray","slice","Fragment","labelGroupList","role","map","child","i","labelGroupListItem","key","isOverflowLabel","toggleCollapse","modifiers","compact","textarea","labelGroupTextarea","rows","close","labelGroupClose","variant","labelGroup","category","vertical","editable","labelGroupMain","undefined","randomId","_e"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/LabelGroup/LabelGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport labelStyles from '@patternfly/react-styles/css/components/Label/label';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Label } from '../Label';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport { fillTemplate } from '../../helpers';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface LabelGroupProps extends React.HTMLProps<HTMLUListElement> {\n  /** Content rendered inside the label group. Should be <Label> elements. */\n  children?: React.ReactNode;\n  /** Additional classes added to the label item */\n  className?: string;\n  /** Flag for having the label group default to expanded */\n  defaultIsOpen?: boolean;\n  /** Customizable \"Show Less\" text string */\n  expandedText?: string;\n  /** Customizeable template string. Use variable \"${remaining}\" for the overflow label count. */\n  collapsedText?: string;\n  /** Category name text for the label group category.  If this prop is supplied the label group with have a label and category styling applied */\n  categoryName?: string;\n  /** Aria label for label group that does not have a category name */\n  'aria-label'?: string;\n  /** Set number of labels to show before overflow */\n  numLabels?: number;\n  /** Flag if label group can be closed */\n  isClosable?: boolean;\n  /** Flag indicating the labels in the group are compact */\n  isCompact?: boolean;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Function that is called when clicking on the label group close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Position of the tooltip which is displayed if the category name text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Flag to implement a vertical layout */\n  isVertical?: boolean;\n  /** @beta Flag indicating contained labels are editable. Allows spacing for a text input after the labels. */\n  isEditable?: boolean;\n  /** @beta Flag indicating the editable label group should be appended with a textarea. */\n  hasEditableTextArea?: boolean;\n  /** @beta Additional props passed to the editable textarea. */\n  editableTextAreaProps?: any;\n  /** @beta Control for adding new labels */\n  addLabelControl?: React.ReactNode;\n}\n\ninterface LabelGroupState {\n  isOpen: boolean;\n  isTooltipVisible: boolean;\n}\n\nexport class LabelGroup extends React.Component<LabelGroupProps, LabelGroupState> {\n  static displayName = 'LabelGroup';\n  constructor(props: LabelGroupProps) {\n    super(props);\n    this.state = {\n      isOpen: this.props.defaultIsOpen,\n      isTooltipVisible: false\n    };\n  }\n  private headingRef = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: LabelGroupProps = {\n    expandedText: 'Show Less',\n    collapsedText: '${remaining} more',\n    categoryName: '',\n    defaultIsOpen: false,\n    numLabels: 3,\n    isClosable: false,\n    isCompact: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    closeBtnAriaLabel: 'Close label group',\n    tooltipPosition: 'top',\n    'aria-label': 'Label group category',\n    isVertical: false,\n    isEditable: false,\n    hasEditableTextArea: false\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    });\n  }\n\n  toggleCollapse = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen,\n      isTooltipVisible: Boolean(\n        this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth\n      )\n    }));\n  };\n\n  renderLabel(id: string) {\n    const { categoryName, tooltipPosition } = this.props;\n    const { isTooltipVisible } = this.state;\n    return isTooltipVisible ? (\n      <Tooltip position={tooltipPosition} content={categoryName}>\n        <span tabIndex={0} ref={this.headingRef} className={css(styles.labelGroupLabel)}>\n          <span aria-hidden=\"true\" id={id}>\n            {categoryName}\n          </span>\n        </span>\n      </Tooltip>\n    ) : (\n      <span ref={this.headingRef} className={css(styles.labelGroupLabel)} aria-hidden=\"true\" id={id}>\n        {categoryName}\n      </span>\n    );\n  }\n\n  render() {\n    const {\n      categoryName,\n      children,\n      className,\n      isClosable,\n      isCompact,\n      closeBtnAriaLabel,\n      'aria-label': ariaLabel,\n      onClick,\n      numLabels,\n      expandedText,\n      collapsedText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      defaultIsOpen,\n      tooltipPosition,\n      isVertical,\n      isEditable,\n      hasEditableTextArea,\n      editableTextAreaProps,\n      addLabelControl,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...rest\n    } = this.props;\n    const { isOpen } = this.state;\n    const numChildren = React.Children.count(children);\n    const collapsedTextResult = fillTemplate(collapsedText as string, {\n      remaining: React.Children.count(children) - numLabels\n    });\n\n    const renderLabelGroup = (id: string) => {\n      const labelArray = !isOpen\n        ? React.Children.toArray(children).slice(0, numLabels)\n        : React.Children.toArray(children);\n\n      const content = (\n        <React.Fragment>\n          {categoryName && this.renderLabel(id)}\n          <ul\n            className={css(styles.labelGroupList)}\n            {...(categoryName && { 'aria-labelledby': id })}\n            {...(!categoryName && { 'aria-label': ariaLabel })}\n            role=\"list\"\n            {...rest}\n          >\n            {labelArray.map((child, i) => (\n              <li className={css(styles.labelGroupListItem)} key={i}>\n                {child}\n              </li>\n            ))}\n            {numChildren > numLabels && (\n              <li className={css(styles.labelGroupListItem)}>\n                <Label\n                  isOverflowLabel\n                  onClick={this.toggleCollapse}\n                  className={css(isCompact && labelStyles.modifiers.compact)}\n                >\n                  {isOpen ? expandedText : collapsedTextResult}\n                </Label>\n              </li>\n            )}\n            {addLabelControl && <li className={css(styles.labelGroupListItem)}>{addLabelControl}</li>}\n            {isEditable && hasEditableTextArea && (\n              <li className={css(styles.labelGroupListItem, styles.modifiers.textarea)}>\n                <textarea className={css(styles.labelGroupTextarea)} rows={1} tabIndex={0} {...editableTextAreaProps} />\n              </li>\n            )}\n          </ul>\n        </React.Fragment>\n      );\n\n      const close = (\n        <div className={css(styles.labelGroupClose)}>\n          <Button\n            variant=\"plain\"\n            aria-label={closeBtnAriaLabel}\n            onClick={onClick}\n            id={`remove_group_${id}`}\n            aria-labelledby={`remove_group_${id} ${id}`}\n          >\n            <TimesCircleIcon aria-hidden=\"true\" />\n          </Button>\n        </div>\n      );\n\n      return (\n        <div\n          className={css(\n            styles.labelGroup,\n            className,\n            categoryName && styles.modifiers.category,\n            isVertical && styles.modifiers.vertical,\n            isEditable && styles.modifiers.editable\n          )}\n        >\n          {<div className={css(styles.labelGroupMain)}>{content}</div>}\n          {isClosable && close}\n        </div>\n      );\n    };\n\n    return numChildren === 0 && addLabelControl === undefined ? null : (\n      <GenerateId>{randomId => renderLabelGroup(this.props.id || randomId)}</GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}