{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\nexport const DualListSelectorTree = _a => {\n  var {\n    data,\n    hasBadges = false,\n    isNested = false,\n    defaultAllExpanded = false,\n    onOptionCheck,\n    isDisabled = false\n  } = _a,\n      props = __rest(_a, [\"data\", \"hasBadges\", \"isNested\", \"defaultAllExpanded\", \"onOptionCheck\", \"isDisabled\"]);\n\n  const dataToRender = typeof data === 'function' ? data() : data;\n  const tree = dataToRender.map(item => React.createElement(DualListSelectorTreeItem, Object.assign({\n    key: item.id,\n    text: item.text,\n    id: item.id,\n    defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n    onOptionCheck: onOptionCheck,\n    isChecked: item.isChecked,\n    checkProps: item.checkProps,\n    hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n    badgeProps: item.badgeProps,\n    itemData: item,\n    isDisabled: isDisabled,\n    useMemo: true\n  }, item.children && {\n    children: React.createElement(DualListSelectorTree, {\n      isNested: true,\n      data: item.children,\n      hasBadges: hasBadges,\n      defaultAllExpanded: defaultAllExpanded,\n      onOptionCheck: onOptionCheck,\n      isDisabled: isDisabled\n    })\n  })));\n  return isNested ? React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList),\n    role: \"group\"\n  }, props), tree) : React.createElement(React.Fragment, null, tree);\n};\nDualListSelectorTree.displayName = 'DualListSelectorTree';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,6EAAnB;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AAsDA,OAAO,MAAMC,oBAAoB,GAAwDC,EAAD,IAQxD;MARyD;IACvFC,IADuF;IAEvFC,SAAS,GAAG,KAF2E;IAGvFC,QAAQ,GAAG,KAH4E;IAIvFC,kBAAkB,GAAG,KAJkE;IAKvFC,aALuF;IAMvFC,UAAU,GAAG;EAN0E,IAMrEN;MACfO,KAAK,cAP+E,sFAO/E;;EAER,MAAMC,YAAY,GAAG,OAAOP,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,EAAjC,GAAsCA,IAA3D;EACA,MAAMQ,IAAI,GAAGD,YAAY,CAACE,GAAb,CAAiBC,IAAI,IAChChB,oBAACG,wBAAD,EAAyBc;IACvBC,GAAG,EAAEF,IAAI,CAACG,EADa;IAEvBC,IAAI,EAAEJ,IAAI,CAACI,IAFY;IAGvBD,EAAE,EAAEH,IAAI,CAACG,EAHc;IAIvBE,eAAe,EAAEL,IAAI,CAACK,eAAL,KAAyBC,SAAzB,GAAqCN,IAAI,CAACK,eAA1C,GAA4DZ,kBAJtD;IAKvBC,aAAa,EAAEA,aALQ;IAMvBa,SAAS,EAAEP,IAAI,CAACO,SANO;IAOvBC,UAAU,EAAER,IAAI,CAACQ,UAPM;IAQvBC,QAAQ,EAAET,IAAI,CAACS,QAAL,KAAkBH,SAAlB,GAA8BN,IAAI,CAACS,QAAnC,GAA8ClB,SARjC;IASvBmB,UAAU,EAAEV,IAAI,CAACU,UATM;IAUvBC,QAAQ,EAAEX,IAVa;IAWvBL,UAAU,EAAEA,UAXW;IAYvBiB,OAAO,EAAE;EAZc,GAalBZ,IAAI,CAACa,QAAL,IAAiB;IACpBA,QAAQ,EACN7B,oBAACI,oBAAD,EAAqB;MACnBI,QAAQ,MADW;MAEnBF,IAAI,EAAEU,IAAI,CAACa,QAFQ;MAGnBtB,SAAS,EAAEA,SAHQ;MAInBE,kBAAkB,EAAEA,kBAJD;MAKnBC,aAAa,EAAEA,aALI;MAMnBC,UAAU,EAAEA;IANO,CAArB;EAFkB,CAbC,CAAzB,CADW,CAAb;EA4BA,OAAOH,QAAQ,GACbR;IAAI8B,SAAS,EAAE7B,GAAG,CAACC,MAAM,CAAC6B,oBAAR,CAAlB;IAAiDC,IAAI,EAAC;EAAtD,GAAkEpB,KAAlE,GACGE,IADH,CADa,GAKbd,0CAAGc,IAAH,CALF;AAOD,CA7CM;AA+CPV,oBAAoB,CAAC6B,WAArB,GAAmC,sBAAnC","names":["React","css","styles","DualListSelectorTreeItem","DualListSelectorTree","_a","data","hasBadges","isNested","defaultAllExpanded","onOptionCheck","isDisabled","props","dataToRender","tree","map","item","Object","key","id","text","defaultExpanded","undefined","isChecked","checkProps","hasBadge","badgeProps","itemData","useMemo","children","className","dualListSelectorList","role","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorTree.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\n\nexport interface DualListSelectorTreeItemData {\n  /** Content rendered inside the dual list selector. */\n  children?: DualListSelectorTreeItemData[];\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating this option is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Flag indicating this option has a badge */\n  hasBadge?: boolean;\n  /** Callback fired when an option is checked */\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    isChosen: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** ID of the option */\n  id: string;\n  /** Text of the option */\n  text: string;\n  /** Parent id of an option */\n  parentId?: string;\n  /** Checked state of the option */\n  isChecked: boolean;\n  /** Additional properties to pass to the option checkbox */\n  checkProps?: any;\n  /** Additional properties to pass to the option badge */\n  badgeProps?: any;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n}\n\nexport interface DualListSelectorTreeProps {\n  /** Data of the tree view */\n  data: DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[]);\n  /** ID of the tree view */\n  id?: string;\n  /** @hide Flag indicating if the list is nested */\n  isNested?: boolean;\n  /** Flag indicating if all options should have badges */\n  hasBadges?: boolean;\n  /** Sets the default expanded behavior */\n  defaultAllExpanded?: boolean;\n  /** Callback fired when an option is checked */\n  isDisabled?: boolean;\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n}\n\nexport const DualListSelectorTree: React.FunctionComponent<DualListSelectorTreeProps> = ({\n  data,\n  hasBadges = false,\n  isNested = false,\n  defaultAllExpanded = false,\n  onOptionCheck,\n  isDisabled = false,\n  ...props\n}: DualListSelectorTreeProps) => {\n  const dataToRender = typeof data === 'function' ? data() : data;\n  const tree = dataToRender.map(item => (\n    <DualListSelectorTreeItem\n      key={item.id}\n      text={item.text}\n      id={item.id}\n      defaultExpanded={item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded}\n      onOptionCheck={onOptionCheck}\n      isChecked={item.isChecked}\n      checkProps={item.checkProps}\n      hasBadge={item.hasBadge !== undefined ? item.hasBadge : hasBadges}\n      badgeProps={item.badgeProps}\n      itemData={item}\n      isDisabled={isDisabled}\n      useMemo={true}\n      {...(item.children && {\n        children: (\n          <DualListSelectorTree\n            isNested\n            data={item.children}\n            hasBadges={hasBadges}\n            defaultAllExpanded={defaultAllExpanded}\n            onOptionCheck={onOptionCheck}\n            isDisabled={isDisabled}\n          />\n        )\n      })}\n    />\n  ));\n  return isNested ? (\n    <ul className={css(styles.dualListSelectorList)} role=\"group\" {...props}>\n      {tree}\n    </ul>\n  ) : (\n    <>{tree}</>\n  );\n};\n\nDualListSelectorTree.displayName = 'DualListSelectorTree';\n"]},"metadata":{},"sourceType":"module"}