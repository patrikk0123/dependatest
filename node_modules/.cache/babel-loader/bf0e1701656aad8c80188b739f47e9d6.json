{"ast":null,"code":"import { canUseDOM } from './util';\n/**\n * This function creates a ResizeObserver used to handle resize events for the given containerRef. If ResizeObserver\n * or the given containerRef are not available, a window resize event listener is used by default.\n *\n * Example 1:\n *\n * private containerRef = React.createRef<HTMLDivElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.containerRef.current && this.containerRef.current.clientWidth) {\n *     this.setState({ width: this.containerRef.current.clientWidth });\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <div ref={this.containerRef} >\n *       <Chart width={this.state.width} ... />\n *     </div>\n *   );\n * }\n *\n * Example 2:\n *\n * private inputRef = React.createRef<HTMLInputElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.inputRef.current) {\n *     trimLeft(inputRef.current, String(this.props.value));\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <input ref={this.inputRef} ... />\n *   );\n * }\n *\n * @param {Element} containerRefElement The container reference to observe\n * @param {Function} handleResize The function to call for resize events\n * @return {Function} The function used to unobserve resize events\n */\n\nexport const getResizeObserver = (containerRefElement, handleResize) => {\n  let unobserve;\n\n  if (canUseDOM) {\n    const {\n      ResizeObserver\n    } = window;\n\n    if (containerRefElement && ResizeObserver) {\n      const resizeObserver = new ResizeObserver(entries => {\n        // Wrap resize function in requestAnimationFrame to avoid \"ResizeObserver loop limit exceeded\" errors\n        window.requestAnimationFrame(() => {\n          if (Array.isArray(entries) && entries.length > 0) {\n            handleResize();\n          }\n        });\n      });\n      resizeObserver.observe(containerRefElement);\n\n      unobserve = () => resizeObserver.unobserve(containerRefElement);\n    } else {\n      window.addEventListener('resize', handleResize);\n\n      unobserve = () => window.removeEventListener('resize', handleResize);\n    }\n  }\n\n  return () => {\n    if (unobserve) {\n      unobserve();\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,mBAAD,EAA+BC,YAA/B,KAA2D;EAC1F,IAAIC,SAAJ;;EAEA,IAAIJ,SAAJ,EAAe;IACb,MAAM;MAAEK;IAAF,IAAqBC,MAA3B;;IAEA,IAAIJ,mBAAmB,IAAIG,cAA3B,EAA2C;MACzC,MAAME,cAAc,GAAG,IAAIF,cAAJ,CAAoBG,OAAD,IAAiB;QACzD;QACAF,MAAM,CAACG,qBAAP,CAA6B,MAAK;UAChC,IAAIC,KAAK,CAACC,OAAN,CAAcH,OAAd,KAA0BA,OAAO,CAACI,MAAR,GAAiB,CAA/C,EAAkD;YAChDT,YAAY;UACb;QACF,CAJD;MAKD,CAPsB,CAAvB;MAQAI,cAAc,CAACM,OAAf,CAAuBX,mBAAvB;;MACAE,SAAS,GAAG,MAAMG,cAAc,CAACH,SAAf,CAAyBF,mBAAzB,CAAlB;IACD,CAXD,MAWO;MACLI,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCX,YAAlC;;MACAC,SAAS,GAAG,MAAME,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCZ,YAArC,CAAlB;IACD;EACF;;EACD,OAAO,MAAK;IACV,IAAIC,SAAJ,EAAe;MACbA,SAAS;IACV;EACF,CAJD;AAKD,CA3BM","names":["canUseDOM","getResizeObserver","containerRefElement","handleResize","unobserve","ResizeObserver","window","resizeObserver","entries","requestAnimationFrame","Array","isArray","length","observe","addEventListener","removeEventListener"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/resizeObserver.tsx"],"sourcesContent":["import { canUseDOM } from './util';\n\n/**\n * This function creates a ResizeObserver used to handle resize events for the given containerRef. If ResizeObserver\n * or the given containerRef are not available, a window resize event listener is used by default.\n *\n * Example 1:\n *\n * private containerRef = React.createRef<HTMLDivElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.containerRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.containerRef.current && this.containerRef.current.clientWidth) {\n *     this.setState({ width: this.containerRef.current.clientWidth });\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <div ref={this.containerRef} >\n *       <Chart width={this.state.width} ... />\n *     </div>\n *   );\n * }\n *\n * Example 2:\n *\n * private inputRef = React.createRef<HTMLInputElement>();\n * private observer: any = () => {};\n *\n * public componentDidMount() {\n *   this.observer = getResizeObserver(this.inputRef.current, this.handleResize);\n * }\n *\n * public componentWillUnmount() {\n *   this.observer();\n * }\n *\n * private handleResize = () => {\n *   if (this.inputRef.current) {\n *     trimLeft(inputRef.current, String(this.props.value));\n *   }\n * };\n *\n * public render() {\n *   return (\n *     <input ref={this.inputRef} ... />\n *   );\n * }\n *\n * @param {Element} containerRefElement The container reference to observe\n * @param {Function} handleResize The function to call for resize events\n * @return {Function} The function used to unobserve resize events\n */\nexport const getResizeObserver = (containerRefElement: Element, handleResize: () => void) => {\n  let unobserve: any;\n\n  if (canUseDOM) {\n    const { ResizeObserver } = window as any;\n\n    if (containerRefElement && ResizeObserver) {\n      const resizeObserver = new ResizeObserver((entries: any) => {\n        // Wrap resize function in requestAnimationFrame to avoid \"ResizeObserver loop limit exceeded\" errors\n        window.requestAnimationFrame(() => {\n          if (Array.isArray(entries) && entries.length > 0) {\n            handleResize();\n          }\n        });\n      });\n      resizeObserver.observe(containerRefElement);\n      unobserve = () => resizeObserver.unobserve(containerRefElement);\n    } else {\n      window.addEventListener('resize', handleResize);\n      unobserve = () => window.removeEventListener('resize', handleResize);\n    }\n  }\n  return () => {\n    if (unobserve) {\n      unobserve();\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}