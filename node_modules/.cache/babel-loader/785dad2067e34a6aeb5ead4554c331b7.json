{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\nimport { Badge } from '../Badge';\nimport { Tooltip } from '../Tooltip';\nexport var NotificationDrawerGroup = function NotificationDrawerGroup(_a) {\n  var children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      count = _a.count,\n      isExpanded = _a.isExpanded,\n      _a$isRead = _a.isRead,\n      isRead = _a$isRead === void 0 ? false : _a$isRead,\n      _a$onExpand = _a.onExpand,\n      onExpand = _a$onExpand === void 0 ? function (event, expanded) {\n    return undefined;\n  } : _a$onExpand,\n      title = _a.title,\n      _a$truncateTitle = _a.truncateTitle,\n      truncateTitle = _a$truncateTitle === void 0 ? 0 : _a$truncateTitle,\n      tooltipPosition = _a.tooltipPosition,\n      props = __rest(_a, [\"children\", \"className\", \"count\", \"isExpanded\", \"isRead\", \"onExpand\", \"title\", \"truncateTitle\", \"tooltipPosition\"]);\n\n  var titleRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isTooltipVisible = _React$useState2[0],\n      setIsTooltipVisible = _React$useState2[1];\n\n  React.useEffect(function () {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    var showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  var Title = React.createElement(\"div\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerGroupToggleTitle)\n  }), title);\n  return React.createElement(\"section\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)\n  }), React.createElement(\"h1\", null, React.createElement(\"button\", {\n    className: css(styles.notificationDrawerGroupToggle),\n    \"aria-expanded\": isExpanded,\n    onClick: function onClick(e) {\n      return onExpand(e, !isExpanded);\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        onExpand(e, !isExpanded);\n      }\n    }\n  }, isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title, React.createElement(\"div\", {\n    className: css(styles.notificationDrawerGroupToggleCount)\n  }, React.createElement(Badge, {\n    isRead: isRead\n  }, count)), React.createElement(\"span\", {\n    className: \"pf-c-notification-drawer__group-toggle-icon\"\n  }, React.createElement(AngleRightIcon, null)))), children);\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';","map":{"version":3,"mappings":"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","names":["React","AngleRightIcon","css","styles","maxLines","Badge","Tooltip","NotificationDrawerGroup","_a","children","className","count","isExpanded","isRead","onExpand","event","expanded","undefined","title","truncateTitle","tooltipPosition","props","__rest","titleRef","useRef","useState","isTooltipVisible","setIsTooltipVisible","useEffect","showTooltip","current","offsetHeight","scrollHeight","style","setProperty","name","toString","Title","tabIndex","ref","notificationDrawerGroupToggleTitle","notificationDrawerGroup","modifiers","notificationDrawerGroupToggle","onClick","e","onKeyDown","key","preventDefault","content","position","notificationDrawerGroupToggleCount","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/NotificationDrawer/NotificationDrawerGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\n\nimport { Badge } from '../Badge';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\n\nexport interface NotificationDrawerGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'title'> {\n  /**  Content rendered inside the group */\n  children?: React.ReactNode;\n  /**  Additional classes added to the group */\n  className?: string;\n  /**  Notification drawer group count */\n  count: number;\n  /**  Adds styling to the group to indicate expanded state */\n  isExpanded: boolean;\n  /**  Adds styling to the group to indicate whether it has been read */\n  isRead?: boolean;\n  /**  Callback for when group button is clicked to expand */\n  onExpand?: (event: any, value: boolean) => void;\n  /**  Notification drawer group title */\n  title: string | React.ReactNode;\n  /** Truncate title to number of lines */\n  truncateTitle?: number;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\nexport const NotificationDrawerGroup: React.FunctionComponent<NotificationDrawerGroupProps> = ({\n  children,\n  className = '',\n  count,\n  isExpanded,\n  isRead = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onExpand = (event: any, expanded: boolean) => undefined as any,\n  title,\n  truncateTitle = 0,\n  tooltipPosition,\n  ...props\n}: NotificationDrawerGroupProps) => {\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n\n  const Title = (\n    <div\n      {...(isTooltipVisible && { tabIndex: 0 })}\n      ref={titleRef}\n      className={css(styles.notificationDrawerGroupToggleTitle)}\n    >\n      {title}\n    </div>\n  );\n\n  return (\n    <section\n      {...props}\n      className={css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)}\n    >\n      <h1>\n        <button\n          className={css(styles.notificationDrawerGroupToggle)}\n          aria-expanded={isExpanded}\n          onClick={e => onExpand(e, !isExpanded)}\n          onKeyDown={e => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              e.preventDefault();\n              onExpand(e, !isExpanded);\n            }\n          }}\n        >\n          {isTooltipVisible ? (\n            <Tooltip content={title} position={tooltipPosition}>\n              {Title}\n            </Tooltip>\n          ) : (\n            Title\n          )}\n          <div className={css(styles.notificationDrawerGroupToggleCount)}>\n            <Badge isRead={isRead}>{count}</Badge>\n          </div>\n\n          <span className=\"pf-c-notification-drawer__group-toggle-icon\">\n            <AngleRightIcon />\n          </span>\n        </button>\n      </h1>\n      {children}\n    </section>\n  );\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';\n"]},"metadata":{},"sourceType":"module"}