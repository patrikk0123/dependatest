{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport const useForm = (initValues, validators, callback) => {\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [hasChanged, setHasChanged] = useState(false);\n  const [fieldValues, setFieldValues] = useState(initValues);\n  const [fieldErrors, setFieldErrors] = useState({});\n  const [fieldValidators, setFieldValidators] = useState(validators);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const initFieldStates = { ...initValues\n  };\n  Object.keys(initFieldStates).forEach(key => {\n    initFieldStates[key] = 'default';\n  });\n  const [fieldStates, setFieldStates] = useState(initFieldStates);\n  useEffect(() => {\n    console.log(Object.keys(fieldErrors).length);\n\n    if (!Object.keys(fieldErrors).length && hasChanged) {\n      setIsFormValid(true);\n\n      if (isSubmitting) {\n        console.log('a');\n        callback(fieldValues);\n        setFieldStates(initFieldStates);\n      }\n    } else {\n      setIsFormValid(false);\n      setIsSubmitting(false);\n    }\n  }, [fieldErrors]);\n\n  const onChange = event => {\n    const fieldName = event.currentTarget.name;\n    setFieldValues({ ...fieldValues,\n      [fieldName]: event.currentTarget.value\n    });\n    setHasChanged(true);\n\n    if (fieldValidators[fieldName]) {\n      const error = fieldValidators[fieldName](event.currentTarget.value);\n      setError(fieldName, error);\n    }\n  };\n\n  const setError = (fieldName, error) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors,\n        [fieldName]: error\n      });\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'error'\n      });\n    } else {\n      const newErrors = { ...fieldErrors\n      };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'success'\n      });\n    }\n  };\n\n  const onSubmit = () => {\n    for (const key in fieldValidators) {\n      const error = fieldValidators[key](fieldValues[key]);\n\n      if (error) {\n        setFieldErrors({ ...fieldErrors,\n          [key]: error\n        });\n      } else {\n        const newErrors = { ...fieldErrors\n        };\n        delete newErrors[key];\n        setFieldErrors(newErrors);\n      }\n    }\n\n    setIsSubmitting(true);\n  };\n\n  return {\n    fieldValues,\n    fieldErrors,\n    fieldStates,\n    isFormValid,\n    onChange,\n    setFieldValues,\n    onSubmit\n  };\n};","map":{"version":3,"names":["useEffect","useState","useForm","initValues","validators","callback","isFormValid","setIsFormValid","hasChanged","setHasChanged","fieldValues","setFieldValues","fieldErrors","setFieldErrors","fieldValidators","setFieldValidators","isSubmitting","setIsSubmitting","initFieldStates","Object","keys","forEach","key","fieldStates","setFieldStates","console","log","length","onChange","event","fieldName","currentTarget","name","value","error","setError","newErrors","onSubmit"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\ninterface IFieldValues {\n  [key: string]: string;\n}\n\ninterface IFieldErros {\n  [key: string]: string | undefined;\n}\n\ninterface IFieldValidators {\n  [key: string]: Function;\n}\n\nexport const useForm = (initValues: IFieldValues, validators: IFieldValidators, callback: Function) => {\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  const [fieldErrors, setFieldErrors] = useState<IFieldErros>({});\n  const [fieldValidators, setFieldValidators] = useState<IFieldValidators>(validators);\n\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n  const initFieldStates = { ...initValues };\n  Object.keys(initFieldStates).forEach((key) => {\n    initFieldStates[key] = 'default';\n  });\n  const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n\n  useEffect(() => {\n    console.log(Object.keys(fieldErrors).length);\n    if (!Object.keys(fieldErrors).length && hasChanged) {\n      setIsFormValid(true);\n      if (isSubmitting) {\n        console.log('a');\n        callback(fieldValues);\n        setFieldStates(initFieldStates);\n      }\n    } else {\n      setIsFormValid(false);\n      setIsSubmitting(false);\n    }\n  }, [fieldErrors]);\n\n  const onChange = (event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n    const fieldName = event.currentTarget.name;\n    setFieldValues({ ...fieldValues, [fieldName]: event.currentTarget.value });\n    setHasChanged(true);\n\n    if (fieldValidators[fieldName]) {\n      const error = fieldValidators[fieldName](event.currentTarget.value);\n      setError(fieldName, error);\n    }\n  };\n\n  const setError = (fieldName: string, error: string) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors, [fieldName]: error });\n      setFieldStates({ ...fieldStates, [fieldName]: 'error' });\n    } else {\n      const newErrors = { ...fieldErrors };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      setFieldStates({ ...fieldStates, [fieldName]: 'success' });\n    }\n  };\n\n  const onSubmit = () => {\n    for (const key in fieldValidators) {\n      const error = fieldValidators[key](fieldValues[key]);\n\n      if (error) {\n        setFieldErrors({ ...fieldErrors, [key]: error });\n      } else {\n        const newErrors = { ...fieldErrors };\n        delete newErrors[key];\n        setFieldErrors(newErrors);\n      }\n    }\n\n    setIsSubmitting(true);\n  };\n\n  return { fieldValues, fieldErrors, fieldStates, isFormValid, onChange, setFieldValues, onSubmit };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}