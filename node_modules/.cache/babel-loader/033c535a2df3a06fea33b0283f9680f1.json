{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport { AccordionContext } from './AccordionContext';\nimport { AccordionExpandedContentBody } from './AccordionExpandedContentBody';\nexport const AccordionContent = _a => {\n  var {\n    className = '',\n    children = null,\n    id = '',\n    isHidden = false,\n    isFixed = false,\n    isCustomContent = false,\n    'aria-label': ariaLabel = '',\n    component\n  } = _a,\n      props = __rest(_a, [\"className\", \"children\", \"id\", \"isHidden\", \"isFixed\", \"isCustomContent\", 'aria-label', \"component\"]);\n\n  return React.createElement(AccordionContext.Consumer, null, _ref => {\n    let {\n      ContentContainer\n    } = _ref;\n    const Container = component || ContentContainer;\n    return React.createElement(Container, Object.assign({\n      id: id,\n      className: css(styles.accordionExpandedContent, isFixed && styles.modifiers.fixed, !isHidden && styles.modifiers.expanded, className),\n      hidden: isHidden,\n      \"aria-label\": ariaLabel\n    }, props), isCustomContent ? children : React.createElement(AccordionExpandedContentBody, null, children));\n  });\n};\nAccordionContent.displayName = 'AccordionContent';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,6DAAnB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,4BAAT,QAA6C,gCAA7C;AAqBA,OAAO,MAAMC,gBAAgB,GAAoDC,EAAD,IAUpD;MAVqD;IAC/EC,SAAS,GAAG,EADmE;IAE/EC,QAAQ,GAAG,IAFoE;IAG/EC,EAAE,GAAG,EAH0E;IAI/EC,QAAQ,GAAG,KAJoE;IAK/EC,OAAO,GAAG,KALqE;IAM/EC,eAAe,GAAG,KAN6D;IAO/E,cAAcC,SAAS,GAAG,EAPqD;IAQ/EC;EAR+E,IAQtER;MACNS,KAAK,cATuE,oGASvE;;EACmB,OAC3Bf,oBAACG,gBAAgB,CAACa,QAAlB,EAA0B,IAA1B,EACG,QAAyB;IAAA,IAAxB;MAAEC;IAAF,CAAwB;IACxB,MAAMC,SAAS,GAAGJ,SAAS,IAAIG,gBAA/B;IACA,OACEjB,oBAACkB,SAAD,EAAUC;MACRV,EAAE,EAAEA,EADI;MAERF,SAAS,EAAEN,GAAG,CACZC,MAAM,CAACkB,wBADK,EAEZT,OAAO,IAAIT,MAAM,CAACmB,SAAP,CAAiBC,KAFhB,EAGZ,CAACZ,QAAD,IAAaR,MAAM,CAACmB,SAAP,CAAiBE,QAHlB,EAIZhB,SAJY,CAFN;MAQRiB,MAAM,EAAEd,QARA;MAQQ,cACJG;IATJ,GAUJE,KAVI,CAAV,EAYGH,eAAe,GAAGJ,QAAH,GAAcR,oBAACI,4BAAD,EAA6B,IAA7B,EAA+BI,QAA/B,CAZhC,CADF;EAgBD,CAnBH,CAD2B;AAsB5B,CAhCM;AAiCPH,gBAAgB,CAACoB,WAAjB,GAA+B,kBAA/B","names":["React","css","styles","AccordionContext","AccordionExpandedContentBody","AccordionContent","_a","className","children","id","isHidden","isFixed","isCustomContent","ariaLabel","component","props","Consumer","ContentContainer","Container","Object","accordionExpandedContent","modifiers","fixed","expanded","hidden","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Accordion/AccordionContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport { AccordionContext } from './AccordionContext';\nimport { AccordionExpandedContentBody } from './AccordionExpandedContentBody';\n\nexport interface AccordionContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the Accordion  */\n  children?: React.ReactNode;\n  /** Additional classes added to the Accordion content  */\n  className?: string;\n  /** Identify the AccordionContent item  */\n  id?: string;\n  /** Flag to show if the expanded content of the Accordion item is visible  */\n  isHidden?: boolean;\n  /** Flag to indicate Accordion content is fixed  */\n  isFixed?: boolean;\n  /** Adds accessible text to the Accordion content */\n  'aria-label'?: string;\n  /** Component to use as content container */\n  component?: React.ElementType;\n  /** Flag indicating content is custom. Expanded content Body wrapper will be removed from children.  This allows multiple bodies to be rendered as content. */\n  isCustomContent?: React.ReactNode;\n}\n\nexport const AccordionContent: React.FunctionComponent<AccordionContentProps> = ({\n  className = '',\n  children = null,\n  id = '',\n  isHidden = false,\n  isFixed = false,\n  isCustomContent = false,\n  'aria-label': ariaLabel = '',\n  component,\n  ...props\n}: AccordionContentProps) => (\n  <AccordionContext.Consumer>\n    {({ ContentContainer }) => {\n      const Container = component || ContentContainer;\n      return (\n        <Container\n          id={id}\n          className={css(\n            styles.accordionExpandedContent,\n            isFixed && styles.modifiers.fixed,\n            !isHidden && styles.modifiers.expanded,\n            className\n          )}\n          hidden={isHidden}\n          aria-label={ariaLabel}\n          {...props}\n        >\n          {isCustomContent ? children : <AccordionExpandedContentBody>{children}</AccordionExpandedContentBody>}\n        </Container>\n      );\n    }}\n  </AccordionContext.Consumer>\n);\nAccordionContent.displayName = 'AccordionContent';\n"]},"metadata":{},"sourceType":"module"}