{"ast":null,"code":"/**\n * merge-props.js\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport mergeWith from 'lodash/mergeWith';\nimport { css } from '@patternfly/react-styles';\n/**\n * @param {any} props - Props\n */\n\nexport function mergeProps() {\n  for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n    props[_key] = arguments[_key];\n  }\n\n  const firstProps = props[0];\n  const restProps = props.slice(1);\n\n  if (!restProps.length) {\n    return mergeWith({}, firstProps);\n  } // Avoid mutating the first prop collection\n\n\n  return mergeWith(mergeWith({}, firstProps), ...restProps, (a, b, key) => {\n    if (key === 'children') {\n      if (a && b) {\n        // compose the two\n        return React.cloneElement(a, {\n          children: b\n        });\n      } // Children have to be merged in reverse order for Reactabular\n      // logic to work.\n\n\n      return Object.assign(Object.assign({}, b), a);\n    }\n\n    if (key === 'className') {\n      // Process class names through classNames to merge properly\n      // as a string.\n      return css(a, b);\n    }\n\n    return undefined;\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;AAMA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA;;;;AAGA,OAAM,SAAUC,UAAV,GAAkC;EAAA,kCAAVC,KAAU;IAAVA,KAAU;EAAA;;EACtC,MAAMC,UAAU,GAAGD,KAAK,CAAC,CAAD,CAAxB;EACA,MAAME,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAlB;;EAEA,IAAI,CAACD,SAAS,CAACE,MAAf,EAAuB;IACrB,OAAOP,SAAS,CAAC,EAAD,EAAKI,UAAL,CAAhB;EACD,CANqC,CAQtC;;;EACA,OAAOJ,SAAS,CAACA,SAAS,CAAC,EAAD,EAAKI,UAAL,CAAV,EAA4B,GAAGC,SAA/B,EAA0C,CAACG,CAAD,EAASC,CAAT,EAAiBC,GAAjB,KAA6B;IACrF,IAAIA,GAAG,KAAK,UAAZ,EAAwB;MACtB,IAAIF,CAAC,IAAIC,CAAT,EAAY;QACV;QACA,OAAOV,KAAK,CAACY,YAAN,CAAmBH,CAAnB,EAAsB;UAC3BI,QAAQ,EAAEH;QADiB,CAAtB,CAAP;MAGD,CANqB,CAQtB;MACA;;;MACA,uCAAYA,CAAZ,GAAkBD,CAAlB;IACD;;IAED,IAAIE,GAAG,KAAK,WAAZ,EAAyB;MACvB;MACA;MACA,OAAOT,GAAG,CAACO,CAAD,EAAIC,CAAJ,CAAV;IACD;;IAED,OAAOI,SAAP;EACD,CArBe,CAAhB;AAsBD","names":["React","mergeWith","css","mergeProps","props","firstProps","restProps","slice","length","a","b","key","cloneElement","children","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/base/merge-props.ts"],"sourcesContent":["/**\n * merge-props.js\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport mergeWith from 'lodash/mergeWith';\nimport { css } from '@patternfly/react-styles';\n\n/**\n * @param {any} props - Props\n */\nexport function mergeProps(...props: any) {\n  const firstProps = props[0];\n  const restProps = props.slice(1);\n\n  if (!restProps.length) {\n    return mergeWith({}, firstProps);\n  }\n\n  // Avoid mutating the first prop collection\n  return mergeWith(mergeWith({}, firstProps), ...restProps, (a: any, b: any, key: any) => {\n    if (key === 'children') {\n      if (a && b) {\n        // compose the two\n        return React.cloneElement(a, {\n          children: b\n        });\n      }\n\n      // Children have to be merged in reverse order for Reactabular\n      // logic to work.\n      return { ...b, ...a };\n    }\n\n    if (key === 'className') {\n      // Process class names through classNames to merge properly\n      // as a string.\n      return css(a, b);\n    }\n\n    return undefined;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}