{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nexport var IconSize;\n\n(function (IconSize) {\n  IconSize[\"sm\"] = \"sm\";\n  IconSize[\"md\"] = \"md\";\n  IconSize[\"lg\"] = \"lg\";\n  IconSize[\"xl\"] = \"xl\";\n})(IconSize || (IconSize = {}));\n\nexport const getSize = size => {\n  switch (size) {\n    case IconSize.sm:\n      return '1em';\n\n    case IconSize.md:\n      return '1.5em';\n\n    case IconSize.lg:\n      return '2em';\n\n    case IconSize.xl:\n      return '3em';\n\n    default:\n      return '1em';\n  }\n};\nlet currentId = 0;\n/**\n * Factory to create Icon class components for consumers\n */\n\nexport function createIcon(_ref) {\n  let {\n    name,\n    xOffset = 0,\n    yOffset = 0,\n    width,\n    height,\n    svgPath\n  } = _ref;\n\n  var _a;\n\n  return _a = class SVGIcon extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.id = `icon-title-${currentId++}`;\n    }\n\n    render() {\n      const _a = this.props,\n            {\n        size,\n        color,\n        title,\n        noVerticalAlign\n      } = _a,\n            props = __rest(_a, [\"size\", \"color\", \"title\", \"noVerticalAlign\"]);\n\n      const hasTitle = Boolean(title);\n      const heightWidth = getSize(size);\n      const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n      const style = noVerticalAlign ? null : {\n        verticalAlign: `${baseAlign}em`\n      };\n      const viewBox = [xOffset, yOffset, width, height].join(' ');\n      return React.createElement(\"svg\", Object.assign({\n        style: style,\n        fill: color,\n        height: heightWidth,\n        width: heightWidth,\n        viewBox: viewBox,\n        \"aria-labelledby\": hasTitle ? this.id : null,\n        \"aria-hidden\": hasTitle ? null : true,\n        role: \"img\"\n      }, props), hasTitle && React.createElement(\"title\", {\n        id: this.id\n      }, title), React.createElement(\"path\", {\n        d: svgPath\n      }));\n    }\n\n  }, _a.displayName = name, _a.defaultProps = {\n    color: 'currentColor',\n    size: IconSize.sm,\n    noVerticalAlign: false\n  }, _a;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,WAAYC,QAAZ;;AAAA,WAAYA,QAAZ,EAAoB;EAClBA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,QAAQ,KAARA,QAAQ,MAApB;;AAOA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAA2C;EAChE,QAAQA,IAAR;IACE,KAAKF,QAAQ,CAACG,EAAd;MACE,OAAO,KAAP;;IACF,KAAKH,QAAQ,CAACI,EAAd;MACE,OAAO,OAAP;;IACF,KAAKJ,QAAQ,CAACK,EAAd;MACE,OAAO,KAAP;;IACF,KAAKL,QAAQ,CAACM,EAAd;MACE,OAAO,KAAP;;IACF;MACE,OAAO,KAAP;EAVJ;AAYD,CAbM;AA+BP,IAAIC,SAAS,GAAG,CAAhB;AAEA;;;;AAGA,OAAM,SAAUC,UAAV,OAOW;EAAA,IAPU;IACzBC,IADyB;IAEzBC,OAAO,GAAG,CAFe;IAGzBC,OAAO,GAAG,CAHe;IAIzBC,KAJyB;IAKzBC,MALyB;IAMzBC;EANyB,CAOV;;;;EACf,YAAO,MAAMC,OAAN,SAAsBhB,KAAK,CAACiB,SAA5B,CAAmD;IAAnDC;;MAQL,UAAK,cAAcV,SAAS,EAAE,EAA9B;IA4BD;;IA1BCW,MAAM;MACJ,MAAMC,KAAoD,KAAKC,KAA/D;MAAA,MAAM;QAAElB,IAAF;QAAQmB,KAAR;QAAeC,KAAf;QAAsBC;MAAtB,IAAqCJ,EAA3C;MAAA,MAAgDC,KAAK,cAA/C,6CAA+C,CAArD;;MAEA,MAAMI,QAAQ,GAAGC,OAAO,CAACH,KAAD,CAAxB;MACA,MAAMI,WAAW,GAAGzB,OAAO,CAACC,IAAD,CAA3B;MACA,MAAMyB,SAAS,GAAG,CAAC,KAAD,GAASC,MAAM,CAACC,UAAP,CAAkBH,WAAlB,CAA3B;MACA,MAAMI,KAAK,GAAGP,eAAe,GAAG,IAAH,GAAU;QAAEQ,aAAa,EAAE,GAAGJ,SAAS;MAA7B,CAAvC;MACA,MAAMK,OAAO,GAAG,CAACtB,OAAD,EAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCoB,IAAlC,CAAuC,GAAvC,CAAhB;MAEA,OACElC;QACE+B,KAAK,EAAEA,KADT;QAEEI,IAAI,EAAEb,KAFR;QAGER,MAAM,EAAEa,WAHV;QAIEd,KAAK,EAAEc,WAJT;QAKEM,OAAO,EAAEA,OALX;QAKkB,mBACCR,QAAQ,GAAG,KAAKW,EAAR,GAAa,IANxC;QAM4C,eAC7BX,QAAQ,GAAG,IAAH,GAAU,IAPjC;QAQEY,IAAI,EAAC;MARP,GASOhB,KATP,GAWGI,QAAQ,IAAIzB;QAAOoC,EAAE,EAAE,KAAKA;MAAhB,GAAqBb,KAArB,CAXf,EAYEvB;QAAMsC,CAAC,EAAEvB;MAAT,EAZF,CADF;IAgBD;;EAnCuD,CAA1D,EACSK,iBAAcV,IADvB,EAESU,kBAAe;IACpBE,KAAK,EAAE,cADa;IAEpBnB,IAAI,EAAEF,QAAQ,CAACG,EAFK;IAGpBoB,eAAe,EAAE;EAHG,CAFxB;AAqCD","names":["React","IconSize","getSize","size","sm","md","lg","xl","currentId","createIcon","name","xOffset","yOffset","width","height","svgPath","SVGIcon","Component","constructor","render","_a","props","color","title","noVerticalAlign","hasTitle","Boolean","heightWidth","baseAlign","Number","parseFloat","style","verticalAlign","viewBox","join","fill","id","role","d"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-icons/src/createIcon.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport enum IconSize {\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl'\n}\n\nexport const getSize = (size: IconSize | keyof typeof IconSize) => {\n  switch (size) {\n    case IconSize.sm:\n      return '1em';\n    case IconSize.md:\n      return '1.5em';\n    case IconSize.lg:\n      return '2em';\n    case IconSize.xl:\n      return '3em';\n    default:\n      return '1em';\n  }\n};\n\nexport interface IconDefinition {\n  name?: string;\n  width: number;\n  height: number;\n  svgPath: string;\n  xOffset?: number;\n  yOffset?: number;\n}\n\nexport interface SVGIconProps extends Omit<React.HTMLProps<SVGElement>, 'size' | 'ref'> {\n  color?: string;\n  size?: IconSize | keyof typeof IconSize;\n  title?: string;\n  noVerticalAlign?: boolean;\n}\n\nlet currentId = 0;\n\n/**\n * Factory to create Icon class components for consumers\n */\nexport function createIcon({\n  name,\n  xOffset = 0,\n  yOffset = 0,\n  width,\n  height,\n  svgPath\n}: IconDefinition): React.ComponentClass<SVGIconProps> {\n  return class SVGIcon extends React.Component<SVGIconProps> {\n    static displayName = name;\n    static defaultProps = {\n      color: 'currentColor',\n      size: IconSize.sm,\n      noVerticalAlign: false\n    };\n\n    id = `icon-title-${currentId++}`;\n\n    render() {\n      const { size, color, title, noVerticalAlign, ...props } = this.props;\n\n      const hasTitle = Boolean(title);\n      const heightWidth = getSize(size);\n      const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n      const style = noVerticalAlign ? null : { verticalAlign: `${baseAlign}em` };\n      const viewBox = [xOffset, yOffset, width, height].join(' ');\n\n      return (\n        <svg\n          style={style}\n          fill={color}\n          height={heightWidth}\n          width={heightWidth}\n          viewBox={viewBox}\n          aria-labelledby={hasTitle ? this.id : null}\n          aria-hidden={hasTitle ? null : true}\n          role=\"img\"\n          {...(props as Omit<React.SVGProps<SVGElement>, 'ref'>)} // Lie.\n        >\n          {hasTitle && <title id={this.id}>{title}</title>}\n          <path d={svgPath} />\n        </svg>\n      );\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}