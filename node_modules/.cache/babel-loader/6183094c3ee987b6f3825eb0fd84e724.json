{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nvar isResizing = null;\nvar newSize = 0;\nexport var DrawerPanelContent = function DrawerPanelContent(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      id = _a.id,\n      children = _a.children,\n      _a$hasNoBorder = _a.hasNoBorder,\n      hasNoBorder = _a$hasNoBorder === void 0 ? false : _a$hasNoBorder,\n      _a$isResizable = _a.isResizable,\n      isResizable = _a$isResizable === void 0 ? false : _a$isResizable,\n      onResize = _a.onResize,\n      minSize = _a.minSize,\n      defaultSize = _a.defaultSize,\n      maxSize = _a.maxSize,\n      _a$increment = _a.increment,\n      increment = _a$increment === void 0 ? 5 : _a$increment,\n      _a$resizeAriaLabel = _a.resizeAriaLabel,\n      resizeAriaLabel = _a$resizeAriaLabel === void 0 ? 'Resize' : _a$resizeAriaLabel,\n      widths = _a.widths,\n      _a$colorVariant = _a.colorVariant,\n      colorVariant = _a$colorVariant === void 0 ? DrawerColorVariant.default : _a$colorVariant,\n      drawerContentRef = _a.drawerContentRef,\n      props = __rest(_a, [\"className\", \"id\", \"children\", \"hasNoBorder\", \"isResizable\", \"onResize\", \"minSize\", \"defaultSize\", \"maxSize\", \"increment\", \"resizeAriaLabel\", \"widths\", \"colorVariant\", \"drawerContentRef\"]);\n\n  var panel = React.useRef();\n  var splitterRef = React.useRef();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      separatorValue = _React$useState2[0],\n      setSeparatorValue = _React$useState2[1];\n\n  var _React$useContext = React.useContext(DrawerContext),\n      position = _React$useContext.position,\n      isExpanded = _React$useContext.isExpanded,\n      isStatic = _React$useContext.isStatic,\n      onExpand = _React$useContext.onExpand,\n      drawerRef = _React$useContext.drawerRef,\n      isInline = _React$useContext.isInline;\n\n  var hidden = isStatic ? false : !isExpanded;\n\n  var _React$useState3 = React.useState(!hidden),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isExpandedInternal = _React$useState4[0],\n      setIsExpandedInternal = _React$useState4[1];\n\n  var currWidth = 0;\n  var panelRect;\n  var right;\n  var left;\n  var bottom;\n  var setInitialVals = true;\n  React.useEffect(function () {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n\n  var calcValueNow = function calcValueNow() {\n    var splitterPos;\n    var drawerSize;\n\n    if (isInline && position === 'right') {\n      splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (isInline && position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (position === 'right') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'bottom') {\n      splitterPos = drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n      drawerSize = drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n    }\n\n    var newSplitterPos = splitterPos / drawerSize * 100;\n    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n  };\n\n  var handleTouchStart = function handleTouchStart(e) {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, {\n      passive: false\n    });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n\n  var handleMousedown = function handleMousedown(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n\n  var handleMouseMove = function handleMouseMove(e) {\n    var mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n\n  var handleTouchMove = function handleTouchMove(e) {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    var touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n\n  var handleControlMove = function handleControlMove(e, controlPosition) {\n    e.stopPropagation();\n\n    if (!isResizing) {\n      return;\n    }\n\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n\n    var mousePos = controlPosition;\n    var newSize = 0;\n\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  var handleMouseup = function handleMouseup() {\n    if (!isResizing) {\n      return;\n    }\n\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n\n  var handleTouchEnd = function handleTouchEnd(e) {\n    e.stopPropagation();\n\n    if (!isResizing) {\n      return;\n    }\n\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n\n  var callbackMouseMove = React.useCallback(handleMouseMove, []);\n  var callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  var callbackTouchMove = React.useCallback(handleTouchMove, []);\n  var callbackMouseUp = React.useCallback(handleMouseup, []);\n\n  var handleKeys = function handleKeys(e) {\n    var key = e.key;\n\n    if (key !== 'Escape' && key !== 'Enter' && key !== 'ArrowUp' && key !== 'ArrowDown' && key !== 'ArrowLeft' && key !== 'ArrowRight') {\n      if (isResizing) {\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n\n    if (key === 'Escape' || key === 'Enter') {\n      onResize && onResize(currWidth, id);\n    }\n\n    var panelRect = panel.current.getBoundingClientRect();\n    newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    var delta = 0;\n\n    if (key === 'ArrowRight') {\n      delta = position === 'left' ? increment : -increment;\n    } else if (key === 'ArrowLeft') {\n      delta = position === 'left' ? -increment : increment;\n    } else if (key === 'ArrowUp') {\n      delta = increment;\n    } else if (key === 'ArrowDown') {\n      delta = -increment;\n    }\n\n    newSize = newSize + delta;\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  var boundaryCssVars = {};\n\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n\n  return React.createElement(GenerateId, {\n    prefix: \"pf-drawer-panel-\"\n  }, function (panelId) {\n    return React.createElement(\"div\", Object.assign({\n      id: id || panelId,\n      className: css(styles.drawerPanel, isResizable && styles.modifiers.resizable, hasNoBorder && styles.modifiers.noBorder, formatBreakpointMods(widths, styles), colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200, className),\n      ref: panel,\n      onTransitionEnd: function onTransitionEnd(ev) {\n        if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n          onExpand();\n        }\n\n        setIsExpandedInternal(!hidden);\n      },\n      hidden: hidden\n    }, (defaultSize || minSize || maxSize) && {\n      style: boundaryCssVars\n    }, props), isExpandedInternal && React.createElement(React.Fragment, null, isResizable && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical),\n      role: \"separator\",\n      tabIndex: 0,\n      \"aria-orientation\": position === 'bottom' ? 'horizontal' : 'vertical',\n      \"aria-label\": resizeAriaLabel,\n      \"aria-valuenow\": separatorValue,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      \"aria-controls\": id || panelId,\n      onMouseDown: handleMousedown,\n      onKeyDown: handleKeys,\n      onTouchStart: handleTouchStart,\n      ref: splitterRef\n    }, React.createElement(\"div\", {\n      className: css(styles.drawerSplitterHandle),\n      \"aria-hidden\": true\n    })), React.createElement(\"div\", {\n      className: css(styles.drawerPanelMain)\n    }, children)), !isResizable && children));\n  });\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,uDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,UAAlD;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,UAAT,QAA2B,qCAA3B;AAqCA,IAAIC,UAAU,GAAY,IAA1B;AACA,IAAIC,OAAO,GAAW,CAAtB;AAEA,OAAO,IAAMC,kBAAkB,GAAqD,SAAvEA,kBAAuE,CAACC,EAAD,EAgBtD;qBAFZA,GAbhBC;MAAAA,sCAAY;MACZC,KAYgBF,GAZhBE;MACAC,WAWgBH,GAXhBG;uBAWgBH,GAVhBI;MAAAA,0CAAc;uBAUEJ,GAThBK;MAAAA,0CAAc;MACdC,WAQgBN,GARhBM;MACAC,UAOgBP,GAPhBO;MACAC,cAMgBR,GANhBQ;MACAC,UAKgBT,GALhBS;qBAKgBT,GAJhBU;MAAAA,sCAAY;2BAIIV,GAHhBW;MAAAA,kDAAkB;MAClBC,SAEgBZ,GAFhBY;wBAEgBZ,GADhBa;MAAAA,4CAAepB,kBAAkB,CAACqB;MAClCC,mBAAgBf,GAAhBe;MACGC,QAAKC,WAf2E,4LAe3E;;EAER,IAAMC,KAAK,GAAG5B,KAAK,CAAC6B,MAAN,EAAd;EACA,IAAMC,WAAW,GAAG9B,KAAK,CAAC6B,MAAN,EAApB;;EACA,sBAA4C7B,KAAK,CAAC+B,QAAN,CAAe,CAAf,CAA5C;EAAA;EAAA,IAAOC,cAAP;EAAA,IAAuBC,iBAAvB;;EACA,wBAA0EjC,KAAK,CAACkC,UAAN,CAAiB9B,aAAjB,CAA1E;EAAA,IAAQ+B,QAAR,qBAAQA,QAAR;EAAA,IAAkBC,UAAlB,qBAAkBA,UAAlB;EAAA,IAA8BC,QAA9B,qBAA8BA,QAA9B;EAAA,IAAwCC,QAAxC,qBAAwCA,QAAxC;EAAA,IAAkDC,SAAlD,qBAAkDA,SAAlD;EAAA,IAA6DC,QAA7D,qBAA6DA,QAA7D;;EACA,IAAMC,MAAM,GAAGJ,QAAQ,GAAG,KAAH,GAAW,CAACD,UAAnC;;EACA,uBAAoDpC,KAAK,CAAC+B,QAAN,CAAe,CAACU,MAAhB,CAApD;EAAA;EAAA,IAAOC,kBAAP;EAAA,IAA2BC,qBAA3B;;EACA,IAAIC,SAAS,GAAW,CAAxB;EACA,IAAIC,SAAJ;EACA,IAAIC,KAAJ;EACA,IAAIC,IAAJ;EACA,IAAIC,MAAJ;EACA,IAAIC,cAAc,GAAY,IAA9B;EAEAjD,KAAK,CAACkD,SAAN,CAAgB,YAAK;IACnB,IAAI,CAACb,QAAD,IAAaD,UAAjB,EAA6B;MAC3BO,qBAAqB,CAACP,UAAD,CAArB;IACD;EACF,CAJD,EAIG,CAACC,QAAD,EAAWD,UAAX,CAJH;;EAMA,IAAMe,YAAY,GAAG,SAAfA,YAAe,GAAK;IACxB,IAAIC,WAAJ;IACA,IAAIC,UAAJ;;IAEA,IAAIb,QAAQ,IAAIL,QAAQ,KAAK,OAA7B,EAAsC;MACpCiB,WAAW,GAAGxB,KAAK,CAAC0B,OAAN,CAAcC,qBAAd,GAAsCT,KAAtC,GAA8ChB,WAAW,CAACwB,OAAZ,CAAoBC,qBAApB,GAA4CR,IAAxG;MACAM,UAAU,GAAGd,SAAS,CAACe,OAAV,CAAkBC,qBAAlB,GAA0CT,KAA1C,GAAkDP,SAAS,CAACe,OAAV,CAAkBC,qBAAlB,GAA0CR,IAAzG;IACD,CAHD,MAGO,IAAIP,QAAQ,IAAIL,QAAQ,KAAK,MAA7B,EAAqC;MAC1CiB,WAAW,GAAGtB,WAAW,CAACwB,OAAZ,CAAoBC,qBAApB,GAA4CT,KAA5C,GAAoDlB,KAAK,CAAC0B,OAAN,CAAcC,qBAAd,GAAsCR,IAAxG;MACAM,UAAU,GAAGd,SAAS,CAACe,OAAV,CAAkBC,qBAAlB,GAA0CT,KAA1C,GAAkDP,SAAS,CAACe,OAAV,CAAkBC,qBAAlB,GAA0CR,IAAzG;IACD,CAHM,MAGA,IAAIZ,QAAQ,KAAK,OAAjB,EAA0B;MAC/BiB,WAAW,GACT3B,gBAAgB,CAAC6B,OAAjB,CAAyBC,qBAAzB,GAAiDT,KAAjD,GAAyDhB,WAAW,CAACwB,OAAZ,CAAoBC,qBAApB,GAA4CR,IADvG;MAEAM,UAAU,GACR5B,gBAAgB,CAAC6B,OAAjB,CAAyBC,qBAAzB,GAAiDT,KAAjD,GAAyDrB,gBAAgB,CAAC6B,OAAjB,CAAyBC,qBAAzB,GAAiDR,IAD5G;IAED,CALM,MAKA,IAAIZ,QAAQ,KAAK,MAAjB,EAAyB;MAC9BiB,WAAW,GACTtB,WAAW,CAACwB,OAAZ,CAAoBC,qBAApB,GAA4CT,KAA5C,GAAoDrB,gBAAgB,CAAC6B,OAAjB,CAAyBC,qBAAzB,GAAiDR,IADvG;MAEAM,UAAU,GACR5B,gBAAgB,CAAC6B,OAAjB,CAAyBC,qBAAzB,GAAiDT,KAAjD,GAAyDrB,gBAAgB,CAAC6B,OAAjB,CAAyBC,qBAAzB,GAAiDR,IAD5G;IAED,CALM,MAKA,IAAIZ,QAAQ,KAAK,QAAjB,EAA2B;MAChCiB,WAAW,GACT3B,gBAAgB,CAAC6B,OAAjB,CAAyBC,qBAAzB,GAAiDP,MAAjD,GAA0DlB,WAAW,CAACwB,OAAZ,CAAoBC,qBAApB,GAA4CC,GADxG;MAEAH,UAAU,GACR5B,gBAAgB,CAAC6B,OAAjB,CAAyBC,qBAAzB,GAAiDP,MAAjD,GAA0DvB,gBAAgB,CAAC6B,OAAjB,CAAyBC,qBAAzB,GAAiDC,GAD7G;IAED;;IAED,IAAMC,cAAc,GAAIL,WAAW,GAAGC,UAAf,GAA6B,GAApD;IACA,OAAOK,IAAI,CAACC,KAAL,CAAW,CAACF,cAAc,GAAGG,MAAM,CAACC,OAAzB,IAAoC,GAA/C,IAAsD,GAA7D;EACD,CA7BD;;EA+BA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD,EAAwB;IAC/CA,CAAC,CAACC,eAAF;IACAC,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCC,iBAAvC,EAA0D;MAAEC,OAAO,EAAE;IAAX,CAA1D;IACAH,QAAQ,CAACC,gBAAT,CAA0B,UAA1B,EAAsCG,gBAAtC;IACA9D,UAAU,GAAG,IAAb;EACD,CALD;;EAOA,IAAM+D,eAAe,GAAG,SAAlBA,eAAkB,CAACP,CAAD,EAAwB;IAC9CA,CAAC,CAACC,eAAF;IACAD,CAAC,CAACQ,cAAF;IACAN,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCM,iBAAvC;IACAP,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCO,eAArC;IACAlC,SAAS,CAACe,OAAV,CAAkBoB,SAAlB,CAA4BC,GAA5B,CAAgCzE,GAAG,CAACD,MAAM,CAAC2E,SAAP,CAAiBC,QAAlB,CAAnC;IACAtE,UAAU,GAAG,IAAb;IACA0C,cAAc,GAAG,IAAjB;EACD,CARD;;EAUA,IAAM6B,eAAe,GAAG,SAAlBA,eAAkB,CAACf,CAAD,EAAkB;IACxC,IAAMgB,QAAQ,GAAG5C,QAAQ,KAAK,QAAb,GAAwB4B,CAAC,CAACiB,OAA1B,GAAoCjB,CAAC,CAACkB,OAAvD;IACAC,iBAAiB,CAACnB,CAAD,EAAIgB,QAAJ,CAAjB;EACD,CAHD;;EAKA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACpB,CAAD,EAAkB;IACxCA,CAAC,CAACQ,cAAF;IACAR,CAAC,CAACqB,wBAAF;IACA,IAAMC,QAAQ,GAAGlD,QAAQ,KAAK,QAAb,GAAwB4B,CAAC,CAACuB,OAAF,CAAU,CAAV,EAAaN,OAArC,GAA+CjB,CAAC,CAACuB,OAAF,CAAU,CAAV,EAAaL,OAA7E;IACAC,iBAAiB,CAACnB,CAAD,EAAIsB,QAAJ,CAAjB;EACD,CALD;;EAOA,IAAMH,iBAAiB,GAAG,SAApBA,iBAAoB,CAACnB,CAAD,EAA6BwB,eAA7B,EAAwD;IAChFxB,CAAC,CAACC,eAAF;;IACA,IAAI,CAACzD,UAAL,EAAiB;MACf;IACD;;IAED,IAAI0C,cAAJ,EAAoB;MAClBJ,SAAS,GAAGjB,KAAK,CAAC0B,OAAN,CAAcC,qBAAd,EAAZ;MACAT,KAAK,GAAGD,SAAS,CAACC,KAAlB;MACAC,IAAI,GAAGF,SAAS,CAACE,IAAjB;MACAC,MAAM,GAAGH,SAAS,CAACG,MAAnB;MACAC,cAAc,GAAG,KAAjB;IACD;;IACD,IAAM8B,QAAQ,GAAGQ,eAAjB;IACA,IAAI/E,OAAO,GAAG,CAAd;;IACA,IAAI2B,QAAQ,KAAK,OAAjB,EAA0B;MACxB3B,OAAO,GAAGsC,KAAK,GAAGiC,QAAlB;IACD,CAFD,MAEO,IAAI5C,QAAQ,KAAK,MAAjB,EAAyB;MAC9B3B,OAAO,GAAGuE,QAAQ,GAAGhC,IAArB;IACD,CAFM,MAEA;MACLvC,OAAO,GAAGwC,MAAM,GAAG+B,QAAnB;IACD;;IAED,IAAI5C,QAAQ,KAAK,QAAjB,EAA2B;MACzBP,KAAK,CAAC0B,OAAN,CAAckC,KAAd,CAAoBC,cAApB,GAAqC,MAArC;IACD;;IACD7D,KAAK,CAAC0B,OAAN,CAAckC,KAAd,CAAoBE,WAApB,CAAgC,qCAAhC,EAAuElF,OAAO,GAAG,IAAjF;IACAoC,SAAS,GAAGpC,OAAZ;IACAyB,iBAAiB,CAACkB,YAAY,EAAb,CAAjB;EACD,CA7BD;;EA+BA,IAAMwC,aAAa,GAAG,SAAhBA,aAAgB,GAAK;IACzB,IAAI,CAACpF,UAAL,EAAiB;MACf;IACD;;IACDgC,SAAS,CAACe,OAAV,CAAkBoB,SAAlB,CAA4BkB,MAA5B,CAAmC1F,GAAG,CAACD,MAAM,CAAC2E,SAAP,CAAiBC,QAAlB,CAAtC;IACAtE,UAAU,GAAG,KAAb;IACAS,QAAQ,IAAIA,QAAQ,CAAC4B,SAAD,EAAYhC,EAAZ,CAApB;IACAqC,cAAc,GAAG,IAAjB;IACAgB,QAAQ,CAAC4B,mBAAT,CAA6B,WAA7B,EAA0CrB,iBAA1C;IACAP,QAAQ,CAAC4B,mBAAT,CAA6B,SAA7B,EAAwCpB,eAAxC;EACD,CAVD;;EAYA,IAAMqB,cAAc,GAAG,SAAjBA,cAAiB,CAAC/B,CAAD,EAAkB;IACvCA,CAAC,CAACC,eAAF;;IACA,IAAI,CAACzD,UAAL,EAAiB;MACf;IACD;;IACDA,UAAU,GAAG,KAAb;IACAS,QAAQ,IAAIA,QAAQ,CAAC4B,SAAD,EAAYhC,EAAZ,CAApB;IACAqD,QAAQ,CAAC4B,mBAAT,CAA6B,WAA7B,EAA0C1B,iBAA1C;IACAF,QAAQ,CAAC4B,mBAAT,CAA6B,UAA7B,EAAyCxB,gBAAzC;EACD,CATD;;EAWA,IAAMG,iBAAiB,GAAGxE,KAAK,CAAC+F,WAAN,CAAkBjB,eAAlB,EAAmC,EAAnC,CAA1B;EACA,IAAMT,gBAAgB,GAAGrE,KAAK,CAAC+F,WAAN,CAAkBD,cAAlB,EAAkC,EAAlC,CAAzB;EACA,IAAM3B,iBAAiB,GAAGnE,KAAK,CAAC+F,WAAN,CAAkBZ,eAAlB,EAAmC,EAAnC,CAA1B;EACA,IAAMV,eAAe,GAAGzE,KAAK,CAAC+F,WAAN,CAAkBJ,aAAlB,EAAiC,EAAjC,CAAxB;;EAEA,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACjC,CAAD,EAA2B;IAC5C,IAAMkC,GAAG,GAAGlC,CAAC,CAACkC,GAAd;;IACA,IACEA,GAAG,KAAK,QAAR,IACAA,GAAG,KAAK,OADR,IAEAA,GAAG,KAAK,SAFR,IAGAA,GAAG,KAAK,WAHR,IAIAA,GAAG,KAAK,WAJR,IAKAA,GAAG,KAAK,YANV,EAOE;MACA,IAAI1F,UAAJ,EAAgB;QACdwD,CAAC,CAACQ,cAAF;MACD;;MACD;IACD;;IACDR,CAAC,CAACQ,cAAF;;IAEA,IAAI0B,GAAG,KAAK,QAAR,IAAoBA,GAAG,KAAK,OAAhC,EAAyC;MACvCjF,QAAQ,IAAIA,QAAQ,CAAC4B,SAAD,EAAYhC,EAAZ,CAApB;IACD;;IACD,IAAMiC,SAAS,GAAGjB,KAAK,CAAC0B,OAAN,CAAcC,qBAAd,EAAlB;IACA/C,OAAO,GAAG2B,QAAQ,KAAK,QAAb,GAAwBU,SAAS,CAACqD,MAAlC,GAA2CrD,SAAS,CAACsD,KAA/D;IACA,IAAIC,KAAK,GAAG,CAAZ;;IACA,IAAIH,GAAG,KAAK,YAAZ,EAA0B;MACxBG,KAAK,GAAGjE,QAAQ,KAAK,MAAb,GAAsBf,SAAtB,GAAkC,CAACA,SAA3C;IACD,CAFD,MAEO,IAAI6E,GAAG,KAAK,WAAZ,EAAyB;MAC9BG,KAAK,GAAGjE,QAAQ,KAAK,MAAb,GAAsB,CAACf,SAAvB,GAAmCA,SAA3C;IACD,CAFM,MAEA,IAAI6E,GAAG,KAAK,SAAZ,EAAuB;MAC5BG,KAAK,GAAGhF,SAAR;IACD,CAFM,MAEA,IAAI6E,GAAG,KAAK,WAAZ,EAAyB;MAC9BG,KAAK,GAAG,CAAChF,SAAT;IACD;;IACDZ,OAAO,GAAGA,OAAO,GAAG4F,KAApB;;IACA,IAAIjE,QAAQ,KAAK,QAAjB,EAA2B;MACzBP,KAAK,CAAC0B,OAAN,CAAckC,KAAd,CAAoBC,cAApB,GAAqC,MAArC;IACD;;IACD7D,KAAK,CAAC0B,OAAN,CAAckC,KAAd,CAAoBE,WAApB,CAAgC,qCAAhC,EAAuElF,OAAO,GAAG,IAAjF;IACAoC,SAAS,GAAGpC,OAAZ;IACAyB,iBAAiB,CAACkB,YAAY,EAAb,CAAjB;EACD,CAvCD;;EAwCA,IAAMkD,eAAe,GAAQ,EAA7B;;EACA,IAAInF,WAAJ,EAAiB;IACfmF,eAAe,CAAC,qCAAD,CAAf,GAAyDnF,WAAzD;EACD;;EACD,IAAID,OAAJ,EAAa;IACXoF,eAAe,CAAC,0CAAD,CAAf,GAA8DpF,OAA9D;EACD;;EACD,IAAIE,OAAJ,EAAa;IACXkF,eAAe,CAAC,0CAAD,CAAf,GAA8DlF,OAA9D;EACD;;EACD,OACEnB,oBAACM,UAAD,EAAW;IAACgG,MAAM,EAAC;EAAR,CAAX,EACG,iBAAO;IAAA,OACNtG;MACEY,EAAE,EAAEA,EAAE,IAAI2F,OADZ;MAEE5F,SAAS,EAAET,GAAG,CACZD,MAAM,CAACuG,WADK,EAEZzF,WAAW,IAAId,MAAM,CAAC2E,SAAP,CAAiB6B,SAFpB,EAGZ3F,WAAW,IAAIb,MAAM,CAAC2E,SAAP,CAAiB8B,QAHpB,EAIZrG,oBAAoB,CAACiB,MAAD,EAASrB,MAAT,CAJR,EAKZsB,YAAY,KAAKpB,kBAAkB,CAACwG,QAApC,IAAgD1G,MAAM,CAAC2E,SAAP,CAAiBgC,SALrD,EAMZjG,SANY,CAFhB;MAUEkG,GAAG,EAAEjF,KAVP;MAWEkF,eAAe,EAAE,2BAAE,EAAG;QACpB,IAAI,CAACrE,MAAD,IAAWsE,EAAE,CAACC,WAAH,CAAeC,YAAf,KAAgC,WAA/C,EAA4D;UAC1D3E,QAAQ;QACT;;QACDK,qBAAqB,CAAC,CAACF,MAAF,CAArB;MACD,CAhBH;MAiBEA,MAAM,EAAEA;IAjBV,GAkBO,CAACvB,WAAW,IAAID,OAAf,IAA0BE,OAA3B,KAAuC;MAC1CqE,KAAK,EAAEa;IADmC,CAlB9C,EAqBM3E,KArBN,GAuBGgB,kBAAkB,IACjB1C,oBAACA,KAAK,CAACkH,QAAP,EAAe,IAAf,EACGnG,WAAW,IACVf,oBAACA,KAAK,CAACkH,QAAP,EAAe,IAAf,EACElH;MACEW,SAAS,EAAET,GAAG,CAACD,MAAM,CAACkH,cAAR,EAAwBhF,QAAQ,KAAK,QAAb,IAAyBlC,MAAM,CAAC2E,SAAP,CAAiBwC,QAAlE,CADhB;MAEEC,IAAI,EAAC,WAFP;MAGEC,QAAQ,EAAE,CAHZ;MAGa,oBACOnF,QAAQ,KAAK,QAAb,GAAwB,YAAxB,GAAuC,UAJ3D;MAIqE,cACvDd,eALd;MAK6B,iBACZW,cANjB;MAM+B,iBACd,CAPjB;MAOkB,iBACD,GARjB;MAQoB,iBACHpB,EAAE,IAAI2F,OATvB;MAUEgB,WAAW,EAAEjD,eAVf;MAWEkD,SAAS,EAAExB,UAXb;MAYEyB,YAAY,EAAE3D,gBAZhB;MAaE+C,GAAG,EAAE/E;IAbP,GAeE9B;MAAKW,SAAS,EAAET,GAAG,CAACD,MAAM,CAACyH,oBAAR,CAAnB;MAAgD;IAAhD,EAfF,CADF,EAkBE1H;MAAKW,SAAS,EAAET,GAAG,CAACD,MAAM,CAAC0H,eAAR;IAAnB,GAA8C9G,QAA9C,CAlBF,CAFJ,EAuBG,CAACE,WAAD,IAAgBF,QAvBnB,CAxBJ,CADM;EAAA,CADV,CADF;AAyDD,CAtQM;AAuQPJ,kBAAkB,CAACmH,WAAnB,GAAiC,oBAAjC","names":["React","styles","css","DrawerColorVariant","DrawerContext","formatBreakpointMods","GenerateId","isResizing","newSize","DrawerPanelContent","_a","className","id","children","hasNoBorder","isResizable","onResize","minSize","defaultSize","maxSize","increment","resizeAriaLabel","widths","colorVariant","default","drawerContentRef","props","__rest","panel","useRef","splitterRef","useState","separatorValue","setSeparatorValue","useContext","position","isExpanded","isStatic","onExpand","drawerRef","isInline","hidden","isExpandedInternal","setIsExpandedInternal","currWidth","panelRect","right","left","bottom","setInitialVals","useEffect","calcValueNow","splitterPos","drawerSize","current","getBoundingClientRect","top","newSplitterPos","Math","round","Number","EPSILON","handleTouchStart","e","stopPropagation","document","addEventListener","callbackTouchMove","passive","callbackTouchEnd","handleMousedown","preventDefault","callbackMouseMove","callbackMouseUp","classList","add","modifiers","resizing","handleMouseMove","mousePos","clientY","clientX","handleControlMove","handleTouchMove","stopImmediatePropagation","touchPos","touches","controlPosition","style","overflowAnchor","setProperty","handleMouseup","remove","removeEventListener","handleTouchEnd","useCallback","handleKeys","key","height","width","delta","boundaryCssVars","prefix","panelId","drawerPanel","resizable","noBorder","light200","light_200","ref","onTransitionEnd","ev","nativeEvent","propertyName","Fragment","drawerSplitter","vertical","role","tabIndex","onMouseDown","onKeyDown","onTouchStart","drawerSplitterHandle","drawerPanelMain","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Drawer/DrawerPanelContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerColorVariant, DrawerContext } from './Drawer';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\n\nexport interface DrawerPanelContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the drawer. */\n  className?: string;\n  /** ID of the drawer panel */\n  id?: string;\n  /** Content to be rendered in the drawer panel. */\n  children?: React.ReactNode;\n  /** Flag indicating that the drawer panel should not have a border. */\n  hasNoBorder?: boolean;\n  /** Flag indicating that the drawer panel should be resizable. */\n  isResizable?: boolean;\n  /** Callback for resize end. */\n  onResize?: (width: number, id: string) => void;\n  /** The minimum size of a drawer, in either pixels or percentage. */\n  minSize?: string;\n  /** The starting size of a resizable drawer, in either pixels or percentage. */\n  defaultSize?: string;\n  /** The maximum size of a drawer, in either pixels or percentage. */\n  maxSize?: string;\n  /** The increment amount for keyboard drawer resizing, in pixels. */\n  increment?: number;\n  /** Aria label for the resizable drawer splitter. */\n  resizeAriaLabel?: string;\n  /** Width for drawer panel at various breakpoints. Overriden by resizable drawer minSize and defaultSize. */\n  widths?: {\n    default?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    lg?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    xl?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n    '2xl'?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  };\n  /** Color variant of the background of the drawer panel */\n  colorVariant?: DrawerColorVariant | 'light-200' | 'default';\n  /** @hide Internal ref to drawer content */\n  drawerContentRef?: React.RefObject<HTMLDivElement>;\n}\nlet isResizing: boolean = null;\nlet newSize: number = 0;\n\nexport const DrawerPanelContent: React.FunctionComponent<DrawerPanelContentProps> = ({\n  className = '',\n  id,\n  children,\n  hasNoBorder = false,\n  isResizable = false,\n  onResize,\n  minSize,\n  defaultSize,\n  maxSize,\n  increment = 5,\n  resizeAriaLabel = 'Resize',\n  widths,\n  colorVariant = DrawerColorVariant.default,\n  drawerContentRef,\n  ...props\n}: DrawerPanelContentProps) => {\n  const panel = React.useRef<HTMLDivElement>();\n  const splitterRef = React.useRef<HTMLDivElement>();\n  const [separatorValue, setSeparatorValue] = React.useState(0);\n  const { position, isExpanded, isStatic, onExpand, drawerRef, isInline } = React.useContext(DrawerContext);\n  const hidden = isStatic ? false : !isExpanded;\n  const [isExpandedInternal, setIsExpandedInternal] = React.useState(!hidden);\n  let currWidth: number = 0;\n  let panelRect: DOMRect;\n  let right: number;\n  let left: number;\n  let bottom: number;\n  let setInitialVals: boolean = true;\n\n  React.useEffect(() => {\n    if (!isStatic && isExpanded) {\n      setIsExpandedInternal(isExpanded);\n    }\n  }, [isStatic, isExpanded]);\n\n  const calcValueNow = () => {\n    let splitterPos;\n    let drawerSize;\n\n    if (isInline && position === 'right') {\n      splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (isInline && position === 'left') {\n      splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;\n      drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;\n    } else if (position === 'right') {\n      splitterPos =\n        drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'left') {\n      splitterPos =\n        splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;\n    } else if (position === 'bottom') {\n      splitterPos =\n        drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;\n      drawerSize =\n        drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;\n    }\n\n    const newSplitterPos = (splitterPos / drawerSize) * 100;\n    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;\n  };\n\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.stopPropagation();\n    document.addEventListener('touchmove', callbackTouchMove, { passive: false });\n    document.addEventListener('touchend', callbackTouchEnd);\n    isResizing = true;\n  };\n\n  const handleMousedown = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    document.addEventListener('mousemove', callbackMouseMove);\n    document.addEventListener('mouseup', callbackMouseUp);\n    drawerRef.current.classList.add(css(styles.modifiers.resizing));\n    isResizing = true;\n    setInitialVals = true;\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    const mousePos = position === 'bottom' ? e.clientY : e.clientX;\n    handleControlMove(e, mousePos);\n  };\n\n  const handleTouchMove = (e: TouchEvent) => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    const touchPos = position === 'bottom' ? e.touches[0].clientY : e.touches[0].clientX;\n    handleControlMove(e, touchPos);\n  };\n\n  const handleControlMove = (e: MouseEvent | TouchEvent, controlPosition: number) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n\n    if (setInitialVals) {\n      panelRect = panel.current.getBoundingClientRect();\n      right = panelRect.right;\n      left = panelRect.left;\n      bottom = panelRect.bottom;\n      setInitialVals = false;\n    }\n    const mousePos = controlPosition;\n    let newSize = 0;\n    if (position === 'right') {\n      newSize = right - mousePos;\n    } else if (position === 'left') {\n      newSize = mousePos - left;\n    } else {\n      newSize = bottom - mousePos;\n    }\n\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n\n  const handleMouseup = () => {\n    if (!isResizing) {\n      return;\n    }\n    drawerRef.current.classList.remove(css(styles.modifiers.resizing));\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    setInitialVals = true;\n    document.removeEventListener('mousemove', callbackMouseMove);\n    document.removeEventListener('mouseup', callbackMouseUp);\n  };\n\n  const handleTouchEnd = (e: TouchEvent) => {\n    e.stopPropagation();\n    if (!isResizing) {\n      return;\n    }\n    isResizing = false;\n    onResize && onResize(currWidth, id);\n    document.removeEventListener('touchmove', callbackTouchMove);\n    document.removeEventListener('touchend', callbackTouchEnd);\n  };\n\n  const callbackMouseMove = React.useCallback(handleMouseMove, []);\n  const callbackTouchEnd = React.useCallback(handleTouchEnd, []);\n  const callbackTouchMove = React.useCallback(handleTouchMove, []);\n  const callbackMouseUp = React.useCallback(handleMouseup, []);\n\n  const handleKeys = (e: React.KeyboardEvent) => {\n    const key = e.key;\n    if (\n      key !== 'Escape' &&\n      key !== 'Enter' &&\n      key !== 'ArrowUp' &&\n      key !== 'ArrowDown' &&\n      key !== 'ArrowLeft' &&\n      key !== 'ArrowRight'\n    ) {\n      if (isResizing) {\n        e.preventDefault();\n      }\n      return;\n    }\n    e.preventDefault();\n\n    if (key === 'Escape' || key === 'Enter') {\n      onResize && onResize(currWidth, id);\n    }\n    const panelRect = panel.current.getBoundingClientRect();\n    newSize = position === 'bottom' ? panelRect.height : panelRect.width;\n    let delta = 0;\n    if (key === 'ArrowRight') {\n      delta = position === 'left' ? increment : -increment;\n    } else if (key === 'ArrowLeft') {\n      delta = position === 'left' ? -increment : increment;\n    } else if (key === 'ArrowUp') {\n      delta = increment;\n    } else if (key === 'ArrowDown') {\n      delta = -increment;\n    }\n    newSize = newSize + delta;\n    if (position === 'bottom') {\n      panel.current.style.overflowAnchor = 'none';\n    }\n    panel.current.style.setProperty('--pf-c-drawer__panel--md--FlexBasis', newSize + 'px');\n    currWidth = newSize;\n    setSeparatorValue(calcValueNow());\n  };\n  const boundaryCssVars: any = {};\n  if (defaultSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis'] = defaultSize;\n  }\n  if (minSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--min'] = minSize;\n  }\n  if (maxSize) {\n    boundaryCssVars['--pf-c-drawer__panel--md--FlexBasis--max'] = maxSize;\n  }\n  return (\n    <GenerateId prefix=\"pf-drawer-panel-\">\n      {panelId => (\n        <div\n          id={id || panelId}\n          className={css(\n            styles.drawerPanel,\n            isResizable && styles.modifiers.resizable,\n            hasNoBorder && styles.modifiers.noBorder,\n            formatBreakpointMods(widths, styles),\n            colorVariant === DrawerColorVariant.light200 && styles.modifiers.light_200,\n            className\n          )}\n          ref={panel}\n          onTransitionEnd={ev => {\n            if (!hidden && ev.nativeEvent.propertyName === 'transform') {\n              onExpand();\n            }\n            setIsExpandedInternal(!hidden);\n          }}\n          hidden={hidden}\n          {...((defaultSize || minSize || maxSize) && {\n            style: boundaryCssVars as React.CSSProperties\n          })}\n          {...props}\n        >\n          {isExpandedInternal && (\n            <React.Fragment>\n              {isResizable && (\n                <React.Fragment>\n                  <div\n                    className={css(styles.drawerSplitter, position !== 'bottom' && styles.modifiers.vertical)}\n                    role=\"separator\"\n                    tabIndex={0}\n                    aria-orientation={position === 'bottom' ? 'horizontal' : 'vertical'}\n                    aria-label={resizeAriaLabel}\n                    aria-valuenow={separatorValue}\n                    aria-valuemin={0}\n                    aria-valuemax={100}\n                    aria-controls={id || panelId}\n                    onMouseDown={handleMousedown}\n                    onKeyDown={handleKeys}\n                    onTouchStart={handleTouchStart}\n                    ref={splitterRef}\n                  >\n                    <div className={css(styles.drawerSplitterHandle)} aria-hidden></div>\n                  </div>\n                  <div className={css(styles.drawerPanelMain)}>{children}</div>\n                </React.Fragment>\n              )}\n              {!isResizable && children}\n            </React.Fragment>\n          )}\n        </div>\n      )}\n    </GenerateId>\n  );\n};\nDrawerPanelContent.displayName = 'DrawerPanelContent';\n"]},"metadata":{},"sourceType":"module"}