{"ast":null,"code":"import _defineProperty from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { TableContext } from './TableContext';\nimport { isRowExpanded } from './utils';\n\nvar flagVisibility = function flagVisibility(rows) {\n  var visibleRows = rows.filter(function (oneRow) {\n    return !oneRow.parent || oneRow.isExpanded;\n  });\n\n  if (visibleRows.length > 0) {\n    visibleRows[0].isFirstVisible = true;\n    visibleRows[visibleRows.length - 1].isLastVisible = true;\n  }\n};\n\nvar ContextBody = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContextBody, _React$Component);\n\n  var _super = _createSuper(ContextBody);\n\n  function ContextBody() {\n    var _this;\n\n    _classCallCheck(this, ContextBody);\n\n    _this = _super.apply(this, arguments);\n\n    _this.onRow = function (row, rowProps) {\n      var _this$props = _this.props,\n          onRowClick = _this$props.onRowClick,\n          onRow = _this$props.onRow;\n      var extendedRowProps = Object.assign(Object.assign({}, rowProps), onRow ? onRow(row, rowProps) : {});\n      return {\n        row: row,\n        rowProps: extendedRowProps,\n        onClick: function onClick(event) {\n          var tagName = event.target.tagName;\n          var computedData = {\n            isInput: tagName === 'INPUT',\n            isButton: tagName === 'BUTTON'\n          };\n          onRowClick(event, row, rowProps, computedData);\n        },\n        onKeyDown: function onKeyDown(event) {\n          var targetElement = event.target;\n          var tagName = targetElement.tagName;\n          var computedData = {\n            isInput: tagName === 'INPUT',\n            isButton: tagName === 'BUTTON'\n          };\n\n          if (event.key === 'Enter' || event.key === ' ') {\n            onRowClick(event, row, rowProps, computedData); // prevent event default if space is typed while focusing on a hoverable row\n            // so that the page does not scroll when trying to use spacebar to select a row\n\n            if (event.key === ' ' && !!targetElement.closest('.pf-m-hoverable')) {\n              event.preventDefault();\n            }\n          }\n        }\n      };\n    };\n\n    _this.mapCells = function (headerData, row, rowKey) {\n      // column indexes start after generated optional columns like collapsible or select column(s)\n      var firstUserColumnIndex = headerData[0].extraParams.firstUserColumnIndex;\n      var isFullWidth = row && row.fullWidth; // typically you'd want to map each cell to its column header, but in the case of fullWidth\n      // the first column could be the Select and/or Expandable column\n\n      var additionalColsIndexShift = isFullWidth ? 0 : firstUserColumnIndex;\n      return Object.assign({}, row && (row.cells || row).reduce(function (acc, cell, cellIndex) {\n        var isCellObject = cell === Object(cell);\n        var isCellFunction = cell && typeof cell.title === 'function';\n        var formatters = [];\n\n        if (isCellObject && cell.formatters) {\n          // give priority to formatters specified on the cell object\n          // expandable example:\n          // rows: [{ parent: 0, fullWidth: true, cells: [{ title: 'fullWidth, child - a', formatters: [expandable]}] }]\n          formatters = cell.formatters;\n        } else if (isFullWidth && cellIndex < firstUserColumnIndex) {\n          // for backwards compatibility, map the cells that are not under user columns (like Select/Expandable)\n          // to the first user column's header formatters\n          formatters = headerData[firstUserColumnIndex].cell.formatters;\n        }\n\n        var mappedCellTitle = cell;\n\n        if (isCellObject && isCellFunction) {\n          mappedCellTitle = cell.title(cell.props.value, rowKey, cellIndex, cell.props);\n        } else if (isCellObject) {\n          mappedCellTitle = cell.title;\n        }\n\n        var mappedCell = _defineProperty({}, headerData[cellIndex + additionalColsIndexShift].property, {\n          title: mappedCellTitle,\n          formatters: formatters,\n          props: Object.assign({\n            isVisible: true\n          }, isCellObject ? cell.props : null)\n        }); // increment the shift index when a cell spans multiple columns\n\n\n        if (isCellObject && cell.props && cell.props.colSpan) {\n          additionalColsIndexShift += cell.props.colSpan - 1;\n        }\n\n        return Object.assign(Object.assign({}, acc), mappedCell);\n      }, {\n        secretTableRowKeyId: row.id !== undefined ? row.id : rowKey\n      }));\n    };\n\n    return _this;\n  }\n\n  _createClass(ContextBody, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      var _a = this.props,\n          className = _a.className,\n          headerData = _a.headerData,\n          rows = _a.rows,\n          rowKey = _a.rowKey,\n          children = _a.children,\n          onRowClick = _a.onRowClick,\n          props = __rest(_a, [\"className\", \"headerData\", \"rows\", \"rowKey\", \"children\", \"onRowClick\"]);\n\n      var mappedRows;\n\n      if (headerData.length > 0) {\n        mappedRows = rows.map(function (oneRow, oneRowKey) {\n          return Object.assign(Object.assign(Object.assign({}, oneRow), _this2.mapCells(headerData, oneRow, oneRowKey)), {\n            isExpanded: isRowExpanded(oneRow, rows),\n            isHeightAuto: oneRow.heightAuto || false,\n            isFirst: oneRowKey === 0,\n            isLast: oneRowKey === rows.length - 1,\n            isFirstVisible: false,\n            isLastVisible: false\n          });\n        });\n        flagVisibility(mappedRows);\n      }\n\n      return React.createElement(React.Fragment, null, mappedRows && React.createElement(BaseBody, Object.assign({}, props, {\n        mappedRows: mappedRows,\n        rows: mappedRows,\n        onRow: this.onRow,\n        rowKey: rowKey,\n        className: className\n      })));\n    }\n  }]);\n\n  return ContextBody;\n}(React.Component);\n\nexport var TableBody = function TableBody(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$rowKey = _a.rowKey,\n      rowKey = _a$rowKey === void 0 ? 'secretTableRowKeyId' : _a$rowKey,\n      _a$onRow = _a.onRow,\n      onRow = _a$onRow === void 0 ? function () {\n    return {};\n  } : _a$onRow,\n      _a$onRowClick = _a.onRowClick,\n      onRowClick = _a$onRowClick === void 0 ? function (event, row, rowProps, computedData) {\n    return (\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      undefined\n    );\n  } : _a$onRowClick,\n      props = __rest(_a, [\"className\", \"children\", \"rowKey\", \"onRow\", \"onRowClick\"]);\n\n  return React.createElement(TableContext.Consumer, null, function (_a) {\n    var _a$headerData = _a.headerData,\n        headerData = _a$headerData === void 0 ? [] : _a$headerData,\n        _a$rows = _a.rows,\n        rows = _a$rows === void 0 ? [] : _a$rows,\n        rest = __rest(_a, [\"headerData\", \"rows\"]);\n\n    return React.createElement(ContextBody, Object.assign({\n      headerData: headerData,\n      rows: rows,\n      onRow: onRow,\n      className: className,\n      rowKey: rowKey,\n      onRowClick: onRowClick\n    }, props, rest), children);\n  });\n};","map":{"version":3,"mappings":"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","names":["React","Body","BaseBody","TableContext","isRowExpanded","flagVisibility","rows","visibleRows","filter","oneRow","parent","isExpanded","length","isFirstVisible","isLastVisible","ContextBody","row","rowProps","props","onRowClick","onRow","extendedRowProps","onClick","event","tagName","target","computedData","isInput","isButton","onKeyDown","targetElement","key","closest","preventDefault","headerData","rowKey","firstUserColumnIndex","extraParams","isFullWidth","fullWidth","additionalColsIndexShift","cells","reduce","acc","cell","cellIndex","isCellObject","Object","isCellFunction","title","formatters","mappedCellTitle","value","mappedCell","property","isVisible","colSpan","secretTableRowKeyId","id","undefined","className","_a","children","__rest","mappedRows","map","oneRowKey","mapCells","isHeightAuto","heightAuto","isFirst","isLast","Fragment","Component","TableBody","Consumer","rest"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/Body.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Body as BaseBody } from './base';\nimport { RowType, RowKeyType } from './base/types';\nimport { IRow, IRowCell, IExtraRowData } from './TableTypes';\nimport { TableContext } from './TableContext';\nimport { isRowExpanded } from './utils';\n\nexport interface IComputedData {\n  isInput: boolean;\n  isButton: boolean;\n}\n\nexport type OnRowClick = (\n  event: React.KeyboardEvent | React.MouseEvent,\n  row: IRow,\n  rowProps: IExtraRowData,\n  computedData: IComputedData\n) => void;\n\nexport interface TableBodyProps {\n  /** Additional classes added to the TableBody  */\n  className?: string;\n  /** @hide This prop should not be set manually  */\n  children?: React.ReactNode;\n  /** @hide This prop should not be set manually  */\n  headerData?: IRow[];\n  /** @hide This prop should not be set manually  */\n  rows?: IRow[];\n  /** @hide This prop should not be set manually  */\n  rowKey?: RowKeyType;\n  /** A click handler for the row  */\n  onRowClick?: OnRowClick;\n  /** @hide This prop should not be set manually  */\n  onRow?: Function;\n  /** Flag indicating the <tbody> contains oddly striped rows. */\n  isOddStriped?: boolean;\n  /** Flag indicating the <tbody> contains evenly striped rows. */\n  isEvenStriped?: boolean;\n}\n\nconst flagVisibility = (rows: IRow[]) => {\n  const visibleRows = (rows as IRow[]).filter((oneRow: IRow) => !oneRow.parent || oneRow.isExpanded) as IRow[];\n  if (visibleRows.length > 0) {\n    visibleRows[0].isFirstVisible = true;\n    visibleRows[visibleRows.length - 1].isLastVisible = true;\n  }\n};\n\ninterface IMappedCell {\n  [name: string]: IRowCell;\n}\n\nclass ContextBody extends React.Component<TableBodyProps, {}> {\n  onRow = (row: IRow, rowProps: any) => {\n    const { onRowClick, onRow } = this.props;\n    const extendedRowProps = {\n      ...rowProps,\n      ...(onRow ? onRow(row, rowProps) : {})\n    };\n    return {\n      row,\n      rowProps: extendedRowProps,\n      onClick: (event: React.MouseEvent) => {\n        const tagName = (event.target as HTMLElement).tagName;\n        const computedData = {\n          isInput: tagName === 'INPUT',\n          isButton: tagName === 'BUTTON'\n        };\n\n        onRowClick(event, row, rowProps, computedData);\n      },\n      onKeyDown: (event: React.KeyboardEvent) => {\n        const targetElement = event.target as HTMLElement;\n        const tagName = targetElement.tagName;\n        const computedData = {\n          isInput: tagName === 'INPUT',\n          isButton: tagName === 'BUTTON'\n        };\n        if (event.key === 'Enter' || event.key === ' ') {\n          onRowClick(event, row, rowProps, computedData);\n\n          // prevent event default if space is typed while focusing on a hoverable row\n          // so that the page does not scroll when trying to use spacebar to select a row\n          if (event.key === ' ' && !!targetElement.closest('.pf-m-hoverable')) {\n            event.preventDefault();\n          }\n        }\n      }\n    };\n  };\n\n  mapCells = (headerData: IRow[], row: IRow, rowKey: number) => {\n    // column indexes start after generated optional columns like collapsible or select column(s)\n    const { firstUserColumnIndex } = headerData[0].extraParams;\n    const isFullWidth = row && row.fullWidth;\n    // typically you'd want to map each cell to its column header, but in the case of fullWidth\n    // the first column could be the Select and/or Expandable column\n    let additionalColsIndexShift = isFullWidth ? 0 : firstUserColumnIndex;\n    return {\n      ...(row &&\n        (row.cells || row).reduce(\n          (acc: object, cell: IRowCell, cellIndex: number) => {\n            const isCellObject = cell === Object(cell);\n            const isCellFunction = cell && typeof cell.title === 'function';\n            let formatters: any = [];\n            if (isCellObject && cell.formatters) {\n              // give priority to formatters specified on the cell object\n              // expandable example:\n              // rows: [{ parent: 0, fullWidth: true, cells: [{ title: 'fullWidth, child - a', formatters: [expandable]}] }]\n              formatters = cell.formatters;\n            } else if (isFullWidth && cellIndex < firstUserColumnIndex) {\n              // for backwards compatibility, map the cells that are not under user columns (like Select/Expandable)\n              // to the first user column's header formatters\n              formatters = headerData[firstUserColumnIndex].cell.formatters;\n            }\n            let mappedCellTitle: IRowCell | Function | IRowCell['title'] = cell;\n            if (isCellObject && isCellFunction) {\n              mappedCellTitle = (cell.title as Function)(cell.props.value, rowKey, cellIndex, cell.props);\n            } else if (isCellObject) {\n              mappedCellTitle = cell.title;\n            }\n            const mappedCell: IMappedCell = {\n              [headerData[cellIndex + additionalColsIndexShift].property]: {\n                title: mappedCellTitle,\n                formatters,\n                props: {\n                  isVisible: true,\n                  ...(isCellObject ? cell.props : null)\n                }\n              }\n            };\n\n            // increment the shift index when a cell spans multiple columns\n            if (isCellObject && cell.props && cell.props.colSpan) {\n              additionalColsIndexShift += cell.props.colSpan - 1;\n            }\n            return {\n              ...acc,\n              ...mappedCell\n            };\n          },\n          { secretTableRowKeyId: row.id !== undefined ? row.id : rowKey }\n        ))\n    };\n  };\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { className, headerData, rows, rowKey, children, onRowClick, ...props } = this.props;\n\n    let mappedRows: IRow[];\n    if (headerData.length > 0) {\n      mappedRows = (rows as IRow[]).map((oneRow: IRow, oneRowKey: number) => ({\n        ...oneRow,\n        ...this.mapCells(headerData, oneRow, oneRowKey),\n        isExpanded: isRowExpanded(oneRow, rows),\n        isHeightAuto: oneRow.heightAuto || false,\n        isFirst: oneRowKey === 0,\n        isLast: oneRowKey === rows.length - 1,\n        isFirstVisible: false,\n        isLastVisible: false\n      })) as IRow[];\n      flagVisibility(mappedRows);\n    }\n\n    return (\n      <React.Fragment>\n        {mappedRows && (\n          <BaseBody\n            {...props}\n            mappedRows={mappedRows}\n            rows={mappedRows as RowType[]}\n            onRow={this.onRow}\n            rowKey={rowKey}\n            className={className}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport const TableBody = ({\n  className = '' as string,\n  children = null as React.ReactNode,\n  rowKey = 'secretTableRowKeyId' as string,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  onRow = (...args: any) => ({}),\n  onRowClick = (\n    event: React.MouseEvent | React.KeyboardEvent,\n    row: IRow,\n    rowProps: IExtraRowData,\n    computedData: IComputedData\n  ) =>\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    undefined as OnRowClick,\n  ...props\n}: TableBodyProps) => (\n  <TableContext.Consumer>\n    {({ headerData = [], rows = [], ...rest }) => (\n      <ContextBody\n        headerData={headerData}\n        rows={rows as IRow[]}\n        onRow={onRow}\n        className={className}\n        rowKey={rowKey}\n        onRowClick={onRowClick}\n        {...props}\n        {...rest}\n      >\n        {children}\n      </ContextBody>\n    )}\n  </TableContext.Consumer>\n);\n"]},"metadata":{},"sourceType":"module"}