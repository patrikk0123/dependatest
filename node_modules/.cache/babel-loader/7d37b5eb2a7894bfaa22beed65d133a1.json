{"ast":null,"code":"// @ts-nocheck\nimport getBasePlacement from './getBasePlacement';\nimport getVariation from './getVariation';\nimport getMainAxisFromPlacement from './getMainAxisFromPlacement';\nimport { top, right, bottom, left, start, end } from '../enums';\n/**\n *\n */\n\nexport default function computeOffsets(_ref) {\n  let {\n    reference,\n    element,\n    placement\n  } = _ref;\n  const basePlacement = placement ? getBasePlacement(placement) : null;\n  const variation = placement ? getVariation(placement) : null;\n  const commonX = reference.x + reference.width / 2 - element.width / 2;\n  const commonY = reference.y + reference.height / 2 - element.height / 2;\n  let offsets;\n\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  const mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    const len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}","map":{"version":3,"mappings":"AAAA;AACA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AAEA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,GAA1C,QAAgE,UAAhE;AAEA;;;;AAGA,eAAc,SAAUC,cAAV,OASb;EAAA,IATsC;IACrCC,SADqC;IAErCC,OAFqC;IAGrCC;EAHqC,CAStC;EACC,MAAMC,aAAa,GAAGD,SAAS,GAAGZ,gBAAgB,CAACY,SAAD,CAAnB,GAAiC,IAAhE;EACA,MAAME,SAAS,GAAGF,SAAS,GAAGX,YAAY,CAACW,SAAD,CAAf,GAA6B,IAAxD;EACA,MAAMG,OAAO,GAAGL,SAAS,CAACM,CAAV,GAAcN,SAAS,CAACO,KAAV,GAAkB,CAAhC,GAAoCN,OAAO,CAACM,KAAR,GAAgB,CAApE;EACA,MAAMC,OAAO,GAAGR,SAAS,CAACS,CAAV,GAAcT,SAAS,CAACU,MAAV,GAAmB,CAAjC,GAAqCT,OAAO,CAACS,MAAR,GAAiB,CAAtE;EAEA,IAAIC,OAAJ;;EACA,QAAQR,aAAR;IACE,KAAKV,GAAL;MACEkB,OAAO,GAAG;QACRL,CAAC,EAAED,OADK;QAERI,CAAC,EAAET,SAAS,CAACS,CAAV,GAAcR,OAAO,CAACS;MAFjB,CAAV;MAIA;;IACF,KAAKf,MAAL;MACEgB,OAAO,GAAG;QACRL,CAAC,EAAED,OADK;QAERI,CAAC,EAAET,SAAS,CAACS,CAAV,GAAcT,SAAS,CAACU;MAFnB,CAAV;MAIA;;IACF,KAAKhB,KAAL;MACEiB,OAAO,GAAG;QACRL,CAAC,EAAEN,SAAS,CAACM,CAAV,GAAcN,SAAS,CAACO,KADnB;QAERE,CAAC,EAAED;MAFK,CAAV;MAIA;;IACF,KAAKZ,IAAL;MACEe,OAAO,GAAG;QACRL,CAAC,EAAEN,SAAS,CAACM,CAAV,GAAcL,OAAO,CAACM,KADjB;QAERE,CAAC,EAAED;MAFK,CAAV;MAIA;;IACF;MACEG,OAAO,GAAG;QACRL,CAAC,EAAEN,SAAS,CAACM,CADL;QAERG,CAAC,EAAET,SAAS,CAACS;MAFL,CAAV;EA1BJ;;EAgCA,MAAMG,QAAQ,GAAGT,aAAa,GAAGX,wBAAwB,CAACW,aAAD,CAA3B,GAA6C,IAA3E;;EAEA,IAAIS,QAAQ,IAAI,IAAhB,EAAsB;IACpB,MAAMC,GAAG,GAAGD,QAAQ,KAAK,GAAb,GAAmB,QAAnB,GAA8B,OAA1C;;IAEA,QAAQR,SAAR;MACE,KAAKP,KAAL;QACEc,OAAO,CAACC,QAAD,CAAP,GAAoBE,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACC,QAAD,CAAlB,IAAgCE,IAAI,CAACC,KAAL,CAAWf,SAAS,CAACa,GAAD,CAAT,GAAiB,CAAjB,GAAqBZ,OAAO,CAACY,GAAD,CAAP,GAAe,CAA/C,CAApD;QACA;;MACF,KAAKf,GAAL;QACEa,OAAO,CAACC,QAAD,CAAP,GAAoBE,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACC,QAAD,CAAlB,IAAgCE,IAAI,CAACE,IAAL,CAAUhB,SAAS,CAACa,GAAD,CAAT,GAAiB,CAAjB,GAAqBZ,OAAO,CAACY,GAAD,CAAP,GAAe,CAA9C,CAApD;QACA;;MACF;IAPF;EASD;;EAED,OAAOF,OAAP;AACD","names":["getBasePlacement","getVariation","getMainAxisFromPlacement","top","right","bottom","left","start","end","computeOffsets","reference","element","placement","basePlacement","variation","commonX","x","width","commonY","y","height","offsets","mainAxis","len","Math","floor","ceil"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/utils/computeOffsets.ts"],"sourcesContent":["// @ts-nocheck\nimport getBasePlacement from './getBasePlacement';\nimport getVariation from './getVariation';\nimport getMainAxisFromPlacement from './getMainAxisFromPlacement';\nimport { Rect, PositioningStrategy, Offsets, ClientRectObject } from '../types';\nimport { top, right, bottom, left, start, end, Placement } from '../enums';\n\n/**\n *\n */\nexport default function computeOffsets({\n  reference,\n  element,\n  placement\n}: {\n  reference: Rect | ClientRectObject;\n  element: Rect | ClientRectObject;\n  strategy: PositioningStrategy;\n  placement?: Placement;\n}): Offsets {\n  const basePlacement = placement ? getBasePlacement(placement) : null;\n  const variation = placement ? getVariation(placement) : null;\n  const commonX = reference.x + reference.width / 2 - element.width / 2;\n  const commonY = reference.y + reference.height / 2 - element.height / 2;\n\n  let offsets;\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  const mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    const len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference[len] / 2 - element[len] / 2);\n        break;\n      case end:\n        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference[len] / 2 - element[len] / 2);\n        break;\n      default:\n    }\n  }\n\n  return offsets;\n}\n"]},"metadata":{},"sourceType":"module"}