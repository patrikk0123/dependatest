{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport const WizardNavItem = _a => {\n  var {\n    children = null,\n    content = '',\n    isCurrent = false,\n    isDisabled = false,\n    step,\n    onNavItemClick = () => undefined,\n    navItemComponent = 'button',\n    href = null,\n    isExpandable = false,\n    id\n  } = _a,\n      rest = __rest(_a, [\"children\", \"content\", \"isCurrent\", \"isDisabled\", \"step\", \"onNavItemClick\", \"navItemComponent\", \"href\", \"isExpandable\", \"id\"]);\n\n  const NavItemComponent = navItemComponent;\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  React.useEffect(() => {\n    setIsExpanded(isCurrent);\n  }, [isCurrent]);\n\n  if (navItemComponent === 'a' && !href && process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error('WizardNavItem: When using an anchor, please provide an href');\n  }\n\n  const btnProps = {\n    disabled: isDisabled\n  };\n  const linkProps = {\n    tabIndex: isDisabled ? -1 : undefined,\n    href\n  };\n  return React.createElement(\"li\", {\n    className: css(styles.wizardNavItem, isExpandable && styles.modifiers.expandable, isExpandable && isExpanded && styles.modifiers.expanded)\n  }, React.createElement(NavItemComponent, Object.assign({}, rest, navItemComponent === 'a' ? Object.assign({}, linkProps) : Object.assign({}, btnProps), id && {\n    id: id.toString()\n  }, {\n    onClick: () => isExpandable ? setIsExpanded(!isExpanded || isCurrent) : onNavItemClick(step),\n    className: css(styles.wizardNavLink, isCurrent && styles.modifiers.current, isDisabled && styles.modifiers.disabled),\n    \"aria-disabled\": isDisabled ? true : null,\n    \"aria-current\": isCurrent && !children ? 'step' : false\n  }, isExpandable && {\n    'aria-expanded': isExpanded\n  }), isExpandable ? React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: css(styles.wizardNavLinkText)\n  }, content), React.createElement(\"span\", {\n    className: css(styles.wizardNavLinkToggle)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardNavLinkToggleIcon)\n  }, React.createElement(AngleRightIcon, null)))) : content), children);\n};\nWizardNavItem.displayName = 'WizardNavItem';","map":{"version":3,"mappings":"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","names":["React","css","styles","AngleRightIcon","WizardNavItem","_a","children","content","isCurrent","isDisabled","step","onNavItemClick","undefined","navItemComponent","href","isExpandable","id","rest","NavItemComponent","isExpanded","setIsExpanded","useState","useEffect","process","env","NODE_ENV","console","error","btnProps","disabled","linkProps","tabIndex","className","wizardNavItem","modifiers","expandable","expanded","Object","toString","onClick","wizardNavLink","current","wizardNavLinkText","wizardNavLinkToggle","wizardNavLinkToggleIcon","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Wizard/WizardNavItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\n\nexport interface WizardNavItemProps {\n  /** Can nest a WizardNav component for substeps */\n  children?: React.ReactNode;\n  /** The content to display in the nav item */\n  content?: React.ReactNode;\n  /** Whether the nav item is the currently active item */\n  isCurrent?: boolean;\n  /** Whether the nav item is disabled */\n  isDisabled?: boolean;\n  /** The step passed into the onNavItemClick callback */\n  step: number;\n  /** Callback for when the nav item is clicked */\n  onNavItemClick?: (step: number) => any;\n  /** Component used to render WizardNavItem */\n  navItemComponent?: 'button' | 'a';\n  /** An optional url to use for when using an anchor component */\n  href?: string;\n  /** Flag indicating that this NavItem has child steps and is expandable */\n  isExpandable?: boolean;\n  /** The id for the nav item */\n  id?: string | number;\n}\n\nexport const WizardNavItem: React.FunctionComponent<WizardNavItemProps> = ({\n  children = null,\n  content = '',\n  isCurrent = false,\n  isDisabled = false,\n  step,\n  onNavItemClick = () => undefined,\n  navItemComponent = 'button',\n  href = null,\n  isExpandable = false,\n  id,\n  ...rest\n}: WizardNavItemProps) => {\n  const NavItemComponent = navItemComponent;\n\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsExpanded(isCurrent);\n  }, [isCurrent]);\n\n  if (navItemComponent === 'a' && !href && process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error('WizardNavItem: When using an anchor, please provide an href');\n  }\n\n  const btnProps = {\n    disabled: isDisabled\n  };\n\n  const linkProps = {\n    tabIndex: isDisabled ? -1 : undefined,\n    href\n  };\n\n  return (\n    <li\n      className={css(\n        styles.wizardNavItem,\n        isExpandable && styles.modifiers.expandable,\n        isExpandable && isExpanded && styles.modifiers.expanded\n      )}\n    >\n      <NavItemComponent\n        {...rest}\n        {...(navItemComponent === 'a' ? { ...linkProps } : { ...btnProps })}\n        {...(id && { id: id.toString() })}\n        onClick={() => (isExpandable ? setIsExpanded(!isExpanded || isCurrent) : onNavItemClick(step))}\n        className={css(\n          styles.wizardNavLink,\n          isCurrent && styles.modifiers.current,\n          isDisabled && styles.modifiers.disabled\n        )}\n        aria-disabled={isDisabled ? true : null}\n        aria-current={isCurrent && !children ? 'step' : false}\n        {...(isExpandable && { 'aria-expanded': isExpanded })}\n      >\n        {isExpandable ? (\n          <>\n            <span className={css(styles.wizardNavLinkText)}>{content}</span>\n            <span className={css(styles.wizardNavLinkToggle)}>\n              <span className={css(styles.wizardNavLinkToggleIcon)}>\n                <AngleRightIcon />\n              </span>\n            </span>\n          </>\n        ) : (\n          content\n        )}\n      </NavItemComponent>\n      {children}\n    </li>\n  );\n};\nWizardNavItem.displayName = 'WizardNavItem';\n"]},"metadata":{},"sourceType":"module"}