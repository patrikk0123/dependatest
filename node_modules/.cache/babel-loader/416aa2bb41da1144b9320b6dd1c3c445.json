{"ast":null,"code":"import { kafkaClient } from './kafkaClient';\nimport { pncClient } from './pncClient';\n\nclass BuildService {\n  constructor() {\n    this.path = '/builds';\n  }\n\n  /**\n   * Gets Build Metrics by a list of build Ids.\n   *\n   * @returns BuildMetrics\n   */\n  getBuildMetrics(buildIds) {\n    let requestConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (buildIds) {\n      return kafkaClient.getHttpClient().post(`${this.path}`, {\n        buildIds\n      }, requestConfig);\n    }\n  }\n  /**\n   * Gets Build Counts for enqueued, running, and waiting for dependencies builds.\n   *\n   * @returns numbers for \"enqueued\", \"running\", \"waitingForDependencies\"\n   */\n\n\n  getBuildCount() {\n    let requestConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return pncClient.getHttpClient().get(`${this.path}/count`, requestConfig);\n  }\n\n}\n/**\n * Instance of BuildService providing group of Build related API operations.\n */\n\n\nexport const buildService = new BuildService();","map":{"version":3,"names":["kafkaClient","pncClient","BuildService","path","getBuildMetrics","buildIds","requestConfig","getHttpClient","post","getBuildCount","get","buildService"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/services/buildService.ts"],"sourcesContent":["import { AxiosRequestConfig } from 'axios';\nimport { kafkaClient } from './kafkaClient';\nimport { pncClient } from './pncClient';\n\nclass BuildService {\n  path = '/builds';\n\n  /**\n   * Gets Build Metrics by a list of build Ids.\n   *\n   * @returns BuildMetrics\n   */\n  public getBuildMetrics(buildIds?: Array<string>, requestConfig: AxiosRequestConfig = {}) {\n    if (buildIds) {\n      return kafkaClient.getHttpClient().post(`${this.path}`, { buildIds }, requestConfig);\n    }\n  }\n\n  /**\n   * Gets Build Counts for enqueued, running, and waiting for dependencies builds.\n   *\n   * @returns numbers for \"enqueued\", \"running\", \"waitingForDependencies\"\n   */\n  public getBuildCount(requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().get(`${this.path}/count`, requestConfig);\n  }\n}\n\n/**\n * Instance of BuildService providing group of Build related API operations.\n */\nexport const buildService = new BuildService();\n"],"mappings":"AACA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,YAAN,CAAmB;EAAA;IAAA,KACjBC,IADiB,GACV,SADU;EAAA;;EAGjB;AACF;AACA;AACA;AACA;EACSC,eAAe,CAACC,QAAD,EAAmE;IAAA,IAAxCC,aAAwC,uEAAJ,EAAI;;IACvF,IAAID,QAAJ,EAAc;MACZ,OAAOL,WAAW,CAACO,aAAZ,GAA4BC,IAA5B,CAAkC,GAAE,KAAKL,IAAK,EAA9C,EAAiD;QAAEE;MAAF,CAAjD,EAA+DC,aAA/D,CAAP;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACSG,aAAa,GAAyC;IAAA,IAAxCH,aAAwC,uEAAJ,EAAI;IAC3D,OAAOL,SAAS,CAACM,aAAV,GAA0BG,GAA1B,CAA+B,GAAE,KAAKP,IAAK,QAA3C,EAAoDG,aAApD,CAAP;EACD;;AArBgB;AAwBnB;AACA;AACA;;;AACA,OAAO,MAAMK,YAAY,GAAG,IAAIT,YAAJ,EAArB"},"metadata":{},"sourceType":"module"}