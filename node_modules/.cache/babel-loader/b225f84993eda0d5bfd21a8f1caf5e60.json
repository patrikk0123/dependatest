{"ast":null,"code":"import { pncClient } from './pncClient';\n\nclass ProjectService {\n  /**\n   * Gets all Projects.\n   *\n   * @param requestConfig - Axios based request config\n   * @returns Projects\n   */\n  getProjects() {\n    let requestConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return pncClient.getHttpClient().get('/projects', requestConfig);\n  }\n  /**\n   * Gets a specific Project.\n   *\n   * @param data - object containing ID of the Project\n   * @param requestConfig - Axios based request config\n   * @returns Project\n   */\n\n\n  getProject(_ref) {\n    let {\n      id\n    } = _ref;\n    let requestConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return pncClient.getHttpClient().get(`/projects/${id}`, requestConfig);\n  }\n  /**\n   * Creates a new Project.\n   *\n   * @param data - object containing new Project data\n   * @param requestConfig  - Axios based request config\n   * @returns Created Project\n   */\n\n\n  createProject(data) {\n    let requestConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return pncClient.getHttpClient().post('/projects', data, requestConfig);\n  }\n  /**\n   * Patch a Project.\n   *\n   * @param id - project ID\n   * @param data - object containing updated Project data\n   * @param requestConfig  - Axios based request config\n   * @returns Created Project\n   */\n\n\n  patchProject(id, data) {\n    let requestConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return pncClient.getHttpClient().patch(`/projects/${id}`, data, requestConfig);\n  }\n  /**\n   * Gets all builds associated with a specific project.\n   *\n   * @param data - object containing ID of the Project\n   * @param requestConfig - Axios based request config\n   * @returns Builds\n   */\n\n\n  getProjectBuilds(_ref2) {\n    let {\n      id\n    } = _ref2;\n    let requestConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return pncClient.getHttpClient().get(`/projects/${id}/builds`, requestConfig);\n  }\n\n}\n/**\n * Instance of ProjectService providing group of Project related API operations.\n */\n\n\nexport const projectService = new ProjectService();","map":{"version":3,"names":["pncClient","ProjectService","getProjects","requestConfig","getHttpClient","get","getProject","id","createProject","data","post","patchProject","patch","getProjectBuilds","projectService"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/services/projectService.ts"],"sourcesContent":["import { AxiosRequestConfig } from 'axios';\nimport { Project } from 'pnc-api-types-ts';\nimport { pncClient } from './pncClient';\n\nexport interface IProjectServiceData {\n  id: string;\n}\n\nclass ProjectService {\n  /**\n   * Gets all Projects.\n   *\n   * @param requestConfig - Axios based request config\n   * @returns Projects\n   */\n  public getProjects(requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().get('/projects', requestConfig);\n  }\n\n  /**\n   * Gets a specific Project.\n   *\n   * @param data - object containing ID of the Project\n   * @param requestConfig - Axios based request config\n   * @returns Project\n   */\n  public getProject({ id }: IProjectServiceData, requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().get(`/projects/${id}`, requestConfig);\n  }\n\n  /**\n   * Creates a new Project.\n   *\n   * @param data - object containing new Project data\n   * @param requestConfig  - Axios based request config\n   * @returns Created Project\n   */\n  public createProject(data: Omit<Project, 'id'>, requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().post('/projects', data, requestConfig);\n  }\n\n  /**\n   * Patch a Project.\n   *\n   * @param id - project ID\n   * @param data - object containing updated Project data\n   * @param requestConfig  - Axios based request config\n   * @returns Created Project\n   */\n  public patchProject(id: number, data: Omit<Project, 'id'>, requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().patch(`/projects/${id}`, data, requestConfig);\n  }\n\n  /**\n   * Gets all builds associated with a specific project.\n   *\n   * @param data - object containing ID of the Project\n   * @param requestConfig - Axios based request config\n   * @returns Builds\n   */\n  public getProjectBuilds({ id }: IProjectServiceData, requestConfig: AxiosRequestConfig = {}) {\n    return pncClient.getHttpClient().get(`/projects/${id}/builds`, requestConfig);\n  }\n}\n\n/**\n * Instance of ProjectService providing group of Project related API operations.\n */\nexport const projectService = new ProjectService();\n"],"mappings":"AAEA,SAASA,SAAT,QAA0B,aAA1B;;AAMA,MAAMC,cAAN,CAAqB;EACnB;AACF;AACA;AACA;AACA;AACA;EACSC,WAAW,GAAyC;IAAA,IAAxCC,aAAwC,uEAAJ,EAAI;IACzD,OAAOH,SAAS,CAACI,aAAV,GAA0BC,GAA1B,CAA8B,WAA9B,EAA2CF,aAA3C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACSG,UAAU,OAAsE;IAAA,IAArE;MAAEC;IAAF,CAAqE;IAAA,IAAxCJ,aAAwC,uEAAJ,EAAI;IACrF,OAAOH,SAAS,CAACI,aAAV,GAA0BC,GAA1B,CAA+B,aAAYE,EAAG,EAA9C,EAAiDJ,aAAjD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACSK,aAAa,CAACC,IAAD,EAAoE;IAAA,IAAxCN,aAAwC,uEAAJ,EAAI;IACtF,OAAOH,SAAS,CAACI,aAAV,GAA0BM,IAA1B,CAA+B,WAA/B,EAA4CD,IAA5C,EAAkDN,aAAlD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACSQ,YAAY,CAACJ,EAAD,EAAaE,IAAb,EAAgF;IAAA,IAAxCN,aAAwC,uEAAJ,EAAI;IACjG,OAAOH,SAAS,CAACI,aAAV,GAA0BQ,KAA1B,CAAiC,aAAYL,EAAG,EAAhD,EAAmDE,IAAnD,EAAyDN,aAAzD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACSU,gBAAgB,QAAsE;IAAA,IAArE;MAAEN;IAAF,CAAqE;IAAA,IAAxCJ,aAAwC,uEAAJ,EAAI;IAC3F,OAAOH,SAAS,CAACI,aAAV,GAA0BC,GAA1B,CAA+B,aAAYE,EAAG,SAA9C,EAAwDJ,aAAxD,CAAP;EACD;;AAtDkB;AAyDrB;AACA;AACA;;;AACA,OAAO,MAAMW,cAAc,GAAG,IAAIb,cAAJ,EAAvB"},"metadata":{},"sourceType":"module"}