{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { trimLeft } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nexport var TextInputTypes;\n\n(function (TextInputTypes) {\n  TextInputTypes[\"text\"] = \"text\";\n  TextInputTypes[\"date\"] = \"date\";\n  TextInputTypes[\"datetimeLocal\"] = \"datetime-local\";\n  TextInputTypes[\"email\"] = \"email\";\n  TextInputTypes[\"month\"] = \"month\";\n  TextInputTypes[\"number\"] = \"number\";\n  TextInputTypes[\"password\"] = \"password\";\n  TextInputTypes[\"search\"] = \"search\";\n  TextInputTypes[\"tel\"] = \"tel\";\n  TextInputTypes[\"time\"] = \"time\";\n  TextInputTypes[\"url\"] = \"url\";\n})(TextInputTypes || (TextInputTypes = {}));\n\nexport class TextInputBase extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n\n    this.observer = () => {};\n\n    this.handleChange = event => {\n      if (this.props.onChange) {\n        this.props.onChange(event.currentTarget.value, event);\n      }\n    };\n\n    this.handleResize = () => {\n      const inputRef = this.props.innerRef || this.inputRef;\n\n      if (inputRef && inputRef.current) {\n        trimLeft(inputRef.current, String(this.props.value));\n      }\n    };\n\n    this.restoreText = () => {\n      const inputRef = this.props.innerRef || this.inputRef; // restore the value\n\n      inputRef.current.value = String(this.props.value); // make sure we still see the rightmost value to preserve cursor click position\n\n      inputRef.current.scrollLeft = inputRef.current.scrollWidth;\n    };\n\n    this.onFocus = event => {\n      const {\n        isLeftTruncated,\n        onFocus\n      } = this.props;\n\n      if (isLeftTruncated) {\n        this.restoreText();\n      }\n\n      onFocus && onFocus(event);\n    };\n\n    this.onBlur = event => {\n      const {\n        isLeftTruncated,\n        onBlur\n      } = this.props;\n\n      if (isLeftTruncated) {\n        this.handleResize();\n      }\n\n      onBlur && onBlur(event);\n    };\n\n    this.sanitizeInputValue = value => typeof value === 'string' ? value.replace(/\\n/g, ' ') : value;\n\n    if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n      // eslint-disable-next-line no-console\n      console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n    }\n\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(TextInputBase.displayName)\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.isLeftTruncated) {\n      const inputRef = this.props.innerRef || this.inputRef;\n      this.observer = getResizeObserver(inputRef.current, this.handleResize);\n      this.handleResize();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.isLeftTruncated) {\n      this.observer();\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      innerRef,\n      className,\n      type,\n      value,\n      validated,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onChange,\n      onFocus,\n      onBlur,\n      isLeftTruncated,\n\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      isReadOnly,\n      isRequired,\n      isDisabled,\n      isIconSprite,\n      iconVariant,\n      customIconUrl,\n      customIconDimensions,\n      ouiaId,\n      ouiaSafe\n    } = _a,\n          props = __rest(_a, [\"innerRef\", \"className\", \"type\", \"value\", \"validated\", \"onChange\", \"onFocus\", \"onBlur\", \"isLeftTruncated\", \"isReadOnly\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"iconVariant\", \"customIconUrl\", \"customIconDimensions\", \"ouiaId\", \"ouiaSafe\"]);\n\n    const customIconStyle = {};\n\n    if (customIconUrl) {\n      customIconStyle.backgroundImage = `url('${customIconUrl}')`;\n    }\n\n    if (customIconDimensions) {\n      customIconStyle.backgroundSize = customIconDimensions;\n    }\n\n    return React.createElement(\"input\", Object.assign({}, props, {\n      onFocus: this.onFocus,\n      onBlur: this.onBlur,\n      className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, (iconVariant && iconVariant !== 'search' || customIconUrl) && styles.modifiers.icon, iconVariant && styles.modifiers[iconVariant], className),\n      onChange: this.handleChange,\n      type: type,\n      value: this.sanitizeInputValue(value),\n      \"aria-invalid\": props['aria-invalid'] ? props['aria-invalid'] : validated === ValidatedOptions.error,\n      required: isRequired,\n      disabled: isDisabled,\n      readOnly: isReadOnly,\n      ref: innerRef || this.inputRef\n    }, (customIconUrl || customIconDimensions) && {\n      style: customIconStyle\n    }, getOUIAProps(TextInput.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)));\n  }\n\n}\nTextInputBase.displayName = 'TextInputBase';\nTextInputBase.defaultProps = {\n  'aria-label': null,\n  className: '',\n  isRequired: false,\n  validated: 'default',\n  isDisabled: false,\n  isReadOnly: false,\n  isIconSprite: false,\n  type: TextInputTypes.text,\n  isLeftTruncated: false,\n  onChange: () => undefined,\n  ouiaSafe: true\n};\nexport const TextInput = React.forwardRef((props, ref) => React.createElement(TextInputBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTextInput.displayName = 'TextInput';","map":{"version":3,"mappings":"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","names":["React","styles","css","ValidatedOptions","trimLeft","getDefaultOUIAId","getOUIAProps","getResizeObserver","TextInputTypes","TextInputBase","Component","constructor","props","createRef","event","onChange","currentTarget","value","inputRef","innerRef","current","String","scrollLeft","scrollWidth","isLeftTruncated","onFocus","restoreText","onBlur","handleResize","replace","id","console","error","state","ouiaStateId","displayName","componentDidMount","observer","componentWillUnmount","render","_a","className","type","validated","isReadOnly","isRequired","isDisabled","isIconSprite","iconVariant","customIconUrl","customIconDimensions","ouiaId","ouiaSafe","customIconStyle","backgroundImage","backgroundSize","formControl","modifiers","iconSprite","success","warning","icon","handleChange","sanitizeInputValue","required","disabled","readOnly","ref","style","TextInput","undefined","text","forwardRef","Object"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/TextInput/TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { trimLeft } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps, OUIAProps } from '../../helpers';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\n\nexport enum TextInputTypes {\n  text = 'text',\n  date = 'date',\n  datetimeLocal = 'datetime-local',\n  email = 'email',\n  month = 'month',\n  number = 'number',\n  password = 'password',\n  search = 'search',\n  tel = 'tel',\n  time = 'time',\n  url = 'url'\n}\n\nexport interface TextInputProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'onFocus' | 'onBlur' | 'disabled' | 'ref'>,\n    OUIAProps {\n  /** Additional classes added to the TextInput. */\n  className?: string;\n  /** Flag to show if the input is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the input is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if the input is required. */\n  isRequired?: boolean;\n  /** Value to indicate if the input is modified to show that validation state.\n   * If set to success, input will be modified to indicate valid state.\n   * If set to error,  input will be modified to indicate error state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** A callback for when the input value changes. */\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Type that the input accepts. */\n  type?:\n    | 'text'\n    | 'date'\n    | 'datetime-local'\n    | 'email'\n    | 'month'\n    | 'number'\n    | 'password'\n    | 'search'\n    | 'tel'\n    | 'time'\n    | 'url';\n  /** Value of the input. */\n  value?: string | number;\n  /** Aria-label. The input requires an associated id or aria-label. */\n  'aria-label'?: string;\n  /** A reference object to attach to the input box. */\n  innerRef?: React.RefObject<any>;\n  /** Trim text on left */\n  isLeftTruncated?: boolean;\n  /** Callback function when input is focused */\n  onFocus?: (event?: any) => void;\n  /** Callback function when input is blurred (focus leaves) */\n  onBlur?: (event?: any) => void;\n  /** icon variant */\n  iconVariant?: 'calendar' | 'clock' | 'search';\n  /** Use the external file instead of a data URI */\n  isIconSprite?: boolean;\n  /** Custom icon url to set as the input's background-image */\n  customIconUrl?: string;\n  /** Dimensions for the custom icon set as the input's background-size */\n  customIconDimensions?: string;\n}\n\ninterface TextInputState {\n  ouiaStateId: string;\n}\n\nexport class TextInputBase extends React.Component<TextInputProps, TextInputState> {\n  static displayName = 'TextInputBase';\n  static defaultProps: TextInputProps = {\n    'aria-label': null,\n    className: '',\n    isRequired: false,\n    validated: 'default' as 'success' | 'warning' | 'error' | 'default',\n    isDisabled: false,\n    isReadOnly: false,\n    isIconSprite: false,\n    type: TextInputTypes.text,\n    isLeftTruncated: false,\n    onChange: (): any => undefined,\n    ouiaSafe: true\n  };\n  inputRef = React.createRef<HTMLInputElement>();\n  observer: any = () => {};\n\n  constructor(props: TextInputProps) {\n    super(props);\n    if (!props.id && !props['aria-label'] && !props['aria-labelledby']) {\n      // eslint-disable-next-line no-console\n      console.error('Text input:', 'Text input requires either an id or aria-label to be specified');\n    }\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(TextInputBase.displayName)\n    };\n  }\n\n  handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    if (this.props.onChange) {\n      this.props.onChange(event.currentTarget.value, event);\n    }\n  };\n\n  componentDidMount() {\n    if (this.props.isLeftTruncated) {\n      const inputRef = this.props.innerRef || this.inputRef;\n      this.observer = getResizeObserver(inputRef.current, this.handleResize);\n      this.handleResize();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.isLeftTruncated) {\n      this.observer();\n    }\n  }\n\n  handleResize = () => {\n    const inputRef = this.props.innerRef || this.inputRef;\n    if (inputRef && inputRef.current) {\n      trimLeft(inputRef.current, String(this.props.value));\n    }\n  };\n\n  restoreText = () => {\n    const inputRef = this.props.innerRef || this.inputRef;\n    // restore the value\n    (inputRef.current as HTMLInputElement).value = String(this.props.value);\n    // make sure we still see the rightmost value to preserve cursor click position\n    inputRef.current.scrollLeft = inputRef.current.scrollWidth;\n  };\n\n  onFocus = (event?: any) => {\n    const { isLeftTruncated, onFocus } = this.props;\n    if (isLeftTruncated) {\n      this.restoreText();\n    }\n    onFocus && onFocus(event);\n  };\n\n  onBlur = (event?: any) => {\n    const { isLeftTruncated, onBlur } = this.props;\n    if (isLeftTruncated) {\n      this.handleResize();\n    }\n    onBlur && onBlur(event);\n  };\n\n  render() {\n    const {\n      innerRef,\n      className,\n      type,\n      value,\n      validated,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onChange,\n      onFocus,\n      onBlur,\n      isLeftTruncated,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      isReadOnly,\n      isRequired,\n      isDisabled,\n      isIconSprite,\n      iconVariant,\n      customIconUrl,\n      customIconDimensions,\n      ouiaId,\n      ouiaSafe,\n      ...props\n    } = this.props;\n\n    const customIconStyle = {} as any;\n    if (customIconUrl) {\n      customIconStyle.backgroundImage = `url('${customIconUrl}')`;\n    }\n    if (customIconDimensions) {\n      customIconStyle.backgroundSize = customIconDimensions;\n    }\n\n    return (\n      <input\n        {...props}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        className={css(\n          styles.formControl,\n          isIconSprite && styles.modifiers.iconSprite,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning,\n          ((iconVariant && iconVariant !== 'search') || customIconUrl) && styles.modifiers.icon,\n          iconVariant && styles.modifiers[iconVariant],\n          className\n        )}\n        onChange={this.handleChange}\n        type={type}\n        value={this.sanitizeInputValue(value)}\n        aria-invalid={props['aria-invalid'] ? props['aria-invalid'] : validated === ValidatedOptions.error}\n        required={isRequired}\n        disabled={isDisabled}\n        readOnly={isReadOnly}\n        ref={innerRef || this.inputRef}\n        {...((customIconUrl || customIconDimensions) && { style: customIconStyle })}\n        {...getOUIAProps(TextInput.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n      />\n    );\n  }\n\n  private sanitizeInputValue = (value: string | number) =>\n    typeof value === 'string' ? value.replace(/\\n/g, ' ') : value;\n}\n\nexport const TextInput = React.forwardRef((props: TextInputProps, ref: React.Ref<HTMLInputElement>) => (\n  <TextInputBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nTextInput.displayName = 'TextInput';\n"]},"metadata":{},"sourceType":"module"}