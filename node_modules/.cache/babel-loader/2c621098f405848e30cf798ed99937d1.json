{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardBody } from './WizardBody';\nexport var WizardToggle = function WizardToggle(_ref) {\n  var isNavOpen = _ref.isNavOpen,\n      onNavToggle = _ref.onNavToggle,\n      nav = _ref.nav,\n      steps = _ref.steps,\n      activeStep = _ref.activeStep,\n      children = _ref.children,\n      _ref$hasNoBodyPadding = _ref.hasNoBodyPadding,\n      hasNoBodyPadding = _ref$hasNoBodyPadding === void 0 ? false : _ref$hasNoBodyPadding,\n      _ref$ariaLabel = _ref['aria-label'],\n      ariaLabel = _ref$ariaLabel === void 0 ? 'Wizard Toggle' : _ref$ariaLabel,\n      _ref$mainAriaLabelled = _ref.mainAriaLabelledBy,\n      mainAriaLabelledBy = _ref$mainAriaLabelled === void 0 ? null : _ref$mainAriaLabelled,\n      _ref$mainAriaLabel = _ref.mainAriaLabel,\n      mainAriaLabel = _ref$mainAriaLabel === void 0 ? null : _ref$mainAriaLabel,\n      _ref$isInPage = _ref.isInPage,\n      isInPage = _ref$isInPage === void 0 ? true : _ref$isInPage;\n  var activeStepIndex;\n  var activeStepName;\n  var activeStepSubName;\n\n  for (var i = 0; i < steps.length; i++) {\n    if (activeStep.id && steps[i].id === activeStep.id || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      var _iterator = _createForOfIteratorHelper(steps[i].steps),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var step = _step.value;\n\n          if (activeStep.id && step.id === activeStep.id || step.name === activeStep.name) {\n            activeStepIndex = i + 1;\n            activeStepName = steps[i].name;\n            activeStepSubName = step.name;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return onNavToggle(!isNavOpen);\n    },\n    className: css(styles.wizardToggle, isNavOpen && 'pf-m-expanded'),\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isNavOpen\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleList)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardToggleNum)\n  }, activeStepIndex), \" \", activeStepName, activeStepSubName && React.createElement(AngleRightIcon, {\n    className: css(styles.wizardToggleSeparator),\n    \"aria-hidden\": \"true\"\n  })), activeStepSubName && React.createElement(\"span\", {\n    className: css(styles.wizardToggleListItem)\n  }, activeStepSubName)), React.createElement(\"span\", {\n    className: css(styles.wizardToggleIcon)\n  }, React.createElement(CaretDownIcon, {\n    \"aria-hidden\": \"true\"\n  }))), React.createElement(\"div\", {\n    className: css(styles.wizardOuterWrap)\n  }, React.createElement(\"div\", {\n    className: css(styles.wizardInnerWrap)\n  }, nav(isNavOpen), React.createElement(WizardBody, {\n    mainComponent: isInPage ? 'div' : 'main',\n    \"aria-label\": mainAriaLabel,\n    \"aria-labelledby\": mainAriaLabelledBy,\n    hasNoBodyPadding: hasNoBodyPadding\n  }, activeStep.component)), children));\n};\nWizardToggle.displayName = 'WizardToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,uDAAnB;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,OAAOC,aAAP,MAA0B,wDAA1B;AAEA,SAASC,UAAT,QAA2B,cAA3B;AA2BA,OAAO,IAAMC,YAAY,GAA+C,SAA3DA,YAA2D,OAYhD;EAAA,IAXtBC,SAWsB,QAXtBA,SAWsB;EAAA,IAVtBC,WAUsB,QAVtBA,WAUsB;EAAA,IATtBC,GASsB,QATtBA,GASsB;EAAA,IARtBC,KAQsB,QARtBA,KAQsB;EAAA,IAPtBC,UAOsB,QAPtBA,UAOsB;EAAA,IANtBC,QAMsB,QANtBA,QAMsB;EAAA,iCALtBC,gBAKsB;EAAA,IALtBA,gBAKsB,sCALH,KAKG;EAAA,0BAJtB,YAIsB;EAAA,IAJRC,SAIQ,+BAJI,eAIJ;EAAA,iCAHtBC,kBAGsB;EAAA,IAHtBA,kBAGsB,sCAHD,IAGC;EAAA,8BAFtBC,aAEsB;EAAA,IAFtBA,aAEsB,mCAFN,IAEM;EAAA,yBADtBC,QACsB;EAAA,IADtBA,QACsB,8BADX,IACW;EACtB,IAAIC,eAAJ;EACA,IAAIC,cAAJ;EACA,IAAIC,iBAAJ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACY,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,IAAKV,UAAU,CAACY,EAAX,IAAiBb,KAAK,CAACW,CAAD,CAAL,CAASE,EAAT,KAAgBZ,UAAU,CAACY,EAA7C,IAAoDb,KAAK,CAACW,CAAD,CAAL,CAASG,IAAT,KAAkBb,UAAU,CAACa,IAArF,EAA2F;MACzFN,eAAe,GAAGG,CAAC,GAAG,CAAtB;MACAF,cAAc,GAAGT,KAAK,CAACW,CAAD,CAAL,CAASG,IAA1B;MACA;IACD,CAJD,MAIO,IAAId,KAAK,CAACW,CAAD,CAAL,CAASX,KAAb,EAAoB;MAAA,2CACNA,KAAK,CAACW,CAAD,CAAL,CAASX,KADH;MAAA;;MAAA;QACzB,oDAAmC;UAAA,IAAxBe,IAAwB;;UACjC,IAAKd,UAAU,CAACY,EAAX,IAAiBE,IAAI,CAACF,EAAL,KAAYZ,UAAU,CAACY,EAAzC,IAAgDE,IAAI,CAACD,IAAL,KAAcb,UAAU,CAACa,IAA7E,EAAmF;YACjFN,eAAe,GAAGG,CAAC,GAAG,CAAtB;YACAF,cAAc,GAAGT,KAAK,CAACW,CAAD,CAAL,CAASG,IAA1B;YACAJ,iBAAiB,GAAGK,IAAI,CAACD,IAAzB;YACA;UACD;QACF;MARwB;QAAA;MAAA;QAAA;MAAA;IAS1B;EACF;;EAED,OACExB,oBAACA,KAAK,CAAC0B,QAAP,EAAe,IAAf,EACE1B;IACE2B,OAAO,EAAE;MAAA,OAAMnB,WAAW,CAAC,CAACD,SAAF,CAAjB;IAAA,CADX;IAEEqB,SAAS,EAAE3B,GAAG,CAACC,MAAM,CAAC2B,YAAR,EAAsBtB,SAAS,IAAI,eAAnC,CAFhB;IAEmE,cACrDO,SAHd;IAGuB,iBACNP;EAJjB,GAMEP;IAAM4B,SAAS,EAAE3B,GAAG,CAACC,MAAM,CAAC4B,gBAAR;EAApB,GACE9B;IAAM4B,SAAS,EAAE3B,GAAG,CAACC,MAAM,CAAC6B,oBAAR;EAApB,GACE/B;IAAM4B,SAAS,EAAE3B,GAAG,CAACC,MAAM,CAAC8B,eAAR;EAApB,GAA+Cd,eAA/C,CADF,OAC0EC,cAD1E,EAEGC,iBAAiB,IAAIpB,oBAACG,cAAD,EAAe;IAACyB,SAAS,EAAE3B,GAAG,CAACC,MAAM,CAAC+B,qBAAR,CAAf;IAA6C,eAAc;EAA3D,CAAf,CAFxB,CADF,EAKGb,iBAAiB,IAAIpB;IAAM4B,SAAS,EAAE3B,GAAG,CAACC,MAAM,CAAC6B,oBAAR;EAApB,GAAoDX,iBAApD,CALxB,CANF,EAaEpB;IAAM4B,SAAS,EAAE3B,GAAG,CAACC,MAAM,CAACgC,gBAAR;EAApB,GACElC,oBAACI,aAAD,EAAc;IAAA,eAAa;EAAb,CAAd,CADF,CAbF,CADF,EAkBEJ;IAAK4B,SAAS,EAAE3B,GAAG,CAACC,MAAM,CAACiC,eAAR;EAAnB,GACEnC;IAAK4B,SAAS,EAAE3B,GAAG,CAACC,MAAM,CAACkC,eAAR;EAAnB,GACG3B,GAAG,CAACF,SAAD,CADN,EAEEP,oBAACK,UAAD,EAAW;IACTgC,aAAa,EAAEpB,QAAQ,GAAG,KAAH,GAAW,MADzB;IAC+B,cAC5BD,aAFH;IAEgB,mBACRD,kBAHR;IAITF,gBAAgB,EAAEA;EAJT,CAAX,EAMGF,UAAU,CAAC2B,SANd,CAFF,CADF,EAYG1B,QAZH,CAlBF,CADF;AAmCD,CApEM;AAqEPN,YAAY,CAACiC,WAAb,GAA2B,cAA3B","names":["React","css","styles","AngleRightIcon","CaretDownIcon","WizardBody","WizardToggle","isNavOpen","onNavToggle","nav","steps","activeStep","children","hasNoBodyPadding","ariaLabel","mainAriaLabelledBy","mainAriaLabel","isInPage","activeStepIndex","activeStepName","activeStepSubName","i","length","id","name","step","Fragment","onClick","className","wizardToggle","wizardToggleList","wizardToggleListItem","wizardToggleNum","wizardToggleSeparator","wizardToggleIcon","wizardOuterWrap","wizardInnerWrap","mainComponent","component","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Wizard/WizardToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { WizardStep } from './Wizard';\nimport { WizardBody } from './WizardBody';\n\nexport interface WizardToggleProps {\n  /** Function that returns the WizardNav component */\n  nav: (isWizardNavOpen: boolean) => React.ReactElement;\n  /** The wizard steps */\n  steps: WizardStep[];\n  /** The currently active WizardStep */\n  activeStep: WizardStep;\n  /** The WizardFooter */\n  children: React.ReactNode;\n  /** Set to true to remove body padding */\n  hasNoBodyPadding: boolean;\n  /** If the nav is open */\n  isNavOpen: boolean;\n  /** Callback function for when the nav is toggled */\n  onNavToggle: (isOpen: boolean) => void;\n  /** The button's aria-label */\n  'aria-label'?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** The main's aria-label */\n  mainAriaLabel?: string;\n  /** If the wizard is in-page */\n  isInPage?: boolean;\n}\n\nexport const WizardToggle: React.FunctionComponent<WizardToggleProps> = ({\n  isNavOpen,\n  onNavToggle,\n  nav,\n  steps,\n  activeStep,\n  children,\n  hasNoBodyPadding = false,\n  'aria-label': ariaLabel = 'Wizard Toggle',\n  mainAriaLabelledBy = null,\n  mainAriaLabel = null,\n  isInPage = true\n}: WizardToggleProps) => {\n  let activeStepIndex;\n  let activeStepName;\n  let activeStepSubName;\n  for (let i = 0; i < steps.length; i++) {\n    if ((activeStep.id && steps[i].id === activeStep.id) || steps[i].name === activeStep.name) {\n      activeStepIndex = i + 1;\n      activeStepName = steps[i].name;\n      break;\n    } else if (steps[i].steps) {\n      for (const step of steps[i].steps) {\n        if ((activeStep.id && step.id === activeStep.id) || step.name === activeStep.name) {\n          activeStepIndex = i + 1;\n          activeStepName = steps[i].name;\n          activeStepSubName = step.name;\n          break;\n        }\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <button\n        onClick={() => onNavToggle(!isNavOpen)}\n        className={css(styles.wizardToggle, isNavOpen && 'pf-m-expanded')}\n        aria-label={ariaLabel}\n        aria-expanded={isNavOpen}\n      >\n        <span className={css(styles.wizardToggleList)}>\n          <span className={css(styles.wizardToggleListItem)}>\n            <span className={css(styles.wizardToggleNum)}>{activeStepIndex}</span> {activeStepName}\n            {activeStepSubName && <AngleRightIcon className={css(styles.wizardToggleSeparator)} aria-hidden=\"true\" />}\n          </span>\n          {activeStepSubName && <span className={css(styles.wizardToggleListItem)}>{activeStepSubName}</span>}\n        </span>\n        <span className={css(styles.wizardToggleIcon)}>\n          <CaretDownIcon aria-hidden=\"true\" />\n        </span>\n      </button>\n      <div className={css(styles.wizardOuterWrap)}>\n        <div className={css(styles.wizardInnerWrap)}>\n          {nav(isNavOpen)}\n          <WizardBody\n            mainComponent={isInPage ? 'div' : 'main'}\n            aria-label={mainAriaLabel}\n            aria-labelledby={mainAriaLabelledBy}\n            hasNoBodyPadding={hasNoBodyPadding}\n          >\n            {activeStep.component}\n          </WizardBody>\n        </div>\n        {children}\n      </div>\n    </React.Fragment>\n  );\n};\nWizardToggle.displayName = 'WizardToggle';\n"]},"metadata":{},"sourceType":"module"}