{"ast":null,"code":"/**\n * header-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { HeaderCellInfoWrapper } from '../HeaderCellInfoWrapper';\nexport var HeaderRow = function HeaderRow(_ref) {\n  var rowData = _ref.rowData,\n      rowIndex = _ref.rowIndex,\n      renderers = _ref.renderers,\n      _ref$onRow = _ref.onRow,\n      onRow = _ref$onRow === void 0 ? function () {\n    return {};\n  } : _ref$onRow;\n  return React.createElement(renderers.row, onRow(rowData, {\n    rowIndex: rowIndex\n  }), rowData.map(function (column, columnIndex) {\n    var property = column.property,\n        _column$header = column.header,\n        header = _column$header === void 0 ? {} : _column$header,\n        _column$props = column.props,\n        props = _column$props === void 0 ? {} : _column$props;\n    var evaluatedProperty = property || header && header.property;\n    var label = header.label,\n        _header$transforms = header.transforms,\n        transforms = _header$transforms === void 0 ? [] : _header$transforms,\n        _header$formatters = header.formatters,\n        formatters = _header$formatters === void 0 ? [] : _header$formatters,\n        _header$info = header.info,\n        info = _header$info === void 0 ? {} : _header$info;\n    var extraParameters = {\n      columnIndex: columnIndex,\n      property: evaluatedProperty,\n      column: column\n    };\n    var transformedProps = evaluateTransforms(transforms, label, extraParameters);\n\n    if (!transformedProps) {\n      // tslint:disable-next-line:no-console\n      console.warn('Table.Header - Failed to receive a transformed result'); // eslint-disable-line max-len, no-console\n    }\n\n    var cellNode;\n    var tooltip = info.tooltip,\n        tooltipProps = info.tooltipProps,\n        popover = info.popover,\n        popoverProps = info.popoverProps,\n        ariaLabel = info.ariaLabel,\n        className = info.className; // consumer can specify header cell tooltip/popover in two ways, but the transforms approach is preferred,\n    // especially for sorting tables that use `transforms: [sortable]`\n    // {\n    //   title: 'Repositories',\n    //   header: {\n    //     info: {\n    //       tooltip: 'More information about repositories',\n    //       className: 'repositories-info-tip',\n    //       tooltipProps: {\n    //         isContentLeftAligned: true\n    //       }\n    //     }\n    //   }\n    // }\n    //\n    // {\n    //   title: 'Repositories',\n    //   transforms: [\n    //     info({\n    //       tooltip: 'More information about repositories',\n    //       className: 'repositories-info-tip',\n    //       tooltipProps: {\n    //         isContentLeftAligned: true\n    //       }\n    //     }),\n    //     sortable\n    //   ]\n    // },\n\n    if (tooltip) {\n      cellNode = React.createElement(HeaderCellInfoWrapper, {\n        variant: \"tooltip\",\n        info: tooltip,\n        tooltipProps: tooltipProps,\n        ariaLabel: ariaLabel,\n        className: className\n      }, transformedProps.children || evaluateFormatters(formatters)(label, extraParameters));\n    } else if (popover) {\n      cellNode = React.createElement(HeaderCellInfoWrapper, {\n        variant: \"popover\",\n        info: popover,\n        popoverProps: popoverProps,\n        ariaLabel: ariaLabel,\n        className: className\n      }, transformedProps.children || evaluateFormatters(formatters)(label, extraParameters));\n    } else {\n      cellNode = transformedProps.children || evaluateFormatters(formatters)(label, extraParameters);\n    }\n\n    return React.createElement(renderers.cell, Object.assign({\n      key: \"\".concat(columnIndex, \"-header\")\n    }, mergeProps(props, header && header.props, transformedProps)), cellNode);\n  }));\n};\nHeaderRow.displayName = 'HeaderRow';","map":{"version":3,"mappings":"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","names":["React","evaluateFormatters","evaluateTransforms","mergeProps","HeaderCellInfoWrapper","HeaderRow","rowData","rowIndex","renderers","onRow","createElement","row","map","column","columnIndex","property","header","props","evaluatedProperty","label","transforms","formatters","info","extraParameters","transformedProps","console","warn","cellNode","tooltip","tooltipProps","popover","popoverProps","ariaLabel","className","variant","children","cell","Object","key","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/base/header-row.tsx"],"sourcesContent":["/**\n * header-row.tsx\n *\n * Forked from reactabular-table version 8.14.0\n * https://github.com/reactabular/reactabular/tree/v8.14.0/packages/reactabular-table/src\n */\nimport * as React from 'react';\nimport { evaluateFormatters } from './evaluate-formatters';\nimport { evaluateTransforms } from './evaluate-transforms';\nimport { mergeProps } from './merge-props';\nimport { createElementType, ColumnType, HeaderType, RowsType, RendererType } from './types';\nimport { HeaderCellInfoWrapper } from '../HeaderCellInfoWrapper';\n\nexport interface HeaderRowProps {\n  rowData: RowsType;\n  rowIndex: number;\n  renderers: RendererType;\n  onRow?: Function;\n}\n\nexport const HeaderRow: React.FunctionComponent<HeaderRowProps> = ({\n  rowData,\n  rowIndex,\n  renderers,\n  onRow = () => ({})\n}: HeaderRowProps) =>\n  React.createElement(\n    renderers.row as createElementType,\n    onRow(rowData, { rowIndex }),\n    (rowData as []).map((column: ColumnType, columnIndex: number) => {\n      const { property, header = {} as HeaderType, props = {} } = column;\n      const evaluatedProperty = property || (header && header.property);\n      const { label, transforms = [], formatters = [], info = {} } = header;\n      const extraParameters = {\n        columnIndex,\n        property: evaluatedProperty,\n        column\n      };\n      const transformedProps = evaluateTransforms(transforms, label, extraParameters);\n\n      if (!transformedProps) {\n        // tslint:disable-next-line:no-console\n        console.warn('Table.Header - Failed to receive a transformed result'); // eslint-disable-line max-len, no-console\n      }\n\n      let cellNode;\n      const { tooltip, tooltipProps, popover, popoverProps, ariaLabel, className } = info;\n      // consumer can specify header cell tooltip/popover in two ways, but the transforms approach is preferred,\n      // especially for sorting tables that use `transforms: [sortable]`\n      // {\n      //   title: 'Repositories',\n      //   header: {\n      //     info: {\n      //       tooltip: 'More information about repositories',\n      //       className: 'repositories-info-tip',\n      //       tooltipProps: {\n      //         isContentLeftAligned: true\n      //       }\n      //     }\n      //   }\n      // }\n      //\n      // {\n      //   title: 'Repositories',\n      //   transforms: [\n      //     info({\n      //       tooltip: 'More information about repositories',\n      //       className: 'repositories-info-tip',\n      //       tooltipProps: {\n      //         isContentLeftAligned: true\n      //       }\n      //     }),\n      //     sortable\n      //   ]\n      // },\n      if (tooltip) {\n        cellNode = (\n          <HeaderCellInfoWrapper\n            variant=\"tooltip\"\n            info={tooltip}\n            tooltipProps={tooltipProps}\n            ariaLabel={ariaLabel}\n            className={className}\n          >\n            {transformedProps.children || evaluateFormatters(formatters)(label, extraParameters)}\n          </HeaderCellInfoWrapper>\n        );\n      } else if (popover) {\n        cellNode = (\n          <HeaderCellInfoWrapper\n            variant=\"popover\"\n            info={popover}\n            popoverProps={popoverProps}\n            ariaLabel={ariaLabel}\n            className={className}\n          >\n            {transformedProps.children || evaluateFormatters(formatters)(label, extraParameters)}\n          </HeaderCellInfoWrapper>\n        );\n      } else {\n        cellNode = transformedProps.children || evaluateFormatters(formatters)(label, extraParameters);\n      }\n\n      return React.createElement(\n        renderers.cell as createElementType,\n        {\n          key: `${columnIndex}-header`,\n          ...mergeProps(props, header && header.props, transformedProps)\n        },\n        cellNode\n      );\n    })\n  );\nHeaderRow.displayName = 'HeaderRow';\n"]},"metadata":{},"sourceType":"module"}