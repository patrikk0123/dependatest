{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OverflowMenu/overflow-menu';\nimport { css } from '@patternfly/react-styles';\nimport { OverflowMenuContext } from './OverflowMenuContext';\nimport mdBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_md';\nimport lgBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport xlBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport xl2Breakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_2xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\nconst breakpoints = {\n  md: mdBreakpoint,\n  lg: lgBreakpoint,\n  xl: xlBreakpoint,\n  '2xl': xl2Breakpoint\n};\nexport class OverflowMenu extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleResize = () => {\n      const breakpointPx = breakpoints[this.props.breakpoint];\n\n      if (!breakpointPx) {\n        // eslint-disable-next-line no-console\n        console.error('OverflowMenu will not be visible without a valid breakpoint.');\n        return;\n      }\n\n      const breakpointWidth = Number(breakpointPx.value.replace('px', ''));\n      const isBelowBreakpoint = window.innerWidth < breakpointWidth;\n      this.setState({\n        isBelowBreakpoint\n      });\n    };\n\n    this.state = {\n      isBelowBreakpoint: false\n    };\n  }\n\n  componentDidMount() {\n    this.handleResize();\n\n    if (canUseDOM) {\n      window.addEventListener('resize', debounce(this.handleResize, 250));\n    }\n  }\n\n  componentWillUnmount() {\n    if (canUseDOM) {\n      window.removeEventListener('resize', debounce(this.handleResize, 250));\n    }\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n          {\n      className,\n      breakpoint,\n      children\n    } = _a,\n          props = __rest(_a, [\"className\", \"breakpoint\", \"children\"]);\n\n    return React.createElement(\"div\", Object.assign({}, props, {\n      className: css(styles.overflowMenu, className)\n    }), React.createElement(OverflowMenuContext.Provider, {\n      value: {\n        isBelowBreakpoint: this.state.isBelowBreakpoint\n      }\n    }, children));\n  }\n\n}\nOverflowMenu.displayName = 'OverflowMenu';\nOverflowMenu.contextType = OverflowMenuContext;","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,oEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,aAAP,MAA0B,yDAA1B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AAEA,MAAMC,WAAW,GAAG;EAClBC,EAAE,EAAEP,YADc;EAElBQ,EAAE,EAAEP,YAFc;EAGlBQ,EAAE,EAAEP,YAHc;EAIlB,OAAOC;AAJW,CAApB;AAoBA,OAAM,MAAOO,YAAP,SAA4Bd,KAAK,CAACe,SAAlC,CAAiF;EAErFC,YAAYC,KAAZ,EAAoC;IAClC,MAAMA,KAAN;;IAmBF,oBAAe,MAAK;MAClB,MAAMC,YAAY,GAAGR,WAAW,CAAC,KAAKO,KAAL,CAAWE,UAAZ,CAAhC;;MACA,IAAI,CAACD,YAAL,EAAmB;QACjB;QACAE,OAAO,CAACC,KAAR,CAAc,8DAAd;QACA;MACD;;MACD,MAAMC,eAAe,GAAGC,MAAM,CAACL,YAAY,CAACM,KAAb,CAAmBC,OAAnB,CAA2B,IAA3B,EAAiC,EAAjC,CAAD,CAA9B;MACA,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,UAAP,GAAoBN,eAA9C;MACA,KAAKO,QAAL,CAAc;QAAEH;MAAF,CAAd;IACD,CAVD;;IAlBE,KAAKI,KAAL,GAAa;MACXJ,iBAAiB,EAAE;IADR,CAAb;EAGD;;EAEDK,iBAAiB;IACf,KAAKC,YAAL;;IACA,IAAIvB,SAAJ,EAAe;MACbkB,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCzB,QAAQ,CAAC,KAAKwB,YAAN,EAAoB,GAApB,CAA1C;IACD;EACF;;EAEDE,oBAAoB;IAClB,IAAIzB,SAAJ,EAAe;MACbkB,MAAM,CAACQ,mBAAP,CAA2B,QAA3B,EAAqC3B,QAAQ,CAAC,KAAKwB,YAAN,EAAoB,GAApB,CAA7C;IACD;EACF;;EAcDI,MAAM;IACJ;IACA,MAAMC,KAAgD,KAAKpB,KAA3D;IAAA,MAAM;MAAEqB,SAAF;MAAanB,UAAb;MAAyBoB;IAAzB,IAAiCF,EAAvC;IAAA,MAA4CpB,KAAK,cAA3C,uCAA2C,CAAjD;;IAEA,OACEjB,6CAASiB,KAAT,EAAc;MAAEqB,SAAS,EAAEpC,GAAG,CAACD,MAAM,CAACuC,YAAR,EAAsBF,SAAtB;IAAhB,CAAd,GACEtC,oBAACG,mBAAmB,CAACsC,QAArB,EAA6B;MAACjB,KAAK,EAAE;QAAEE,iBAAiB,EAAE,KAAKI,KAAL,CAAWJ;MAAhC;IAAR,CAA7B,EACGa,QADH,CADF,CADF;EAOD;;AA7CoF;AAC9EzB,2BAAc,cAAd;AA+CTA,YAAY,CAAC4B,WAAb,GAA2BvC,mBAA3B","names":["React","styles","css","OverflowMenuContext","mdBreakpoint","lgBreakpoint","xlBreakpoint","xl2Breakpoint","debounce","canUseDOM","breakpoints","md","lg","xl","OverflowMenu","Component","constructor","props","breakpointPx","breakpoint","console","error","breakpointWidth","Number","value","replace","isBelowBreakpoint","window","innerWidth","setState","state","componentDidMount","handleResize","addEventListener","componentWillUnmount","removeEventListener","render","_a","className","children","overflowMenu","Provider","contextType"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/OverflowMenu/OverflowMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OverflowMenu/overflow-menu';\nimport { css } from '@patternfly/react-styles';\nimport { OverflowMenuContext } from './OverflowMenuContext';\nimport mdBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_md';\nimport lgBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport xlBreakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport xl2Breakpoint from '@patternfly/react-tokens/dist/esm/global_breakpoint_2xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\n\nconst breakpoints = {\n  md: mdBreakpoint,\n  lg: lgBreakpoint,\n  xl: xlBreakpoint,\n  '2xl': xl2Breakpoint\n};\n\nexport interface OverflowMenuProps extends React.HTMLProps<HTMLDivElement> {\n  /** Any elements that can be rendered in the menu */\n  children?: any;\n  /** Additional classes added to the OverflowMenu. */\n  className?: string;\n  /** Indicates breakpoint at which to switch between horizontal menu and vertical dropdown */\n  breakpoint: 'md' | 'lg' | 'xl' | '2xl';\n}\n\nexport interface OverflowMenuState extends React.HTMLProps<HTMLDivElement> {\n  isBelowBreakpoint: boolean;\n}\n\nexport class OverflowMenu extends React.Component<OverflowMenuProps, OverflowMenuState> {\n  static displayName = 'OverflowMenu';\n  constructor(props: OverflowMenuProps) {\n    super(props);\n    this.state = {\n      isBelowBreakpoint: false\n    };\n  }\n\n  componentDidMount() {\n    this.handleResize();\n    if (canUseDOM) {\n      window.addEventListener('resize', debounce(this.handleResize, 250));\n    }\n  }\n\n  componentWillUnmount() {\n    if (canUseDOM) {\n      window.removeEventListener('resize', debounce(this.handleResize, 250));\n    }\n  }\n\n  handleResize = () => {\n    const breakpointPx = breakpoints[this.props.breakpoint];\n    if (!breakpointPx) {\n      // eslint-disable-next-line no-console\n      console.error('OverflowMenu will not be visible without a valid breakpoint.');\n      return;\n    }\n    const breakpointWidth = Number(breakpointPx.value.replace('px', ''));\n    const isBelowBreakpoint = window.innerWidth < breakpointWidth;\n    this.setState({ isBelowBreakpoint });\n  };\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { className, breakpoint, children, ...props } = this.props;\n\n    return (\n      <div {...props} className={css(styles.overflowMenu, className)}>\n        <OverflowMenuContext.Provider value={{ isBelowBreakpoint: this.state.isBelowBreakpoint }}>\n          {children}\n        </OverflowMenuContext.Provider>\n      </div>\n    );\n  }\n}\n\nOverflowMenu.contextType = OverflowMenuContext;\n"]},"metadata":{},"sourceType":"module"}