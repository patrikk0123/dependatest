{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { SelectOption } from './SelectOption';\nimport { SelectConsumer, SelectPosition, SelectVariant } from './selectConstants';\nimport { SelectGroup } from './SelectGroup';\nimport { Divider } from '../Divider/Divider';\n\nclass SelectMenuWithRef extends React.Component {\n  extendChildren(randomId) {\n    const {\n      children,\n      hasInlineFilter,\n      isGrouped\n    } = this.props;\n    const childrenArray = children;\n    let index = hasInlineFilter ? 1 : 0;\n\n    if (isGrouped) {\n      return React.Children.map(childrenArray, group => {\n        if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, option => this.cloneOption(option, index++, randomId))\n          });\n        } else {\n          return this.cloneOption(group, index++, randomId);\n        }\n      });\n    }\n\n    return React.Children.map(childrenArray, child => this.cloneOption(child, index++, randomId));\n  }\n\n  cloneOption(child, index, randomId) {\n    const {\n      selected,\n      sendRef,\n      keyHandler\n    } = this.props;\n    const isSelected = this.checkForValue(child.props.value, selected);\n\n    if (child.type === Divider) {\n      return child;\n    }\n\n    return React.cloneElement(child, {\n      inputId: `${randomId}-${index}`,\n      isSelected,\n      sendRef,\n      keyHandler,\n      index\n    });\n  }\n\n  checkForValue(valueToCheck, options) {\n    if (!options || !valueToCheck) {\n      return false;\n    }\n\n    const isSelectOptionObject = typeof valueToCheck !== 'string' && valueToCheck.toString && valueToCheck.compareTo;\n\n    if (Array.isArray(options)) {\n      if (isSelectOptionObject) {\n        return options.some(option => option.compareTo(valueToCheck));\n      } else {\n        return options.includes(valueToCheck);\n      }\n    } else {\n      if (isSelectOptionObject) {\n        return options.compareTo(valueToCheck);\n      } else {\n        return options === valueToCheck;\n      }\n    }\n  }\n\n  extendCheckboxChildren(children) {\n    const {\n      isGrouped,\n      checked,\n      sendRef,\n      keyHandler,\n      hasInlineFilter,\n      isLastOptionBeforeFooter\n    } = this.props;\n    let index = hasInlineFilter ? 1 : 0;\n\n    if (isGrouped) {\n      return React.Children.map(children, group => {\n        if (group.type === Divider) {\n          return group;\n        } else if (group.type === SelectOption) {\n          return React.cloneElement(group, {\n            isChecked: this.checkForValue(group.props.value, checked),\n            sendRef,\n            keyHandler,\n            index: index++,\n            isLastOptionBeforeFooter\n          });\n        }\n\n        return React.cloneElement(group, {\n          titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n          children: group.props.children ? React.createElement(\"fieldset\", {\n            \"aria-labelledby\": group.props.label && group.props.label.replace(/\\W/g, '-'),\n            className: css(styles.selectMenuFieldset)\n          }, React.Children.map(group.props.children, option => option.type === Divider ? option : React.cloneElement(option, {\n            isChecked: this.checkForValue(option.props.value, checked),\n            sendRef,\n            keyHandler,\n            index: index++,\n            isLastOptionBeforeFooter\n          }))) : null\n        });\n      });\n    }\n\n    return React.Children.map(children, child => child.type === Divider ? child : React.cloneElement(child, {\n      isChecked: this.checkForValue(child.props.value, checked),\n      sendRef,\n      keyHandler,\n      index: index++,\n      isLastOptionBeforeFooter\n    }));\n  }\n\n  renderSelectMenu(_ref) {\n    let {\n      variant,\n      inputIdPrefix\n    } = _ref;\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const _a = this.props,\n          {\n      children,\n      isCustomContent,\n      className,\n      isExpanded,\n      openedOnEnter,\n      selected,\n      checked,\n      isGrouped,\n      position,\n      sendRef,\n      keyHandler,\n      maxHeight,\n      noResultsFoundText,\n      createText,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      hasInlineFilter,\n      innerRef,\n      footer,\n      footerRef,\n      isLastOptionBeforeFooter\n    } = _a,\n          props = __rest(_a, [\"children\", \"isCustomContent\", \"className\", \"isExpanded\", \"openedOnEnter\", \"selected\", \"checked\", \"isGrouped\", \"position\", \"sendRef\", \"keyHandler\", \"maxHeight\", \"noResultsFoundText\", \"createText\", 'aria-label', 'aria-labelledby', \"hasInlineFilter\", \"innerRef\", \"footer\", \"footerRef\", \"isLastOptionBeforeFooter\"]);\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n    let Component = 'div';\n    const variantProps = Object.assign({\n      ref: innerRef,\n      className: css(!footer ? styles.selectMenu : 'pf-c-select__menu-list', position === SelectPosition.right && styles.modifiers.alignRight, className)\n    }, maxHeight && {\n      style: {\n        maxHeight,\n        overflow: 'auto'\n      }\n    });\n\n    const extendedChildren = () => variant === SelectVariant.checkbox ? this.extendCheckboxChildren(children) : this.extendChildren(inputIdPrefix);\n\n    if (isCustomContent) {\n      variantProps.children = children;\n    } else if (hasInlineFilter) {\n      if (React.Children.count(children) === 0) {\n        variantProps.children = React.createElement(\"fieldset\", {\n          className: css(styles.selectMenuFieldset)\n        });\n      } else {\n        variantProps.children = React.createElement(\"fieldset\", {\n          \"aria-label\": ariaLabel,\n          \"aria-labelledby\": !ariaLabel && ariaLabelledBy || null,\n          className: css(formStyles.formFieldset)\n        }, children.shift(), extendedChildren());\n      }\n    } else {\n      variantProps.children = extendedChildren();\n\n      if (!isGrouped) {\n        Component = 'ul';\n        variantProps.role = 'listbox';\n        variantProps['aria-label'] = ariaLabel;\n        variantProps['aria-labelledby'] = !ariaLabel && ariaLabelledBy || null;\n      }\n    }\n\n    return React.createElement(React.Fragment, null, React.createElement(Component, Object.assign({}, variantProps, props)), footer && React.createElement(\"div\", {\n      className: css(styles.selectMenuFooter),\n      ref: footerRef\n    }, footer));\n  }\n\n  render() {\n    return React.createElement(SelectConsumer, null, context => this.renderSelectMenu(context));\n  }\n\n}\n\nSelectMenuWithRef.displayName = 'SelectMenu';\nSelectMenuWithRef.defaultProps = {\n  className: '',\n  isExpanded: false,\n  isGrouped: false,\n  openedOnEnter: false,\n  selected: '',\n  maxHeight: '',\n  position: SelectPosition.left,\n  sendRef: () => {},\n  keyHandler: () => {},\n  isCustomContent: false,\n  hasInlineFilter: false,\n  isLastOptionBeforeFooter: () => {}\n};\nexport const SelectMenu = React.forwardRef((props, ref) => React.createElement(SelectMenuWithRef, Object.assign({\n  innerRef: ref\n}, props), props.children));","map":{"version":3,"mappings":"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","names":["React","styles","formStyles","css","SelectOption","SelectConsumer","SelectPosition","SelectVariant","SelectGroup","Divider","SelectMenuWithRef","Component","extendChildren","randomId","children","hasInlineFilter","isGrouped","props","childrenArray","index","Children","map","group","type","cloneElement","titleId","label","replace","option","cloneOption","child","selected","sendRef","keyHandler","isSelected","checkForValue","value","inputId","valueToCheck","options","isSelectOptionObject","toString","compareTo","Array","isArray","some","includes","extendCheckboxChildren","checked","isLastOptionBeforeFooter","isChecked","className","selectMenuFieldset","renderSelectMenu","variant","inputIdPrefix","_a","isCustomContent","isExpanded","openedOnEnter","position","maxHeight","noResultsFoundText","createText","ariaLabel","ariaLabelledBy","innerRef","footer","footerRef","variantProps","Object","ref","selectMenu","right","modifiers","alignRight","style","overflow","extendedChildren","checkbox","count","formFieldset","shift","role","Fragment","selectMenuFooter","render","context","left","SelectMenu","forwardRef"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Select/SelectMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { SelectOptionObject, SelectOption } from './SelectOption';\nimport { SelectConsumer, SelectPosition, SelectVariant, SelectContextInterface } from './selectConstants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nimport { SelectGroup } from './SelectGroup';\nimport { Divider } from '../Divider/Divider';\n\nexport interface SelectMenuProps extends Omit<React.HTMLProps<HTMLElement>, 'checked' | 'selected' | 'ref'> {\n  /** Content rendered inside the SelectMenu */\n  children: React.ReactElement[] | React.ReactNode;\n  /** Flag indicating that the children is custom content to render inside the SelectMenu.  If true, variant prop is ignored. */\n  isCustomContent?: boolean;\n  /** Additional classes added to the SelectMenu control */\n  className?: string;\n  /** Flag indicating the Select is expanded */\n  isExpanded?: boolean;\n  /** Flag indicating the Select options are grouped */\n  isGrouped?: boolean;\n  /** Currently selected option (for single, typeahead variants) */\n  selected?: string | SelectOptionObject | (string | SelectOptionObject)[];\n  /** Currently checked options (for checkbox variant) */\n  checked?: (string | SelectOptionObject)[];\n  /** @hide Internal flag for specifiying how the menu was opened */\n  openedOnEnter?: boolean;\n  /** Flag to specify the  maximum height of the menu, as a string percentage or number of pixels */\n  maxHeight?: string | number;\n  /** Indicates where menu will be alligned horizontally */\n  position?: SelectPosition | 'right' | 'left';\n  /** Inner prop passed from parent */\n  noResultsFoundText?: string;\n  /** Inner prop passed from parent */\n  createText?: string;\n  /** @hide Internal callback for ref tracking */\n  sendRef?: (ref: React.ReactNode, favoriteRef: React.ReactNode, index: number) => void;\n  /** @hide Internal callback for keyboard navigation */\n  keyHandler?: (index: number, innerIndex: number, position: string) => void;\n  /** Flag indicating select has an inline text input for filtering */\n  hasInlineFilter?: boolean;\n  innerRef?: any;\n  /** Content rendered in the footer of the select menu */\n  footer?: React.ReactNode;\n  /** The menu footer element */\n  footerRef?: React.RefObject<HTMLDivElement>;\n  /** @hide callback to check if option is the last one in the menu when there is a footer  */\n  isLastOptionBeforeFooter?: (index: number) => void;\n}\n\nclass SelectMenuWithRef extends React.Component<SelectMenuProps> {\n  static displayName = 'SelectMenu';\n  static defaultProps: PickOptional<SelectMenuProps> = {\n    className: '',\n    isExpanded: false,\n    isGrouped: false,\n    openedOnEnter: false,\n    selected: '',\n    maxHeight: '',\n    position: SelectPosition.left,\n    sendRef: () => {},\n    keyHandler: () => {},\n    isCustomContent: false,\n    hasInlineFilter: false,\n    isLastOptionBeforeFooter: () => {}\n  };\n\n  extendChildren(randomId: string) {\n    const { children, hasInlineFilter, isGrouped } = this.props;\n    const childrenArray: React.ReactElement[] = children as React.ReactElement[];\n    let index = hasInlineFilter ? 1 : 0;\n    if (isGrouped) {\n      return React.Children.map(childrenArray, (group: React.ReactElement) => {\n        if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, (option: React.ReactElement) =>\n              this.cloneOption(option, index++, randomId)\n            )\n          });\n        } else {\n          return this.cloneOption(group, index++, randomId);\n        }\n      });\n    }\n    return React.Children.map(childrenArray, (child: React.ReactElement) => this.cloneOption(child, index++, randomId));\n  }\n\n  cloneOption(child: React.ReactElement, index: number, randomId: string) {\n    const { selected, sendRef, keyHandler } = this.props;\n    const isSelected = this.checkForValue(child.props.value, selected);\n    if (child.type === Divider) {\n      return child;\n    }\n    return React.cloneElement(child, {\n      inputId: `${randomId}-${index}`,\n      isSelected,\n      sendRef,\n      keyHandler,\n      index\n    });\n  }\n\n  checkForValue(\n    valueToCheck: string | SelectOptionObject,\n    options: string | SelectOptionObject | (string | SelectOptionObject)[]\n  ) {\n    if (!options || !valueToCheck) {\n      return false;\n    }\n\n    const isSelectOptionObject =\n      typeof valueToCheck !== 'string' &&\n      (valueToCheck as SelectOptionObject).toString &&\n      (valueToCheck as SelectOptionObject).compareTo;\n\n    if (Array.isArray(options)) {\n      if (isSelectOptionObject) {\n        return options.some(option => (option as SelectOptionObject).compareTo(valueToCheck));\n      } else {\n        return options.includes(valueToCheck);\n      }\n    } else {\n      if (isSelectOptionObject) {\n        return (options as SelectOptionObject).compareTo(valueToCheck);\n      } else {\n        return options === valueToCheck;\n      }\n    }\n  }\n\n  extendCheckboxChildren(children: React.ReactElement[]) {\n    const { isGrouped, checked, sendRef, keyHandler, hasInlineFilter, isLastOptionBeforeFooter } = this.props;\n    let index = hasInlineFilter ? 1 : 0;\n    if (isGrouped) {\n      return React.Children.map(children, (group: React.ReactElement) => {\n        if (group.type === Divider) {\n          return group;\n        } else if (group.type === SelectOption) {\n          return React.cloneElement(group, {\n            isChecked: this.checkForValue(group.props.value, checked),\n            sendRef,\n            keyHandler,\n            index: index++,\n            isLastOptionBeforeFooter\n          });\n        }\n        return React.cloneElement(group, {\n          titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n          children: group.props.children ? (\n            <fieldset\n              aria-labelledby={group.props.label && group.props.label.replace(/\\W/g, '-')}\n              className={css(styles.selectMenuFieldset)}\n            >\n              {React.Children.map(group.props.children, (option: React.ReactElement) =>\n                option.type === Divider\n                  ? option\n                  : React.cloneElement(option, {\n                      isChecked: this.checkForValue(option.props.value, checked),\n                      sendRef,\n                      keyHandler,\n                      index: index++,\n                      isLastOptionBeforeFooter\n                    })\n              )}\n            </fieldset>\n          ) : null\n        });\n      });\n    }\n    return React.Children.map(children, (child: React.ReactElement) =>\n      child.type === Divider\n        ? child\n        : React.cloneElement(child, {\n            isChecked: this.checkForValue(child.props.value, checked),\n            sendRef,\n            keyHandler,\n            index: index++,\n            isLastOptionBeforeFooter\n          })\n    );\n  }\n\n  renderSelectMenu({ variant, inputIdPrefix }: SelectContextInterface) {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      children,\n      isCustomContent,\n      className,\n      isExpanded,\n      openedOnEnter,\n      selected,\n      checked,\n      isGrouped,\n      position,\n      sendRef,\n      keyHandler,\n      maxHeight,\n      noResultsFoundText,\n      createText,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      hasInlineFilter,\n      innerRef,\n      footer,\n      footerRef,\n      isLastOptionBeforeFooter,\n      ...props\n    } = this.props;\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    let Component = 'div';\n    const variantProps = {\n      ref: innerRef,\n      className: css(\n        !footer ? styles.selectMenu : 'pf-c-select__menu-list',\n        position === SelectPosition.right && styles.modifiers.alignRight,\n        className\n      ),\n      ...(maxHeight && { style: { maxHeight, overflow: 'auto' } })\n    } as React.HTMLAttributes<HTMLElement>;\n    const extendedChildren = () =>\n      variant === SelectVariant.checkbox\n        ? this.extendCheckboxChildren(children as React.ReactElement[])\n        : this.extendChildren(inputIdPrefix);\n\n    if (isCustomContent) {\n      variantProps.children = children;\n    } else if (hasInlineFilter) {\n      if (React.Children.count(children) === 0) {\n        variantProps.children = <fieldset className={css(styles.selectMenuFieldset)} />;\n      } else {\n        variantProps.children = (\n          <fieldset\n            aria-label={ariaLabel}\n            aria-labelledby={(!ariaLabel && ariaLabelledBy) || null}\n            className={css(formStyles.formFieldset)}\n          >\n            {(children as React.ReactElement[]).shift()}\n            {extendedChildren()}\n          </fieldset>\n        );\n      }\n    } else {\n      variantProps.children = extendedChildren();\n      if (!isGrouped) {\n        Component = 'ul';\n        variantProps.role = 'listbox';\n        variantProps['aria-label'] = ariaLabel;\n        variantProps['aria-labelledby'] = (!ariaLabel && ariaLabelledBy) || null;\n      }\n    }\n\n    return (\n      <React.Fragment>\n        <Component {...variantProps} {...props} />\n        {footer && (\n          <div className={css(styles.selectMenuFooter)} ref={footerRef}>\n            {footer}\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return <SelectConsumer>{context => this.renderSelectMenu(context)}</SelectConsumer>;\n  }\n}\n\nexport const SelectMenu = React.forwardRef<unknown, React.PropsWithChildren<unknown>>((props, ref) => (\n  <SelectMenuWithRef innerRef={ref} {...props}>\n    {props.children}\n  </SelectMenuWithRef>\n));\n"]},"metadata":{},"sourceType":"module"}