{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/Pagination/Pagination.tsx\";\nimport { Pagination as PaginationPF, PaginationVariant } from '@patternfly/react-core';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { getComponentQueryParamsObject, updateQueryParamsInURL } from '../../utils/queryParamsHelper';\nimport './Pagination.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Pagination = _ref => {\n  let {\n    componentId,\n    count,\n    pageSizeDefault = 10\n  } = _ref;\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [pageIndex, setPageIndex] = useState(1);\n  const [pageSize, setPageSize] = useState(pageSizeDefault); // history.location.search changes are watched to add browser back and forward support\n  // Query Params coming from the URL are the single point of truth.\n\n  useEffect(() => {\n    // add pageIndex or pageSize when it's not available in the URL\n    const componentQueryParamsObject = getComponentQueryParamsObject(location.search, componentId);\n\n    if (!(componentQueryParamsObject.pageIndex && componentQueryParamsObject.pageSize)) {\n      // replace the current entry on the history stack, otherwise back button would not be working because of the redirection\n      // from page without params to page with params\n      updateQueryParamsInURL({\n        pageIndex: 1,\n        pageSize: pageSizeDefault\n      }, componentId, location, navigate, true);\n    } else {\n      setPageIndex(Number(componentQueryParamsObject.pageIndex));\n      setPageSize(Number(componentQueryParamsObject.pageSize));\n    }\n  }, [location.search, location, componentId, pageSizeDefault, navigate]); // primary: history.location.search\n  // RENDERING\n  // pagination is rendered for the first time\n\n  if (count === undefined) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"pagination initializing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  } // pagination was already rendered\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagination\",\n    children: /*#__PURE__*/_jsxDEV(PaginationPF, {\n      itemCount: count,\n      perPage: pageSize,\n      page: pageIndex,\n      onSetPage: (_event, pageIndex) => {\n        updateQueryParamsInURL({\n          pageIndex\n        }, componentId, location, navigate);\n        setPageIndex(pageIndex);\n      },\n      onPerPageSelect: (_event, pageSize) => {\n        const pageIndexDefault = 1;\n        updateQueryParamsInURL({\n          pageIndex: pageIndexDefault,\n          pageSize\n        }, componentId, location, navigate);\n        setPageSize(pageSize);\n        setPageIndex(pageIndexDefault);\n      },\n      variant: PaginationVariant.bottom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Pagination","PaginationPF","PaginationVariant","useEffect","useState","useLocation","useNavigate","getComponentQueryParamsObject","updateQueryParamsInURL","componentId","count","pageSizeDefault","location","navigate","pageIndex","setPageIndex","pageSize","setPageSize","componentQueryParamsObject","search","Number","undefined","_event","pageIndexDefault","bottom"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/Pagination/Pagination.tsx"],"sourcesContent":["import { Pagination as PaginationPF, PaginationVariant } from '@patternfly/react-core';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { getComponentQueryParamsObject, updateQueryParamsInURL } from '../../utils/queryParamsHelper';\nimport './Pagination.css';\n\ninterface IPagination {\n  componentId: string;\n  count: number;\n  pageSizeDefault?: number;\n}\n\nexport const Pagination = ({ componentId, count, pageSizeDefault = 10 }: IPagination) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const [pageIndex, setPageIndex] = useState<number>(1);\n  const [pageSize, setPageSize] = useState<number>(pageSizeDefault);\n\n  // history.location.search changes are watched to add browser back and forward support\n  // Query Params coming from the URL are the single point of truth.\n  useEffect(() => {\n    // add pageIndex or pageSize when it's not available in the URL\n    const componentQueryParamsObject = getComponentQueryParamsObject(location.search, componentId);\n    if (!(componentQueryParamsObject.pageIndex && componentQueryParamsObject.pageSize)) {\n      // replace the current entry on the history stack, otherwise back button would not be working because of the redirection\n      // from page without params to page with params\n      updateQueryParamsInURL({ pageIndex: 1, pageSize: pageSizeDefault }, componentId, location, navigate, true);\n    } else {\n      setPageIndex(Number(componentQueryParamsObject.pageIndex));\n      setPageSize(Number(componentQueryParamsObject.pageSize));\n    }\n  }, [location.search, location, componentId, pageSizeDefault, navigate]); // primary: history.location.search\n\n  // RENDERING\n\n  // pagination is rendered for the first time\n  if (count === undefined) {\n    return <div>pagination initializing...</div>;\n  }\n\n  // pagination was already rendered\n  return (\n    <div className=\"pagination\">\n      <PaginationPF\n        itemCount={count}\n        perPage={pageSize}\n        page={pageIndex}\n        onSetPage={(_event, pageIndex) => {\n          updateQueryParamsInURL({ pageIndex }, componentId, location, navigate);\n          setPageIndex(pageIndex);\n        }}\n        onPerPageSelect={(_event, pageSize) => {\n          const pageIndexDefault = 1;\n          updateQueryParamsInURL({ pageIndex: pageIndexDefault, pageSize }, componentId, location, navigate);\n          setPageSize(pageSize);\n          setPageIndex(pageIndexDefault);\n        }}\n        variant={PaginationVariant.bottom}\n      />\n    </div>\n  );\n};\n"],"mappings":";AAAA,SAASA,UAAU,IAAIC,YAAvB,EAAqCC,iBAArC,QAA8D,wBAA9D;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,SAASC,6BAAT,EAAwCC,sBAAxC,QAAsE,+BAAtE;AACA,OAAO,kBAAP;;AAQA,OAAO,MAAMR,UAAU,GAAG,QAA+D;EAAA,IAA9D;IAAES,WAAF;IAAeC,KAAf;IAAsBC,eAAe,GAAG;EAAxC,CAA8D;EACvF,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;EACA,MAAMQ,QAAQ,GAAGP,WAAW,EAA5B;EAEA,MAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAS,CAAT,CAA1C;EACA,MAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAASO,eAAT,CAAxC,CALuF,CAOvF;EACA;;EACAR,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,0BAA0B,GAAGX,6BAA6B,CAACK,QAAQ,CAACO,MAAV,EAAkBV,WAAlB,CAAhE;;IACA,IAAI,EAAES,0BAA0B,CAACJ,SAA3B,IAAwCI,0BAA0B,CAACF,QAArE,CAAJ,EAAoF;MAClF;MACA;MACAR,sBAAsB,CAAC;QAAEM,SAAS,EAAE,CAAb;QAAgBE,QAAQ,EAAEL;MAA1B,CAAD,EAA8CF,WAA9C,EAA2DG,QAA3D,EAAqEC,QAArE,EAA+E,IAA/E,CAAtB;IACD,CAJD,MAIO;MACLE,YAAY,CAACK,MAAM,CAACF,0BAA0B,CAACJ,SAA5B,CAAP,CAAZ;MACAG,WAAW,CAACG,MAAM,CAACF,0BAA0B,CAACF,QAA5B,CAAP,CAAX;IACD;EACF,CAXQ,EAWN,CAACJ,QAAQ,CAACO,MAAV,EAAkBP,QAAlB,EAA4BH,WAA5B,EAAyCE,eAAzC,EAA0DE,QAA1D,CAXM,CAAT,CATuF,CAoBd;EAEzE;EAEA;;EACA,IAAIH,KAAK,KAAKW,SAAd,EAAyB;IACvB,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CA3BsF,CA6BvF;;;EACA,oBACE;IAAK,SAAS,EAAC,YAAf;IAAA,uBACE,QAAC,YAAD;MACE,SAAS,EAAEX,KADb;MAEE,OAAO,EAAEM,QAFX;MAGE,IAAI,EAAEF,SAHR;MAIE,SAAS,EAAE,CAACQ,MAAD,EAASR,SAAT,KAAuB;QAChCN,sBAAsB,CAAC;UAAEM;QAAF,CAAD,EAAgBL,WAAhB,EAA6BG,QAA7B,EAAuCC,QAAvC,CAAtB;QACAE,YAAY,CAACD,SAAD,CAAZ;MACD,CAPH;MAQE,eAAe,EAAE,CAACQ,MAAD,EAASN,QAAT,KAAsB;QACrC,MAAMO,gBAAgB,GAAG,CAAzB;QACAf,sBAAsB,CAAC;UAAEM,SAAS,EAAES,gBAAb;UAA+BP;QAA/B,CAAD,EAA4CP,WAA5C,EAAyDG,QAAzD,EAAmEC,QAAnE,CAAtB;QACAI,WAAW,CAACD,QAAD,CAAX;QACAD,YAAY,CAACQ,gBAAD,CAAZ;MACD,CAbH;MAcE,OAAO,EAAErB,iBAAiB,CAACsB;IAd7B;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAoBD,CAlDM"},"metadata":{},"sourceType":"module"}