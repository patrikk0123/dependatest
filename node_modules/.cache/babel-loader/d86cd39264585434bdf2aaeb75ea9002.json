{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownMenu } from './DropdownMenu';\nimport { DropdownContext, DropdownDirection, DropdownPosition } from './dropdownConstants';\nimport { getOUIAProps } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nexport class DropdownWithContext extends React.Component {\n  constructor(props) {\n    super(props);\n    this.openedOnEnter = false;\n    this.baseComponentRef = React.createRef();\n    this.menuComponentRef = React.createRef();\n\n    this.onEnter = () => {\n      this.openedOnEnter = true;\n    };\n\n    this.setMenuComponentRef = element => {\n      this.menuComponentRef = element;\n    };\n\n    this.getMenuComponentRef = () => this.menuComponentRef;\n\n    if (props.dropdownItems && props.dropdownItems.length > 0 && props.children) {\n      // eslint-disable-next-line no-console\n      console.error('Children and dropdownItems props have been provided. Only the dropdownItems prop items will be rendered');\n    }\n  }\n\n  componentDidUpdate() {\n    if (!this.props.isOpen) {\n      this.openedOnEnter = false;\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      className,\n      direction,\n      dropdownItems,\n      isOpen,\n      isPlain,\n      isText,\n      isGrouped,\n      isFullHeight,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onSelect,\n      position,\n      toggle,\n      autoFocus,\n      menuAppendTo,\n      isFlipEnabled\n    } = _a,\n          props = __rest(_a, [\"children\", \"className\", \"direction\", \"dropdownItems\", \"isOpen\", \"isPlain\", \"isText\", \"isGrouped\", \"isFullHeight\", \"onSelect\", \"position\", \"toggle\", \"autoFocus\", \"menuAppendTo\", \"isFlipEnabled\"]);\n\n    const id = toggle.props.id || `pf-dropdown-toggle-id-${DropdownWithContext.currentId++}`;\n    let component;\n    let renderedContent;\n    let ariaHasPopup = false;\n\n    if (dropdownItems && dropdownItems.length > 0) {\n      component = 'ul';\n      renderedContent = dropdownItems;\n      ariaHasPopup = true;\n    } else {\n      component = 'div';\n      renderedContent = React.Children.toArray(children);\n    }\n\n    const openedOnEnter = this.openedOnEnter;\n    return React.createElement(DropdownContext.Consumer, null, _ref => {\n      let {\n        baseClass,\n        baseComponent,\n        id: contextId,\n        ouiaId,\n        ouiaComponentType,\n        ouiaSafe,\n        alignments\n      } = _ref;\n      const BaseComponent = baseComponent;\n      const menuContainer = React.createElement(DropdownMenu // This removes the `position: absolute` styling from the `.pf-c-dropdown__menu`\n      // allowing the menu to flip correctly\n      , Object.assign({}, isFlipEnabled && {\n        style: {\n          position: 'revert',\n          minWidth: 'min-content'\n        }\n      }, {\n        setMenuComponentRef: this.setMenuComponentRef,\n        component: component,\n        isOpen: isOpen,\n        position: position,\n        \"aria-labelledby\": contextId ? `${contextId}-toggle` : id,\n        isGrouped: isGrouped,\n        autoFocus: openedOnEnter && autoFocus,\n        alignments: alignments\n      }), renderedContent);\n      const popperContainer = React.createElement(\"div\", {\n        className: css(baseClass, direction === DropdownDirection.up && styles.modifiers.top, position === DropdownPosition.right && styles.modifiers.alignRight, isOpen && styles.modifiers.expanded, className)\n      }, isOpen && menuContainer);\n      const mainContainer = React.createElement(BaseComponent, Object.assign({}, props, {\n        className: css(baseClass, direction === DropdownDirection.up && styles.modifiers.top, position === DropdownPosition.right && styles.modifiers.alignRight, isOpen && styles.modifiers.expanded, isFullHeight && styles.modifiers.fullHeight, className),\n        ref: this.baseComponentRef\n      }, getOUIAProps(ouiaComponentType, ouiaId, ouiaSafe)), React.Children.map(toggle, oneToggle => React.cloneElement(oneToggle, {\n        parentRef: this.baseComponentRef,\n        getMenuRef: this.getMenuComponentRef,\n        isOpen,\n        id,\n        isPlain,\n        isText,\n        'aria-haspopup': ariaHasPopup,\n        onEnter: () => {\n          this.onEnter();\n          oneToggle.props.onEnter && oneToggle.props.onEnter();\n        }\n      })), menuAppendTo === 'inline' && isOpen && menuContainer);\n\n      const getParentElement = () => {\n        if (this.baseComponentRef && this.baseComponentRef.current) {\n          return this.baseComponentRef.current.parentElement;\n        }\n\n        return null;\n      };\n\n      return menuAppendTo === 'inline' ? mainContainer : React.createElement(Popper, {\n        trigger: mainContainer,\n        popper: popperContainer,\n        direction: direction,\n        position: position,\n        appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo,\n        isVisible: isOpen\n      });\n    });\n  }\n\n}\nDropdownWithContext.displayName = 'DropdownWithContext'; // seed for the aria-labelledby ID\n\nDropdownWithContext.currentId = 0;\nDropdownWithContext.defaultProps = {\n  className: '',\n  dropdownItems: [],\n  isOpen: false,\n  isPlain: false,\n  isText: false,\n  isGrouped: false,\n  position: DropdownPosition.left,\n  direction: DropdownDirection.down,\n  onSelect: () => undefined,\n  autoFocus: true,\n  menuAppendTo: 'inline',\n  isFlipEnabled: false\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","DropdownMenu","DropdownContext","DropdownDirection","DropdownPosition","getOUIAProps","Popper","DropdownWithContext","Component","constructor","props","createRef","openedOnEnter","element","menuComponentRef","dropdownItems","length","children","console","error","componentDidUpdate","isOpen","render","_a","className","direction","isPlain","isText","isGrouped","isFullHeight","onSelect","position","toggle","autoFocus","menuAppendTo","isFlipEnabled","id","currentId","component","renderedContent","ariaHasPopup","Children","toArray","Consumer","baseClass","baseComponent","contextId","ouiaId","ouiaComponentType","ouiaSafe","alignments","BaseComponent","menuContainer","style","minWidth","setMenuComponentRef","popperContainer","up","modifiers","top","right","alignRight","expanded","mainContainer","Object","fullHeight","ref","baseComponentRef","map","oneToggle","cloneElement","parentRef","getMenuRef","getMenuComponentRef","onEnter","getParentElement","current","parentElement","trigger","popper","appendTo","isVisible","left","down","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/DropdownWithContext.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownMenu } from './DropdownMenu';\nimport { DropdownProps } from './Dropdown';\nimport { DropdownContext, DropdownDirection, DropdownPosition } from './dropdownConstants';\nimport { getOUIAProps, OUIAProps } from '../../helpers';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { Popper } from '../../helpers/Popper/Popper';\n\nexport class DropdownWithContext extends React.Component<DropdownProps & OUIAProps> {\n  static displayName = 'DropdownWithContext';\n\n  openedOnEnter = false;\n  baseComponentRef = React.createRef<any>();\n  menuComponentRef = React.createRef<any>();\n\n  // seed for the aria-labelledby ID\n  static currentId = 0;\n\n  static defaultProps: PickOptional<DropdownProps> = {\n    className: '',\n    dropdownItems: [] as any[],\n    isOpen: false,\n    isPlain: false,\n    isText: false,\n    isGrouped: false,\n    position: DropdownPosition.left,\n    direction: DropdownDirection.down,\n    onSelect: (): void => undefined,\n    autoFocus: true,\n    menuAppendTo: 'inline',\n    isFlipEnabled: false\n  };\n\n  constructor(props: DropdownProps & OUIAProps) {\n    super(props);\n    if (props.dropdownItems && props.dropdownItems.length > 0 && props.children) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Children and dropdownItems props have been provided. Only the dropdownItems prop items will be rendered'\n      );\n    }\n  }\n\n  onEnter = () => {\n    this.openedOnEnter = true;\n  };\n\n  componentDidUpdate() {\n    if (!this.props.isOpen) {\n      this.openedOnEnter = false;\n    }\n  }\n\n  setMenuComponentRef = (element: any) => {\n    this.menuComponentRef = element;\n  };\n\n  getMenuComponentRef = () => this.menuComponentRef;\n\n  render() {\n    const {\n      children,\n      className,\n      direction,\n      dropdownItems,\n      isOpen,\n      isPlain,\n      isText,\n      isGrouped,\n      isFullHeight,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onSelect,\n      position,\n      toggle,\n      autoFocus,\n      menuAppendTo,\n      isFlipEnabled,\n      ...props\n    } = this.props;\n    const id = toggle.props.id || `pf-dropdown-toggle-id-${DropdownWithContext.currentId++}`;\n    let component: string;\n    let renderedContent: React.ReactNode[];\n    let ariaHasPopup = false;\n    if (dropdownItems && dropdownItems.length > 0) {\n      component = 'ul';\n      renderedContent = dropdownItems;\n      ariaHasPopup = true;\n    } else {\n      component = 'div';\n      renderedContent = React.Children.toArray(children);\n    }\n    const openedOnEnter = this.openedOnEnter;\n    return (\n      <DropdownContext.Consumer>\n        {({ baseClass, baseComponent, id: contextId, ouiaId, ouiaComponentType, ouiaSafe, alignments }) => {\n          const BaseComponent = baseComponent as any;\n          const menuContainer = (\n            <DropdownMenu\n              // This removes the `position: absolute` styling from the `.pf-c-dropdown__menu`\n              // allowing the menu to flip correctly\n              {...(isFlipEnabled && { style: { position: 'revert', minWidth: 'min-content' } })}\n              setMenuComponentRef={this.setMenuComponentRef}\n              component={component}\n              isOpen={isOpen}\n              position={position}\n              aria-labelledby={contextId ? `${contextId}-toggle` : id}\n              isGrouped={isGrouped}\n              autoFocus={openedOnEnter && autoFocus}\n              alignments={alignments}\n            >\n              {renderedContent}\n            </DropdownMenu>\n          );\n          const popperContainer = (\n            <div\n              className={css(\n                baseClass,\n                direction === DropdownDirection.up && styles.modifiers.top,\n                position === DropdownPosition.right && styles.modifiers.alignRight,\n                isOpen && styles.modifiers.expanded,\n                className\n              )}\n            >\n              {isOpen && menuContainer}\n            </div>\n          );\n          const mainContainer = (\n            <BaseComponent\n              {...props}\n              className={css(\n                baseClass,\n                direction === DropdownDirection.up && styles.modifiers.top,\n                position === DropdownPosition.right && styles.modifiers.alignRight,\n                isOpen && styles.modifiers.expanded,\n                isFullHeight && styles.modifiers.fullHeight,\n                className\n              )}\n              ref={this.baseComponentRef}\n              {...getOUIAProps(ouiaComponentType, ouiaId, ouiaSafe)}\n            >\n              {React.Children.map(toggle, oneToggle =>\n                React.cloneElement(oneToggle, {\n                  parentRef: this.baseComponentRef,\n                  getMenuRef: this.getMenuComponentRef,\n                  isOpen,\n                  id,\n                  isPlain,\n                  isText,\n                  'aria-haspopup': ariaHasPopup,\n                  onEnter: () => {\n                    this.onEnter();\n                    oneToggle.props.onEnter && oneToggle.props.onEnter();\n                  }\n                })\n              )}\n              {menuAppendTo === 'inline' && isOpen && menuContainer}\n            </BaseComponent>\n          );\n          const getParentElement = () => {\n            if (this.baseComponentRef && this.baseComponentRef.current) {\n              return this.baseComponentRef.current.parentElement;\n            }\n            return null;\n          };\n          return menuAppendTo === 'inline' ? (\n            mainContainer\n          ) : (\n            <Popper\n              trigger={mainContainer}\n              popper={popperContainer}\n              direction={direction}\n              position={position}\n              appendTo={menuAppendTo === 'parent' ? getParentElement() : menuAppendTo}\n              isVisible={isOpen}\n            />\n          );\n        }}\n      </DropdownContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}