{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css } from '@patternfly/react-styles';\nimport { ProgressContainer, ProgressMeasureLocation } from './ProgressContainer';\nimport { getUniqueId } from '../../helpers/util';\nexport var ProgressSize;\n\n(function (ProgressSize) {\n  ProgressSize[\"sm\"] = \"sm\";\n  ProgressSize[\"md\"] = \"md\";\n  ProgressSize[\"lg\"] = \"lg\";\n})(ProgressSize || (ProgressSize = {}));\n\nexport class Progress extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.id = this.props.id || getUniqueId();\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      id,\n      size,\n\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      className,\n      value,\n      title,\n      label,\n      variant,\n      measureLocation,\n      min,\n      max,\n      valueText,\n      isTitleTruncated,\n      tooltipPosition,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy\n    } = _a,\n          props = __rest(_a, [\"id\", \"size\", \"className\", \"value\", \"title\", \"label\", \"variant\", \"measureLocation\", \"min\", \"max\", \"valueText\", \"isTitleTruncated\", \"tooltipPosition\", 'aria-label', 'aria-labelledby']);\n\n    const progressBarAriaProps = {\n      'aria-valuemin': min,\n      'aria-valuenow': value,\n      'aria-valuemax': max\n    };\n\n    if (title || ariaLabelledBy) {\n      progressBarAriaProps['aria-labelledby'] = title ? `${this.id}-description` : ariaLabelledBy;\n    }\n\n    if (ariaLabel) {\n      progressBarAriaProps['aria-label'] = ariaLabel;\n    }\n\n    if (valueText) {\n      progressBarAriaProps['aria-valuetext'] = valueText;\n    }\n\n    if (!title && !ariaLabelledBy && !ariaLabel) {\n      /* eslint-disable no-console */\n      console.warn('One of aria-label or aria-labelledby properties should be passed when using the progress component without a title.');\n    }\n\n    const scaledValue = Math.min(100, Math.max(0, Math.floor((value - min) / (max - min) * 100))) || 0;\n    return React.createElement(\"div\", Object.assign({}, props, {\n      className: css(styles.progress, styles.modifiers[variant], ['inside', 'outside'].includes(measureLocation) && styles.modifiers[measureLocation], measureLocation === 'inside' ? styles.modifiers[ProgressSize.lg] : styles.modifiers[size], !title && styles.modifiers.singleline, className),\n      id: this.id\n    }), React.createElement(ProgressContainer, {\n      parentId: this.id,\n      value: scaledValue,\n      title: title,\n      label: label,\n      variant: variant,\n      measureLocation: measureLocation,\n      progressBarAriaProps: progressBarAriaProps,\n      isTitleTruncated: isTitleTruncated,\n      tooltipPosition: tooltipPosition\n    }));\n  }\n\n}\nProgress.displayName = 'Progress';\nProgress.defaultProps = {\n  className: '',\n  measureLocation: ProgressMeasureLocation.top,\n  variant: null,\n  id: '',\n  title: '',\n  min: 0,\n  max: 100,\n  size: null,\n  label: null,\n  value: 0,\n  valueText: null,\n  isTitleTruncated: false,\n  tooltipPosition: 'top',\n  'aria-label': null,\n  'aria-labelledby': null\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","ProgressContainer","ProgressMeasureLocation","getUniqueId","ProgressSize","Progress","Component","constructor","props","id","render","_a","size","className","value","title","label","variant","measureLocation","min","max","valueText","isTitleTruncated","tooltipPosition","ariaLabel","ariaLabelledBy","progressBarAriaProps","console","warn","scaledValue","Math","floor","progress","modifiers","includes","lg","singleline","parentId","top"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Progress/Progress.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Progress/progress';\nimport { css } from '@patternfly/react-styles';\nimport { ProgressContainer, ProgressMeasureLocation } from './ProgressContainer';\nimport { AriaProps } from './ProgressBar';\nimport { getUniqueId } from '../../helpers/util';\n\nexport enum ProgressSize {\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg'\n}\n\nexport interface ProgressProps extends Omit<React.HTMLProps<HTMLDivElement>, 'size' | 'label' | 'title'> {\n  /** Classname for progress component. */\n  className?: string;\n  /** Size variant of progress. */\n  size?: 'sm' | 'md' | 'lg';\n  /** Where the measure percent will be located. */\n  measureLocation?: 'outside' | 'inside' | 'top' | 'none';\n  /** Status variant of progress. */\n  variant?: 'danger' | 'success' | 'warning';\n  /** Title above progress. The isTitleTruncated property will only affect string titles. Node title truncation must be handled manually. */\n  title?: React.ReactNode;\n  /** Text description of current progress value to display instead of percentage. */\n  label?: React.ReactNode;\n  /** Actual value of progress. */\n  value?: number;\n  /** DOM id for progress component. */\n  id?: string;\n  /** Minimal value of progress. */\n  min?: number;\n  /** Maximum value of progress. */\n  max?: number;\n  /** Accessible text description of current progress value, for when value is not a percentage. Use with label. */\n  valueText?: string;\n  /** Indicate whether to truncate the string title */\n  isTitleTruncated?: boolean;\n  /** Position of the tooltip which is displayed if title is truncated */\n  tooltipPosition?: 'auto' | 'top' | 'bottom' | 'left' | 'right';\n  /** Adds accessible text to the ProgressBar. Required when title not used and there is not any label associated with the progress bar */\n  'aria-label'?: string;\n  /** Associates the ProgressBar with it's label for accessibility purposes. Required when title not used */\n  'aria-labelledby'?: string;\n}\n\nexport class Progress extends React.Component<ProgressProps> {\n  static displayName = 'Progress';\n  static defaultProps: ProgressProps = {\n    className: '',\n    measureLocation: ProgressMeasureLocation.top,\n    variant: null,\n    id: '',\n    title: '',\n    min: 0,\n    max: 100,\n    size: null as ProgressSize,\n    label: null as React.ReactNode,\n    value: 0,\n    valueText: null as string,\n    isTitleTruncated: false,\n    tooltipPosition: 'top' as 'auto' | 'top' | 'bottom' | 'left' | 'right',\n    'aria-label': null as string,\n    'aria-labelledby': null as string\n  };\n\n  id = this.props.id || getUniqueId();\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      id,\n      size,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      className,\n      value,\n      title,\n      label,\n      variant,\n      measureLocation,\n      min,\n      max,\n      valueText,\n      isTitleTruncated,\n      tooltipPosition,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      ...props\n    } = this.props;\n\n    const progressBarAriaProps: AriaProps = {\n      'aria-valuemin': min,\n      'aria-valuenow': value,\n      'aria-valuemax': max\n    };\n\n    if (title || ariaLabelledBy) {\n      progressBarAriaProps['aria-labelledby'] = title ? `${this.id}-description` : ariaLabelledBy;\n    }\n\n    if (ariaLabel) {\n      progressBarAriaProps['aria-label'] = ariaLabel;\n    }\n\n    if (valueText) {\n      progressBarAriaProps['aria-valuetext'] = valueText;\n    }\n\n    if (!title && !ariaLabelledBy && !ariaLabel) {\n      /* eslint-disable no-console */\n      console.warn(\n        'One of aria-label or aria-labelledby properties should be passed when using the progress component without a title.'\n      );\n    }\n\n    const scaledValue = Math.min(100, Math.max(0, Math.floor(((value - min) / (max - min)) * 100))) || 0;\n    return (\n      <div\n        {...props}\n        className={css(\n          styles.progress,\n          styles.modifiers[variant],\n          ['inside', 'outside'].includes(measureLocation) && styles.modifiers[measureLocation as 'inside' | 'outside'],\n          measureLocation === 'inside' ? styles.modifiers[ProgressSize.lg] : styles.modifiers[size as 'sm' | 'lg'],\n          !title && styles.modifiers.singleline,\n          className\n        )}\n        id={this.id}\n      >\n        <ProgressContainer\n          parentId={this.id}\n          value={scaledValue}\n          title={title}\n          label={label}\n          variant={variant}\n          measureLocation={measureLocation}\n          progressBarAriaProps={progressBarAriaProps}\n          isTitleTruncated={isTitleTruncated}\n          tooltipPosition={tooltipPosition}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}