{"ast":null,"code":"import _regeneratorRuntime from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport { __awaiter, __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { FileUploadField } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nimport { fromEvent } from 'file-selector';\nexport var FileUpload = function FileUpload(_a) {\n  var id = _a.id,\n      type = _a.type,\n      _a$value = _a.value,\n      value = _a$value === void 0 ? type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null : _a$value,\n      _a$filename = _a.filename,\n      filename = _a$filename === void 0 ? '' : _a$filename,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$onChange = _a.onChange,\n      onChange = _a$onChange === void 0 ? function () {} : _a$onChange,\n      _a$onFileInputChange = _a.onFileInputChange,\n      onFileInputChange = _a$onFileInputChange === void 0 ? null : _a$onFileInputChange,\n      _a$onReadStarted = _a.onReadStarted,\n      onReadStarted = _a$onReadStarted === void 0 ? function () {} : _a$onReadStarted,\n      _a$onReadFinished = _a.onReadFinished,\n      onReadFinished = _a$onReadFinished === void 0 ? function () {} : _a$onReadFinished,\n      _a$onReadFailed = _a.onReadFailed,\n      onReadFailed = _a$onReadFailed === void 0 ? function () {} : _a$onReadFailed,\n      onClearClick = _a.onClearClick,\n      _a$onClick = _a.onClick,\n      onClick = _a$onClick === void 0 ? function (event) {\n    return event.preventDefault();\n  } : _a$onClick,\n      onTextChange = _a.onTextChange,\n      onDataChange = _a.onDataChange,\n      _a$dropzoneProps = _a.dropzoneProps,\n      dropzoneProps = _a$dropzoneProps === void 0 ? {} : _a$dropzoneProps,\n      props = __rest(_a, [\"id\", \"type\", \"value\", \"filename\", \"children\", \"onChange\", \"onFileInputChange\", \"onReadStarted\", \"onReadFinished\", \"onReadFailed\", \"onClearClick\", \"onClick\", \"onTextChange\", \"onDataChange\", \"dropzoneProps\"]);\n\n  var onDropAccepted = function onDropAccepted(acceptedFiles, event) {\n    if (acceptedFiles.length > 0) {\n      var fileHandle = acceptedFiles[0];\n\n      if (event.type === 'drop') {\n        onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(event, fileHandle);\n      }\n\n      if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n        onChange('', fileHandle.name, event); // Show the filename while reading\n\n        onReadStarted(fileHandle);\n        readFile(fileHandle, type).then(function (data) {\n          onReadFinished(fileHandle);\n          onChange(data, fileHandle.name, event);\n          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(data);\n        }).catch(function (error) {\n          onReadFailed(error, fileHandle);\n          onReadFinished(fileHandle);\n          onChange('', '', event); // Clear the filename field on a failure\n\n          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange('');\n        });\n      } else {\n        onChange(fileHandle, fileHandle.name, event);\n      }\n    }\n\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  var onDropRejected = function onDropRejected(rejectedFiles, event) {\n    if (rejectedFiles.length > 0) {\n      onChange('', rejectedFiles[0].name, event);\n    }\n\n    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n  };\n\n  var fileInputRef = React.useRef();\n\n  var setFileValue = function setFileValue(filename) {\n    fileInputRef.current.value = filename;\n  };\n\n  var onClearButtonClick = function onClearButtonClick(event) {\n    onChange('', '', event);\n    onClearClick === null || onClearClick === void 0 ? void 0 : onClearClick(event);\n    setFileValue(null);\n  };\n\n  return React.createElement(Dropzone, Object.assign({\n    multiple: false\n  }, dropzoneProps, {\n    onDropAccepted: onDropAccepted,\n    onDropRejected: onDropRejected\n  }), function (_ref) {\n    var getRootProps = _ref.getRootProps,\n        getInputProps = _ref.getInputProps,\n        isDragActive = _ref.isDragActive,\n        open = _ref.open;\n    var oldInputProps = getInputProps();\n    var inputProps = Object.assign(Object.assign({}, oldInputProps), {\n      onChange: function onChange(e) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _a, files;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  (_a = oldInputProps.onChange) === null || _a === void 0 ? void 0 : _a.call(oldInputProps, e);\n                  _context.next = 3;\n                  return fromEvent(e.nativeEvent);\n\n                case 3:\n                  files = _context.sent;\n\n                  if (files.length === 1) {\n                    onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(e, files[0]);\n                  }\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      }\n    });\n    return React.createElement(FileUploadField, Object.assign({}, getRootProps(Object.assign(Object.assign({}, props), {\n      refKey: 'containerRef',\n      onClick: function onClick(event) {\n        return event.preventDefault();\n      }\n    })), {\n      tabIndex: null,\n      id: id,\n      type: type,\n      filename: filename,\n      value: value,\n      onChange: onChange,\n      isDragActive: isDragActive,\n      onBrowseButtonClick: open,\n      onClearButtonClick: onClearButtonClick,\n      onTextAreaClick: onClick,\n      onTextChange: onTextChange\n    }), React.createElement(\"input\", Object.assign({}, inputProps, {\n      ref: function ref(input) {\n        fileInputRef.current = input;\n        inputProps.ref(input);\n      }\n    })), children);\n  });\n};\nFileUpload.displayName = 'FileUpload';","map":{"version":3,"mappings":"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","names":["React","Dropzone","FileUploadField","readFile","fileReaderType","fromEvent","FileUpload","_a","id","type","value","text","dataURL","filename","children","onChange","onFileInputChange","onReadStarted","onReadFinished","onReadFailed","onClearClick","onClick","event","preventDefault","onTextChange","onDataChange","dropzoneProps","props","__rest","onDropAccepted","acceptedFiles","length","fileHandle","name","then","data","catch","error","onDropRejected","rejectedFiles","fileInputRef","useRef","setFileValue","current","onClearButtonClick","Object","multiple","getRootProps","getInputProps","isDragActive","open","oldInputProps","inputProps","e","__awaiter","nativeEvent","files","refKey","tabIndex","onBrowseButtonClick","onTextAreaClick","ref","input","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/FileUpload/FileUpload.tsx"],"sourcesContent":["import * as React from 'react';\nimport Dropzone, { DropzoneProps, DropzoneInputProps, DropFileEventHandler } from 'react-dropzone';\nimport { FileUploadField, FileUploadFieldProps } from './FileUploadField';\nimport { readFile, fileReaderType } from '../../helpers/fileUtils';\nimport { fromEvent } from 'file-selector';\n\ninterface DropzoneInputPropsWithRef extends DropzoneInputProps {\n  ref: React.RefCallback<HTMLInputElement>; // Working around an issue in react-dropzone 9.0.0's types. Should not be necessary in later versions.\n}\n\nexport interface FileUploadProps\n  extends Omit<\n    FileUploadFieldProps,\n    'children' | 'onBrowseButtonClick' | 'onClearButtonClick' | 'isDragActive' | 'containerRef'\n  > {\n  /** Unique id for the TextArea, also used to generate ids for accessible labels. */\n  id: string;\n  /** What type of file. Determines what is is passed to `onChange` and expected by `value`\n   * (a string for 'text' and 'dataURL', or a File object otherwise. */\n  type?: 'text' | 'dataURL';\n  /** Value of the file's contents\n   * (string if text file, File object otherwise) */\n  value?: string | File;\n  /** Value to be shown in the read-only filename field. */\n  filename?: string;\n  /** @deprecated A callback for when the file contents change. Please instead use onFileInputChange, onTextChange, onDataChange, onClearClick individually.  */\n  onChange?: (\n    value: string | File,\n    filename: string,\n    event:\n      | React.MouseEvent<HTMLButtonElement, MouseEvent> // Clear button was clicked\n      | React.DragEvent<HTMLElement> // User dragged/dropped a file\n      | React.ChangeEvent<HTMLElement> // User typed in the TextArea\n  ) => void;\n  /** Change event emitted from the hidden \\<input type=\"file\" \\> field associated with the component  */\n  onFileInputChange?: (event: React.ChangeEvent<HTMLInputElement> | React.DragEvent<HTMLElement>, file: File) => void;\n  /** Callback for clicking on the FileUploadField text area. By default, prevents a click in the text area from opening file dialog. */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Additional classes added to the FileUpload container element. */\n  className?: string;\n  /** Flag to show if the field is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the field is read only. */\n  isReadOnly?: boolean;\n  /** Flag to show if a file is being loaded. */\n  isLoading?: boolean;\n  /** Aria-valuetext for the loading spinner */\n  spinnerAriaValueText?: string;\n  /** Flag to show if the field is required. */\n  isRequired?: boolean;\n  /** Value to indicate if the field is modified to show that validation state.\n   * If set to success, field will be modified to indicate valid state.\n   * If set to error,  field will be modified to indicate error state.\n   */\n  validated?: 'success' | 'error' | 'default';\n  /** Aria-label for the TextArea. */\n  'aria-label'?: string;\n  /** Placeholder string to display in the empty filename field */\n  filenamePlaceholder?: string;\n  /** Aria-label for the read-only filename field */\n  filenameAriaLabel?: string;\n  /** Text for the Browse button */\n  browseButtonText?: string;\n  /** Text for the Clear button */\n  clearButtonText?: string;\n  /** Flag to hide the built-in preview of the file (where available).\n   * If true, you can use children to render an alternate preview. */\n  hideDefaultPreview?: boolean;\n  /** Flag to allow editing of a text file's contents after it is selected from disk */\n  allowEditingUploadedText?: boolean;\n  /** Additional children to render after (or instead of) the file preview. */\n  children?: React.ReactNode;\n\n  // Props available in FileUpload but not FileUploadField:\n\n  /** A callback for when a selected file starts loading */\n  onReadStarted?: (fileHandle: File) => void;\n  /** A callback for when a selected file finishes loading */\n  onReadFinished?: (fileHandle: File) => void;\n  /** A callback for when the FileReader API fails */\n  onReadFailed?: (error: DOMException, fileHandle: File) => void;\n  /** Optional extra props to customize react-dropzone. */\n  dropzoneProps?: DropzoneProps;\n  /** Clear button was clicked */\n  onClearClick?: React.MouseEventHandler<HTMLButtonElement>;\n  /** Text area text changed */\n  onTextChange?: (text: string) => void;\n  /** On data changed - if type='text' or type='dataURL' and file was loaded it will call this method */\n  onDataChange?: (data: string) => void;\n}\n\nexport const FileUpload: React.FunctionComponent<FileUploadProps> = ({\n  id,\n  type,\n  value = type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null,\n  filename = '',\n  children = null,\n  onChange = () => {},\n  onFileInputChange = null,\n  onReadStarted = () => {},\n  onReadFinished = () => {},\n  onReadFailed = () => {},\n  onClearClick,\n  onClick = event => event.preventDefault(),\n  onTextChange,\n  onDataChange,\n  dropzoneProps = {},\n  ...props\n}: FileUploadProps) => {\n  const onDropAccepted: DropFileEventHandler = (acceptedFiles, event) => {\n    if (acceptedFiles.length > 0) {\n      const fileHandle = acceptedFiles[0];\n      if (event.type === 'drop') {\n        onFileInputChange?.(event, fileHandle);\n      }\n      if (type === fileReaderType.text || type === fileReaderType.dataURL) {\n        onChange('', fileHandle.name, event); // Show the filename while reading\n        onReadStarted(fileHandle);\n        readFile(fileHandle, type as fileReaderType)\n          .then(data => {\n            onReadFinished(fileHandle);\n            onChange(data as string, fileHandle.name, event);\n            onDataChange?.(data as string);\n          })\n          .catch((error: DOMException) => {\n            onReadFailed(error, fileHandle);\n            onReadFinished(fileHandle);\n            onChange('', '', event); // Clear the filename field on a failure\n            onDataChange?.('');\n          });\n      } else {\n        onChange(fileHandle, fileHandle.name, event);\n      }\n    }\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  const onDropRejected: DropFileEventHandler = (rejectedFiles, event) => {\n    if (rejectedFiles.length > 0) {\n      onChange('', rejectedFiles[0].name, event);\n    }\n    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);\n  };\n\n  const fileInputRef = React.useRef<HTMLInputElement>();\n  const setFileValue = (filename: string) => {\n    fileInputRef.current.value = filename;\n  };\n\n  const onClearButtonClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    onChange('', '', event);\n    onClearClick?.(event);\n    setFileValue(null);\n  };\n\n  return (\n    <Dropzone multiple={false} {...dropzoneProps} onDropAccepted={onDropAccepted} onDropRejected={onDropRejected}>\n      {({ getRootProps, getInputProps, isDragActive, open }) => {\n        const oldInputProps = getInputProps();\n        const inputProps: DropzoneInputProps = {\n          ...oldInputProps,\n          onChange: async (e: React.ChangeEvent<HTMLInputElement>) => {\n            oldInputProps.onChange?.(e);\n            const files = await fromEvent(e.nativeEvent);\n            if (files.length === 1) {\n              onFileInputChange?.(e, files[0] as File);\n            }\n          }\n        };\n\n        return (\n          <FileUploadField\n            {...getRootProps({\n              ...props,\n              refKey: 'containerRef',\n              onClick: event => event.preventDefault()\n            })}\n            tabIndex={null} // Omit the unwanted tabIndex from react-dropzone's getRootProps\n            id={id}\n            type={type}\n            filename={filename}\n            value={value}\n            onChange={onChange}\n            isDragActive={isDragActive}\n            onBrowseButtonClick={open}\n            onClearButtonClick={onClearButtonClick}\n            onTextAreaClick={onClick}\n            onTextChange={onTextChange}\n          >\n            <input\n              /* hidden, necessary for react-dropzone */\n              {...inputProps}\n              ref={input => {\n                fileInputRef.current = input;\n                (inputProps as DropzoneInputPropsWithRef).ref(input);\n              }}\n            />\n            {children}\n          </FileUploadField>\n        );\n      }}\n    </Dropzone>\n  );\n};\nFileUpload.displayName = 'FileUpload';\n"]},"metadata":{},"sourceType":"module"}