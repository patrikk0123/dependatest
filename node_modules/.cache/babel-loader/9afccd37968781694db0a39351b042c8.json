{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DragDrop/drag-drop';\nimport { DroppableContext } from './DroppableContext';\nexport var Droppable = function Droppable(_a) {\n  var className = _a.className,\n      children = _a.children,\n      _a$zone = _a.zone,\n      zone = _a$zone === void 0 ? 'defaultZone' : _a$zone,\n      _a$droppableId = _a.droppableId,\n      droppableId = _a$droppableId === void 0 ? 'defaultId' : _a$droppableId,\n      _a$hasNoWrapper = _a.hasNoWrapper,\n      hasNoWrapper = _a$hasNoWrapper === void 0 ? false : _a$hasNoWrapper,\n      props = __rest(_a, [\"className\", \"children\", \"zone\", \"droppableId\", \"hasNoWrapper\"]);\n\n  var childProps = Object.assign({\n    'data-pf-droppable': zone,\n    'data-pf-droppableid': droppableId,\n    // if has no wrapper is set, don't overwrite children className with the className prop\n    className: hasNoWrapper && React.Children.count(children) === 1 ? css(styles.droppable, className, children.props.className) : css(styles.droppable, className)\n  }, props);\n  return React.createElement(DroppableContext.Provider, {\n    value: {\n      zone: zone,\n      droppableId: droppableId\n    }\n  }, hasNoWrapper ? React.cloneElement(children, childProps) : React.createElement(\"div\", Object.assign({}, childProps), children));\n};\nDroppable.displayName = 'Droppable';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,4DAAnB;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAeA,OAAO,IAAMC,SAAS,GAA4C,SAArDA,SAAqD,CAACC,EAAD,EAO7C;MANnBC,YAIoBD,GAJpBC;MACAC,WAGoBF,GAHpBE;gBAGoBF,GAFpBG;MAAAA,4BAAO;uBAEaH,GADpBI;MAAAA,0CAAc;wBACMJ,GAApBK;MAAAA,4CAAe;MACZC,QAAKC,WANyD,gEAMzD;;EAER,IAAMC,UAAU;IACd,qBAAqBL,IADP;IAEd,uBAAuBC,WAFT;IAGd;IACAH,SAAS,EACPI,YAAY,IAAIV,KAAK,CAACc,QAAN,CAAeC,KAAf,CAAqBR,QAArB,MAAmC,CAAnD,GACIN,GAAG,CAACC,MAAM,CAACc,SAAR,EAAmBV,SAAnB,EAA+BC,QAA+B,CAACI,KAAhC,CAAsCL,SAArE,CADP,GAEIL,GAAG,CAACC,MAAM,CAACc,SAAR,EAAmBV,SAAnB;EAPK,GAQXK,KARW,CAAhB;EAWA,OACEX,oBAACG,gBAAgB,CAACc,QAAlB,EAA0B;IAACC,KAAK,EAAE;MAAEV,IAAI,EAAJA,IAAF;MAAQC,WAAW,EAAXA;IAAR;EAAR,CAA1B,EACGC,YAAY,GACXV,KAAK,CAACmB,YAAN,CAAmBZ,QAAnB,EAAmDM,UAAnD,CADW,GAGXb,6CAASa,UAAT,GAAsBN,QAAtB,CAJJ,CADF;AASD,CA5BM;AA6BPH,SAAS,CAACgB,WAAV,GAAwB,WAAxB","names":["React","css","styles","DroppableContext","Droppable","_a","className","children","zone","droppableId","hasNoWrapper","props","__rest","childProps","Children","count","droppable","Provider","value","cloneElement","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DragDrop/Droppable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DragDrop/drag-drop';\nimport { DroppableContext } from './DroppableContext';\n\ninterface DroppableProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside DragDrop */\n  children?: React.ReactNode;\n  /** Class to add to outer div */\n  className?: string;\n  /** Name of zone that items can be dragged between. Should specify if there is more than one Droppable on the page. */\n  zone?: string;\n  /** Id to be passed back on drop events */\n  droppableId?: string;\n  /** Don't wrap the component in a div. Requires passing a single child. */\n  hasNoWrapper?: boolean;\n}\n\nexport const Droppable: React.FunctionComponent<DroppableProps> = ({\n  className,\n  children,\n  zone = 'defaultZone',\n  droppableId = 'defaultId',\n  hasNoWrapper = false,\n  ...props\n}: DroppableProps) => {\n  const childProps = {\n    'data-pf-droppable': zone,\n    'data-pf-droppableid': droppableId,\n    // if has no wrapper is set, don't overwrite children className with the className prop\n    className:\n      hasNoWrapper && React.Children.count(children) === 1\n        ? css(styles.droppable, className, (children as React.ReactElement).props.className)\n        : css(styles.droppable, className),\n    ...props\n  };\n\n  return (\n    <DroppableContext.Provider value={{ zone, droppableId }}>\n      {hasNoWrapper ? (\n        React.cloneElement(children as React.ReactElement, childProps)\n      ) : (\n        <div {...childProps}>{children}</div>\n      )}\n    </DroppableContext.Provider>\n  );\n};\nDroppable.displayName = 'Droppable';\n"]},"metadata":{},"sourceType":"module"}