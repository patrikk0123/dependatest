{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport var DropdownToggle = function DropdownToggle(_a) {\n  var _a$id = _a.id,\n      id = _a$id === void 0 ? '' : _a$id,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$isOpen = _a.isOpen,\n      isOpen = _a$isOpen === void 0 ? false : _a$isOpen,\n      _a$parentRef = _a.parentRef,\n      parentRef = _a$parentRef === void 0 ? null : _a$parentRef,\n      _a$getMenuRef = _a.getMenuRef,\n      getMenuRef = _a$getMenuRef === void 0 ? null : _a$getMenuRef,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isPlain = _a.isPlain,\n      isPlain = _a$isPlain === void 0 ? false : _a$isPlain,\n      _a$isText = _a.isText,\n      isText = _a$isText === void 0 ? false : _a$isText,\n      _a$isPrimary = _a.isPrimary,\n      isPrimary = _a$isPrimary === void 0 ? false : _a$isPrimary,\n      _a$toggleVariant = _a.toggleVariant,\n      toggleVariant = _a$toggleVariant === void 0 ? 'default' : _a$toggleVariant,\n      _a$isActive = _a.isActive,\n      isActive = _a$isActive === void 0 ? false : _a$isActive,\n      _a$onToggle = _a.onToggle,\n      onToggle = _a$onToggle === void 0 ? function (_isOpen) {\n    return undefined;\n  } : _a$onToggle,\n      _a$icon = _a.icon,\n      icon = _a$icon === void 0 ? null : _a$icon,\n      _a$toggleIndicator = _a.toggleIndicator,\n      ToggleIndicator = _a$toggleIndicator === void 0 ? CaretDownIcon : _a$toggleIndicator,\n      splitButtonItems = _a.splitButtonItems,\n      _a$splitButtonVariant = _a.splitButtonVariant,\n      splitButtonVariant = _a$splitButtonVariant === void 0 ? 'checkbox' : _a$splitButtonVariant,\n      ariaHasPopup = _a['aria-haspopup'],\n      ouiaId = _a.ouiaId,\n      ouiaSafe = _a.ouiaSafe,\n      ref = _a.ref,\n      props = __rest(_a, [\"id\", \"children\", \"className\", \"isOpen\", \"parentRef\", \"getMenuRef\", \"isDisabled\", \"isPlain\", \"isText\", \"isPrimary\", \"toggleVariant\", \"isActive\", \"onToggle\", \"icon\", \"toggleIndicator\", \"splitButtonItems\", \"splitButtonVariant\", 'aria-haspopup', \"ouiaId\", \"ouiaSafe\", \"ref\"]);\n\n  var ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n  var toggle = React.createElement(DropdownContext.Consumer, null, function (_ref) {\n    var toggleTextClass = _ref.toggleTextClass,\n        toggleIndicatorClass = _ref.toggleIndicatorClass,\n        toggleIconClass = _ref.toggleIconClass;\n    return React.createElement(Toggle, Object.assign({}, props, {\n      id: id,\n      className: className,\n      isOpen: isOpen,\n      parentRef: parentRef,\n      getMenuRef: getMenuRef,\n      isActive: isActive,\n      isDisabled: isDisabled,\n      isPlain: isPlain,\n      isText: isText,\n      isPrimary: isPrimary,\n      toggleVariant: toggleVariant,\n      onToggle: onToggle,\n      \"aria-haspopup\": ariaHasPopup\n    }, ouiaProps, splitButtonItems && {\n      isSplitButton: true,\n      'aria-label': props['aria-label'] || 'Select'\n    }), icon && React.createElement(\"span\", {\n      className: css(toggleIconClass)\n    }, icon), children && React.createElement(\"span\", {\n      className: ToggleIndicator && css(toggleTextClass)\n    }, children), ToggleIndicator && React.createElement(\"span\", {\n      className: css(!splitButtonItems && toggleIndicatorClass)\n    }, React.createElement(ToggleIndicator, null)));\n  });\n\n  if (splitButtonItems) {\n    return React.createElement(\"div\", {\n      className: css(styles.dropdownToggle, styles.modifiers.splitButton, splitButtonVariant === 'action' && styles.modifiers.action, (toggleVariant === 'primary' || isPrimary) && splitButtonVariant === 'action' && styles.modifiers.primary, isDisabled && styles.modifiers.disabled)\n    }, splitButtonItems, toggle);\n  }\n\n  return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';","map":{"version":3,"mappings":"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","names":["React","CaretDownIcon","Toggle","styles","DropdownContext","css","useOUIAProps","DropdownToggle","_a","id","children","className","isOpen","parentRef","getMenuRef","isDisabled","isPlain","isText","isPrimary","toggleVariant","isActive","onToggle","_isOpen","undefined","icon","toggleIndicator","ToggleIndicator","splitButtonItems","splitButtonVariant","ariaHasPopup","ouiaId","ouiaSafe","ref","props","__rest","ouiaProps","displayName","toggle","Consumer","toggleTextClass","toggleIndicatorClass","toggleIconClass","Object","isSplitButton","dropdownToggle","modifiers","splitButton","action","primary","disabled"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/DropdownToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface DropdownToggleProps extends React.HTMLProps<HTMLButtonElement>, OUIAProps {\n  /** HTML ID of dropdown toggle */\n  id?: string;\n  /** Anything which can be rendered as dropdown toggle button */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown toggle button */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (value: boolean, event: any) => void;\n  /** Element which wraps toggle */\n  parentRef?: HTMLElement;\n  /** The menu element */\n  getMenuRef?: () => HTMLElement;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** Whether or not the <div> has a disabled state */\n  isDisabled?: boolean;\n  /** @deprecated Use `toggleVariant` instead. Whether or not the dropdown toggle button should have primary button styling */\n  isPrimary?: boolean;\n  /** Alternate styles for the dropdown toggle button */\n  toggleVariant?: 'primary' | 'secondary' | 'default';\n  /** An image to display within the dropdown toggle, appearing before any component children */\n  icon?: React.ReactNode;\n  /** The icon to display for the toggle, appearing after any component children. Defaults to CaretDownIcon. Set to null to not show an icon. */\n  toggleIndicator?: React.ElementType | null;\n  /** Elements to display before the toggle button. When included, renders the toggle as a split button. */\n  splitButtonItems?: React.ReactNode[];\n  /** Variant of split button toggle */\n  splitButtonVariant?: 'action' | 'checkbox';\n  /** Accessible label for the dropdown toggle button */\n  'aria-label'?: string;\n  /** Accessibility property to indicate correct has popup */\n  'aria-haspopup'?: boolean | 'listbox' | 'menu' | 'dialog' | 'grid' | 'tree';\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Callback called when the Enter key is pressed */\n  onEnter?: (event?: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport const DropdownToggle: React.FunctionComponent<DropdownToggleProps> = ({\n  id = '',\n  children = null,\n  className = '',\n  isOpen = false,\n  parentRef = null,\n  getMenuRef = null,\n  isDisabled = false,\n  isPlain = false,\n  isText = false,\n  isPrimary = false,\n  toggleVariant = 'default',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isActive = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = (_isOpen: boolean) => undefined as any,\n  icon = null,\n  toggleIndicator: ToggleIndicator = CaretDownIcon,\n  splitButtonItems,\n  splitButtonVariant = 'checkbox',\n  'aria-haspopup': ariaHasPopup,\n  ouiaId,\n  ouiaSafe,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n  ...props\n}: DropdownToggleProps) => {\n  const ouiaProps = useOUIAProps(DropdownToggle.displayName, ouiaId, ouiaSafe);\n  const toggle = (\n    <DropdownContext.Consumer>\n      {({ toggleTextClass, toggleIndicatorClass, toggleIconClass }) => (\n        <Toggle\n          {...props}\n          id={id}\n          className={className}\n          isOpen={isOpen}\n          parentRef={parentRef}\n          getMenuRef={getMenuRef}\n          isActive={isActive}\n          isDisabled={isDisabled}\n          isPlain={isPlain}\n          isText={isText}\n          isPrimary={isPrimary}\n          toggleVariant={toggleVariant}\n          onToggle={onToggle}\n          aria-haspopup={ariaHasPopup}\n          {...ouiaProps}\n          {...(splitButtonItems && { isSplitButton: true, 'aria-label': props['aria-label'] || 'Select' })}\n        >\n          {icon && <span className={css(toggleIconClass)}>{icon}</span>}\n          {children && <span className={ToggleIndicator && css(toggleTextClass)}>{children}</span>}\n          {ToggleIndicator && (\n            <span className={css(!splitButtonItems && toggleIndicatorClass)}>\n              <ToggleIndicator />\n            </span>\n          )}\n        </Toggle>\n      )}\n    </DropdownContext.Consumer>\n  );\n\n  if (splitButtonItems) {\n    return (\n      <div\n        className={css(\n          styles.dropdownToggle,\n          styles.modifiers.splitButton,\n          splitButtonVariant === 'action' && styles.modifiers.action,\n          (toggleVariant === 'primary' || isPrimary) && splitButtonVariant === 'action' && styles.modifiers.primary,\n          isDisabled && styles.modifiers.disabled\n        )}\n      >\n        {splitButtonItems}\n        {toggle}\n      </div>\n    );\n  }\n\n  return toggle;\n};\nDropdownToggle.displayName = 'DropdownToggle';\n"]},"metadata":{},"sourceType":"module"}