{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplate } from './ToggleTemplate';\nexport var PaginationOptionsMenu = /*#__PURE__*/function (_React$Component) {\n  _inherits(PaginationOptionsMenu, _React$Component);\n\n  var _super = _createSuper(PaginationOptionsMenu);\n\n  function PaginationOptionsMenu(props) {\n    var _this;\n\n    _classCallCheck(this, PaginationOptionsMenu);\n\n    _this = _super.call(this, props);\n    _this.parentRef = React.createRef();\n\n    _this.onToggle = function (isOpen) {\n      _this.setState({\n        isOpen: isOpen\n      });\n    };\n\n    _this.onSelect = function () {\n      _this.setState(function (prevState) {\n        return {\n          isOpen: !prevState.isOpen\n        };\n      });\n    };\n\n    _this.handleNewPerPage = function (_evt, newPerPage) {\n      var _this$props = _this.props,\n          page = _this$props.page,\n          onPerPageSelect = _this$props.onPerPageSelect,\n          itemCount = _this$props.itemCount,\n          defaultToFullPage = _this$props.defaultToFullPage;\n      var newPage = page;\n\n      while (Math.ceil(itemCount / newPerPage) < newPage) {\n        newPage--;\n      }\n\n      if (defaultToFullPage) {\n        if (itemCount / newPerPage !== newPage) {\n          while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n            newPage--;\n          }\n        }\n      }\n\n      var startIdx = (newPage - 1) * newPerPage;\n      var endIdx = newPage * newPerPage;\n      return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n    };\n\n    _this.renderItems = function () {\n      var _this$props2 = _this.props,\n          perPageOptions = _this$props2.perPageOptions,\n          perPage = _this$props2.perPage,\n          perPageSuffix = _this$props2.perPageSuffix;\n      return perPageOptions.map(function (_ref) {\n        var value = _ref.value,\n            title = _ref.title;\n        return React.createElement(DropdownItem, {\n          key: value,\n          component: \"button\",\n          \"data-action\": \"per-page-\".concat(value),\n          className: css(perPage === value && 'pf-m-selected'),\n          onClick: function onClick(event) {\n            return _this.handleNewPerPage(event, value);\n          }\n        }, title, \" \".concat(perPageSuffix), perPage === value && React.createElement(\"div\", {\n          className: css(styles.optionsMenuMenuItemIcon)\n        }, React.createElement(CheckIcon, null)));\n      });\n    };\n\n    _this.state = {\n      isOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(PaginationOptionsMenu, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          widgetId = _this$props3.widgetId,\n          isDisabled = _this$props3.isDisabled,\n          itemsPerPageTitle = _this$props3.itemsPerPageTitle,\n          dropDirection = _this$props3.dropDirection,\n          optionsToggle = _this$props3.optionsToggle,\n          perPageOptions = _this$props3.perPageOptions,\n          toggleTemplate = _this$props3.toggleTemplate,\n          firstIndex = _this$props3.firstIndex,\n          lastIndex = _this$props3.lastIndex,\n          itemCount = _this$props3.itemCount,\n          itemsTitle = _this$props3.itemsTitle,\n          ofWord = _this$props3.ofWord,\n          perPageComponent = _this$props3.perPageComponent;\n      var isOpen = this.state.isOpen;\n      return React.createElement(DropdownContext.Provider, {\n        value: {\n          id: widgetId,\n          onSelect: this.onSelect,\n          toggleIndicatorClass: perPageComponent === 'div' ? styles.optionsMenuToggleButtonIcon : styles.optionsMenuToggleIcon,\n          toggleTextClass: styles.optionsMenuToggleText,\n          menuClass: styles.optionsMenuMenu,\n          itemClass: styles.optionsMenuMenuItem,\n          toggleClass: ' ',\n          baseClass: styles.optionsMenu,\n          disabledClass: styles.modifiers.disabled,\n          menuComponent: 'ul',\n          baseComponent: 'div',\n          ouiaComponentType: PaginationOptionsMenu.displayName\n        }\n      }, React.createElement(DropdownWithContext, {\n        direction: dropDirection,\n        isOpen: isOpen,\n        toggle: React.createElement(OptionsToggle, {\n          optionsToggle: optionsToggle,\n          itemsPerPageTitle: itemsPerPageTitle,\n          showToggle: perPageOptions && perPageOptions.length > 0,\n          onToggle: this.onToggle,\n          isOpen: isOpen,\n          widgetId: widgetId,\n          firstIndex: firstIndex,\n          lastIndex: lastIndex,\n          itemCount: itemCount,\n          itemsTitle: itemsTitle,\n          ofWord: ofWord,\n          toggleTemplate: toggleTemplate,\n          parentRef: this.parentRef.current,\n          isDisabled: isDisabled,\n          perPageComponent: perPageComponent\n        }),\n        dropdownItems: this.renderItems(),\n        isPlain: true\n      }));\n    }\n  }]);\n\n  return PaginationOptionsMenu;\n}(React.Component);\nPaginationOptionsMenu.displayName = 'PaginationOptionsMenu';\nPaginationOptionsMenu.defaultProps = {\n  className: '',\n  widgetId: '',\n  isDisabled: false,\n  dropDirection: DropdownDirection.down,\n  perPageOptions: [],\n  itemsPerPageTitle: 'Items per page',\n  perPageSuffix: 'per page',\n  optionsToggle: '',\n  ofWord: 'of',\n  perPage: 0,\n  firstIndex: 0,\n  lastIndex: 0,\n  defaultToFullPage: false,\n  itemsTitle: 'items',\n  toggleTemplate: ToggleTemplate,\n  onPerPageSelect: function onPerPageSelect() {\n    return null;\n  },\n  perPageComponent: 'div'\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","DropdownItem","DropdownDirection","DropdownWithContext","DropdownContext","CheckIcon","OptionsToggle","ToggleTemplate","PaginationOptionsMenu","props","createRef","isOpen","setState","prevState","_evt","newPerPage","page","onPerPageSelect","itemCount","defaultToFullPage","newPage","Math","ceil","startIdx","endIdx","perPageOptions","perPage","perPageSuffix","map","value","title","key","component","className","onClick","handleNewPerPage","event","optionsMenuMenuItemIcon","state","widgetId","isDisabled","itemsPerPageTitle","dropDirection","optionsToggle","toggleTemplate","firstIndex","lastIndex","itemsTitle","ofWord","perPageComponent","Provider","id","onSelect","toggleIndicatorClass","optionsMenuToggleButtonIcon","optionsMenuToggleIcon","toggleTextClass","optionsMenuToggleText","menuClass","optionsMenuMenu","itemClass","optionsMenuMenuItem","toggleClass","baseClass","optionsMenu","disabledClass","modifiers","disabled","menuComponent","baseComponent","ouiaComponentType","displayName","direction","toggle","showToggle","length","onToggle","parentRef","current","dropdownItems","renderItems","isPlain","Component","down"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Pagination/PaginationOptionsMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownItem, DropdownDirection, DropdownWithContext, DropdownContext } from '../Dropdown';\nimport CheckIcon from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport { OptionsToggle } from './OptionsToggle';\nimport { ToggleTemplateProps, ToggleTemplate } from './ToggleTemplate';\nimport { PerPageOptions, OnPerPageSelect } from './Pagination';\n\nexport interface PaginationOptionsMenuProps extends React.HTMLProps<HTMLDivElement> {\n  /** Custom class name added to the pagination options menu */\n  className?: string;\n  /** Id added to the title of the Pagination options menu */\n  widgetId?: string;\n  /** Flag indicating if pagination options menu is disabled */\n  isDisabled?: boolean;\n  /** Menu will open up or open down from the options menu toggle */\n  dropDirection?: 'up' | 'down';\n  /** Array of titles and values which will be the options on the options menu dropdown */\n  perPageOptions?: PerPageOptions[];\n  /** The title of the pagination options menu */\n  itemsPerPageTitle?: string;\n  /** Current page number */\n  page?: number;\n  /** The suffix to be displayed after each option on the options menu dropdown */\n  perPageSuffix?: string;\n  /** The type or title of the items being paginated */\n  itemsTitle?: string;\n  /** Accessible label for the options toggle */\n  optionsToggle?: string;\n  /** The total number of items being paginated */\n  itemCount?: number;\n  /** The first index of the items being paginated */\n  firstIndex?: number;\n  /** The last index of the items being paginated */\n  lastIndex?: number;\n  /** Flag to show last full page of results if perPage selected > remaining rows */\n  defaultToFullPage?: boolean;\n  /** The number of items to be displayed per page */\n  perPage?: number;\n  /** The number of the last page */\n  lastPage?: number;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */\n  toggleTemplate: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Function called when user selects number of items per page. */\n  onPerPageSelect?: OnPerPageSelect;\n  /** Label for the English word \"of\" */\n  ofWord?: string;\n  /** Component to be used for wrapping the toggle contents. Use 'button' when you want\n   * all of the toggle text to be clickable.\n   */\n  perPageComponent?: 'div' | 'button';\n}\n\ninterface PaginationOptionsMenuState {\n  isOpen: boolean;\n}\n\nexport class PaginationOptionsMenu extends React.Component<PaginationOptionsMenuProps, PaginationOptionsMenuState> {\n  static displayName = 'PaginationOptionsMenu';\n  private parentRef = React.createRef<HTMLDivElement>();\n  static defaultProps: PaginationOptionsMenuProps = {\n    className: '',\n    widgetId: '',\n    isDisabled: false,\n    dropDirection: DropdownDirection.down,\n    perPageOptions: [] as PerPageOptions[],\n    itemsPerPageTitle: 'Items per page',\n    perPageSuffix: 'per page',\n    optionsToggle: '',\n    ofWord: 'of',\n    perPage: 0,\n    firstIndex: 0,\n    lastIndex: 0,\n    defaultToFullPage: false,\n    itemsTitle: 'items',\n    toggleTemplate: ToggleTemplate,\n    onPerPageSelect: () => null as any,\n    perPageComponent: 'div'\n  };\n\n  constructor(props: PaginationOptionsMenuProps) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  onToggle = (isOpen: boolean) => {\n    this.setState({ isOpen });\n  };\n\n  onSelect = () => {\n    this.setState((prevState: PaginationOptionsMenuState) => ({ isOpen: !prevState.isOpen }));\n  };\n\n  handleNewPerPage = (_evt: React.MouseEvent | React.KeyboardEvent | MouseEvent, newPerPage: number) => {\n    const { page, onPerPageSelect, itemCount, defaultToFullPage } = this.props;\n    let newPage = page;\n\n    while (Math.ceil(itemCount / newPerPage) < newPage) {\n      newPage--;\n    }\n\n    if (defaultToFullPage) {\n      if (itemCount / newPerPage !== newPage) {\n        while (newPage > 1 && itemCount - newPerPage * newPage < 0) {\n          newPage--;\n        }\n      }\n    }\n    const startIdx = (newPage - 1) * newPerPage;\n    const endIdx = newPage * newPerPage;\n    return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);\n  };\n\n  renderItems = () => {\n    const { perPageOptions, perPage, perPageSuffix } = this.props;\n\n    return perPageOptions.map(({ value, title }) => (\n      <DropdownItem\n        key={value}\n        component=\"button\"\n        data-action={`per-page-${value}`}\n        className={css(perPage === value && 'pf-m-selected')}\n        onClick={event => this.handleNewPerPage(event, value)}\n      >\n        {title}\n        {` ${perPageSuffix}`}\n        {perPage === value && (\n          <div className={css(styles.optionsMenuMenuItemIcon)}>\n            <CheckIcon />\n          </div>\n        )}\n      </DropdownItem>\n    ));\n  };\n\n  render() {\n    const {\n      widgetId,\n      isDisabled,\n      itemsPerPageTitle,\n      dropDirection,\n      optionsToggle,\n      perPageOptions,\n      toggleTemplate,\n      firstIndex,\n      lastIndex,\n      itemCount,\n      itemsTitle,\n      ofWord,\n      perPageComponent\n    } = this.props;\n    const { isOpen } = this.state;\n\n    return (\n      <DropdownContext.Provider\n        value={{\n          id: widgetId,\n          onSelect: this.onSelect,\n          toggleIndicatorClass:\n            perPageComponent === 'div' ? styles.optionsMenuToggleButtonIcon : styles.optionsMenuToggleIcon,\n          toggleTextClass: styles.optionsMenuToggleText,\n          menuClass: styles.optionsMenuMenu,\n          itemClass: styles.optionsMenuMenuItem,\n          toggleClass: ' ',\n          baseClass: styles.optionsMenu,\n          disabledClass: styles.modifiers.disabled,\n          menuComponent: 'ul',\n          baseComponent: 'div',\n          ouiaComponentType: PaginationOptionsMenu.displayName\n        }}\n      >\n        <DropdownWithContext\n          direction={dropDirection}\n          isOpen={isOpen}\n          toggle={\n            <OptionsToggle\n              optionsToggle={optionsToggle}\n              itemsPerPageTitle={itemsPerPageTitle}\n              showToggle={perPageOptions && perPageOptions.length > 0}\n              onToggle={this.onToggle}\n              isOpen={isOpen}\n              widgetId={widgetId}\n              firstIndex={firstIndex}\n              lastIndex={lastIndex}\n              itemCount={itemCount}\n              itemsTitle={itemsTitle}\n              ofWord={ofWord}\n              toggleTemplate={toggleTemplate}\n              parentRef={this.parentRef.current}\n              isDisabled={isDisabled}\n              perPageComponent={perPageComponent}\n            />\n          }\n          dropdownItems={this.renderItems()}\n          isPlain\n        />\n      </DropdownContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}