{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { FocusTrap } from '../../helpers';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport bullsEyeStyles from '@patternfly/react-styles/css/layouts/Bullseye/bullseye';\nimport { css } from '@patternfly/react-styles';\nimport { getOUIAProps } from '../../helpers';\nimport { Backdrop } from '../Backdrop/Backdrop';\nimport { ModalBoxBody } from './ModalBoxBody';\nimport { ModalBoxCloseButton } from './ModalBoxCloseButton';\nimport { ModalBox } from './ModalBox';\nimport { ModalBoxFooter } from './ModalBoxFooter';\nimport { ModalBoxDescription } from './ModalBoxDescription';\nimport { ModalBoxHeader } from './ModalBoxHeader';\nimport { ModalBoxTitle, isVariantIcon } from './ModalBoxTitle';\nexport const ModalContent = _a => {\n  var {\n    children,\n    className = '',\n    isOpen = false,\n    header = null,\n    help = null,\n    description = null,\n    title = '',\n    titleIconVariant = null,\n    titleLabel = '',\n    'aria-label': ariaLabel = '',\n    'aria-describedby': ariaDescribedby,\n    'aria-labelledby': ariaLabelledby,\n    bodyAriaLabel,\n    bodyAriaRole,\n    showClose = true,\n    footer = null,\n    actions = [],\n    onClose = () => undefined,\n    variant = 'default',\n    position,\n    positionOffset,\n    width = -1,\n    boxId,\n    labelId,\n    descriptorId,\n    disableFocusTrap = false,\n    hasNoBodyWrapper = false,\n    ouiaId,\n    ouiaSafe = true\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"isOpen\", \"header\", \"help\", \"description\", \"title\", \"titleIconVariant\", \"titleLabel\", 'aria-label', 'aria-describedby', 'aria-labelledby', \"bodyAriaLabel\", \"bodyAriaRole\", \"showClose\", \"footer\", \"actions\", \"onClose\", \"variant\", \"position\", \"positionOffset\", \"width\", \"boxId\", \"labelId\", \"descriptorId\", \"disableFocusTrap\", \"hasNoBodyWrapper\", \"ouiaId\", \"ouiaSafe\"]);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const modalBoxHeader = header ? React.createElement(ModalBoxHeader, {\n    help: help\n  }, header) : title && React.createElement(ModalBoxHeader, {\n    help: help\n  }, React.createElement(ModalBoxTitle, {\n    title: title,\n    titleIconVariant: titleIconVariant,\n    titleLabel: titleLabel,\n    id: labelId\n  }), description && React.createElement(ModalBoxDescription, {\n    id: descriptorId\n  }, description));\n  const modalBoxFooter = footer ? React.createElement(ModalBoxFooter, null, footer) : actions.length > 0 && React.createElement(ModalBoxFooter, null, actions);\n  const defaultModalBodyAriaRole = bodyAriaLabel ? 'region' : undefined;\n  const modalBody = hasNoBodyWrapper ? children : React.createElement(ModalBoxBody, Object.assign({\n    \"aria-label\": bodyAriaLabel,\n    role: bodyAriaRole || defaultModalBodyAriaRole\n  }, props, !description && !ariaDescribedby && {\n    id: descriptorId\n  }), children);\n  const boxStyle = width === -1 ? {} : {\n    width\n  };\n\n  const ariaLabelledbyFormatted = () => {\n    if (ariaLabelledby === null) {\n      return null;\n    }\n\n    const idRefList = [];\n\n    if ((ariaLabel && boxId) !== '') {\n      idRefList.push(ariaLabel && boxId);\n    }\n\n    if (ariaLabelledby) {\n      idRefList.push(ariaLabelledby);\n    }\n\n    if (title) {\n      idRefList.push(labelId);\n    }\n\n    return idRefList.join(' ');\n  };\n\n  const modalBox = React.createElement(ModalBox, Object.assign({\n    id: boxId,\n    style: boxStyle,\n    className: css(className, isVariantIcon(titleIconVariant) && modalStyles.modifiers[titleIconVariant]),\n    variant: variant,\n    position: position,\n    positionOffset: positionOffset,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledbyFormatted(),\n    \"aria-describedby\": ariaDescribedby || (hasNoBodyWrapper ? null : descriptorId)\n  }, getOUIAProps(ModalContent.displayName, ouiaId, ouiaSafe)), showClose && React.createElement(ModalBoxCloseButton, {\n    onClose: onClose,\n    ouiaId: ouiaId\n  }), modalBoxHeader, modalBody, modalBoxFooter);\n  return React.createElement(Backdrop, null, React.createElement(FocusTrap, {\n    active: !disableFocusTrap,\n    focusTrapOptions: {\n      clickOutsideDeactivates: true,\n      tabbableOptions: {\n        displayCheck: 'none'\n      }\n    },\n    className: css(bullsEyeStyles.bullseye)\n  }, modalBox));\n};\nModalContent.displayName = 'ModalContent';","map":{"version":3,"mappings":"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","names":["React","FocusTrap","modalStyles","bullsEyeStyles","css","getOUIAProps","Backdrop","ModalBoxBody","ModalBoxCloseButton","ModalBox","ModalBoxFooter","ModalBoxDescription","ModalBoxHeader","ModalBoxTitle","isVariantIcon","ModalContent","_a","children","className","isOpen","header","help","description","title","titleIconVariant","titleLabel","ariaLabel","ariaDescribedby","ariaLabelledby","bodyAriaLabel","bodyAriaRole","showClose","footer","actions","onClose","undefined","variant","position","positionOffset","width","boxId","labelId","descriptorId","disableFocusTrap","hasNoBodyWrapper","ouiaId","ouiaSafe","props","modalBoxHeader","id","modalBoxFooter","length","defaultModalBodyAriaRole","modalBody","Object","role","boxStyle","ariaLabelledbyFormatted","idRefList","push","join","modalBox","style","modifiers","displayName","active","focusTrapOptions","clickOutsideDeactivates","tabbableOptions","displayCheck","bullseye"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Modal/ModalContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FocusTrap } from '../../helpers';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport bullsEyeStyles from '@patternfly/react-styles/css/layouts/Bullseye/bullseye';\nimport { css } from '@patternfly/react-styles';\nimport { getOUIAProps, OUIAProps } from '../../helpers';\n\nimport { Backdrop } from '../Backdrop/Backdrop';\nimport { ModalBoxBody } from './ModalBoxBody';\nimport { ModalBoxCloseButton } from './ModalBoxCloseButton';\nimport { ModalBox } from './ModalBox';\nimport { ModalBoxFooter } from './ModalBoxFooter';\nimport { ModalBoxDescription } from './ModalBoxDescription';\nimport { ModalBoxHeader } from './ModalBoxHeader';\nimport { ModalBoxTitle, isVariantIcon } from './ModalBoxTitle';\n\nexport interface ModalContentProps extends OUIAProps {\n  /** Content rendered inside the Modal. */\n  children: React.ReactNode;\n  /** Additional classes added to the button */\n  className?: string;\n  /** Variant of the modal */\n  variant?: 'small' | 'medium' | 'large' | 'default';\n  /** Alternate position of the modal */\n  position?: 'top';\n  /** Offset from alternate position. Can be any valid CSS length/percentage */\n  positionOffset?: string;\n  /** Flag to show the modal */\n  isOpen?: boolean;\n  /** Complex header (more than just text), supersedes title for header content */\n  header?: React.ReactNode;\n  /** Optional help section for the Modal Header */\n  help?: React.ReactNode;\n  /** Description of the modal */\n  description?: React.ReactNode;\n  /** Simple text content of the Modal Header, also used for aria-label on the body */\n  title?: string;\n  /** Optional alert icon (or other) to show before the title of the Modal Header\n   * When the predefined alert types are used the default styling\n   * will be automatically applied */\n  titleIconVariant?: 'success' | 'danger' | 'warning' | 'info' | 'default' | React.ComponentType<any>;\n  /** Optional title label text for screen readers */\n  titleLabel?: string;\n  /** Id of Modal Box label */\n  'aria-labelledby'?: string | null;\n  /** Accessible descriptor of modal */\n  'aria-label'?: string;\n  /** Id of Modal Box description */\n  'aria-describedby'?: string;\n  /** Accessible label applied to the modal box body. This should be used to communicate important information about the modal box body div if needed, such as that it is scrollable */\n  bodyAriaLabel?: string;\n  /** Accessible role applied to the modal box body. This will default to region if a body aria label is applied. Set to a more appropriate role as applicable based on the modal content and context */\n  bodyAriaRole?: string;\n  /** Flag to show the close button in the header area of the modal */\n  showClose?: boolean;\n  /** Default width of the content. */\n  width?: number | string;\n  /** Custom footer */\n  footer?: React.ReactNode;\n  /** Action buttons to add to the standard Modal Footer, ignored if `footer` is given */\n  actions?: any;\n  /** A callback for when the close button is clicked */\n  onClose?: () => void;\n  /** Id of the ModalBox container */\n  boxId: string;\n  /** Id of the ModalBox title */\n  labelId: string;\n  /** Id of the ModalBoxBody */\n  descriptorId: string;\n  /** Flag to disable focus trap */\n  disableFocusTrap?: boolean;\n  /** Flag indicating if modal content should be placed in a modal box body wrapper */\n  hasNoBodyWrapper?: boolean;\n}\n\nexport const ModalContent: React.FunctionComponent<ModalContentProps> = ({\n  children,\n  className = '',\n  isOpen = false,\n  header = null,\n  help = null,\n  description = null,\n  title = '',\n  titleIconVariant = null,\n  titleLabel = '',\n  'aria-label': ariaLabel = '',\n  'aria-describedby': ariaDescribedby,\n  'aria-labelledby': ariaLabelledby,\n  bodyAriaLabel,\n  bodyAriaRole,\n  showClose = true,\n  footer = null,\n  actions = [],\n  onClose = () => undefined as any,\n  variant = 'default',\n  position,\n  positionOffset,\n  width = -1,\n  boxId,\n  labelId,\n  descriptorId,\n  disableFocusTrap = false,\n  hasNoBodyWrapper = false,\n  ouiaId,\n  ouiaSafe = true,\n  ...props\n}: ModalContentProps) => {\n  if (!isOpen) {\n    return null;\n  }\n\n  const modalBoxHeader = header ? (\n    <ModalBoxHeader help={help}>{header}</ModalBoxHeader>\n  ) : (\n    title && (\n      <ModalBoxHeader help={help}>\n        <ModalBoxTitle title={title} titleIconVariant={titleIconVariant} titleLabel={titleLabel} id={labelId} />\n        {description && <ModalBoxDescription id={descriptorId}>{description}</ModalBoxDescription>}\n      </ModalBoxHeader>\n    )\n  );\n\n  const modalBoxFooter = footer ? (\n    <ModalBoxFooter>{footer}</ModalBoxFooter>\n  ) : (\n    actions.length > 0 && <ModalBoxFooter>{actions}</ModalBoxFooter>\n  );\n\n  const defaultModalBodyAriaRole = bodyAriaLabel ? 'region' : undefined;\n\n  const modalBody = hasNoBodyWrapper ? (\n    children\n  ) : (\n    <ModalBoxBody\n      aria-label={bodyAriaLabel}\n      role={bodyAriaRole || defaultModalBodyAriaRole}\n      {...props}\n      {...(!description && !ariaDescribedby && { id: descriptorId })}\n    >\n      {children}\n    </ModalBoxBody>\n  );\n  const boxStyle = width === -1 ? {} : { width };\n  const ariaLabelledbyFormatted = (): null | string => {\n    if (ariaLabelledby === null) {\n      return null;\n    }\n    const idRefList: string[] = [];\n    if ((ariaLabel && boxId) !== '') {\n      idRefList.push(ariaLabel && boxId);\n    }\n    if (ariaLabelledby) {\n      idRefList.push(ariaLabelledby);\n    }\n    if (title) {\n      idRefList.push(labelId);\n    }\n    return idRefList.join(' ');\n  };\n\n  const modalBox = (\n    <ModalBox\n      id={boxId}\n      style={boxStyle}\n      className={css(\n        className,\n        isVariantIcon(titleIconVariant) &&\n          modalStyles.modifiers[titleIconVariant as 'success' | 'warning' | 'info' | 'danger' | 'default']\n      )}\n      variant={variant}\n      position={position}\n      positionOffset={positionOffset}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledbyFormatted()}\n      aria-describedby={ariaDescribedby || (hasNoBodyWrapper ? null : descriptorId)}\n      {...getOUIAProps(ModalContent.displayName, ouiaId, ouiaSafe)}\n    >\n      {showClose && <ModalBoxCloseButton onClose={onClose} ouiaId={ouiaId} />}\n      {modalBoxHeader}\n      {modalBody}\n      {modalBoxFooter}\n    </ModalBox>\n  );\n  return (\n    <Backdrop>\n      <FocusTrap\n        active={!disableFocusTrap}\n        focusTrapOptions={{ clickOutsideDeactivates: true, tabbableOptions: { displayCheck: 'none' } }}\n        className={css(bullsEyeStyles.bullseye)}\n      >\n        {modalBox}\n      </FocusTrap>\n    </Backdrop>\n  );\n};\nModalContent.displayName = 'ModalContent';\n"]},"metadata":{},"sourceType":"module"}