{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\nimport { Tooltip } from '../Tooltip';\nexport const variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\nexport const NotificationDrawerListItemHeader = _a => {\n  var {\n    children,\n    className = '',\n    icon = null,\n    srTitle,\n    title,\n    variant = 'default',\n    truncateTitle = 0,\n    tooltipPosition\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"icon\", \"srTitle\", \"title\", \"variant\", \"truncateTitle\", \"tooltipPosition\"]);\n\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Icon = variantIcons[variant];\n  const Title = React.createElement(\"h2\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)\n  }), srTitle && React.createElement(\"span\", {\n    className: css(a11yStyles.screenReader)\n  }, srTitle), title);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerListItemHeader, className)\n  }), React.createElement(\"span\", {\n    className: css(styles.notificationDrawerListItemHeaderIcon)\n  }, icon ? icon : React.createElement(Icon, null)), isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title), children && React.createElement(\"div\", {\n    className: css(styles.notificationDrawerListItemAction)\n  }, children));\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';","map":{"version":3,"mappings":"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","names":["React","BellIcon","CheckCircleIcon","ExclamationCircleIcon","ExclamationTriangleIcon","InfoCircleIcon","css","styles","a11yStyles","maxLines","Tooltip","variantIcons","success","danger","warning","info","default","NotificationDrawerListItemHeader","_a","children","className","icon","srTitle","title","variant","truncateTitle","tooltipPosition","props","titleRef","useRef","isTooltipVisible","setIsTooltipVisible","useState","useEffect","current","style","setProperty","name","toString","showTooltip","offsetHeight","scrollHeight","Icon","Title","tabIndex","ref","notificationDrawerListItemHeaderTitle","modifiers","truncate","screenReader","Fragment","notificationDrawerListItemHeader","notificationDrawerListItemHeaderIcon","content","position","notificationDrawerListItemAction","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/NotificationDrawer/NotificationDrawerListItemHeader.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\n\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\n\nimport { Tooltip, TooltipPosition } from '../Tooltip';\n\nexport const variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\n\nexport interface NotificationDrawerListItemHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /**  Actions rendered inside the notification drawer list item header */\n  children?: React.ReactNode;\n  /**  Additional classes for notification drawer list item header. */\n  className?: string;\n  /**  Add custom icon for notification drawer list item header */\n  icon?: React.ReactNode;\n  /**  Notification drawer list item header screen reader title */\n  srTitle?: string;\n  /**  Notification drawer list item title */\n  title: string;\n  /**  Variant indicates the severity level */\n  variant?: 'success' | 'danger' | 'warning' | 'info' | 'default';\n  /** Truncate title to number of lines */\n  truncateTitle?: number;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\nexport const NotificationDrawerListItemHeader: React.FunctionComponent<NotificationDrawerListItemHeaderProps> = ({\n  children,\n  className = '',\n  icon = null,\n  srTitle,\n  title,\n  variant = 'default',\n  truncateTitle = 0,\n  tooltipPosition,\n  ...props\n}: NotificationDrawerListItemHeaderProps) => {\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Icon = variantIcons[variant];\n  const Title = (\n    <h2\n      {...(isTooltipVisible && { tabIndex: 0 })}\n      ref={titleRef}\n      className={css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)}\n    >\n      {srTitle && <span className={css(a11yStyles.screenReader)}>{srTitle}</span>}\n      {title}\n    </h2>\n  );\n\n  return (\n    <React.Fragment>\n      <div {...props} className={css(styles.notificationDrawerListItemHeader, className)}>\n        <span className={css(styles.notificationDrawerListItemHeaderIcon)}>{icon ? icon : <Icon />}</span>\n        {isTooltipVisible ? (\n          <Tooltip content={title} position={tooltipPosition}>\n            {Title}\n          </Tooltip>\n        ) : (\n          Title\n        )}\n      </div>\n      {children && <div className={css(styles.notificationDrawerListItemAction)}>{children}</div>}\n    </React.Fragment>\n  );\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';\n"]},"metadata":{},"sourceType":"module"}