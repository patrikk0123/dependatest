{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\nexport var isVariantIcon = function isVariantIcon(icon) {\n  return ['success', 'danger', 'warning', 'info', 'default'].includes(icon);\n};\nexport var ModalBoxTitle = function ModalBoxTitle(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      id = _a.id,\n      title = _a.title,\n      titleIconVariant = _a.titleIconVariant,\n      _a$titleLabel = _a.titleLabel,\n      titleLabel = _a$titleLabel === void 0 ? '' : _a$titleLabel,\n      props = __rest(_a, [\"className\", \"id\", \"title\", \"titleIconVariant\", \"titleLabel\"]);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      hasTooltip = _React$useState2[0],\n      setHasTooltip = _React$useState2[1];\n\n  var h1 = React.useRef();\n  var label = titleLabel || (isVariantIcon(titleIconVariant) ? \"\".concat(capitalize(titleIconVariant), \" alert:\") : titleLabel);\n  var variantIcons = {\n    success: React.createElement(CheckCircleIcon, null),\n    danger: React.createElement(ExclamationCircleIcon, null),\n    warning: React.createElement(ExclamationTriangleIcon, null),\n    info: React.createElement(InfoCircleIcon, null),\n    default: React.createElement(BellIcon, null)\n  };\n  var CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n  useIsomorphicLayoutEffect(function () {\n    setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n  }, []);\n  var content = React.createElement(\"h1\", Object.assign({\n    id: id,\n    ref: h1,\n    className: css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className)\n  }, props), titleIconVariant && React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleIcon)\n  }, isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : React.createElement(CustomIcon, null)), label && React.createElement(\"span\", {\n    className: css(accessibleStyles.screenReader)\n  }, label), React.createElement(\"span\", {\n    className: css(modalStyles.modalBoxTitleText)\n  }, title));\n  return hasTooltip ? React.createElement(Tooltip, {\n    content: title\n  }, content) : content;\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';","map":{"version":3,"mappings":"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","names":["React","modalStyles","css","accessibleStyles","capitalize","Tooltip","CheckCircleIcon","ExclamationCircleIcon","ExclamationTriangleIcon","InfoCircleIcon","BellIcon","useIsomorphicLayoutEffect","isVariantIcon","icon","includes","ModalBoxTitle","_a","className","id","title","titleIconVariant","titleLabel","props","__rest","useState","hasTooltip","setHasTooltip","h1","useRef","label","variantIcons","success","danger","warning","info","default","CustomIcon","current","offsetWidth","scrollWidth","content","ref","modalBoxTitle","modifiers","modalBoxTitleIcon","screenReader","modalBoxTitleText","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Modal/ModalBoxTitle.tsx"],"sourcesContent":["import * as React from 'react';\nimport modalStyles from '@patternfly/react-styles/css/components/ModalBox/modal-box';\nimport { css } from '@patternfly/react-styles';\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport { capitalize } from '../../helpers';\nimport { Tooltip } from '../Tooltip';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\n\nexport const isVariantIcon = (icon: any): icon is string =>\n  ['success', 'danger', 'warning', 'info', 'default'].includes(icon as string);\n\nexport interface ModalBoxTitleProps {\n  /** Content rendered inside the modal box header title. */\n  title: React.ReactNode;\n  /** Optional alert icon (or other) to show before the title of the Modal Header\n   * When the predefined alert types are used the default styling\n   * will be automatically applied */\n  titleIconVariant?: 'success' | 'danger' | 'warning' | 'info' | 'default' | React.ComponentType<any>;\n  /** Optional title label text for screen readers */\n  titleLabel?: string;\n  /** Additional classes added to the modal box header title. */\n  className?: string;\n  /** id of the modal box header title. */\n  id: string;\n}\n\nexport const ModalBoxTitle: React.FunctionComponent<ModalBoxTitleProps> = ({\n  className = '',\n  id,\n  title,\n  titleIconVariant,\n  titleLabel = '',\n  ...props\n}: ModalBoxTitleProps) => {\n  const [hasTooltip, setHasTooltip] = React.useState(false);\n  const h1 = React.useRef<HTMLHeadingElement>();\n  const label = titleLabel || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleLabel);\n  const variantIcons = {\n    success: <CheckCircleIcon />,\n    danger: <ExclamationCircleIcon />,\n    warning: <ExclamationTriangleIcon />,\n    info: <InfoCircleIcon />,\n    default: <BellIcon />\n  };\n  const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;\n\n  useIsomorphicLayoutEffect(() => {\n    setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);\n  }, []);\n\n  const content = (\n    <h1\n      id={id}\n      ref={h1}\n      className={css(modalStyles.modalBoxTitle, titleIconVariant && modalStyles.modifiers.icon, className)}\n      {...props}\n    >\n      {titleIconVariant && (\n        <span className={css(modalStyles.modalBoxTitleIcon)}>\n          {isVariantIcon(titleIconVariant) ? variantIcons[titleIconVariant] : <CustomIcon />}\n        </span>\n      )}\n      {label && <span className={css(accessibleStyles.screenReader)}>{label}</span>}\n      <span className={css(modalStyles.modalBoxTitleText)}>{title}</span>\n    </h1>\n  );\n\n  return hasTooltip ? <Tooltip content={title}>{content}</Tooltip> : content;\n};\nModalBoxTitle.displayName = 'ModalBoxTitle';\n"]},"metadata":{},"sourceType":"module"}