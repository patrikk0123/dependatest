{"ast":null,"code":"import getNodeName from '../dom-utils/getNodeName';\nimport { isHTMLElement } from '../dom-utils/instanceOf'; // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\n/**\n *\n */\n\nfunction applyStyles(_ref) {\n  let {\n    state\n  } = _ref;\n  Object.keys(state.elements).forEach(name => {\n    const style = state.styles[name] || {};\n    const attributes = state.attributes[name] || {};\n    const element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(name => {\n      const value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n/**\n *\n */\n\n\nfunction effect(_ref2) {\n  let {\n    state\n  } = _ref2;\n  const initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return () => {\n    Object.keys(state.elements).forEach(name => {\n      const element = state.elements[name];\n      const attributes = state.attributes[name] || {};\n      const styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      const style = styleProperties.reduce((style, property) => {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      } // Flow doesn't support to extend this property, but it's the most\n      // effective way to apply styles to an HTMLElement\n      // $FlowFixMe\n\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(attribute => {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n}\n\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect,\n  requires: ['computeStyles']\n};","map":{"version":3,"mappings":"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","names":["getNodeName","isHTMLElement","applyStyles","state","Object","keys","elements","forEach","name","style","styles","attributes","element","assign","value","removeAttribute","setAttribute","effect","initialStyles","popper","position","options","strategy","left","top","margin","arrow","reference","styleProperties","hasOwnProperty","reduce","property","attribute","enabled","phase","fn","requires"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/modifiers/applyStyles.ts"],"sourcesContent":["// @ts-nocheck\nimport { Modifier, ModifierArguments } from '../types';\nimport getNodeName from '../dom-utils/getNodeName';\nimport { isHTMLElement } from '../dom-utils/instanceOf';\n\n// This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\n/**\n *\n */\nfunction applyStyles({ state }: ModifierArguments<{}>) {\n  Object.keys(state.elements).forEach(name => {\n    const style = state.styles[name] || {};\n\n    const attributes = state.attributes[name] || {};\n    const element = state.elements[name];\n\n    // arrow is optional + virtual elements\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    }\n\n    // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe\n    Object.assign(element.style, style);\n\n    Object.keys(attributes).forEach(name => {\n      const value = attributes[name];\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\n/**\n *\n */\nfunction effect({ state }: ModifierArguments<{}>) {\n  const initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return () => {\n    Object.keys(state.elements).forEach(name => {\n      const element = state.elements[name];\n      const attributes = state.attributes[name] || {};\n\n      const styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);\n\n      // Set all values to an empty string to unset them\n      const style = styleProperties.reduce((style, property) => {\n        style[property] = '';\n        return style;\n      }, {});\n\n      // arrow is optional + virtual elements\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      // Flow doesn't support to extend this property, but it's the most\n      // effective way to apply styles to an HTMLElement\n      // $FlowFixMe\n      Object.assign(element.style, style);\n\n      Object.keys(attributes).forEach(attribute => {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport type ApplyStylesModifier = Modifier<'applyStyles', {}>;\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect,\n  requires: ['computeStyles']\n} as ApplyStylesModifier;\n"]},"metadata":{},"sourceType":"module"}