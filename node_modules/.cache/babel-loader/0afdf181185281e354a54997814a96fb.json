{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Spinner/spinner';\nimport { css } from '@patternfly/react-styles';\nexport var spinnerSize;\n\n(function (spinnerSize) {\n  spinnerSize[\"sm\"] = \"sm\";\n  spinnerSize[\"md\"] = \"md\";\n  spinnerSize[\"lg\"] = \"lg\";\n  spinnerSize[\"xl\"] = \"xl\";\n})(spinnerSize || (spinnerSize = {}));\n\nexport var Spinner = function Spinner(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$size = _a.size,\n      size = _a$size === void 0 ? 'xl' : _a$size,\n      _a$ariaValuetext = _a['aria-valuetext'],\n      ariaValueText = _a$ariaValuetext === void 0 ? 'Loading...' : _a$ariaValuetext,\n      _a$isSVG = _a.isSVG,\n      isSVG = _a$isSVG === void 0 ? false : _a$isSVG,\n      diameter = _a.diameter,\n      ariaLabel = _a['aria-label'],\n      ariaLabelledBy = _a['aria-labelledBy'],\n      props = __rest(_a, [\"className\", \"size\", 'aria-valuetext', \"isSVG\", \"diameter\", 'aria-label', 'aria-labelledBy']);\n\n  var Component = isSVG ? 'svg' : 'span';\n  return React.createElement(Component, Object.assign({\n    className: css(styles.spinner, styles.modifiers[size], className),\n    role: \"progressbar\",\n    \"aria-valuetext\": ariaValueText\n  }, isSVG && {\n    viewBox: '0 0 100 100'\n  }, diameter && {\n    style: {\n      '--pf-c-spinner--diameter': diameter\n    }\n  }, ariaLabel && {\n    'aria-label': ariaLabel\n  }, ariaLabelledBy && {\n    'aria-labelledBy': ariaLabelledBy\n  }, !ariaLabel && !ariaLabelledBy && {\n    'aria-label': 'Contents'\n  }, props), isSVG ? React.createElement(\"circle\", {\n    className: styles.spinnerPath,\n    cx: \"50\",\n    cy: \"50\",\n    r: \"45\",\n    fill: \"none\"\n  }) : React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: css(styles.spinnerClipper)\n  }), React.createElement(\"span\", {\n    className: css(styles.spinnerLeadBall)\n  }), React.createElement(\"span\", {\n    className: css(styles.spinnerTailBall)\n  })));\n};\nSpinner.displayName = 'Spinner';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,yDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA,WAAYC,WAAZ;;AAAA,WAAYA,WAAZ,EAAuB;EACrBA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,WAAW,KAAXA,WAAW,MAAvB;;AAwBA,OAAO,IAAMC,OAAO,GAA0C,SAAjDA,OAAiD,CAACC,EAAD,EAU3C;qBAFgBA,GANjCC;MAAAA,sCAAY;gBAMqBD,GALjCE;MAAAA,4BAAO;yBAK0BF,GAJjC;MAAkBG,8CAAgB;iBAIDH,GAHjCI;MAAAA,8BAAQ;MACRC,WAEiCL,GAFjCK;MACcC,YACmBN,GADjC;MACmBO,iBAAcP,GAAjC;MACGQ,QAAKC,WATqD,6FASrD;;EAER,IAAMC,SAAS,GAAGN,KAAK,GAAG,KAAH,GAAY,MAAnC;EAEA,OACET,oBAACe,SAAD,EAAUC;IACRV,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAACgB,OAAR,EAAiBhB,MAAM,CAACiB,SAAP,CAAiBX,IAAjB,CAAjB,EAAyCD,SAAzC,CADN;IAERa,IAAI,EAAC,aAFG;IAEU,kBACFX;EAHR,GAIHC,KAAK,IAAI;IAAEW,OAAO,EAAE;EAAX,CAJN,EAKHV,QAAQ,IAAI;IAAEW,KAAK,EAAE;MAAE,4BAA4BX;IAA9B;EAAT,CALT,EAMHC,SAAS,IAAI;IAAE,cAAcA;EAAhB,CANV,EAOHC,cAAc,IAAI;IAAE,mBAAmBA;EAArB,CAPf,EAQH,CAACD,SAAD,IAAc,CAACC,cAAf,IAAiC;IAAE,cAAc;EAAhB,CAR9B,EASJC,KATI,CAAV,EAWGJ,KAAK,GACJT;IAAQM,SAAS,EAAEL,MAAM,CAACqB,WAA1B;IAAuCC,EAAE,EAAC,IAA1C;IAA+CC,EAAE,EAAC,IAAlD;IAAuDC,CAAC,EAAC,IAAzD;IAA8DC,IAAI,EAAC;EAAnE,EADI,GAGJ1B,oBAACA,KAAK,CAAC2B,QAAP,EAAe,IAAf,EACE3B;IAAMM,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAAC2B,cAAR;EAApB,EADF,EAEE5B;IAAMM,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAAC4B,eAAR;EAApB,EAFF,EAGE7B;IAAMM,SAAS,EAAEJ,GAAG,CAACD,MAAM,CAAC6B,eAAR;EAApB,EAHF,CAdJ,CADF;AAuBD,CApCM;AAqCP1B,OAAO,CAAC2B,WAAR,GAAsB,SAAtB","names":["React","styles","css","spinnerSize","Spinner","_a","className","size","ariaValueText","isSVG","diameter","ariaLabel","ariaLabelledBy","props","__rest","Component","Object","spinner","modifiers","role","viewBox","style","spinnerPath","cx","cy","r","fill","Fragment","spinnerClipper","spinnerLeadBall","spinnerTailBall","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Spinner/Spinner.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Spinner/spinner';\nimport { css } from '@patternfly/react-styles';\n\nexport enum spinnerSize {\n  sm = 'sm',\n  md = 'md',\n  lg = 'lg',\n  xl = 'xl'\n}\n\nexport interface SpinnerProps extends Omit<React.HTMLProps<HTMLSpanElement>, 'size'> {\n  /** Additional classes added to the Spinner. */\n  className?: string;\n  /** Size variant of progress. */\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  /** Text describing that current loading status or progress */\n  'aria-valuetext'?: string;\n  /** Whether to use an SVG (new) rather than a span (old) */\n  isSVG?: boolean;\n  /** Diameter of spinner set as CSS variable */\n  diameter?: string;\n  /** Accessible label to describe what is loading */\n  'aria-label'?: string;\n  /** Id of element which describes what is being loaded */\n  'aria-labelledBy'?: string;\n}\n\nexport const Spinner: React.FunctionComponent<SpinnerProps> = ({\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  className = '',\n  size = 'xl',\n  'aria-valuetext': ariaValueText = 'Loading...',\n  isSVG = false,\n  diameter,\n  'aria-label': ariaLabel,\n  'aria-labelledBy': ariaLabelledBy,\n  ...props\n}: SpinnerProps) => {\n  const Component = isSVG ? 'svg' : ('span' as any);\n\n  return (\n    <Component\n      className={css(styles.spinner, styles.modifiers[size], className)}\n      role=\"progressbar\"\n      aria-valuetext={ariaValueText}\n      {...(isSVG && { viewBox: '0 0 100 100' })}\n      {...(diameter && { style: { '--pf-c-spinner--diameter': diameter } })}\n      {...(ariaLabel && { 'aria-label': ariaLabel })}\n      {...(ariaLabelledBy && { 'aria-labelledBy': ariaLabelledBy })}\n      {...(!ariaLabel && !ariaLabelledBy && { 'aria-label': 'Contents' })}\n      {...props}\n    >\n      {isSVG ? (\n        <circle className={styles.spinnerPath} cx=\"50\" cy=\"50\" r=\"45\" fill=\"none\" />\n      ) : (\n        <React.Fragment>\n          <span className={css(styles.spinnerClipper)} />\n          <span className={css(styles.spinnerLeadBall)} />\n          <span className={css(styles.spinnerTailBall)} />\n        </React.Fragment>\n      )}\n    </Component>\n  );\n};\nSpinner.displayName = 'Spinner';\n"]},"metadata":{},"sourceType":"module"}