{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Button } from '../Button';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { FindRefWrapper } from '../../helpers/Popper/FindRefWrapper';\nexport var PopoverCloseButton = function PopoverCloseButton(_a) {\n  var _a$onClose = _a.onClose,\n      onClose = _a$onClose === void 0 ? function () {\n    return undefined;\n  } : _a$onClose,\n      props = __rest(_a, [\"onClose\"]);\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      closeButtonElement = _React$useState2[0],\n      setCloseButtonElement = _React$useState2[1];\n\n  React.useEffect(function () {\n    closeButtonElement && closeButtonElement.addEventListener('click', onClose, false);\n    return function () {\n      closeButtonElement && closeButtonElement.removeEventListener('click', onClose, false);\n    };\n  }, [closeButtonElement]);\n  return React.createElement(FindRefWrapper, {\n    onFoundRef: function onFoundRef(foundRef) {\n      return setCloseButtonElement(foundRef);\n    }\n  }, React.createElement(Button, Object.assign({\n    variant: \"plain\",\n    \"aria-label\": true\n  }, props, {\n    style: {\n      pointerEvents: 'auto'\n    }\n  }), React.createElement(TimesIcon, null)));\n};\nPopoverCloseButton.displayName = 'PopoverCloseButton';","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,SAAP,MAAsB,mDAAtB;AACA,SAASC,cAAT,QAA+B,qCAA/B;AAEA,OAAO,IAAMC,kBAAkB,GAAqD,SAAvEA,kBAAuE,CAACC,EAAD,EAGtD;mBAFKA,GAAjCC;MAAAA,kCAAU;IAAA,OAAMC,SAAN;EAAA;MACPC,QAAKC,WAF2E,WAE3E;;EAER,sBAAoDT,KAAK,CAACU,QAAN,CAAe,IAAf,CAApD;EAAA;EAAA,IAAOC,kBAAP;EAAA,IAA2BC,qBAA3B;;EACAZ,KAAK,CAACa,SAAN,CAAgB,YAAK;IACnBF,kBAAkB,IAAIA,kBAAkB,CAACG,gBAAnB,CAAoC,OAApC,EAA6CR,OAA7C,EAAsD,KAAtD,CAAtB;IACA,OAAO,YAAK;MACVK,kBAAkB,IAAIA,kBAAkB,CAACI,mBAAnB,CAAuC,OAAvC,EAAgDT,OAAhD,EAAyD,KAAzD,CAAtB;IACD,CAFD;EAGD,CALD,EAKG,CAACK,kBAAD,CALH;EAMA,OACEX,oBAACG,cAAD,EAAe;IAACa,UAAU,EAAE,oBAACC,QAAD;MAAA,OAAmBL,qBAAqB,CAACK,QAAD,CAAxC;IAAA;EAAb,CAAf,EACEjB,oBAACC,MAAD,EAAOiB;IAACC,OAAO,EAAC,OAAT;IAAgB;EAAhB,GAAgCX,KAAhC,EAAqC;IAAEY,KAAK,EAAE;MAAEC,aAAa,EAAE;IAAjB;EAAT,CAArC,CAAP,EACErB,oBAACE,SAAD,EAAU,IAAV,CADF,CADF,CADF;AAOD,CAlBM;AAmBPE,kBAAkB,CAACkB,WAAnB,GAAiC,oBAAjC","names":["React","Button","TimesIcon","FindRefWrapper","PopoverCloseButton","_a","onClose","undefined","props","__rest","useState","closeButtonElement","setCloseButtonElement","useEffect","addEventListener","removeEventListener","onFoundRef","foundRef","Object","variant","style","pointerEvents","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Popover/PopoverCloseButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Button } from '../Button';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { FindRefWrapper } from '../../helpers/Popper/FindRefWrapper';\n\nexport const PopoverCloseButton: React.FunctionComponent<PopoverCloseButtonProps> = ({\n  onClose = () => undefined as void,\n  ...props\n}: PopoverCloseButtonProps) => {\n  const [closeButtonElement, setCloseButtonElement] = React.useState(null);\n  React.useEffect(() => {\n    closeButtonElement && closeButtonElement.addEventListener('click', onClose, false);\n    return () => {\n      closeButtonElement && closeButtonElement.removeEventListener('click', onClose, false);\n    };\n  }, [closeButtonElement]);\n  return (\n    <FindRefWrapper onFoundRef={(foundRef: any) => setCloseButtonElement(foundRef)}>\n      <Button variant=\"plain\" aria-label {...props} style={{ pointerEvents: 'auto' }}>\n        <TimesIcon />\n      </Button>\n    </FindRefWrapper>\n  );\n};\nPopoverCloseButton.displayName = 'PopoverCloseButton';\n\nexport interface PopoverCloseButtonProps {\n  /** PopoverCloseButton onClose function */\n  onClose?: (event: any) => void;\n  /** Aria label for the Close button */\n  'aria-label': string;\n}\n"]},"metadata":{},"sourceType":"module"}