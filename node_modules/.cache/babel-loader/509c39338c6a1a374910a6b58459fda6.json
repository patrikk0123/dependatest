{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nexport class ContextSelectorToggle extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.toggle = React.createRef();\n\n    this.componentDidMount = () => {\n      document.addEventListener('mousedown', this.onDocClick);\n      document.addEventListener('touchstart', this.onDocClick);\n      document.addEventListener('keydown', this.onEscPress);\n    };\n\n    this.componentWillUnmount = () => {\n      document.removeEventListener('mousedown', this.onDocClick);\n      document.removeEventListener('touchstart', this.onDocClick);\n      document.removeEventListener('keydown', this.onEscPress);\n    };\n\n    this.onDocClick = event => {\n      const {\n        isOpen,\n        parentRef,\n        onToggle\n      } = this.props;\n\n      if (isOpen && (parentRef === null || parentRef === void 0 ? void 0 : parentRef.current) && !parentRef.current.contains(event.target)) {\n        onToggle(null, false);\n        this.toggle.current.focus();\n      }\n    };\n\n    this.onEscPress = event => {\n      const {\n        isOpen,\n        onToggle\n      } = this.props;\n      const keyCode = event.keyCode || event.which;\n\n      if (isOpen && keyCode === KEY_CODES.ESCAPE_KEY) {\n        onToggle(null, false);\n        this.toggle.current.focus();\n      }\n    };\n\n    this.onKeyDown = event => {\n      const {\n        isOpen,\n        onToggle,\n        onEnter\n      } = this.props;\n\n      if (event.keyCode === KEY_CODES.TAB && !isOpen || event.key !== KEY_CODES.ENTER) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if ((event.keyCode === KEY_CODES.TAB || event.keyCode === KEY_CODES.ENTER || event.key !== KEY_CODES.SPACE) && isOpen) {\n        onToggle(null, !isOpen);\n      } else if ((event.keyCode === KEY_CODES.ENTER || event.key === ' ') && !isOpen) {\n        onToggle(null, !isOpen);\n        onEnter();\n      }\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      toggleText,\n      isOpen,\n      onToggle,\n      id,\n      isPlain,\n      isText,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      onEnter,\n      parentRef\n    } = _a,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, [\"className\", \"toggleText\", \"isOpen\", \"onToggle\", \"id\", \"isPlain\", \"isText\", \"isActive\", \"onEnter\", \"parentRef\"]);\n\n    return React.createElement(\"button\", Object.assign({}, props, {\n      id: id,\n      ref: this.toggle,\n      className: css(styles.contextSelectorToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, className),\n      type: \"button\",\n      onClick: event => onToggle(event, !isOpen),\n      \"aria-expanded\": isOpen,\n      onKeyDown: this.onKeyDown\n    }), React.createElement(\"span\", {\n      className: css(styles.contextSelectorToggleText)\n    }, toggleText), React.createElement(\"span\", {\n      className: css(styles.contextSelectorToggleIcon)\n    }, React.createElement(CaretDownIcon, {\n      \"aria-hidden\": true\n    })));\n  }\n\n}\nContextSelectorToggle.displayName = 'ContextSelectorToggle';\nContextSelectorToggle.defaultProps = {\n  className: '',\n  toggleText: '',\n  isOpen: false,\n  onEnter: () => undefined,\n  parentRef: null,\n  isActive: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: (event, value) => undefined\n};","map":{"version":3,"mappings":"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","names":["React","CaretDownIcon","styles","css","KEY_CODES","ContextSelectorToggle","Component","constructor","createRef","document","addEventListener","onDocClick","onEscPress","removeEventListener","event","isOpen","parentRef","onToggle","props","current","contains","target","toggle","focus","keyCode","which","ESCAPE_KEY","onEnter","TAB","key","ENTER","preventDefault","SPACE","render","_a","className","toggleText","id","isPlain","isText","isActive","ref","contextSelectorToggle","modifiers","active","plain","text","type","onClick","onKeyDown","contextSelectorToggleText","contextSelectorToggleIcon","undefined","value"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ContextSelector/ContextSelectorToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ContextSelectorToggleProps {\n  /** HTML ID of toggle */\n  id: string;\n  /** Classes applied to root element of toggle */\n  className?: string;\n  /** Text that appears in the Context Selector Toggle */\n  toggleText?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (event: any, value: boolean) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n}\n\nexport class ContextSelectorToggle extends React.Component<ContextSelectorToggleProps> {\n  static displayName = 'ContextSelectorToggle';\n  static defaultProps: PickOptional<ContextSelectorToggleProps> = {\n    className: '',\n    toggleText: '',\n    isOpen: false,\n    onEnter: () => undefined as any,\n    parentRef: null as any,\n    isActive: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (event: any, value: boolean) => undefined as any\n  };\n\n  toggle: React.RefObject<HTMLButtonElement> = React.createRef();\n\n  componentDidMount = () => {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  };\n\n  onDocClick = (event: any) => {\n    const { isOpen, parentRef, onToggle } = this.props;\n    if (isOpen && parentRef?.current && !parentRef.current.contains(event.target)) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onEscPress = (event: any) => {\n    const { isOpen, onToggle } = this.props;\n    const keyCode = event.keyCode || event.which;\n    if (isOpen && keyCode === KEY_CODES.ESCAPE_KEY) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onKeyDown = (event: any) => {\n    const { isOpen, onToggle, onEnter } = this.props;\n    if ((event.keyCode === KEY_CODES.TAB && !isOpen) || event.key !== KEY_CODES.ENTER) {\n      return;\n    }\n    event.preventDefault();\n    if (\n      (event.keyCode === KEY_CODES.TAB || event.keyCode === KEY_CODES.ENTER || event.key !== KEY_CODES.SPACE) &&\n      isOpen\n    ) {\n      onToggle(null, !isOpen);\n    } else if ((event.keyCode === KEY_CODES.ENTER || event.key === ' ') && !isOpen) {\n      onToggle(null, !isOpen);\n      onEnter();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      toggleText,\n      isOpen,\n      onToggle,\n      id,\n      isPlain,\n      isText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      onEnter,\n      parentRef,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    return (\n      <button\n        {...props}\n        id={id}\n        ref={this.toggle}\n        className={css(\n          styles.contextSelectorToggle,\n          isActive && styles.modifiers.active,\n          isPlain && styles.modifiers.plain,\n          isText && styles.modifiers.text,\n          className\n        )}\n        type=\"button\"\n        onClick={event => onToggle(event, !isOpen)}\n        aria-expanded={isOpen}\n        onKeyDown={this.onKeyDown}\n      >\n        <span className={css(styles.contextSelectorToggleText)}>{toggleText}</span>\n        <span className={css(styles.contextSelectorToggleIcon)}>\n          <CaretDownIcon aria-hidden />\n        </span>\n      </button>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}