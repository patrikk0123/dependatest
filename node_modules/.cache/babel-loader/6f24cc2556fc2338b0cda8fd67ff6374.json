{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport scrollStyles from '@patternfly/react-styles/css/components/Table/table-scrollable';\nimport { info } from '../Table/utils/decorators/info';\nimport { sortable, sortableFavorites } from '../Table/utils/decorators/sortable';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { cellWidth } from './../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\n\nconst ThBase = _a => {\n  var {\n    children,\n    className,\n    component = 'th',\n    dataLabel,\n    scope = 'col',\n    textCenter = false,\n    sort = null,\n    modifier,\n    select = null,\n    expand: collapse = null,\n    tooltip = '',\n    onMouseEnter: onMouseEnterProp = () => {},\n    width,\n    visibility,\n    innerRef,\n    info: infoProps,\n    isStickyColumn = false,\n    hasRightBorder = false,\n    stickyMinWidth = '120px',\n    stickyLeftOffset,\n    isSubheader = false\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"component\", \"dataLabel\", \"scope\", \"textCenter\", \"sort\", \"modifier\", \"select\", \"expand\", \"tooltip\", \"onMouseEnter\", \"width\", \"visibility\", \"innerRef\", \"info\", \"isStickyColumn\", \"hasRightBorder\", \"stickyMinWidth\", \"stickyLeftOffset\", \"isSubheader\"]);\n\n  const [showTooltip, setShowTooltip] = React.useState(false);\n\n  const onMouseEnter = event => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      !showTooltip && setShowTooltip(true);\n    } else {\n      showTooltip && setShowTooltip(false);\n    }\n\n    onMouseEnterProp(event);\n  };\n\n  let sortParams = null;\n\n  if (sort) {\n    if (sort.isFavorites) {\n      sortParams = sortableFavorites({\n        onSort: sort === null || sort === void 0 ? void 0 : sort.onSort,\n        columnIndex: sort.columnIndex,\n        sortBy: sort.sortBy\n      })();\n    } else {\n      sortParams = sortable(children, {\n        columnIndex: sort.columnIndex,\n        column: {\n          extraParams: {\n            sortBy: sort.sortBy,\n            onSort: sort === null || sort === void 0 ? void 0 : sort.onSort\n          }\n        }\n      });\n    }\n  }\n\n  const selectParams = select ? selectable(children, {\n    column: {\n      extraParams: {\n        onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n        selectVariant: 'checkbox',\n        allRowsSelected: select.isSelected,\n        isHeaderSelectDisabled: !!select.isHeaderSelectDisabled\n      }\n    }\n  }) : null;\n  const collapseParams = collapse ? collapsible(children, {\n    column: {\n      extraParams: {\n        onCollapse: collapse === null || collapse === void 0 ? void 0 : collapse.onToggle,\n        allRowsExpanded: !collapse.areAllExpanded,\n        collapseAllAriaLabel: ''\n      }\n    }\n  }) : null;\n  const widthParams = width ? cellWidth(width)() : null;\n  const visibilityParams = visibility ? classNames(...visibility.map(vis => Visibility[vis]))() : null;\n  let transformedChildren = (sortParams === null || sortParams === void 0 ? void 0 : sortParams.children) || (selectParams === null || selectParams === void 0 ? void 0 : selectParams.children) || (collapseParams === null || collapseParams === void 0 ? void 0 : collapseParams.children) || children; // info can wrap other transformedChildren\n\n  let infoParams = null;\n\n  if (infoProps) {\n    infoParams = info(infoProps)(transformedChildren);\n    transformedChildren = infoParams.children;\n  }\n\n  const merged = mergeProps(sortParams, selectParams, collapseParams, widthParams, visibilityParams, infoParams);\n\n  const {\n    // ignore the merged children since we transform them ourselves so we can wrap it with info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    children: mergedChildren = null,\n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null,\n    className: mergedClassName = '',\n    component: MergedComponent = component\n  } = merged,\n        mergedProps = __rest(merged, [\"children\", \"isVisible\", \"className\", \"component\"]);\n\n  const cell = React.createElement(MergedComponent, Object.assign({\n    \"data-label\": dataLabel,\n    onMouseEnter: tooltip !== null ? onMouseEnter : onMouseEnterProp,\n    scope: component === 'th' && children ? scope : null,\n    ref: innerRef,\n    className: css(className, textCenter && styles.modifiers.center, isSubheader && styles.tableSubhead, isStickyColumn && scrollStyles.tableStickyColumn, hasRightBorder && scrollStyles.modifiers.borderRight, modifier && styles.modifiers[modifier], mergedClassName)\n  }, mergedProps, props, isStickyColumn && {\n    style: Object.assign({\n      '--pf-c-table__sticky-column--MinWidth': stickyMinWidth ? stickyMinWidth : undefined,\n      '--pf-c-table__sticky-column--Left': stickyLeftOffset ? stickyLeftOffset : undefined\n    }, props.style)\n  }), transformedChildren);\n  const canDefault = tooltip === '' ? typeof children === 'string' : true;\n  return tooltip !== null && canDefault && showTooltip ? React.createElement(Tooltip, {\n    content: tooltip || tooltip === '' && children,\n    isVisible: true\n  }, cell) : cell;\n};\n\nexport const Th = React.forwardRef((props, ref) => React.createElement(ThBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTh.displayName = 'Th';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,qDAAnB;AACA,OAAOC,YAAP,MAAyB,gEAAzB;AACA,SAASC,IAAT,QAAqB,gCAArB;AACA,SAASC,QAAT,EAAmBC,iBAAnB,QAA4C,oCAA5C;AACA,SAASC,UAAT,QAA2B,sCAA3B;AACA,SAASC,WAAT,QAA4B,uCAA5B;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,wCAAvC;AAEA,SAASC,UAAT,QAA2B,2BAA3B;AAEA,SAASC,OAAT,QAAwB,4DAAxB;;AA2CA,MAAMC,MAAM,GAAsCC,EAAD,IAuBnC;MAvBoC;IAChDC,QADgD;IAEhDC,SAFgD;IAGhDC,SAAS,GAAG,IAHoC;IAIhDC,SAJgD;IAKhDC,KAAK,GAAG,KALwC;IAMhDC,UAAU,GAAG,KANmC;IAOhDC,IAAI,GAAG,IAPyC;IAQhDC,QARgD;IAShDC,MAAM,GAAG,IATuC;IAUhDC,MAAM,EAAEC,QAAQ,GAAG,IAV6B;IAWhDC,OAAO,GAAG,EAXsC;IAYhDC,YAAY,EAAEC,gBAAgB,GAAG,MAAK,CAAG,CAZO;IAahDC,KAbgD;IAchDC,UAdgD;IAehDC,QAfgD;IAgBhD5B,IAAI,EAAE6B,SAhB0C;IAiBhDC,cAAc,GAAG,KAjB+B;IAkBhDC,cAAc,GAAG,KAlB+B;IAmBhDC,cAAc,GAAG,OAnB+B;IAoBhDC,gBApBgD;IAqBhDC,WAAW,GAAG;EArBkC,IAqB7BvB;MAChBwB,KAAK,cAtBwC,iRAsBxC;;EAER,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCzC,KAAK,CAAC0C,QAAN,CAAe,KAAf,CAAtC;;EACA,MAAMd,YAAY,GAAIe,KAAD,IAAe;IAClC,IAAIA,KAAK,CAACC,MAAN,CAAaC,WAAb,GAA2BF,KAAK,CAACC,MAAN,CAAaE,WAA5C,EAAyD;MACvD,CAACN,WAAD,IAAgBC,cAAc,CAAC,IAAD,CAA9B;IACD,CAFD,MAEO;MACLD,WAAW,IAAIC,cAAc,CAAC,KAAD,CAA7B;IACD;;IACDZ,gBAAgB,CAACc,KAAD,CAAhB;EACD,CAPD;;EAQA,IAAII,UAAU,GAAG,IAAjB;;EACA,IAAIzB,IAAJ,EAAU;IACR,IAAIA,IAAI,CAAC0B,WAAT,EAAsB;MACpBD,UAAU,GAAGzC,iBAAiB,CAAC;QAC7B2C,MAAM,EAAE3B,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAE2B,MADe;QAE7BC,WAAW,EAAE5B,IAAI,CAAC4B,WAFW;QAG7BC,MAAM,EAAE7B,IAAI,CAAC6B;MAHgB,CAAD,CAAjB,EAAb;IAKD,CAND,MAMO;MACLJ,UAAU,GAAG1C,QAAQ,CAACW,QAAD,EAAkC;QACrDkC,WAAW,EAAE5B,IAAI,CAAC4B,WADmC;QAErDE,MAAM,EAAE;UACNC,WAAW,EAAE;YACXF,MAAM,EAAE7B,IAAI,CAAC6B,MADF;YAEXF,MAAM,EAAE3B,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAE2B;UAFH;QADP;MAF6C,CAAlC,CAArB;IASD;EACF;;EACD,MAAMK,YAAY,GAAG9B,MAAM,GACvBjB,UAAU,CAACS,QAAD,EAAkC;IAC1CoC,MAAM,EAAE;MACNC,WAAW,EAAE;QACXE,QAAQ,EAAE/B,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAE+B,QADP;QAEXC,aAAa,EAAE,UAFJ;QAGXC,eAAe,EAAEjC,MAAM,CAACkC,UAHb;QAIXC,sBAAsB,EAAE,CAAC,CAACnC,MAAM,CAACmC;MAJtB;IADP;EADkC,CAAlC,CADa,GAWvB,IAXJ;EAYA,MAAMC,cAAc,GAAGlC,QAAQ,GAC3BlB,WAAW,CAACQ,QAAD,EAAkC;IAC3CoC,MAAM,EAAE;MACNC,WAAW,EAAE;QACXQ,UAAU,EAAEnC,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAEoC,QADX;QAEXC,eAAe,EAAE,CAACrC,QAAQ,CAACsC,cAFhB;QAGXC,oBAAoB,EAAE;MAHX;IADP;EADmC,CAAlC,CADgB,GAU3B,IAVJ;EAWA,MAAMC,WAAW,GAAGpC,KAAK,GAAGrB,SAAS,CAACqB,KAAD,CAAT,EAAH,GAAwB,IAAjD;EACA,MAAMqC,gBAAgB,GAAGpC,UAAU,GAC/BpB,UAAU,CAAC,GAAGoB,UAAU,CAACqC,GAAX,CAAgBC,GAAD,IAA4B3D,UAAU,CAAC2D,GAAD,CAArD,CAAJ,CAAV,EAD+B,GAE/B,IAFJ;EAGA,IAAIC,mBAAmB,GAAG,WAAU,SAAV,cAAU,WAAV,GAAU,MAAV,aAAU,CAAEtD,QAAZ,MAAwBsC,YAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEtC,QAAtC,MAAkD4C,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAE5C,QAAlE,KAA8EA,QAAxG,CAzDY,CA0DZ;;EACA,IAAIuD,UAAU,GAAG,IAAjB;;EACA,IAAItC,SAAJ,EAAe;IACbsC,UAAU,GAAGnE,IAAI,CAAC6B,SAAD,CAAJ,CAAgBqC,mBAAhB,CAAb;IACAA,mBAAmB,GAAGC,UAAU,CAACvD,QAAjC;EACD;;EACD,MAAMwD,MAAM,GAAG5D,UAAU,CAACmC,UAAD,EAAaO,YAAb,EAA2BM,cAA3B,EAA2CM,WAA3C,EAAwDC,gBAAxD,EAA0EI,UAA1E,CAAzB;;EACA,MAAM;IACJ;IACA;IACAvD,QAAQ,EAAEyD,cAAc,GAAG,IAHvB;IAIJ;IACA;IACAC,SAAS,GAAG,IANR;IAOJzD,SAAS,EAAE0D,eAAe,GAAG,EAPzB;IAQJzD,SAAS,EAAE0D,eAAe,GAAG1D;EARzB,IAUFsD,MAVJ;EAAA,MASKK,WAAW,UACZL,MADY,EATV,mDASU,CAThB;;EAYA,MAAMM,IAAI,GACR9E,oBAAC4E,eAAD,EAAgBG;IAAA,cACF5D,SADE;IAEdS,YAAY,EAAED,OAAO,KAAK,IAAZ,GAAmBC,YAAnB,GAAkCC,gBAFlC;IAGdT,KAAK,EAAEF,SAAS,KAAK,IAAd,IAAsBF,QAAtB,GAAiCI,KAAjC,GAAyC,IAHlC;IAId4D,GAAG,EAAEhD,QAJS;IAKdf,SAAS,EAAEhB,GAAG,CACZgB,SADY,EAEZI,UAAU,IAAInB,MAAM,CAAC+E,SAAP,CAAiBC,MAFnB,EAGZ5C,WAAW,IAAIpC,MAAM,CAACiF,YAHV,EAIZjD,cAAc,IAAI/B,YAAY,CAACiF,iBAJnB,EAKZjD,cAAc,IAAIhC,YAAY,CAAC8E,SAAb,CAAuBI,WAL7B,EAMZ9D,QAAQ,IAAIrB,MAAM,CAAC+E,SAAP,CAAiB1D,QAAjB,CANA,EAOZoD,eAPY;EALA,GAcVE,WAdU,EAeVtC,KAfU,EAgBTL,cAAc,IAAI;IACrBoD,KAAK,EAAEP;MACL,yCAAyC3C,cAAc,GAAGA,cAAH,GAAoBmD,SADtE;MAEL,qCAAqClD,gBAAgB,GAAGA,gBAAH,GAAsBkD;IAFtE,GAGFhD,KAAK,CAAC+C,KAHJ;EADc,CAhBT,CAAhB,EAwBGhB,mBAxBH,CADF;EA6BA,MAAMkB,UAAU,GAAG7D,OAAO,KAAK,EAAZ,GAAiB,OAAOX,QAAP,KAAoB,QAArC,GAAgD,IAAnE;EACA,OAAOW,OAAO,KAAK,IAAZ,IAAoB6D,UAApB,IAAkChD,WAAlC,GACLxC,oBAACa,OAAD,EAAQ;IAAC4E,OAAO,EAAE9D,OAAO,IAAKA,OAAO,KAAK,EAAZ,IAAkBX,QAAxC;IAAmD0D,SAAS;EAA5D,CAAR,EACGI,IADH,CADK,GAKLA,IALF;AAOD,CAzID;;AA2IA,OAAO,MAAMY,EAAE,GAAG1F,KAAK,CAAC2F,UAAN,CAAiB,CAACpD,KAAD,EAAiByC,GAAjB,KACjChF,oBAACc,MAAD,EAAOiE,kBAAKxC,KAAL,EAAU;EAAEP,QAAQ,EAAEgD;AAAZ,CAAV,CAAP,CADgB,CAAX;AAGPU,EAAE,CAACE,WAAH,GAAiB,IAAjB","names":["React","css","styles","scrollStyles","info","sortable","sortableFavorites","selectable","collapsible","cellWidth","Visibility","classNames","mergeProps","Tooltip","ThBase","_a","children","className","component","dataLabel","scope","textCenter","sort","modifier","select","expand","collapse","tooltip","onMouseEnter","onMouseEnterProp","width","visibility","innerRef","infoProps","isStickyColumn","hasRightBorder","stickyMinWidth","stickyLeftOffset","isSubheader","props","showTooltip","setShowTooltip","useState","event","target","offsetWidth","scrollWidth","sortParams","isFavorites","onSort","columnIndex","sortBy","column","extraParams","selectParams","onSelect","selectVariant","allRowsSelected","isSelected","isHeaderSelectDisabled","collapseParams","onCollapse","onToggle","allRowsExpanded","areAllExpanded","collapseAllAriaLabel","widthParams","visibilityParams","map","vis","transformedChildren","infoParams","merged","mergedChildren","isVisible","mergedClassName","MergedComponent","mergedProps","cell","Object","ref","modifiers","center","tableSubhead","tableStickyColumn","borderRight","style","undefined","canDefault","content","Th","forwardRef","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/TableComposable/Th.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport scrollStyles from '@patternfly/react-styles/css/components/Table/table-scrollable';\nimport { info } from '../Table/utils/decorators/info';\nimport { sortable, sortableFavorites } from '../Table/utils/decorators/sortable';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { cellWidth } from './../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { ThInfoType, ThSelectType, ThExpandType, ThSortType, formatterValueType } from '../Table/base/types';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { IVisibility } from '../Table/utils/decorators/classNames';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { BaseCellProps } from './TableComposable';\nimport { IFormatterValueType, IColumn } from '../Table/TableTypes';\n\nexport interface ThProps\n  extends BaseCellProps,\n    Omit<React.HTMLProps<HTMLTableHeaderCellElement>, 'onSelect' | 'width'> {\n  /**\n   * The column header the cell corresponds to. Applicable when this component is used as a direct child to <Tr>.\n   * This attribute replaces table header in mobile viewport. It is rendered by ::before pseudo element.\n   */\n  dataLabel?: string;\n  /** Renders a checkbox select so that all row checkboxes can be selected/deselected */\n  select?: ThSelectType;\n  /** Renders a chevron so that all row chevrons can be expanded/collapsed */\n  expand?: ThExpandType;\n  /** Formats the header so that its column will be sortable */\n  sort?: ThSortType;\n  /**\n   * Tooltip to show on the header cell\n   * Note: If the header cell is truncated and has simple string content, it will already attempt to display the header text\n   * If you want to show a tooltip that differs from the header text, you can set it here\n   * To disable it completely you can set it to null\n   */\n  tooltip?: React.ReactNode;\n  /** Callback on mouse enter */\n  onMouseEnter?: (event: any) => void;\n  /** Adds tooltip/popover info button */\n  info?: ThInfoType;\n  /** Adds scope to the column to associate header cells with data cells*/\n  scope?: string;\n  /** Indicates the header column should be sticky */\n  isStickyColumn?: boolean;\n  /** Adds a border to the right side of the cell */\n  hasRightBorder?: boolean;\n  /** Minimum width for a sticky column */\n  stickyMinWidth?: string;\n  /** Left offset of a sticky column. This will typically be equal to the combined value set by stickyMinWidth of any sticky columns that precede the current sticky column. */\n  stickyLeftOffset?: string;\n  /** Indicates the <th> is part of a subheader of a nested header */\n  isSubheader?: boolean;\n}\n\nconst ThBase: React.FunctionComponent<ThProps> = ({\n  children,\n  className,\n  component = 'th',\n  dataLabel,\n  scope = 'col',\n  textCenter = false,\n  sort = null,\n  modifier,\n  select = null,\n  expand: collapse = null,\n  tooltip = '',\n  onMouseEnter: onMouseEnterProp = () => {},\n  width,\n  visibility,\n  innerRef,\n  info: infoProps,\n  isStickyColumn = false,\n  hasRightBorder = false,\n  stickyMinWidth = '120px',\n  stickyLeftOffset,\n  isSubheader = false,\n  ...props\n}: ThProps) => {\n  const [showTooltip, setShowTooltip] = React.useState(false);\n  const onMouseEnter = (event: any) => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      !showTooltip && setShowTooltip(true);\n    } else {\n      showTooltip && setShowTooltip(false);\n    }\n    onMouseEnterProp(event);\n  };\n  let sortParams = null;\n  if (sort) {\n    if (sort.isFavorites) {\n      sortParams = sortableFavorites({\n        onSort: sort?.onSort,\n        columnIndex: sort.columnIndex,\n        sortBy: sort.sortBy\n      })();\n    } else {\n      sortParams = sortable(children as IFormatterValueType, {\n        columnIndex: sort.columnIndex,\n        column: {\n          extraParams: {\n            sortBy: sort.sortBy,\n            onSort: sort?.onSort\n          }\n        } as IColumn\n      });\n    }\n  }\n  const selectParams = select\n    ? selectable(children as IFormatterValueType, {\n        column: {\n          extraParams: {\n            onSelect: select?.onSelect,\n            selectVariant: 'checkbox',\n            allRowsSelected: select.isSelected,\n            isHeaderSelectDisabled: !!select.isHeaderSelectDisabled\n          }\n        }\n      })\n    : null;\n  const collapseParams = collapse\n    ? collapsible(children as IFormatterValueType, {\n        column: {\n          extraParams: {\n            onCollapse: collapse?.onToggle,\n            allRowsExpanded: !collapse.areAllExpanded,\n            collapseAllAriaLabel: ''\n          }\n        }\n      })\n    : null;\n  const widthParams = width ? cellWidth(width)() : null;\n  const visibilityParams = visibility\n    ? classNames(...visibility.map((vis: keyof IVisibility) => Visibility[vis]))()\n    : null;\n  let transformedChildren = sortParams?.children || selectParams?.children || collapseParams?.children || children;\n  // info can wrap other transformedChildren\n  let infoParams = null;\n  if (infoProps) {\n    infoParams = info(infoProps)(transformedChildren as formatterValueType);\n    transformedChildren = infoParams.children;\n  }\n  const merged = mergeProps(sortParams, selectParams, collapseParams, widthParams, visibilityParams, infoParams);\n  const {\n    // ignore the merged children since we transform them ourselves so we can wrap it with info\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    children: mergedChildren = null,\n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null,\n    className: mergedClassName = '',\n    component: MergedComponent = component,\n    ...mergedProps\n  } = merged;\n\n  const cell = (\n    <MergedComponent\n      data-label={dataLabel}\n      onMouseEnter={tooltip !== null ? onMouseEnter : onMouseEnterProp}\n      scope={component === 'th' && children ? scope : null}\n      ref={innerRef}\n      className={css(\n        className,\n        textCenter && styles.modifiers.center,\n        isSubheader && styles.tableSubhead,\n        isStickyColumn && scrollStyles.tableStickyColumn,\n        hasRightBorder && scrollStyles.modifiers.borderRight,\n        modifier && styles.modifiers[modifier as 'breakWord' | 'fitContent' | 'nowrap' | 'truncate' | 'wrap'],\n        mergedClassName\n      )}\n      {...mergedProps}\n      {...props}\n      {...(isStickyColumn && {\n        style: {\n          '--pf-c-table__sticky-column--MinWidth': stickyMinWidth ? stickyMinWidth : undefined,\n          '--pf-c-table__sticky-column--Left': stickyLeftOffset ? stickyLeftOffset : undefined,\n          ...props.style\n        } as React.CSSProperties\n      })}\n    >\n      {transformedChildren}\n    </MergedComponent>\n  );\n\n  const canDefault = tooltip === '' ? typeof children === 'string' : true;\n  return tooltip !== null && canDefault && showTooltip ? (\n    <Tooltip content={tooltip || (tooltip === '' && children)} isVisible>\n      {cell}\n    </Tooltip>\n  ) : (\n    cell\n  );\n};\n\nexport const Th = React.forwardRef((props: ThProps, ref: React.Ref<HTMLTableHeaderCellElement>) => (\n  <ThBase {...props} innerRef={ref} />\n));\nTh.displayName = 'Th';\n"]},"metadata":{},"sourceType":"module"}