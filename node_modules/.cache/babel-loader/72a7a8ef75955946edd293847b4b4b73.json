{"ast":null,"code":"import * as React from 'react';\nimport { EditColumn } from '../../EditColumn';\nimport tableStyles from '@patternfly/react-styles/css/components/Table/table';\nexport var editable = function editable(label, _ref) {\n  var rowIndex = _ref.rowIndex,\n      rowData = _ref.rowData,\n      column = _ref.column;\n  var onRowEdit = column.extraParams.onRowEdit;\n\n  var toggleEditMode = function toggleEditMode(event, type) {\n    var validationErrors = {};\n\n    if (type === 'save') {\n      validationErrors = rowData.rowEditValidationRules && rowData.rowEditValidationRules.reduce(function (acc, rule) {\n        var invalidCells = rowData.cells.filter(function (cellData) {\n          var testValue = cellData.props.editableValue === '' ? '' : cellData.props.editableValue || cellData.props.value;\n          var failedValidation = false;\n\n          if (Array.isArray(testValue) && testValue.length) {\n            // multiple values, like multiselect\n            failedValidation = testValue.reduce(function (hasInvalidSelection, el) {\n              // if one value fails validation, the entire cell is invalid\n              if (hasInvalidSelection === true) {\n                return true;\n              }\n\n              return !rule.validator(el);\n            }, failedValidation);\n          } else if (Array.isArray(testValue) && !testValue.length) {\n            // case where all values were dismissed in multiselect\n            failedValidation = !rule.validator('');\n          } else {\n            // simple text fields\n            failedValidation = !rule.validator(testValue);\n          }\n\n          if (failedValidation) {\n            cellData.props.isValid = false;\n          }\n\n          return failedValidation;\n        });\n\n        if (invalidCells.length) {\n          acc[rule.name] = invalidCells.map(function (cell) {\n            return cell.props.name;\n          });\n        }\n\n        return acc;\n      }, {});\n    } // tslint:disable-next-line:no-unused-expression\n\n\n    onRowEdit(event, type, rowData && rowData.isEditable, rowIndex, validationErrors);\n  };\n  /**\n   * @param {number} identifier identifier used for the row\n   * @param {RowEditType} actionType the type of row edit action\n   */\n\n\n  function getAriaLabelTxt(identifier, actionType) {\n    var result;\n\n    switch (actionType) {\n      case 'cancel':\n        result = \"Cancel row edits for row \".concat(identifier);\n        break;\n\n      case 'save':\n        result = \"Save row edits for row \".concat(identifier);\n        break;\n\n      default:\n        result = \"Place row \".concat(identifier, \" in edit mode\");\n    }\n\n    return result;\n  }\n\n  return {\n    className: tableStyles.tableInlineEditAction,\n    component: 'td',\n    isVisible: true,\n    children: React.createElement(EditColumn, {\n      saveAriaLabel: rowData && rowData.rowSaveBtnAriaLabel && rowData.rowSaveBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'save'),\n      cancelAriaLabel: rowData && rowData.rowCancelBtnAriaLabel && rowData.rowCancelBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'cancel'),\n      editAriaLabel: rowData && rowData.rowEditBtnAriaLabel && rowData.rowEditBtnAriaLabel(rowIndex) || getAriaLabelTxt(rowIndex, 'edit'),\n      valid: rowData && rowData.isValid,\n      editing: rowData && rowData.isEditable,\n      onClick: toggleEditMode\n    })\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,qDAAxB;AAEA,OAAO,IAAMC,QAAQ,GAAe,SAAvBA,QAAuB,CAACC,KAAD,QAAsE;EAAA,IAAvCC,QAAuC,QAAvCA,QAAuC;EAAA,IAA7BC,OAA6B,QAA7BA,OAA6B;EAAA,IAApBC,MAAoB,QAApBA,MAAoB;EACxG,IACiBC,SADjB,GAEID,MAFJ,CACEE,WADF,CACiBD,SADjB;;EAIA,IAAME,cAAc,GAAc,SAA5BA,cAA4B,CAACC,KAAD,EAAQC,IAAR,EAAgB;IAChD,IAAIC,gBAAgB,GAAc,EAAlC;;IAEA,IAAID,IAAI,KAAK,MAAb,EAAqB;MACnBC,gBAAgB,GACdP,OAAO,CAACQ,sBAAR,IACAR,OAAO,CAACQ,sBAAR,CAA+BC,MAA/B,CAAsC,UAACC,GAAD,EAAMC,IAAN,EAAc;QAClD,IAAMC,YAAY,GAAIZ,OAAO,CAACa,KAAR,CAA6BC,MAA7B,CAAoC,kBAAQ,EAAG;UACnE,IAAMC,SAAS,GACbC,QAAQ,CAACC,KAAT,CAAeC,aAAf,KAAiC,EAAjC,GAAsC,EAAtC,GAA2CF,QAAQ,CAACC,KAAT,CAAeC,aAAf,IAAgCF,QAAQ,CAACC,KAAT,CAAeE,KAD5F;UAGA,IAAIC,gBAAgB,GAAG,KAAvB;;UAEA,IAAIC,KAAK,CAACC,OAAN,CAAcP,SAAd,KAA4BA,SAAS,CAACQ,MAA1C,EAAkD;YAChD;YACAH,gBAAgB,GAAGL,SAAS,CAACN,MAAV,CAAiB,UAACe,mBAAD,EAA+BC,EAA/B,EAA6C;cAC/E;cACA,IAAID,mBAAmB,KAAK,IAA5B,EAAkC;gBAChC,OAAO,IAAP;cACD;;cACD,OAAO,CAACb,IAAI,CAACe,SAAL,CAAeD,EAAf,CAAR;YACD,CANkB,EAMhBL,gBANgB,CAAnB;UAOD,CATD,MASO,IAAIC,KAAK,CAACC,OAAN,CAAcP,SAAd,KAA4B,CAACA,SAAS,CAACQ,MAA3C,EAAmD;YACxD;YACAH,gBAAgB,GAAG,CAACT,IAAI,CAACe,SAAL,CAAe,EAAf,CAApB;UACD,CAHM,MAGA;YACL;YACAN,gBAAgB,GAAG,CAACT,IAAI,CAACe,SAAL,CAAeX,SAAf,CAApB;UACD;;UAED,IAAIK,gBAAJ,EAAsB;YACpBJ,QAAQ,CAACC,KAAT,CAAeU,OAAf,GAAyB,KAAzB;UACD;;UACD,OAAOP,gBAAP;QACD,CA3BqB,CAAtB;;QA6BA,IAAIR,YAAY,CAACW,MAAjB,EAAyB;UACvBb,GAAG,CAACC,IAAI,CAACiB,IAAN,CAAH,GAAiBhB,YAAY,CAACiB,GAAb,CAAiB,cAAI;YAAA,OAAIC,IAAI,CAACb,KAAL,CAAWW,IAAf;UAAA,CAArB,CAAjB;QACD;;QACD,OAAOlB,GAAP;MACD,CAlCD,EAkCG,EAlCH,CAFF;IAqCD,CAzC+C,CA2ChD;;;IACAR,SAAS,CAACG,KAAD,EAAQC,IAAR,EAAcN,OAAO,IAAIA,OAAO,CAAC+B,UAAjC,EAA6ChC,QAA7C,EAAuDQ,gBAAvD,CAAT;EACD,CA7CD;EA+CA;;;;;;EAIA,SAASyB,eAAT,CAAyBC,UAAzB,EAA6CC,UAA7C,EAAoE;IAClE,IAAIC,MAAJ;;IACA,QAAQD,UAAR;MACE,KAAK,QAAL;QACEC,MAAM,sCAA+BF,UAA/B,CAAN;QACA;;MACF,KAAK,MAAL;QACEE,MAAM,oCAA6BF,UAA7B,CAAN;QACA;;MACF;QACEE,MAAM,uBAAgBF,UAAhB,kBAAN;IARJ;;IAUA,OAAOE,MAAP;EACD;;EAED,OAAO;IACLC,SAAS,EAAExC,WAAW,CAACyC,qBADlB;IAELC,SAAS,EAAE,IAFN;IAGLC,SAAS,EAAE,IAHN;IAILC,QAAQ,EACN9C,oBAACC,UAAD,EAAW;MACT8C,aAAa,EACVzC,OAAO,IAAIA,OAAO,CAAC0C,mBAAnB,IAA0C1C,OAAO,CAAC0C,mBAAR,CAA4B3C,QAA5B,CAA3C,IACAiC,eAAe,CAACjC,QAAD,EAAW,MAAX,CAHR;MAKT4C,eAAe,EACZ3C,OAAO,IAAIA,OAAO,CAAC4C,qBAAnB,IAA4C5C,OAAO,CAAC4C,qBAAR,CAA8B7C,QAA9B,CAA7C,IACAiC,eAAe,CAACjC,QAAD,EAAW,QAAX,CAPR;MAST8C,aAAa,EACV7C,OAAO,IAAIA,OAAO,CAAC8C,mBAAnB,IAA0C9C,OAAO,CAAC8C,mBAAR,CAA4B/C,QAA5B,CAA3C,IACAiC,eAAe,CAACjC,QAAD,EAAW,MAAX,CAXR;MAaTgD,KAAK,EAAE/C,OAAO,IAAIA,OAAO,CAAC2B,OAbjB;MAcTqB,OAAO,EAAEhD,OAAO,IAAIA,OAAO,CAAC+B,UAdnB;MAeTkB,OAAO,EAAE7C;IAfA,CAAX;EALG,CAAP;AAwBD,CA/FM","names":["React","EditColumn","tableStyles","editable","label","rowIndex","rowData","column","onRowEdit","extraParams","toggleEditMode","event","type","validationErrors","rowEditValidationRules","reduce","acc","rule","invalidCells","cells","filter","testValue","cellData","props","editableValue","value","failedValidation","Array","isArray","length","hasInvalidSelection","el","validator","isValid","name","map","cell","isEditable","getAriaLabelTxt","identifier","actionType","result","className","tableInlineEditAction","component","isVisible","children","saveAriaLabel","rowSaveBtnAriaLabel","cancelAriaLabel","rowCancelBtnAriaLabel","editAriaLabel","rowEditBtnAriaLabel","valid","editing","onClick"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/editable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IExtra, IFormatterValueType, ITransform, IRowCell, OnRowEdit, RowErrors, RowEditType } from '../../TableTypes';\nimport { EditColumn } from '../../EditColumn';\nimport tableStyles from '@patternfly/react-styles/css/components/Table/table';\n\nexport const editable: ITransform = (label: IFormatterValueType, { rowIndex, rowData, column }: IExtra) => {\n  const {\n    extraParams: { onRowEdit }\n  } = column;\n\n  const toggleEditMode: OnRowEdit = (event, type) => {\n    let validationErrors: RowErrors = {};\n\n    if (type === 'save') {\n      validationErrors =\n        rowData.rowEditValidationRules &&\n        rowData.rowEditValidationRules.reduce((acc, rule) => {\n          const invalidCells = (rowData.cells as IRowCell[]).filter(cellData => {\n            const testValue =\n              cellData.props.editableValue === '' ? '' : cellData.props.editableValue || cellData.props.value;\n\n            let failedValidation = false;\n\n            if (Array.isArray(testValue) && testValue.length) {\n              // multiple values, like multiselect\n              failedValidation = testValue.reduce((hasInvalidSelection: boolean, el: string) => {\n                // if one value fails validation, the entire cell is invalid\n                if (hasInvalidSelection === true) {\n                  return true;\n                }\n                return !rule.validator(el);\n              }, failedValidation);\n            } else if (Array.isArray(testValue) && !testValue.length) {\n              // case where all values were dismissed in multiselect\n              failedValidation = !rule.validator('');\n            } else {\n              // simple text fields\n              failedValidation = !rule.validator(testValue);\n            }\n\n            if (failedValidation) {\n              cellData.props.isValid = false;\n            }\n            return failedValidation;\n          });\n\n          if (invalidCells.length) {\n            acc[rule.name] = invalidCells.map(cell => cell.props.name);\n          }\n          return acc;\n        }, {} as RowErrors);\n    }\n\n    // tslint:disable-next-line:no-unused-expression\n    onRowEdit(event, type, rowData && rowData.isEditable, rowIndex, validationErrors);\n  };\n\n  /**\n   * @param {number} identifier identifier used for the row\n   * @param {RowEditType} actionType the type of row edit action\n   */\n  function getAriaLabelTxt(identifier: number, actionType: RowEditType): string {\n    let result: string;\n    switch (actionType) {\n      case 'cancel':\n        result = `Cancel row edits for row ${identifier}`;\n        break;\n      case 'save':\n        result = `Save row edits for row ${identifier}`;\n        break;\n      default:\n        result = `Place row ${identifier} in edit mode`;\n    }\n    return result;\n  }\n\n  return {\n    className: tableStyles.tableInlineEditAction,\n    component: 'td',\n    isVisible: true,\n    children: (\n      <EditColumn\n        saveAriaLabel={\n          (rowData && rowData.rowSaveBtnAriaLabel && rowData.rowSaveBtnAriaLabel(rowIndex)) ||\n          getAriaLabelTxt(rowIndex, 'save')\n        }\n        cancelAriaLabel={\n          (rowData && rowData.rowCancelBtnAriaLabel && rowData.rowCancelBtnAriaLabel(rowIndex)) ||\n          getAriaLabelTxt(rowIndex, 'cancel')\n        }\n        editAriaLabel={\n          (rowData && rowData.rowEditBtnAriaLabel && rowData.rowEditBtnAriaLabel(rowIndex)) ||\n          getAriaLabelTxt(rowIndex, 'edit')\n        }\n        valid={rowData && rowData.isValid}\n        editing={rowData && rowData.isEditable}\n        onClick={toggleEditMode}\n      />\n    )\n  };\n};\n"]},"metadata":{},"sourceType":"module"}