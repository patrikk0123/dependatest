{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initForm - Init form state (just values and validators)\n * @param callback - Function to call when submitting user input data\n *\n * initForm has to specify all inputs (keys to IFormState) - even if just empty objects.\n *\n * @returns form states and access functions\n *  -> form             - whole form state\n *  -> applyValues      - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - is submit button disabled?\n *\n * initForm and form objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessage -- actual error messages (in case of an error)\n *    -> state  -- state of a field ('default', 'success', 'error')\n *    -> validation:    -- means of validation\n *      -> isRequired   -- is field required?\n *      -> validators:  -- validation functions and their error messages\n *        -> validator    -- validation function\n *        -> errorMessage -- error message that should be set in a case of an error\n */\nexport const useForm = (initFields, callback) => {\n  const transformFormData = useCallback(values => {\n    let defaultFields = {};\n\n    for (const key in initFields) {\n      defaultFields[key] = {}; // data from init parameter\n\n      defaultFields[key].isRequired = initFields[key].isRequired;\n      defaultFields[key].validators = initFields[key].validators; // still shallow copy!!!\n      // additional data\n\n      defaultFields[key].state = 'default';\n      defaultFields[key].value = values ? values[key] : '';\n    }\n\n    return defaultData;\n  }, [initFields]);\n  const [fields, setFields] = useState(transformFormData()); // is submit button disabled?\n\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true); // has any field been changed?\n  // important for edit page (do not submit until any new content)\n\n  const [hasChanged, setHasChanged] = useState(false); // are all validated inputs valid?\n\n  const isFormValid = useCallback(() => {\n    for (const key in fields) {\n      var _fields$key$errorMess;\n\n      if ((_fields$key$errorMess = fields[key].errorMessages) !== null && _fields$key$errorMess !== void 0 && _fields$key$errorMess.length) return false;\n    }\n\n    return true;\n  }, [fields]); // are all required inputs filled?\n\n  const areRequiredFilled = useCallback(() => {\n    for (const key in fields) {\n      if (fields[key].isRequired && !fields[key].value) {\n        return false;\n      }\n    }\n\n    return true;\n  }, [fields]); // callback (on change of an input)\n\n  const onChange = (fieldName, fieldValue) => {\n    // also delete old error messages, new checks are going to be done\n    const newFieldState = { ...fields[fieldName],\n      value: fieldValue,\n      errorMessages: [],\n      state: 'default'\n    };\n    validate(newFieldState);\n    setFields({ ...fields,\n      [fieldName]: newFieldState\n    });\n    setHasChanged(true);\n  }; // validate field state and change error messages / state\n\n\n  const validate = fieldState => {\n    if (fieldState.isRequired) {\n      const error = fieldState.value ? '' : 'Field must be filled.';\n      addError(fieldState, error);\n      setState(fieldState);\n    }\n\n    if (fieldState.validators) {\n      for (const validator of fieldState.validators) {\n        const error = validator.validator(fieldState.value) ? '' : validator.errorMessage;\n        addError(fieldState, error);\n      }\n\n      setState(fieldState);\n    }\n  }; // add error message to field state\n\n\n  const addError = (fieldState, error) => {\n    if (error) {\n      var _fieldState$errorMess;\n\n      (_fieldState$errorMess = fieldState.errorMessages) === null || _fieldState$errorMess === void 0 ? void 0 : _fieldState$errorMess.push(error);\n    }\n  }; // set state of a field (errors should have been set before)\n\n\n  const setState = fieldState => {\n    var _fieldState$errorMess2;\n\n    if ((_fieldState$errorMess2 = fieldState.errorMessages) !== null && _fieldState$errorMess2 !== void 0 && _fieldState$errorMess2.length) {\n      fieldState.state = 'error';\n    } else {\n      // display success state only if not empty\n      if (fieldState.value) {\n        fieldState.state = 'success';\n      } else {\n        fieldState.state = 'default';\n      }\n    }\n  }; // callback (on submit of a form)\n\n\n  const onSubmit = () => {\n    callback().catch(error => {\n      // backend error, just log it at the moment\n      console.error(error); // FUTURE IMPLEMENTATION:\n      // const formCopy = { ...form };\n      // for (const key in error.details.validation) {\n      //   const newField = { ...form[key], error: error.details.validation[key].errorMessage, state: 'error' };\n      //   formCopy[key] = newField;\n      // }\n      // setForm(formCopy);\n    }); // reset state to 'default' (valid inputs wont be highlighted)\n\n    const formCopy = { ...fields\n    };\n\n    for (const key in formCopy) {\n      formCopy[key].state = 'default';\n    }\n\n    setFields(formCopy);\n    setHasChanged(false);\n  }; // set all input field to values (used for edit form)\n\n\n  const applyValues = useCallback(fieldValues => {\n    const newForm = { ...fields\n    };\n\n    for (const key in fieldValues) {\n      newForm[key].value = fieldValues[key];\n      newForm[key].state = 'default';\n    }\n\n    setFields(newForm);\n  }, [fields]); // on change of a input, check whether submit button should be disabled\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fields, hasChanged, isFormValid, areRequiredFilled]);\n  return {\n    fields,\n    applyValues,\n    onChange,\n    onSubmit,\n    isSubmitDisabled\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useState","useForm","initFields","callback","transformFormData","values","defaultFields","key","isRequired","validators","state","value","defaultData","fields","setFields","isSubmitDisabled","setIsSubmitDisabled","hasChanged","setHasChanged","isFormValid","errorMessages","length","areRequiredFilled","onChange","fieldName","fieldValue","newFieldState","validate","fieldState","error","addError","setState","validator","errorMessage","push","onSubmit","catch","console","formCopy","applyValues","fieldValues","newForm"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { TextInputProps } from '@patternfly/react-core';\nimport { createInputFiles } from 'typescript';\n\nexport interface IFieldValues {\n  [key: string]: string;\n}\n\ninterface IValidator {\n  validator: Function;\n  errorMessage: string;\n}\n\ninterface IField {\n  value?: string;\n  errorMessages?: string[];\n  state?: TextInputProps['validated'];\n  isRequired?: boolean;\n  validators?: IValidator[];\n}\n\nexport interface IFields {\n  [key: string]: IField;\n}\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initForm - Init form state (just values and validators)\n * @param callback - Function to call when submitting user input data\n *\n * initForm has to specify all inputs (keys to IFormState) - even if just empty objects.\n *\n * @returns form states and access functions\n *  -> form             - whole form state\n *  -> applyValues      - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - is submit button disabled?\n *\n * initForm and form objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessage -- actual error messages (in case of an error)\n *    -> state  -- state of a field ('default', 'success', 'error')\n *    -> validation:    -- means of validation\n *      -> isRequired   -- is field required?\n *      -> validators:  -- validation functions and their error messages\n *        -> validator    -- validation function\n *        -> errorMessage -- error message that should be set in a case of an error\n */\nexport const useForm = (initFields: Omit<Omit<IFields, 'errorMessage'>, 'state'>, callback: Function) => {\n  const transformFormData = useCallback(\n    (values?: IFieldValues) => {\n      let defaultFields: IFields = {};\n      for (const key in initFields) {\n        defaultFields[key] = {};\n\n        // data from init parameter\n        defaultFields[key].isRequired = initFields[key].isRequired;\n        defaultFields[key].validators = initFields[key].validators; // still shallow copy!!!\n\n        // additional data\n        defaultFields[key].state = 'default';\n        defaultFields[key].value = values ? values[key] : '';\n      }\n      return defaultData;\n    },\n    [initFields]\n  );\n\n  const [fields, setFields] = useState<IFields>(transformFormData());\n\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  // has any field been changed?\n  // important for edit page (do not submit until any new content)\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // are all validated inputs valid?\n  const isFormValid = useCallback(() => {\n    for (const key in fields) {\n      if (fields[key].errorMessages?.length) return false;\n    }\n\n    return true;\n  }, [fields]);\n\n  // are all required inputs filled?\n  const areRequiredFilled = useCallback(() => {\n    for (const key in fields) {\n      if (fields[key].isRequired && !fields[key].value) {\n        return false;\n      }\n    }\n\n    return true;\n  }, [fields]);\n\n  // callback (on change of an input)\n  const onChange = (fieldName: any, fieldValue: any) => {\n    // also delete old error messages, new checks are going to be done\n    const newFieldState = {\n      ...fields[fieldName],\n      value: fieldValue,\n      errorMessages: [],\n      state: 'default' as TextInputProps['validated'],\n    };\n    validate(newFieldState);\n    setFields({ ...fields, [fieldName]: newFieldState });\n\n    setHasChanged(true);\n  };\n\n  // validate field state and change error messages / state\n  const validate = (fieldState: IField) => {\n    if (fieldState.isRequired) {\n      const error = fieldState.value ? '' : 'Field must be filled.';\n      addError(fieldState, error);\n      setState(fieldState);\n    }\n    if (fieldState.validators) {\n      for (const validator of fieldState.validators) {\n        const error = validator.validator(fieldState.value) ? '' : validator.errorMessage;\n        addError(fieldState, error);\n      }\n      setState(fieldState);\n    }\n  };\n\n  // add error message to field state\n  const addError = (fieldState: IField, error: string) => {\n    if (error) {\n      fieldState.errorMessages?.push(error);\n    }\n  };\n\n  // set state of a field (errors should have been set before)\n  const setState = (fieldState: IField) => {\n    if (fieldState.errorMessages?.length) {\n      fieldState.state = 'error';\n    } else {\n      // display success state only if not empty\n      if (fieldState.value) {\n        fieldState.state = 'success';\n      } else {\n        fieldState.state = 'default';\n      }\n    }\n  };\n\n  // callback (on submit of a form)\n  const onSubmit = () => {\n    callback().catch((error: any) => {\n      // backend error, just log it at the moment\n      console.error(error);\n\n      // FUTURE IMPLEMENTATION:\n      // const formCopy = { ...form };\n      // for (const key in error.details.validation) {\n      //   const newField = { ...form[key], error: error.details.validation[key].errorMessage, state: 'error' };\n      //   formCopy[key] = newField;\n      // }\n      // setForm(formCopy);\n    });\n\n    // reset state to 'default' (valid inputs wont be highlighted)\n    const formCopy = { ...fields };\n    for (const key in formCopy) {\n      formCopy[key].state = 'default';\n    }\n    setFields(formCopy);\n    setHasChanged(false);\n  };\n\n  // set all input field to values (used for edit form)\n  const applyValues = useCallback(\n    (fieldValues: IFieldValues) => {\n      const newForm = { ...fields };\n      for (const key in fieldValues) {\n        newForm[key].value = fieldValues[key];\n        newForm[key].state = 'default';\n      }\n\n      setFields(newForm);\n    },\n    [fields]\n  );\n\n  // on change of a input, check whether submit button should be disabled\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fields, hasChanged, isFormValid, areRequiredFilled]);\n\n  return { fields, applyValues, onChange, onSubmit, isSubmitDisabled };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}