{"ast":null,"code":"import{EmptyStateCard}from'../../components/EmptyStates/EmptyStateCard';import{ErrorStateCard}from'../../components/EmptyStates/ErrorStateCard';import{LoadingStateCard}from'../../components/EmptyStates/LoadingStateCard';import{RefreshStateCard}from'../../components/EmptyStates/RefreshStateCard';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";/**\n * Container component handling loading, error and empty data states. If one of those states\n * is valid then proper state component is displayed instead of the (children) component displaying\n * real data. See also {@link useDataContainer}.\n *\n * @example\n * ```ts\n * // DataContainer component can be typically used together with useDataContainer hook:\n * const dataContainer = useDataContainer(() => projectService.getProjects());\n * <DataContainer {...dataContainer} title=\"Projects List\">\n *   <ProjectsList projects={dataContainer.data} />\n * </DataContainer>\n * ```\n *\n * @param data - Real data to be displayed when its fully loaded\n * @param loading - True if a request is pending, false when a request is successfully finished or when a request resulted in error\n * @param error - Error description when data loading was not successful\n * @param children - React children property\n */export var DataContainer=function DataContainer(_ref){var data=_ref.data,loading=_ref.loading,error=_ref.error,title=_ref.title,children=_ref.children;// Initial loading: display Loading card when loading and no previous data is available (the component is rendered for the first time)\nif(loading&&!data)return/*#__PURE__*/_jsx(LoadingStateCard,{title:title});// Refresh loading: keep previous real data with loading indicator when loading new data and previous real data is available\n// (the component was rendered at some point before)\n//  - for example: when page index is changed from page 1 to page 2\n//  - this will make UI more smooth and it prevents flickering user experience\nif(loading&&data)return/*#__PURE__*/_jsx(RefreshStateCard,{children:children});// Error state: display Error card when error\nif(error)return/*#__PURE__*/_jsx(ErrorStateCard,{title:title,error:error});// Invalid state, Error state should be triggered before this\nif(!data)throw new Error('DataContainer invalid state: when no data are available, error state should be returned');// Empty state: display Empty card when\n//  - request was successfully finished,\n//  - content property is available (= content property means table data with pagination are expected),\n//  - but no items are available\nif(data.content&&!data.content.length)return/*#__PURE__*/_jsx(EmptyStateCard,{title:title});// Empty state: display Empty card when\n//  - request was successfully finished,\n//  - data is array\n//  - but no items are available\n//\n// Used for example for kafka service.\nif(Array.isArray(data)&&!data.length)return/*#__PURE__*/_jsx(EmptyStateCard,{title:title});// Real data: display real data when it's loaded successfully and it's not empty\nreturn/*#__PURE__*/_jsx(_Fragment,{children:children});};","map":{"version":3,"names":["EmptyStateCard","ErrorStateCard","LoadingStateCard","RefreshStateCard","DataContainer","data","loading","error","title","children","Error","content","length","Array","isArray"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/DataContainer/DataContainer.tsx"],"sourcesContent":["import { EmptyStateCard } from '../../components/EmptyStates/EmptyStateCard';\nimport { ErrorStateCard } from '../../components/EmptyStates/ErrorStateCard';\nimport { LoadingStateCard } from '../../components/EmptyStates/LoadingStateCard';\nimport { RefreshStateCard } from '../../components/EmptyStates/RefreshStateCard';\n\nexport interface IDataContainer {\n  data: any;\n  loading: boolean;\n  error?: string;\n  title: string;\n}\n\n/**\n * Container component handling loading, error and empty data states. If one of those states\n * is valid then proper state component is displayed instead of the (children) component displaying\n * real data. See also {@link useDataContainer}.\n *\n * @example\n * ```ts\n * // DataContainer component can be typically used together with useDataContainer hook:\n * const dataContainer = useDataContainer(() => projectService.getProjects());\n * <DataContainer {...dataContainer} title=\"Projects List\">\n *   <ProjectsList projects={dataContainer.data} />\n * </DataContainer>\n * ```\n *\n * @param data - Real data to be displayed when its fully loaded\n * @param loading - True if a request is pending, false when a request is successfully finished or when a request resulted in error\n * @param error - Error description when data loading was not successful\n * @param children - React children property\n */\nexport const DataContainer = ({ data, loading, error, title, children }: React.PropsWithChildren<IDataContainer>) => {\n  // Initial loading: display Loading card when loading and no previous data is available (the component is rendered for the first time)\n  if (loading && !data) return <LoadingStateCard title={title} />;\n\n  // Refresh loading: keep previous real data with loading indicator when loading new data and previous real data is available\n  // (the component was rendered at some point before)\n  //  - for example: when page index is changed from page 1 to page 2\n  //  - this will make UI more smooth and it prevents flickering user experience\n  if (loading && data) return <RefreshStateCard>{children}</RefreshStateCard>;\n\n  // Error state: display Error card when error\n  if (error) return <ErrorStateCard title={title} error={error} />;\n\n  // Invalid state, Error state should be triggered before this\n  if (!data) throw new Error('DataContainer invalid state: when no data are available, error state should be returned');\n\n  // Empty state: display Empty card when\n  //  - request was successfully finished,\n  //  - content property is available (= content property means table data with pagination are expected),\n  //  - but no items are available\n  if (data.content && !data.content.length) return <EmptyStateCard title={title} />;\n\n  // Empty state: display Empty card when\n  //  - request was successfully finished,\n  //  - data is array\n  //  - but no items are available\n  //\n  // Used for example for kafka service.\n  if (Array.isArray(data) && !data.length) return <EmptyStateCard title={title} />;\n\n  // Real data: display real data when it's loaded successfully and it's not empty\n  return <>{children}</>;\n};\n"],"mappings":"AAAA,OAASA,cAAT,KAA+B,6CAA/B,CACA,OAASC,cAAT,KAA+B,6CAA/B,CACA,OAASC,gBAAT,KAAiC,+CAAjC,CACA,OAASC,gBAAT,KAAiC,+CAAjC,C,gGASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,cAAa,CAAG,QAAhBA,cAAgB,MAAwF,IAArFC,KAAqF,MAArFA,IAAqF,CAA/EC,OAA+E,MAA/EA,OAA+E,CAAtEC,KAAsE,MAAtEA,KAAsE,CAA/DC,KAA+D,MAA/DA,KAA+D,CAAxDC,QAAwD,MAAxDA,QAAwD,CACnH;AACA,GAAIH,OAAO,EAAI,CAACD,IAAhB,CAAsB,mBAAO,KAAC,gBAAD,EAAkB,KAAK,CAAEG,KAAzB,EAAP,CAEtB;AACA;AACA;AACA;AACA,GAAIF,OAAO,EAAID,IAAf,CAAqB,mBAAO,KAAC,gBAAD,WAAmBI,QAAnB,EAAP,CAErB;AACA,GAAIF,KAAJ,CAAW,mBAAO,KAAC,cAAD,EAAgB,KAAK,CAAEC,KAAvB,CAA8B,KAAK,CAAED,KAArC,EAAP,CAEX;AACA,GAAI,CAACF,IAAL,CAAW,KAAM,IAAIK,MAAJ,CAAU,yFAAV,CAAN,CAEX;AACA;AACA;AACA;AACA,GAAIL,IAAI,CAACM,OAAL,EAAgB,CAACN,IAAI,CAACM,OAAL,CAAaC,MAAlC,CAA0C,mBAAO,KAAC,cAAD,EAAgB,KAAK,CAAEJ,KAAvB,EAAP,CAE1C;AACA;AACA;AACA;AACA;AACA;AACA,GAAIK,KAAK,CAACC,OAAN,CAAcT,IAAd,GAAuB,CAACA,IAAI,CAACO,MAAjC,CAAyC,mBAAO,KAAC,cAAD,EAAgB,KAAK,CAAEJ,KAAvB,EAAP,CAEzC;AACA,mBAAO,yBAAGC,QAAH,EAAP,CACD,CAhCM"},"metadata":{},"sourceType":"module"}