{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { Bullseye, EmptyState } from '@patternfly/react-core';\nimport { Td } from '../TableComposable/Td';\nexport var BodyCell = function BodyCell(_a) {\n  var _a$dataLabel = _a['data-label'],\n      dataLabel = _a$dataLabel === void 0 ? '' : _a$dataLabel,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      colSpan = _a.colSpan,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'td' : _a$component,\n      isVisible = _a.isVisible,\n      parentId = _a.parentId,\n      _a$textCenter = _a.textCenter,\n      textCenter = _a$textCenter === void 0 ? false : _a$textCenter,\n      _a$tooltip = _a.tooltip,\n      tooltipProp = _a$tooltip === void 0 ? '' : _a$tooltip,\n      _a$onMouseEnter = _a.onMouseEnter,\n      onMouseEnterProp = _a$onMouseEnter === void 0 ? function () {} : _a$onMouseEnter,\n      children = _a.children,\n      errorText = _a.errorText,\n      isValid = _a.isValid,\n      isOpen = _a.isOpen,\n      ariaControls = _a.ariaControls,\n      editableValue = _a.editableValue,\n      editableSelectProps = _a.editableSelectProps,\n      options = _a.options,\n      isSelectOpen = _a.isSelectOpen,\n      value = _a.value,\n      name = _a.name,\n      props = __rest(_a, ['data-label', \"className\", \"colSpan\", \"component\", \"isVisible\", \"parentId\", \"textCenter\", \"tooltip\", \"onMouseEnter\", \"children\", \"errorText\", \"isValid\", \"isOpen\", \"ariaControls\", \"editableValue\", \"editableSelectProps\", \"options\", \"isSelectOpen\", \"value\", \"name\"]);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      tooltip = _React$useState2[0],\n      setTooltip = _React$useState2[1];\n\n  var onMouseEnter = function onMouseEnter(event) {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      if (tooltipProp) {\n        setTooltip(tooltipProp);\n      } else if (typeof children === 'string') {\n        setTooltip(children);\n      }\n    } else {\n      setTooltip('');\n    }\n\n    onMouseEnterProp(event);\n  };\n\n  var isEmptyStateCell = false;\n\n  if (children) {\n    isEmptyStateCell = children.type === Bullseye && children.props.children && children.props.children.type === EmptyState || children.type === EmptyState;\n  }\n\n  var cell = React.createElement(Td, Object.assign({\n    className: className,\n    component: component,\n    dataLabel: dataLabel && parentId == null && !isEmptyStateCell ? dataLabel : null,\n    onMouseEnter: onMouseEnter,\n    textCenter: textCenter,\n    colSpan: colSpan\n  }, props), children);\n  var bodyCell = tooltip !== '' ? React.createElement(Tooltip, {\n    content: tooltip,\n    isVisible: true\n  }, cell) : cell;\n  return parentId !== undefined && colSpan === undefined || !isVisible ? null : bodyCell;\n};\nBodyCell.displayName = 'BodyCell';","map":{"version":3,"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,4DAAxB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAkD,wBAAlD;AACA,SAASC,EAAT,QAAmB,uBAAnB;AAwBA,OAAO,IAAMC,QAAQ,GAA2C,SAAnDA,QAAmD,CAACC,EAAD,EAwB5C;qBAHdA,GApBJ;MAAcC,sCAAY;qBAoBtBD,GAnBJE;MAAAA,sCAAY;MACZC,UAkBIH,GAlBJG;qBAkBIH,GAjBJI;MAAAA,sCAAY;MACZC,YAgBIL,GAhBJK;MACAC,WAeIN,GAfJM;sBAeIN,GAdJO;MAAAA,wCAAa;mBAcTP,GAbJQ;MAASC,sCAAc;wBAanBT,GAZJU;MAAcC,gDAAmB,YAAK,CAAG;MACzCC,WAWIZ,GAXJY;MAEAC,YASIb,GATJa;MACAC,UAQId,GARJc;MACAC,SAOIf,GAPJe;MACAC,eAMIhB,GANJgB;MACAC,gBAKIjB,GALJiB;MACAC,sBAIIlB,GAJJkB;MACAC,UAGInB,GAHJmB;MACAC,eAEIpB,GAFJoB;MACAC,QACIrB,GADJqB;MACAC,OAAItB,GAAJsB;MAEGC,QAAKC,WAvBuD,uQAuBvD;;EAER,sBAA8B9B,KAAK,CAAC+B,QAAN,CAAe,EAAf,CAA9B;EAAA;EAAA,IAAOjB,OAAP;EAAA,IAAgBkB,UAAhB;;EACA,IAAMhB,YAAY,GAAG,SAAfA,YAAe,CAACiB,KAAD,EAAe;IAClC,IAAIA,KAAK,CAACC,MAAN,CAAaC,WAAb,GAA2BF,KAAK,CAACC,MAAN,CAAaE,WAA5C,EAAyD;MACvD,IAAIrB,WAAJ,EAAiB;QACfiB,UAAU,CAACjB,WAAD,CAAV;MACD,CAFD,MAEO,IAAI,OAAOG,QAAP,KAAoB,QAAxB,EAAkC;QACvCc,UAAU,CAACd,QAAD,CAAV;MACD;IACF,CAND,MAMO;MACLc,UAAU,CAAC,EAAD,CAAV;IACD;;IACDf,gBAAgB,CAACgB,KAAD,CAAhB;EACD,CAXD;;EAaA,IAAII,gBAAgB,GAAG,KAAvB;;EACA,IAAInB,QAAJ,EAAc;IACZmB,gBAAgB,GACZnB,QAA+B,CAACoB,IAAhC,KAAyCpC,QAAzC,IACCgB,QAA+B,CAACW,KAAhC,CAAsCX,QADvC,IAECA,QAA+B,CAACW,KAAhC,CAAsCX,QAAtC,CAA+CoB,IAA/C,KAAwDnC,UAF3D,IAGCe,QAA+B,CAACoB,IAAhC,KAAyCnC,UAJ5C;EAKD;;EAED,IAAMoC,IAAI,GACRvC,oBAACI,EAAD,EAAGoC;IACDhC,SAAS,EAAEA,SADV;IAEDE,SAAS,EAAEA,SAFV;IAGDH,SAAS,EAAEA,SAAS,IAAIK,QAAQ,IAAI,IAAzB,IAAiC,CAACyB,gBAAlC,GAAqD9B,SAArD,GAAiE,IAH3E;IAIDS,YAAY,EAAEA,YAJb;IAKDH,UAAU,EAAEA,UALX;IAMDJ,OAAO,EAAEA;EANR,GAOGoB,KAPH,CAAH,EASGX,QATH,CADF;EAcA,IAAMuB,QAAQ,GACZ3B,OAAO,KAAK,EAAZ,GACEd,oBAACC,OAAD,EAAQ;IAACyC,OAAO,EAAE5B,OAAV;IAAmBH,SAAS;EAA5B,CAAR,EACG4B,IADH,CADF,GAKEA,IANJ;EASA,OAAQ3B,QAAQ,KAAK+B,SAAb,IAA0BlC,OAAO,KAAKkC,SAAvC,IAAqD,CAAChC,SAAtD,GAAkE,IAAlE,GAAyE8B,QAAhF;AACD,CAxEM;AAyEPpC,QAAQ,CAACuC,WAAT,GAAuB,UAAvB","names":["React","Tooltip","Bullseye","EmptyState","Td","BodyCell","_a","dataLabel","className","colSpan","component","isVisible","parentId","textCenter","tooltip","tooltipProp","onMouseEnter","onMouseEnterProp","children","errorText","isValid","isOpen","ariaControls","editableValue","editableSelectProps","options","isSelectOpen","value","name","props","__rest","useState","setTooltip","event","target","offsetWidth","scrollWidth","isEmptyStateCell","type","cell","Object","bodyCell","content","undefined","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/BodyCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core/dist/esm/components/Tooltip/Tooltip';\nimport { Bullseye, EmptyState, SelectProps } from '@patternfly/react-core';\nimport { Td } from '../TableComposable/Td';\n\nexport interface BodyCellProps {\n  'data-label'?: string;\n  className?: string;\n  colSpan?: number;\n  component?: React.ReactNode;\n  errorText?: string;\n  isVisible?: boolean;\n  parentId?: number;\n  textCenter?: boolean;\n  isOpen?: boolean;\n  ariaControls?: string;\n  editableValue?: any;\n  editableSelectProps?: SelectProps;\n  options?: React.ReactElement[];\n  isSelectOpen?: boolean;\n  value?: any;\n  isValid?: boolean;\n  name?: string;\n  tooltip?: string;\n  onMouseEnter?: (event: any) => void;\n  children: React.ReactNode;\n}\nexport const BodyCell: React.FunctionComponent<BodyCellProps> = ({\n  'data-label': dataLabel = '',\n  className = '',\n  colSpan,\n  component = 'td',\n  isVisible,\n  parentId,\n  textCenter = false,\n  tooltip: tooltipProp = '',\n  onMouseEnter: onMouseEnterProp = () => {},\n  children,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  errorText,\n  isValid,\n  isOpen,\n  ariaControls,\n  editableValue,\n  editableSelectProps,\n  options,\n  isSelectOpen,\n  value,\n  name,\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  ...props\n}: BodyCellProps) => {\n  const [tooltip, setTooltip] = React.useState('');\n  const onMouseEnter = (event: any) => {\n    if (event.target.offsetWidth < event.target.scrollWidth) {\n      if (tooltipProp) {\n        setTooltip(tooltipProp);\n      } else if (typeof children === 'string') {\n        setTooltip(children);\n      }\n    } else {\n      setTooltip('');\n    }\n    onMouseEnterProp(event);\n  };\n\n  let isEmptyStateCell = false;\n  if (children) {\n    isEmptyStateCell =\n      ((children as React.ReactElement).type === Bullseye &&\n        (children as React.ReactElement).props.children &&\n        (children as React.ReactElement).props.children.type === EmptyState) ||\n      (children as React.ReactElement).type === EmptyState;\n  }\n\n  const cell = (\n    <Td\n      className={className}\n      component={component}\n      dataLabel={dataLabel && parentId == null && !isEmptyStateCell ? dataLabel : null}\n      onMouseEnter={onMouseEnter}\n      textCenter={textCenter}\n      colSpan={colSpan}\n      {...props}\n    >\n      {children}\n    </Td>\n  );\n\n  const bodyCell =\n    tooltip !== '' ? (\n      <Tooltip content={tooltip} isVisible>\n        {cell}\n      </Tooltip>\n    ) : (\n      cell\n    );\n\n  return (parentId !== undefined && colSpan === undefined) || !isVisible ? null : bodyCell;\n};\nBodyCell.displayName = 'BodyCell';\n"]},"metadata":{},"sourceType":"module"}