{"ast":null,"code":"// @ts-nocheck\nimport format from './format';\nimport { modifierPhases } from '../enums';\nvar INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nvar MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nvar VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\n/**\n * @param modifiers\n */\n\nexport default function validateModifiers(modifiers) {\n  modifiers.forEach(function (modifier) {\n    Object.keys(modifier).forEach(function (key) {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', \"\\\"\".concat(String(modifier.name), \"\\\"\")));\n          }\n\n          break;\n\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\".concat(String(modifier.enabled), \"\\\"\")));\n          }\n\n        case 'phase':\n          if (modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \".concat(modifierPhases.join(', ')), \"\\\"\".concat(String(modifier.phase), \"\\\"\")));\n          }\n\n          break;\n\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\".concat(String(modifier.fn), \"\\\"\")));\n          }\n\n          break;\n\n        case 'effect':\n          if (typeof modifier.effect !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\".concat(String(modifier.fn), \"\\\"\")));\n          }\n\n          break;\n\n        case 'requires':\n          if (!Array.isArray(modifier.requires)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\".concat(String(modifier.requires), \"\\\"\")));\n          }\n\n          break;\n\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\".concat(String(modifier.requiresIfExists), \"\\\"\")));\n          }\n\n          break;\n\n        case 'options':\n        case 'data':\n          break;\n\n        default:\n          console.error(\"PopperJS: an invalid property has been provided to the \\\"\".concat(modifier.name, \"\\\" modifier, valid properties are \").concat(VALID_PROPERTIES.map(function (s) {\n            return \"\\\"\".concat(s, \"\\\"\");\n          }).join(', '), \"; but \\\"\").concat(key, \"\\\" was provided.\"));\n      }\n\n      modifier.requires && modifier.requires.forEach(function (requirement) {\n        if (modifiers.find(function (mod) {\n          return mod.name === requirement;\n        }) == null) {\n          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n        }\n      });\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["format","modifierPhases","INVALID_MODIFIER_ERROR","MISSING_DEPENDENCY_ERROR","VALID_PROPERTIES","validateModifiers","modifiers","forEach","Object","keys","modifier","key","name","console","error","String","enabled","indexOf","phase","join","fn","effect","Array","isArray","requires","requiresIfExists","map","s","find","mod","requirement"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/utils/validateModifiers.ts"],"sourcesContent":["// @ts-nocheck\nimport format from './format';\nimport { modifierPhases } from '../enums';\n\nconst INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nconst MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nconst VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\n\n/**\n * @param modifiers\n */\nexport default function validateModifiers(modifiers: any[]): void {\n  modifiers.forEach(modifier => {\n    Object.keys(modifier).forEach(key => {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', `\"${String(modifier.name)}\"`)\n            );\n          }\n\n          break;\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', `\"${String(modifier.enabled)}\"`)\n            );\n          }\n\n        case 'phase':\n          if (modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error(\n              format(\n                INVALID_MODIFIER_ERROR,\n                modifier.name,\n                '\"phase\"',\n                `either ${modifierPhases.join(', ')}`,\n                `\"${String(modifier.phase)}\"`\n              )\n            );\n          }\n\n          break;\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', `\"${String(modifier.fn)}\"`)\n            );\n          }\n\n          break;\n        case 'effect':\n          if (typeof modifier.effect !== 'function') {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', `\"${String(modifier.fn)}\"`)\n            );\n          }\n\n          break;\n        case 'requires':\n          if (!Array.isArray(modifier.requires)) {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', `\"${String(modifier.requires)}\"`)\n            );\n          }\n\n          break;\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(\n              format(\n                INVALID_MODIFIER_ERROR,\n                modifier.name,\n                '\"requiresIfExists\"',\n                '\"array\"',\n                `\"${String(modifier.requiresIfExists)}\"`\n              )\n            );\n          }\n\n          break;\n        case 'options':\n        case 'data':\n          break;\n        default:\n          console.error(\n            `PopperJS: an invalid property has been provided to the \"${\n              modifier.name\n            }\" modifier, valid properties are ${VALID_PROPERTIES.map(s => `\"${s}\"`).join(\n              ', '\n            )}; but \"${key}\" was provided.`\n          );\n      }\n\n      modifier.requires &&\n        modifier.requires.forEach(requirement => {\n          if (modifiers.find(mod => mod.name === requirement) == null) {\n            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n          }\n        });\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}