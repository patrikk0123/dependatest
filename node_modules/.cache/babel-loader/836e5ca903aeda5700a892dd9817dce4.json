{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\nexport var InternalFormFieldGroup = function InternalFormFieldGroup(_a) {\n  var children = _a.children,\n      className = _a.className,\n      header = _a.header,\n      isExpandable = _a.isExpandable,\n      isExpanded = _a.isExpanded,\n      onToggle = _a.onToggle,\n      toggleAriaLabel = _a.toggleAriaLabel,\n      props = __rest(_a, [\"children\", \"className\", \"header\", \"isExpandable\", \"isExpanded\", \"onToggle\", \"toggleAriaLabel\"]);\n\n  var headerTitleText = header ? header.props.titleText : null;\n\n  if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n    // eslint-disable-next-line no-console\n    console.error('FormFieldGroupExpandable:', 'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible');\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className)\n  }, props), isExpandable && React.createElement(GenerateId, {\n    prefix: \"form-field-group-toggle\"\n  }, function (id) {\n    return React.createElement(FormFieldGroupToggle, Object.assign({\n      onToggle: onToggle,\n      isExpanded: isExpanded,\n      \"aria-label\": toggleAriaLabel,\n      toggleId: id\n    }, headerTitleText && {\n      'aria-labelledby': \"\".concat(header.props.titleText.id, \" \").concat(id)\n    }));\n  }), header && header, (!isExpandable || isExpandable && isExpanded) && React.createElement(\"div\", {\n    className: css(styles.formFieldGroupBody)\n  }, children));\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,mDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,UAAT,QAA2B,eAA3B;AAmBA,OAAO,IAAMC,sBAAsB,GAAyD,SAA/EA,sBAA+E,CAACC,EAAD,EAS1D;MARhCC,WAMeD,GANfC;MACAC,YAKeF,GALfE;MACAC,SAIeH,GAJfG;MACAC,eAGeJ,GAHfI;MACAC,aAEeL,GAFfK;MACAC,WACeN,GADfM;MACAC,kBAAeP,GAAfO;MACGC,QAAKC,WARmF,gGAQnF;;EAER,IAAMC,eAAe,GAAGP,MAAM,GAAGA,MAAM,CAACK,KAAP,CAAaG,SAAhB,GAA4B,IAA1D;;EACA,IAAIP,YAAY,IAAI,CAACG,eAAjB,IAAoC,CAACG,eAAzC,EAA0D;IACxD;IACAE,OAAO,CAACC,KAAR,CACE,2BADF,EAEE,gHAFF;EAID;;EACD,OACEnB;IACEQ,SAAS,EAAEN,GAAG,CAACD,MAAM,CAACmB,cAAR,EAAwBT,UAAU,IAAID,YAAd,IAA8BT,MAAM,CAACoB,SAAP,CAAiBC,QAAvE,EAAiFd,SAAjF;EADhB,GAEMM,KAFN,GAIGJ,YAAY,IACXV,oBAACI,UAAD,EAAW;IAACmB,MAAM,EAAC;EAAR,CAAX,EACG,YAAE;IAAA,OACDvB,oBAACG,oBAAD,EAAqBqB;MACnBZ,QAAQ,EAAEA,QADS;MAEnBD,UAAU,EAAEA,UAFO;MAEG,cACVE,eAHO;MAInBY,QAAQ,EAAEC;IAJS,GAKdV,eAAe,IAAI;MAAE,6BAAsBP,MAAM,CAACK,KAAP,CAAaG,SAAb,CAAuBS,EAA7C,cAAmDA,EAAnD;IAAF,CALL,CAArB,CADC;EAAA,CADL,CALJ,EAiBGjB,MAAM,IAAIA,MAjBb,EAkBG,CAAC,CAACC,YAAD,IAAkBA,YAAY,IAAIC,UAAnC,KACCX;IAAKQ,SAAS,EAAEN,GAAG,CAACD,MAAM,CAAC0B,kBAAR;EAAnB,GAAiDpB,QAAjD,CAnBJ,CADF;AAwBD,CA1CM;AA2CPF,sBAAsB,CAACuB,WAAvB,GAAqC,wBAArC","names":["React","styles","css","FormFieldGroupToggle","GenerateId","InternalFormFieldGroup","_a","children","className","header","isExpandable","isExpanded","onToggle","toggleAriaLabel","props","__rest","headerTitleText","titleText","console","error","formFieldGroup","modifiers","expanded","prefix","Object","toggleId","id","formFieldGroupBody","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Form/InternalFormFieldGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nimport { FormFieldGroupToggle } from './FormFieldGroupToggle';\nimport { GenerateId } from '../../helpers';\n\nexport interface InternalFormFieldGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as form field group content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the form field group. */\n  className?: string;\n  /** Form field group header */\n  header?: any;\n  /** Flag indicating if the field group is expandable */\n  isExpandable?: boolean;\n  /** Flag indicate if the form field group is expanded. Modifies the card to be expandable. */\n  isExpanded?: boolean;\n  /** Function callback called when user clicks toggle button */\n  onToggle?: () => void;\n  /** Aria-label to use on the form field group toggle button */\n  toggleAriaLabel?: string;\n}\n\nexport const InternalFormFieldGroup: React.FunctionComponent<InternalFormFieldGroupProps> = ({\n  children,\n  className,\n  header,\n  isExpandable,\n  isExpanded,\n  onToggle,\n  toggleAriaLabel,\n  ...props\n}: InternalFormFieldGroupProps) => {\n  const headerTitleText = header ? header.props.titleText : null;\n  if (isExpandable && !toggleAriaLabel && !headerTitleText) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'FormFieldGroupExpandable:',\n      'toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible'\n    );\n  }\n  return (\n    <div\n      className={css(styles.formFieldGroup, isExpanded && isExpandable && styles.modifiers.expanded, className)}\n      {...props}\n    >\n      {isExpandable && (\n        <GenerateId prefix=\"form-field-group-toggle\">\n          {id => (\n            <FormFieldGroupToggle\n              onToggle={onToggle}\n              isExpanded={isExpanded}\n              aria-label={toggleAriaLabel}\n              toggleId={id}\n              {...(headerTitleText && { 'aria-labelledby': `${header.props.titleText.id} ${id}` })}\n            />\n          )}\n        </GenerateId>\n      )}\n      {header && header}\n      {(!isExpandable || (isExpandable && isExpanded)) && (\n        <div className={css(styles.formFieldGroupBody)}>{children}</div>\n      )}\n    </div>\n  );\n};\nInternalFormFieldGroup.displayName = 'InternalFormFieldGroup';\n"]},"metadata":{},"sourceType":"module"}