{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport Dropzone from 'react-dropzone';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nexport var MultipleFileUploadContext = React.createContext({\n  open: function open() {}\n});\nexport var MultipleFileUpload = function MultipleFileUpload(_a) {\n  var className = _a.className,\n      children = _a.children,\n      _a$dropzoneProps = _a.dropzoneProps,\n      dropzoneProps = _a$dropzoneProps === void 0 ? {} : _a$dropzoneProps,\n      isHorizontal = _a.isHorizontal,\n      _a$onFileDrop = _a.onFileDrop,\n      onFileDrop = _a$onFileDrop === void 0 ? function () {} : _a$onFileDrop,\n      props = __rest(_a, [\"className\", \"children\", \"dropzoneProps\", \"isHorizontal\", \"onFileDrop\"]);\n\n  var onDropAccepted = function onDropAccepted(acceptedFiles, event) {\n    onFileDrop(acceptedFiles); // allow users to set a custom drop accepted handler rather than using on data change\n\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  var onDropRejected = function onDropRejected(rejectedFiles, event) {\n    dropzoneProps.onDropRejected && (dropzoneProps === null || dropzoneProps === void 0 ? void 0 : dropzoneProps.onDropRejected(rejectedFiles, event));\n  };\n\n  return React.createElement(Dropzone, Object.assign({\n    multiple: true\n  }, dropzoneProps, {\n    onDropAccepted: onDropAccepted,\n    onDropRejected: onDropRejected\n  }), function (_ref) {\n    var getRootProps = _ref.getRootProps,\n        getInputProps = _ref.getInputProps,\n        isDragActive = _ref.isDragActive,\n        open = _ref.open;\n    var rootProps = getRootProps(Object.assign(Object.assign({}, props), {\n      onClick: function onClick(event) {\n        return event.preventDefault();\n      } // Prevents clicking TextArea from opening file dialog\n\n    }));\n    var inputProps = getInputProps();\n    return React.createElement(MultipleFileUploadContext.Provider, {\n      value: {\n        open: open\n      }\n    }, React.createElement(\"div\", Object.assign({\n      className: css(styles.multipleFileUpload, isDragActive && styles.modifiers.dragOver, isHorizontal && styles.modifiers.horizontal, className)\n    }, rootProps, props), React.createElement(\"input\", Object.assign({}, inputProps)), children));\n  });\n};\nMultipleFileUpload.displayName = 'MultipleFileUpload';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAA8D,gBAA9D;AACA,OAAOC,MAAP,MAAmB,iFAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAeA,OAAO,IAAMC,yBAAyB,GAAGJ,KAAK,CAACK,aAAN,CAAoB;EAC3DC,IAAI,EAAE,gBAAK,CAAG;AAD6C,CAApB,CAAlC;AAIP,OAAO,IAAMC,kBAAkB,GAAqD,SAAvEA,kBAAuE,CAACC,EAAD,EAOtD;MAN5BC,YAIqBD,GAJrBC;MACAC,WAGqBF,GAHrBE;yBAGqBF,GAFrBG;MAAAA,8CAAgB;MAChBC,eACqBJ,GADrBI;sBACqBJ,GAArBK;MAAAA,wCAAa,YAAK,CAAG;MAClBC,QAAKC,WAN2E,wEAM3E;;EAER,IAAMC,cAAc,GAAyB,SAAvCA,cAAuC,CAACC,aAAD,EAAwBC,KAAxB,EAAiC;IAC5EL,UAAU,CAACI,aAAD,CAAV,CAD4E,CAE5E;;IACAN,aAAa,CAACK,cAAd,IAAgCL,aAAa,CAACK,cAAd,CAA6BC,aAA7B,EAA4CC,KAA5C,CAAhC;EACD,CAJD;;EAMA,IAAMC,cAAc,GAAyB,SAAvCA,cAAuC,CAACC,aAAD,EAAgBF,KAAhB,EAAyB;IACpEP,aAAa,CAACQ,cAAd,KAAgCR,aAAa,SAAb,iBAAa,WAAb,GAAa,MAAb,gBAAa,CAAEQ,cAAf,CAA8BC,aAA9B,EAA6CF,KAA7C,CAAhC;EACD,CAFD;;EAIA,OACElB,oBAACC,QAAD,EAASoB;IAACC,QAAQ,EAAE;EAAX,GAAqBX,aAArB,EAAkC;IAAEK,cAAc,EAAEA,cAAlB;IAAkCG,cAAc,EAAEA;EAAlD,CAAlC,CAAT,EACG,gBAAwD;IAAA,IAArDI,YAAqD,QAArDA,YAAqD;IAAA,IAAvCC,aAAuC,QAAvCA,aAAuC;IAAA,IAAxBC,YAAwB,QAAxBA,YAAwB;IAAA,IAAVnB,IAAU,QAAVA,IAAU;IACvD,IAAMoB,SAAS,GAAGH,YAAY,iCACzBT,KADyB,GACpB;MACRa,OAAO,EAAE,sBAAK;QAAA,OAAIT,KAAK,CAACU,cAAN,EAAJ;MAAA,CADN,CACiC;;IADjC,CADoB,EAA9B;IAIA,IAAMC,UAAU,GAAGL,aAAa,EAAhC;IAEA,OACExB,oBAACI,yBAAyB,CAAC0B,QAA3B,EAAmC;MAACC,KAAK,EAAE;QAAEzB,IAAI,EAAJA;MAAF;IAAR,CAAnC,EACEN;MACES,SAAS,EAAEN,GAAG,CACZD,MAAM,CAAC8B,kBADK,EAEZP,YAAY,IAAIvB,MAAM,CAAC+B,SAAP,CAAiBC,QAFrB,EAGZtB,YAAY,IAAIV,MAAM,CAAC+B,SAAP,CAAiBE,UAHrB,EAIZ1B,SAJY;IADhB,GAOMiB,SAPN,EAQMZ,KARN,GAUEd,+CAEM6B,UAFN,EAVF,EAcGnB,QAdH,CADF,CADF;EAoBD,CA5BH,CADF;AAgCD,CAlDM;AAoDPH,kBAAkB,CAAC6B,WAAnB,GAAiC,oBAAjC","names":["React","Dropzone","styles","css","MultipleFileUploadContext","createContext","open","MultipleFileUpload","_a","className","children","dropzoneProps","isHorizontal","onFileDrop","props","__rest","onDropAccepted","acceptedFiles","event","onDropRejected","rejectedFiles","Object","multiple","getRootProps","getInputProps","isDragActive","rootProps","onClick","preventDefault","inputProps","Provider","value","multipleFileUpload","modifiers","dragOver","horizontal","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/MultipleFileUpload/MultipleFileUpload.tsx"],"sourcesContent":["import * as React from 'react';\nimport Dropzone, { DropzoneProps, DropFileEventHandler } from 'react-dropzone';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\n\nexport interface MultipleFileUploadProps extends Omit<React.HTMLProps<HTMLDivElement>, 'value'> {\n  /** Content rendered inside the multi upload field */\n  children?: React.ReactNode;\n  /** Class to add to outer div */\n  className?: string;\n  /** Optional extra props to customize react-dropzone. */\n  dropzoneProps?: DropzoneProps;\n  /** Flag setting the component to horizontal styling mode */\n  isHorizontal?: boolean;\n  /** When files are dropped or uploaded this callback will be called with all accepted files */\n  onFileDrop?: (data: File[]) => void;\n}\n\nexport const MultipleFileUploadContext = React.createContext({\n  open: () => {}\n});\n\nexport const MultipleFileUpload: React.FunctionComponent<MultipleFileUploadProps> = ({\n  className,\n  children,\n  dropzoneProps = {},\n  isHorizontal,\n  onFileDrop = () => {},\n  ...props\n}: MultipleFileUploadProps) => {\n  const onDropAccepted: DropFileEventHandler = (acceptedFiles: File[], event) => {\n    onFileDrop(acceptedFiles);\n    // allow users to set a custom drop accepted handler rather than using on data change\n    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);\n  };\n\n  const onDropRejected: DropFileEventHandler = (rejectedFiles, event) => {\n    dropzoneProps.onDropRejected && dropzoneProps?.onDropRejected(rejectedFiles, event);\n  };\n\n  return (\n    <Dropzone multiple={true} {...dropzoneProps} onDropAccepted={onDropAccepted} onDropRejected={onDropRejected}>\n      {({ getRootProps, getInputProps, isDragActive, open }) => {\n        const rootProps = getRootProps({\n          ...props,\n          onClick: event => event.preventDefault() // Prevents clicking TextArea from opening file dialog\n        });\n        const inputProps = getInputProps();\n\n        return (\n          <MultipleFileUploadContext.Provider value={{ open }}>\n            <div\n              className={css(\n                styles.multipleFileUpload,\n                isDragActive && styles.modifiers.dragOver,\n                isHorizontal && styles.modifiers.horizontal,\n                className\n              )}\n              {...rootProps}\n              {...props}\n            >\n              <input\n                /* hidden, necessary for react-dropzone */\n                {...inputProps}\n              />\n              {children}\n            </div>\n          </MultipleFileUploadContext.Provider>\n        );\n      }}\n    </Dropzone>\n  );\n};\n\nMultipleFileUpload.displayName = 'MultipleFileUpload';\n"]},"metadata":{},"sourceType":"module"}