{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\nimport { Tooltip } from '../Tooltip';\nexport var variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\nexport var NotificationDrawerListItemHeader = function NotificationDrawerListItemHeader(_a) {\n  var children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$icon = _a.icon,\n      icon = _a$icon === void 0 ? null : _a$icon,\n      srTitle = _a.srTitle,\n      title = _a.title,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? 'default' : _a$variant,\n      _a$truncateTitle = _a.truncateTitle,\n      truncateTitle = _a$truncateTitle === void 0 ? 0 : _a$truncateTitle,\n      tooltipPosition = _a.tooltipPosition,\n      props = __rest(_a, [\"children\", \"className\", \"icon\", \"srTitle\", \"title\", \"variant\", \"truncateTitle\", \"tooltipPosition\"]);\n\n  var titleRef = React.useRef(null);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isTooltipVisible = _React$useState2[0],\n      setIsTooltipVisible = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    var showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  var Icon = variantIcons[variant];\n  var Title = React.createElement(\"h2\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)\n  }), srTitle && React.createElement(\"span\", {\n    className: css(a11yStyles.screenReader)\n  }, srTitle), title);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerListItemHeader, className)\n  }), React.createElement(\"span\", {\n    className: css(styles.notificationDrawerListItemHeaderIcon)\n  }, icon ? icon : React.createElement(Icon, null)), isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title), children && React.createElement(\"div\", {\n    className: css(styles.notificationDrawerListItemAction)\n  }, children));\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';","map":{"version":3,"mappings":"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","names":["React","BellIcon","CheckCircleIcon","ExclamationCircleIcon","ExclamationTriangleIcon","InfoCircleIcon","css","styles","a11yStyles","maxLines","Tooltip","variantIcons","success","danger","warning","info","default","NotificationDrawerListItemHeader","_a","children","className","icon","srTitle","title","variant","truncateTitle","tooltipPosition","props","__rest","titleRef","useRef","useState","isTooltipVisible","setIsTooltipVisible","useEffect","current","style","setProperty","name","toString","showTooltip","offsetHeight","scrollHeight","Icon","Title","tabIndex","ref","notificationDrawerListItemHeaderTitle","modifiers","truncate","screenReader","Fragment","notificationDrawerListItemHeader","notificationDrawerListItemHeaderIcon","content","position","notificationDrawerListItemAction","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/NotificationDrawer/NotificationDrawerListItemHeader.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport a11yStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\n\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines';\n\nimport { Tooltip, TooltipPosition } from '../Tooltip';\n\nexport const variantIcons = {\n  success: CheckCircleIcon,\n  danger: ExclamationCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InfoCircleIcon,\n  default: BellIcon\n};\n\nexport interface NotificationDrawerListItemHeaderProps extends React.HTMLProps<HTMLDivElement> {\n  /**  Actions rendered inside the notification drawer list item header */\n  children?: React.ReactNode;\n  /**  Additional classes for notification drawer list item header. */\n  className?: string;\n  /**  Add custom icon for notification drawer list item header */\n  icon?: React.ReactNode;\n  /**  Notification drawer list item header screen reader title */\n  srTitle?: string;\n  /**  Notification drawer list item title */\n  title: string;\n  /**  Variant indicates the severity level */\n  variant?: 'success' | 'danger' | 'warning' | 'info' | 'default';\n  /** Truncate title to number of lines */\n  truncateTitle?: number;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\nexport const NotificationDrawerListItemHeader: React.FunctionComponent<NotificationDrawerListItemHeaderProps> = ({\n  children,\n  className = '',\n  icon = null,\n  srTitle,\n  title,\n  variant = 'default',\n  truncateTitle = 0,\n  tooltipPosition,\n  ...props\n}: NotificationDrawerListItemHeaderProps) => {\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Icon = variantIcons[variant];\n  const Title = (\n    <h2\n      {...(isTooltipVisible && { tabIndex: 0 })}\n      ref={titleRef}\n      className={css(styles.notificationDrawerListItemHeaderTitle, truncateTitle && styles.modifiers.truncate)}\n    >\n      {srTitle && <span className={css(a11yStyles.screenReader)}>{srTitle}</span>}\n      {title}\n    </h2>\n  );\n\n  return (\n    <React.Fragment>\n      <div {...props} className={css(styles.notificationDrawerListItemHeader, className)}>\n        <span className={css(styles.notificationDrawerListItemHeaderIcon)}>{icon ? icon : <Icon />}</span>\n        {isTooltipVisible ? (\n          <Tooltip content={title} position={tooltipPosition}>\n            {Title}\n          </Tooltip>\n        ) : (\n          Title\n        )}\n      </div>\n      {children && <div className={css(styles.notificationDrawerListItemAction)}>{children}</div>}\n    </React.Fragment>\n  );\n};\nNotificationDrawerListItemHeader.displayName = 'NotificationDrawerListItemHeader';\n"]},"metadata":{},"sourceType":"module"}