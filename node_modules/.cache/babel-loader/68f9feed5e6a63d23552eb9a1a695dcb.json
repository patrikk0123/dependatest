{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { canUseDOM, KEY_CODES } from '../../helpers';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Backdrop/backdrop';\nimport { ModalContent } from './ModalContent';\nimport { getDefaultOUIAId } from '../../helpers';\nexport var ModalVariant;\n\n(function (ModalVariant) {\n  ModalVariant[\"small\"] = \"small\";\n  ModalVariant[\"medium\"] = \"medium\";\n  ModalVariant[\"large\"] = \"large\";\n  ModalVariant[\"default\"] = \"default\";\n})(ModalVariant || (ModalVariant = {}));\n\nexport class Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.boxId = '';\n    this.labelId = '';\n    this.descriptorId = '';\n\n    this.handleEscKeyClick = event => {\n      const {\n        onEscapePress\n      } = this.props;\n\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.props.isOpen) {\n        onEscapePress ? onEscapePress(event) : this.props.onClose();\n      }\n    };\n\n    this.getElement = appendTo => {\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n\n      return appendTo || document.body;\n    };\n\n    this.toggleSiblingsFromScreenReaders = hide => {\n      const {\n        appendTo\n      } = this.props;\n      const target = this.getElement(appendTo);\n      const bodyChildren = target.children;\n\n      for (const child of Array.from(bodyChildren)) {\n        if (child !== this.state.container) {\n          hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');\n        }\n      }\n    };\n\n    this.isEmpty = value => value === null || value === undefined || value === '';\n\n    const boxIdNum = Modal.currentId++;\n    const labelIdNum = boxIdNum + 1;\n    const descriptorIdNum = boxIdNum + 2;\n    this.boxId = props.id || `pf-modal-part-${boxIdNum}`;\n    this.labelId = `pf-modal-part-${labelIdNum}`;\n    this.descriptorId = `pf-modal-part-${descriptorIdNum}`;\n    this.state = {\n      container: undefined,\n      ouiaStateId: getDefaultOUIAId(Modal.displayName, props.variant)\n    };\n  }\n\n  componentDidMount() {\n    const {\n      appendTo,\n      title,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      hasNoBodyWrapper,\n      header\n    } = this.props;\n    const target = this.getElement(appendTo);\n    const container = document.createElement('div');\n    this.setState({\n      container\n    });\n    target.appendChild(container);\n    target.addEventListener('keydown', this.handleEscKeyClick, false);\n\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n    }\n\n    if (this.isEmpty(title) && this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby)) {\n      // eslint-disable-next-line no-console\n      console.error('Modal: Specify at least one of: title, aria-label, aria-labelledby.');\n    }\n\n    if (this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby) && (hasNoBodyWrapper || header)) {\n      // eslint-disable-next-line no-console\n      console.error('Modal: When using hasNoBodyWrapper or setting a custom header, ensure you assign an accessible name to the the modal container with aria-label or aria-labelledby.');\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      appendTo\n    } = this.props;\n    const target = this.getElement(appendTo);\n\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(true);\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(false);\n    }\n  }\n\n  componentWillUnmount() {\n    const {\n      appendTo\n    } = this.props;\n    const target = this.getElement(appendTo);\n\n    if (this.state.container) {\n      target.removeChild(this.state.container);\n    }\n\n    target.removeEventListener('keydown', this.handleEscKeyClick, false);\n    target.classList.remove(css(styles.backdropOpen));\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      appendTo,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onEscapePress,\n      'aria-labelledby': ariaLabelledby,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedby,\n      bodyAriaLabel,\n      bodyAriaRole,\n      title,\n      titleIconVariant,\n      titleLabel,\n      ouiaId,\n      ouiaSafe\n    } = _a,\n          props = __rest(_a, [\"appendTo\", \"onEscapePress\", 'aria-labelledby', 'aria-label', 'aria-describedby', \"bodyAriaLabel\", \"bodyAriaRole\", \"title\", \"titleIconVariant\", \"titleLabel\", \"ouiaId\", \"ouiaSafe\"]);\n\n    const {\n      container\n    } = this.state;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(React.createElement(ModalContent, Object.assign({}, props, {\n      boxId: this.boxId,\n      labelId: this.labelId,\n      descriptorId: this.descriptorId,\n      title: title,\n      titleIconVariant: titleIconVariant,\n      titleLabel: titleLabel,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescribedby,\n      \"aria-labelledby\": ariaLabelledby,\n      bodyAriaLabel: bodyAriaLabel,\n      bodyAriaRole: bodyAriaRole,\n      ouiaId: ouiaId !== undefined ? ouiaId : this.state.ouiaStateId,\n      ouiaSafe: ouiaSafe\n    })), container);\n  }\n\n}\nModal.displayName = 'Modal';\nModal.currentId = 0;\nModal.defaultProps = {\n  className: '',\n  isOpen: false,\n  title: '',\n  titleIconVariant: null,\n  titleLabel: '',\n  'aria-label': '',\n  showClose: true,\n  'aria-describedby': '',\n  'aria-labelledby': '',\n  id: undefined,\n  actions: [],\n  onClose: () => undefined,\n  variant: 'default',\n  hasNoBodyWrapper: false,\n  appendTo: () => document.body,\n  ouiaSafe: true\n};","map":{"version":3,"mappings":"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","names":["React","ReactDOM","canUseDOM","KEY_CODES","css","styles","ModalContent","getDefaultOUIAId","ModalVariant","Modal","Component","constructor","props","event","onEscapePress","keyCode","ESCAPE_KEY","isOpen","onClose","appendTo","document","body","hide","target","getElement","bodyChildren","children","child","Array","from","state","container","setAttribute","removeAttribute","value","undefined","boxIdNum","currentId","labelIdNum","descriptorIdNum","boxId","id","labelId","descriptorId","ouiaStateId","displayName","variant","componentDidMount","title","ariaLabel","ariaLabelledby","hasNoBodyWrapper","header","createElement","setState","appendChild","addEventListener","handleEscKeyClick","classList","add","backdropOpen","remove","isEmpty","console","error","componentDidUpdate","toggleSiblingsFromScreenReaders","componentWillUnmount","removeChild","removeEventListener","render","_a","ariaDescribedby","bodyAriaLabel","bodyAriaRole","titleIconVariant","titleLabel","ouiaId","ouiaSafe","createPortal","Object","className","showClose","actions"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Modal/Modal.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { canUseDOM, KEY_CODES, PickOptional } from '../../helpers';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Backdrop/backdrop';\nimport { ModalContent } from './ModalContent';\nimport { OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface ModalProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** Content rendered inside the Modal. */\n  children: React.ReactNode;\n  /** Additional classes added to the Modal */\n  className?: string;\n  /** Flag to show the modal */\n  isOpen?: boolean;\n  /** Complex header (more than just text), supersedes title for header content */\n  header?: React.ReactNode;\n  /** Optional help section for the Modal Header */\n  help?: React.ReactNode;\n  /** Simple text content of the Modal Header, also used for aria-label on the body */\n  title?: string;\n  /** Optional alert icon (or other) to show before the title of the Modal Header\n   * When the predefined alert types are used the default styling\n   * will be automatically applied */\n  titleIconVariant?: 'success' | 'danger' | 'warning' | 'info' | 'default' | React.ComponentType<any>;\n  /** Optional title label text for screen readers */\n  titleLabel?: string;\n  /** Id to use for Modal Box label */\n  'aria-labelledby'?: string | null;\n  /** Accessible descriptor of modal */\n  'aria-label'?: string;\n  /** Id to use for Modal Box descriptor */\n  'aria-describedby'?: string;\n  /** Accessible label applied to the modal box body. This should be used to communicate important information about the modal box body div if needed, such as that it is scrollable */\n  bodyAriaLabel?: string;\n  /** Accessible role applied to the modal box body. This will default to region if a body aria label is applied. Set to a more appropriate role as applicable based on the modal content and context */\n  bodyAriaRole?: string;\n  /** Flag to show the close button in the header area of the modal */\n  showClose?: boolean;\n  /** Custom footer */\n  footer?: React.ReactNode;\n  /** Action buttons to add to the standard Modal Footer, ignored if `footer` is given */\n  actions?: any;\n  /** A callback for when the close button is clicked */\n  onClose?: () => void;\n  /** Default width of the Modal. */\n  width?: number | string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag to disable focus trap */\n  disableFocusTrap?: boolean;\n  /** Description of the modal */\n  description?: React.ReactNode;\n  /** Variant of the modal */\n  variant?: 'small' | 'medium' | 'large' | 'default';\n  /** Alternate position of the modal */\n  position?: 'top';\n  /** Offset from alternate position. Can be any valid CSS length/percentage */\n  positionOffset?: string;\n  /** Flag indicating if modal content should be placed in a modal box body wrapper */\n  hasNoBodyWrapper?: boolean;\n  /** An ID to use for the ModalBox container */\n  id?: string;\n  /** Modal handles pressing of the Escape key and closes the modal. If you want to handle this yourself you can use this callback function */\n  onEscapePress?: (event: KeyboardEvent) => void;\n}\n\nexport enum ModalVariant {\n  small = 'small',\n  medium = 'medium',\n  large = 'large',\n  default = 'default'\n}\n\ninterface ModalState {\n  container: HTMLElement;\n  ouiaStateId: string;\n}\n\nexport class Modal extends React.Component<ModalProps, ModalState> {\n  static displayName = 'Modal';\n  static currentId = 0;\n  boxId = '';\n  labelId = '';\n  descriptorId = '';\n\n  static defaultProps: PickOptional<ModalProps> = {\n    className: '',\n    isOpen: false,\n    title: '',\n    titleIconVariant: null,\n    titleLabel: '',\n    'aria-label': '',\n    showClose: true,\n    'aria-describedby': '',\n    'aria-labelledby': '',\n    id: undefined,\n    actions: [] as any[],\n    onClose: () => undefined as any,\n    variant: 'default',\n    hasNoBodyWrapper: false,\n    appendTo: () => document.body,\n    ouiaSafe: true\n  };\n\n  constructor(props: ModalProps) {\n    super(props);\n    const boxIdNum = Modal.currentId++;\n    const labelIdNum = boxIdNum + 1;\n    const descriptorIdNum = boxIdNum + 2;\n    this.boxId = props.id || `pf-modal-part-${boxIdNum}`;\n    this.labelId = `pf-modal-part-${labelIdNum}`;\n    this.descriptorId = `pf-modal-part-${descriptorIdNum}`;\n\n    this.state = {\n      container: undefined,\n      ouiaStateId: getDefaultOUIAId(Modal.displayName, props.variant)\n    };\n  }\n\n  handleEscKeyClick = (event: KeyboardEvent): void => {\n    const { onEscapePress } = this.props;\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY && this.props.isOpen) {\n      onEscapePress ? onEscapePress(event) : this.props.onClose();\n    }\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  toggleSiblingsFromScreenReaders = (hide: boolean) => {\n    const { appendTo } = this.props;\n    const target: HTMLElement = this.getElement(appendTo);\n    const bodyChildren = target.children;\n    for (const child of Array.from(bodyChildren)) {\n      if (child !== this.state.container) {\n        hide ? child.setAttribute('aria-hidden', '' + hide) : child.removeAttribute('aria-hidden');\n      }\n    }\n  };\n\n  isEmpty = (value: string | null) => value === null || value === undefined || value === '';\n\n  componentDidMount() {\n    const {\n      appendTo,\n      title,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      hasNoBodyWrapper,\n      header\n    } = this.props;\n    const target: HTMLElement = this.getElement(appendTo);\n    const container = document.createElement('div');\n    this.setState({ container });\n    target.appendChild(container);\n    target.addEventListener('keydown', this.handleEscKeyClick, false);\n\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n    }\n\n    if (this.isEmpty(title) && this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby)) {\n      // eslint-disable-next-line no-console\n      console.error('Modal: Specify at least one of: title, aria-label, aria-labelledby.');\n    }\n\n    if (this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby) && (hasNoBodyWrapper || header)) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Modal: When using hasNoBodyWrapper or setting a custom header, ensure you assign an accessible name to the the modal container with aria-label or aria-labelledby.'\n      );\n    }\n  }\n\n  componentDidUpdate() {\n    const { appendTo } = this.props;\n    const target: HTMLElement = this.getElement(appendTo);\n    if (this.props.isOpen) {\n      target.classList.add(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(true);\n    } else {\n      target.classList.remove(css(styles.backdropOpen));\n      this.toggleSiblingsFromScreenReaders(false);\n    }\n  }\n\n  componentWillUnmount() {\n    const { appendTo } = this.props;\n    const target: HTMLElement = this.getElement(appendTo);\n    if (this.state.container) {\n      target.removeChild(this.state.container);\n    }\n    target.removeEventListener('keydown', this.handleEscKeyClick, false);\n    target.classList.remove(css(styles.backdropOpen));\n  }\n\n  render() {\n    const {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      appendTo,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onEscapePress,\n      'aria-labelledby': ariaLabelledby,\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedby,\n      bodyAriaLabel,\n      bodyAriaRole,\n      title,\n      titleIconVariant,\n      titleLabel,\n      ouiaId,\n      ouiaSafe,\n      ...props\n    } = this.props;\n    const { container } = this.state;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      <ModalContent\n        {...props}\n        boxId={this.boxId}\n        labelId={this.labelId}\n        descriptorId={this.descriptorId}\n        title={title}\n        titleIconVariant={titleIconVariant}\n        titleLabel={titleLabel}\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedby}\n        aria-labelledby={ariaLabelledby}\n        bodyAriaLabel={bodyAriaLabel}\n        bodyAriaRole={bodyAriaRole}\n        ouiaId={ouiaId !== undefined ? ouiaId : this.state.ouiaStateId}\n        ouiaSafe={ouiaSafe}\n      />,\n      container\n    ) as React.ReactElement;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}