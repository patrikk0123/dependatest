{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nexport class MenuToggleBase extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.displayName = 'MenuToggleBase';\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      className,\n      icon,\n      badge,\n      isExpanded,\n      isDisabled,\n      isFullHeight,\n      isFullWidth,\n      variant,\n      innerRef\n    } = _a,\n          props = __rest(_a, [\"children\", \"className\", \"icon\", \"badge\", \"isExpanded\", \"isDisabled\", \"isFullHeight\", \"isFullWidth\", \"variant\", \"innerRef\"]);\n\n    const isPlain = variant === 'plain';\n    const isPlainText = variant === 'plainText';\n    const content = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n      className: css(styles.menuToggleIcon)\n    }, icon), React.createElement(\"span\", {\n      className: \"pf-c-menu-toggle__text\"\n    }, children), badge && React.createElement(\"span\", {\n      className: css(styles.menuToggleCount)\n    }, badge), React.createElement(\"span\", {\n      className: css(styles.menuToggleControls)\n    }, React.createElement(\"span\", {\n      className: css(styles.menuToggleToggleIcon)\n    }, React.createElement(CaretDownIcon, {\n      \"aria-hidden\": true\n    }))));\n    return React.createElement(\"button\", Object.assign({\n      className: css(styles.menuToggle, isExpanded && styles.modifiers.expanded, variant === 'primary' && styles.modifiers.primary, variant === 'secondary' && styles.modifiers.secondary, (isPlain || isPlainText) && styles.modifiers.plain, isPlainText && styles.modifiers.text, isFullHeight && styles.modifiers.fullHeight, isFullWidth && styles.modifiers.fullWidth, className),\n      type: \"button\",\n      \"aria-expanded\": false,\n      ref: innerRef\n    }, isExpanded && {\n      'aria-expanded': true\n    }, isDisabled && {\n      disabled: true\n    }, props), isPlain && children, !isPlain && content);\n  }\n\n}\nMenuToggleBase.defaultProps = {\n  className: '',\n  isExpanded: false,\n  isDisabled: false,\n  isFullWidth: false,\n  isFullHeight: false,\n  variant: 'default'\n};\nexport const MenuToggle = React.forwardRef((props, ref) => React.createElement(MenuToggleBase, Object.assign({\n  innerRef: ref\n}, props)));\nMenuToggle.displayName = 'MenuToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,gEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,aAAP,MAA0B,wDAA1B;AA2BA,OAAM,MAAOC,cAAP,SAA8BJ,KAAK,CAACK,SAApC,CAA8D;EAApEC;;IACE,mBAAc,gBAAd;EAiED;;EAvDCC,MAAM;IACJ,MAAMC,KAYF,KAAKC,KAZT;IAAA,MAAM;MACJC,QADI;MAEJC,SAFI;MAGJC,IAHI;MAIJC,KAJI;MAKJC,UALI;MAMJC,UANI;MAOJC,YAPI;MAQJC,WARI;MASJC,OATI;MAUJC;IAVI,IAUIX,EAVV;IAAA,MAWKC,KAAK,cAXJ,4HAWI,CAXV;;IAcA,MAAMW,OAAO,GAAGF,OAAO,KAAK,OAA5B;IACA,MAAMG,WAAW,GAAGH,OAAO,KAAK,WAAhC;IAEA,MAAMI,OAAO,GACXtB,oBAACA,KAAK,CAACuB,QAAP,EAAe,IAAf,EACGX,IAAI,IAAIZ;MAAMW,SAAS,EAAET,GAAG,CAACD,MAAM,CAACuB,cAAR;IAApB,GAA8CZ,IAA9C,CADX,EAEEZ;MAAMW,SAAS,EAAC;IAAhB,GAA0CD,QAA1C,CAFF,EAGGG,KAAK,IAAIb;MAAMW,SAAS,EAAET,GAAG,CAACD,MAAM,CAACwB,eAAR;IAApB,GAA+CZ,KAA/C,CAHZ,EAIEb;MAAMW,SAAS,EAAET,GAAG,CAACD,MAAM,CAACyB,kBAAR;IAApB,GACE1B;MAAMW,SAAS,EAAET,GAAG,CAACD,MAAM,CAAC0B,oBAAR;IAApB,GACE3B,oBAACG,aAAD,EAAc;MAAA;IAAA,CAAd,CADF,CADF,CAJF,CADF;IAYA,OACEH;MACEW,SAAS,EAAET,GAAG,CACZD,MAAM,CAAC2B,UADK,EAEZd,UAAU,IAAIb,MAAM,CAAC4B,SAAP,CAAiBC,QAFnB,EAGZZ,OAAO,KAAK,SAAZ,IAAyBjB,MAAM,CAAC4B,SAAP,CAAiBE,OAH9B,EAIZb,OAAO,KAAK,WAAZ,IAA2BjB,MAAM,CAAC4B,SAAP,CAAiBG,SAJhC,EAKZ,CAACZ,OAAO,IAAIC,WAAZ,KAA4BpB,MAAM,CAAC4B,SAAP,CAAiBI,KALjC,EAMZZ,WAAW,IAAIpB,MAAM,CAAC4B,SAAP,CAAiBK,IANpB,EAOZlB,YAAY,IAAIf,MAAM,CAAC4B,SAAP,CAAiBM,UAPrB,EAQZlB,WAAW,IAAIhB,MAAM,CAAC4B,SAAP,CAAiBO,SARpB,EASZzB,SATY,CADhB;MAYE0B,IAAI,EAAC,QAZP;MAYe,iBACE,KAbjB;MAcEC,GAAG,EAAEnB;IAdP,GAeOL,UAAU,IAAI;MAAE,iBAAiB;IAAnB,CAfrB,EAgBOC,UAAU,IAAI;MAAEwB,QAAQ,EAAE;IAAZ,CAhBrB,EAiBM9B,KAjBN,GAmBGW,OAAO,IAAIV,QAnBd,EAoBG,CAACU,OAAD,IAAYE,OApBf,CADF;EAwBD;;AAjEiE;AAE3DlB,8BAAe;EACpBO,SAAS,EAAE,EADS;EAEpBG,UAAU,EAAE,KAFQ;EAGpBC,UAAU,EAAE,KAHQ;EAIpBE,WAAW,EAAE,KAJO;EAKpBD,YAAY,EAAE,KALM;EAMpBE,OAAO,EAAE;AANW,CAAf;AAkET,OAAO,MAAMsB,UAAU,GAAGxC,KAAK,CAACyC,UAAN,CAAiB,CAAChC,KAAD,EAAyB6B,GAAzB,KACzCtC,oBAACI,cAAD,EAAesC;EAACvB,QAAQ,EAAEmB;AAAX,GAAoB7B,KAApB,CAAf,CADwB,CAAnB;AAIP+B,UAAU,CAACG,WAAX,GAAyB,YAAzB","names":["React","styles","css","CaretDownIcon","MenuToggleBase","Component","constructor","render","_a","props","children","className","icon","badge","isExpanded","isDisabled","isFullHeight","isFullWidth","variant","innerRef","isPlain","isPlainText","content","Fragment","menuToggleIcon","menuToggleCount","menuToggleControls","menuToggleToggleIcon","menuToggle","modifiers","expanded","primary","secondary","plain","text","fullHeight","fullWidth","type","ref","disabled","MenuToggle","forwardRef","Object","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/MenuToggle/MenuToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MenuToggle/menu-toggle';\nimport { css } from '@patternfly/react-styles';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { BadgeProps } from '../Badge';\n\nexport interface MenuToggleProps\n  extends Omit<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, 'ref'> {\n  /** Content rendered inside the toggle */\n  children?: React.ReactNode;\n  /** Additional classes added to the toggle */\n  className?: string;\n  /** Flag indicating the toggle has expanded styling */\n  isExpanded?: boolean;\n  /** Flag indicating the toggle is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating the toggle is full height */\n  isFullHeight?: boolean;\n  /** Flag indicating the toggle takes up the full width of its parent */\n  isFullWidth?: boolean;\n  /** Variant styles of the menu toggle */\n  variant?: 'default' | 'plain' | 'primary' | 'plainText' | 'secondary';\n  /** Optional icon rendered inside the toggle, before the children content */\n  icon?: React.ReactNode;\n  /** Optional badge rendered inside the toggle, after the children content */\n  badge?: BadgeProps | React.ReactNode;\n  /** Forwarded ref */\n  innerRef?: React.Ref<HTMLButtonElement>;\n}\n\nexport class MenuToggleBase extends React.Component<MenuToggleProps> {\n  displayName = 'MenuToggleBase';\n  static defaultProps = {\n    className: '',\n    isExpanded: false,\n    isDisabled: false,\n    isFullWidth: false,\n    isFullHeight: false,\n    variant: 'default'\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      icon,\n      badge,\n      isExpanded,\n      isDisabled,\n      isFullHeight,\n      isFullWidth,\n      variant,\n      innerRef,\n      ...props\n    } = this.props;\n\n    const isPlain = variant === 'plain';\n    const isPlainText = variant === 'plainText';\n\n    const content = (\n      <React.Fragment>\n        {icon && <span className={css(styles.menuToggleIcon)}>{icon}</span>}\n        <span className=\"pf-c-menu-toggle__text\">{children}</span>\n        {badge && <span className={css(styles.menuToggleCount)}>{badge as React.ReactNode}</span>}\n        <span className={css(styles.menuToggleControls)}>\n          <span className={css(styles.menuToggleToggleIcon)}>\n            <CaretDownIcon aria-hidden />\n          </span>\n        </span>\n      </React.Fragment>\n    );\n    return (\n      <button\n        className={css(\n          styles.menuToggle,\n          isExpanded && styles.modifiers.expanded,\n          variant === 'primary' && styles.modifiers.primary,\n          variant === 'secondary' && styles.modifiers.secondary,\n          (isPlain || isPlainText) && styles.modifiers.plain,\n          isPlainText && styles.modifiers.text,\n          isFullHeight && styles.modifiers.fullHeight,\n          isFullWidth && styles.modifiers.fullWidth,\n          className\n        )}\n        type=\"button\"\n        aria-expanded={false}\n        ref={innerRef}\n        {...(isExpanded && { 'aria-expanded': true })}\n        {...(isDisabled && { disabled: true })}\n        {...props}\n      >\n        {isPlain && children}\n        {!isPlain && content}\n      </button>\n    );\n  }\n}\n\nexport const MenuToggle = React.forwardRef((props: MenuToggleProps, ref: React.Ref<HTMLButtonElement>) => (\n  <MenuToggleBase innerRef={ref} {...props} />\n));\n\nMenuToggle.displayName = 'MenuToggle';\n"]},"metadata":{},"sourceType":"module"}