{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nimport { PageContext } from '../Page/Page';\nexport class ToolbarContent extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.expandableContentRef = React.createRef();\n    this.chipContainerRef = React.createRef();\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      children,\n      isExpanded,\n      toolbarId,\n      visibility,\n      visiblity,\n      alignment,\n      clearAllFilters,\n      showClearFiltersButton,\n      clearFiltersButtonText\n    } = _a,\n          props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"toolbarId\", \"visibility\", \"visiblity\", \"alignment\", \"clearAllFilters\", \"showClearFiltersButton\", \"clearFiltersButtonText\"]);\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn('The ToolbarContent visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n    }\n\n    return React.createElement(PageContext.Consumer, null, _ref => {\n      let {\n        width,\n        getBreakpoint\n      } = _ref;\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.toolbarContent, formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), className)\n      }, props), React.createElement(ToolbarContext.Consumer, null, _ref2 => {\n        let {\n          clearAllFilters: clearAllFiltersContext,\n          clearFiltersButtonText: clearFiltersButtonContext,\n          showClearFiltersButton: showClearFiltersButtonContext,\n          toolbarId: toolbarIdContext\n        } = _ref2;\n        const expandableContentId = `${toolbarId || toolbarIdContext}-expandable-content-${ToolbarContent.currentId++}`;\n        return React.createElement(ToolbarContentContext.Provider, {\n          value: {\n            expandableContentRef: this.expandableContentRef,\n            expandableContentId,\n            chipContainerRef: this.chipContainerRef\n          }\n        }, React.createElement(\"div\", {\n          className: css(styles.toolbarContentSection)\n        }, children), React.createElement(ToolbarExpandableContent, {\n          id: expandableContentId,\n          isExpanded: isExpanded,\n          expandableContentRef: this.expandableContentRef,\n          chipContainerRef: this.chipContainerRef,\n          clearAllFilters: clearAllFilters || clearAllFiltersContext,\n          showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext,\n          clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext\n        }));\n      }));\n    });\n  }\n\n}\nToolbarContent.displayName = 'ToolbarContent';\nToolbarContent.currentId = 0;\nToolbarContent.defaultProps = {\n  isExpanded: false,\n  showClearFiltersButton: false\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,yDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,qBAAT,EAAgCC,cAAhC,QAAsD,gBAAtD;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,WAAT,QAA4B,cAA5B;AA2CA,OAAM,MAAOC,cAAP,SAA8BR,KAAK,CAACS,SAApC,CAAkE;EAAxEC;;IAEU,4BAAuBV,KAAK,CAACW,SAAN,EAAvB;IACA,wBAAmBX,KAAK,CAACW,SAAN,EAAnB;EA+ET;;EAvECC,MAAM;IACJ,MAAMC,KAYF,KAAKC,KAZT;IAAA,MAAM;MACJC,SADI;MAEJC,QAFI;MAGJC,UAHI;MAIJC,SAJI;MAKJC,UALI;MAMJC,SANI;MAOJC,SAPI;MAQJC,eARI;MASJC,sBATI;MAUJC;IAVI,IAUkBX,EAVxB;IAAA,MAWKC,KAAK,cAXJ,mKAWI,CAXV;;IAcA,IAAIM,SAAS,KAAKK,SAAlB,EAA6B;MAC3B;MACAC,OAAO,CAACC,IAAR,CACE,4DACE,2DAFJ;IAID;;IAED,OACE3B,oBAACO,WAAW,CAACqB,QAAb,EAAqB,IAArB,EACG;MAAA,IAAC;QAAEC,KAAF;QAASC;MAAT,CAAD;MAAA,OACC9B;QACEe,SAAS,EAAEb,GAAG,CACZD,MAAM,CAAC8B,cADK,EAEZ1B,oBAAoB,CAACc,UAAU,IAAIC,SAAf,EAA0BnB,MAA1B,EAAkC,EAAlC,EAAsC6B,aAAa,CAACD,KAAD,CAAnD,CAFR,EAGZxB,oBAAoB,CAACgB,SAAD,EAAYpB,MAAZ,EAAoB,EAApB,EAAwB6B,aAAa,CAACD,KAAD,CAArC,CAHR,EAIZd,SAJY;MADhB,GAOMD,KAPN,GASEd,oBAACI,cAAc,CAACwB,QAAhB,EAAwB,IAAxB,EACG,SAKI;QAAA,IALH;UACAN,eAAe,EAAEU,sBADjB;UAEAR,sBAAsB,EAAES,yBAFxB;UAGAV,sBAAsB,EAAEW,6BAHxB;UAIAhB,SAAS,EAAEiB;QAJX,CAKG;QACH,MAAMC,mBAAmB,GAAG,GAAGlB,SAAS,IACtCiB,gBAAgB,uBAAuB3B,cAAc,CAAC6B,SAAf,EAA0B,EADnE;QAEA,OACErC,oBAACG,qBAAqB,CAACmC,QAAvB,EAA+B;UAC7BC,KAAK,EAAE;YACLC,oBAAoB,EAAE,KAAKA,oBADtB;YAELJ,mBAFK;YAGLK,gBAAgB,EAAE,KAAKA;UAHlB;QADsB,CAA/B,EAOEzC;UAAKe,SAAS,EAAEb,GAAG,CAACD,MAAM,CAACyC,qBAAR;QAAnB,GAAoD1B,QAApD,CAPF,EAQEhB,oBAACM,wBAAD,EAAyB;UACvBqC,EAAE,EAAEP,mBADmB;UAEvBnB,UAAU,EAAEA,UAFW;UAGvBuB,oBAAoB,EAAE,KAAKA,oBAHJ;UAIvBC,gBAAgB,EAAE,KAAKA,gBAJA;UAKvBnB,eAAe,EAAEA,eAAe,IAAIU,sBALb;UAMvBT,sBAAsB,EAAEA,sBAAsB,IAAIW,6BAN3B;UAOvBV,sBAAsB,EAAEA,sBAAsB,IAAIS;QAP3B,CAAzB,CARF,CADF;MAoBD,CA7BH,CATF,CADD;IAAA,CADH,CADF;EA+CD;;AAjFqE;AAC/DzB,6BAAc,gBAAd;AAGQA,2BAAY,CAAZ;AAERA,8BAAoC;EACzCS,UAAU,EAAE,KAD6B;EAEzCM,sBAAsB,EAAE;AAFiB,CAApC","names":["React","styles","css","ToolbarContentContext","ToolbarContext","formatBreakpointMods","ToolbarExpandableContent","PageContext","ToolbarContent","Component","constructor","createRef","render","_a","props","className","children","isExpanded","toolbarId","visibility","visiblity","alignment","clearAllFilters","showClearFiltersButton","clearFiltersButtonText","undefined","console","warn","Consumer","width","getBreakpoint","toolbarContent","clearAllFiltersContext","clearFiltersButtonContext","showClearFiltersButtonContext","toolbarIdContext","expandableContentId","currentId","Provider","value","expandableContentRef","chipContainerRef","toolbarContentSection","id"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { formatBreakpointMods } from '../../helpers/util';\nimport { ToolbarExpandableContent } from './ToolbarExpandableContent';\nimport { PageContext } from '../Page/Page';\n\nexport interface ToolbarContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes applied to root element of the data toolbar content row */\n  className?: string;\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Content to be rendered as children of the content row */\n  children?: React.ReactNode;\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** Optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Flag indicating that the clear all filters button should be visible */\n  showClearFiltersButton?: boolean;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Id of the parent Toolbar component */\n  toolbarId?: string;\n}\n\nexport class ToolbarContent extends React.Component<ToolbarContentProps> {\n  static displayName = 'ToolbarContent';\n  private expandableContentRef = React.createRef<HTMLDivElement>();\n  private chipContainerRef = React.createRef<HTMLDivElement>();\n  private static currentId = 0;\n\n  static defaultProps: ToolbarContentProps = {\n    isExpanded: false,\n    showClearFiltersButton: false\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      isExpanded,\n      toolbarId,\n      visibility,\n      visiblity,\n      alignment,\n      clearAllFilters,\n      showClearFiltersButton,\n      clearFiltersButtonText,\n      ...props\n    } = this.props;\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarContent visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <div\n            className={css(\n              styles.toolbarContent,\n              formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n              formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n              className\n            )}\n            {...props}\n          >\n            <ToolbarContext.Consumer>\n              {({\n                clearAllFilters: clearAllFiltersContext,\n                clearFiltersButtonText: clearFiltersButtonContext,\n                showClearFiltersButton: showClearFiltersButtonContext,\n                toolbarId: toolbarIdContext\n              }) => {\n                const expandableContentId = `${toolbarId ||\n                  toolbarIdContext}-expandable-content-${ToolbarContent.currentId++}`;\n                return (\n                  <ToolbarContentContext.Provider\n                    value={{\n                      expandableContentRef: this.expandableContentRef,\n                      expandableContentId,\n                      chipContainerRef: this.chipContainerRef\n                    }}\n                  >\n                    <div className={css(styles.toolbarContentSection)}>{children}</div>\n                    <ToolbarExpandableContent\n                      id={expandableContentId}\n                      isExpanded={isExpanded}\n                      expandableContentRef={this.expandableContentRef}\n                      chipContainerRef={this.chipContainerRef}\n                      clearAllFilters={clearAllFilters || clearAllFiltersContext}\n                      showClearFiltersButton={showClearFiltersButton || showClearFiltersButtonContext}\n                      clearFiltersButtonText={clearFiltersButtonText || clearFiltersButtonContext}\n                    />\n                  </ToolbarContentContext.Provider>\n                );\n              }}\n            </ToolbarContext.Consumer>\n          </div>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}