{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport { ToggleGroupItemVariant, ToggleGroupItemElement } from './ToggleGroupItemElement';\nexport var ToggleGroupItem = function ToggleGroupItem(_a) {\n  var text = _a.text,\n      icon = _a.icon,\n      className = _a.className,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isSelected = _a.isSelected,\n      isSelected = _a$isSelected === void 0 ? false : _a$isSelected,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? '' : _a$ariaLabel,\n      _a$onChange = _a.onChange,\n      onChange = _a$onChange === void 0 ? function () {} : _a$onChange,\n      _a$buttonId = _a.buttonId,\n      buttonId = _a$buttonId === void 0 ? '' : _a$buttonId,\n      props = __rest(_a, [\"text\", \"icon\", \"className\", \"isDisabled\", \"isSelected\", 'aria-label', \"onChange\", \"buttonId\"]);\n\n  var handleChange = function handleChange(event) {\n    onChange(!isSelected, event);\n  };\n\n  if (!ariaLabel && icon && !text) {\n    /* eslint-disable no-console */\n    console.warn('An accessible aria-label is required when using the toggle group item icon variant.');\n  }\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.toggleGroupItem, className)\n  }, props), React.createElement(\"button\", Object.assign({\n    type: \"button\",\n    className: css(styles.toggleGroupButton, isSelected && styles.modifiers.selected),\n    \"aria-pressed\": isSelected,\n    onClick: handleChange\n  }, ariaLabel && {\n    'aria-label': ariaLabel\n  }, isDisabled && {\n    disabled: true\n  }, buttonId && {\n    id: buttonId\n  }), icon ? React.createElement(ToggleGroupItemElement, {\n    variant: ToggleGroupItemVariant.icon\n  }, icon) : null, text ? React.createElement(ToggleGroupItemElement, {\n    variant: ToggleGroupItemVariant.text\n  }, text) : null));\n};\nToggleGroupItem.displayName = 'ToggleGroupItem';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,kEAAnB;AACA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,0BAA/D;AAqBA,OAAO,IAAMC,eAAe,GAAkD,SAAjEA,eAAiE,CAACC,EAAD,EAUnD;MATzBC,OAOaD,GAPbC;MACAC,OAMaF,GANbE;MACAC,YAKaH,GALbG;sBAKaH,GAJbI;MAAAA,wCAAa;sBAIAJ,GAHbK;MAAAA,wCAAa;qBAGAL,GAFb;MAAcM,sCAAY;oBAEbN,GADbO;MAAAA,oCAAW,YAAK,CAAG;oBACNP,GAAbQ;MAAAA,oCAAW;MACRC,QAAKC,WATqE,+FASrE;;EAER,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAqB;IACxCL,QAAQ,CAAC,CAACF,UAAF,EAAcO,KAAd,CAAR;EACD,CAFD;;EAIA,IAAI,CAACN,SAAD,IAAcJ,IAAd,IAAsB,CAACD,IAA3B,EAAiC;IAC/B;IACAY,OAAO,CAACC,IAAR,CAAa,qFAAb;EACD;;EAED,OACEpB;IAAKS,SAAS,EAAER,GAAG,CAACC,MAAM,CAACmB,eAAR,EAAyBZ,SAAzB;EAAnB,GAA4DM,KAA5D,GACEf;IACEsB,IAAI,EAAC,QADP;IAEEb,SAAS,EAAER,GAAG,CAACC,MAAM,CAACqB,iBAAR,EAA2BZ,UAAU,IAAIT,MAAM,CAACsB,SAAP,CAAiBC,QAA1D,CAFhB;IAEmF,gBACnEd,UAHhB;IAIEe,OAAO,EAAET;EAJX,GAKOL,SAAS,IAAI;IAAE,cAAcA;EAAhB,CALpB,EAMOF,UAAU,IAAI;IAAEiB,QAAQ,EAAE;EAAZ,CANrB,EAOOb,QAAQ,IAAI;IAAEc,EAAE,EAAEd;EAAN,CAPnB,GASGN,IAAI,GAAGR,oBAACI,sBAAD,EAAuB;IAACyB,OAAO,EAAE1B,sBAAsB,CAACK;EAAjC,CAAvB,EAA+DA,IAA/D,CAAH,GAAmG,IAT1G,EAUGD,IAAI,GAAGP,oBAACI,sBAAD,EAAuB;IAACyB,OAAO,EAAE1B,sBAAsB,CAACI;EAAjC,CAAvB,EAA+DA,IAA/D,CAAH,GAAmG,IAV1G,CADF,CADF;AAgBD,CApCM;AAqCPF,eAAe,CAACyB,WAAhB,GAA8B,iBAA9B","names":["React","css","styles","ToggleGroupItemVariant","ToggleGroupItemElement","ToggleGroupItem","_a","text","icon","className","isDisabled","isSelected","ariaLabel","onChange","buttonId","props","__rest","handleChange","event","console","warn","toggleGroupItem","type","toggleGroupButton","modifiers","selected","onClick","disabled","id","variant","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ToggleGroup/ToggleGroupItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/ToggleGroup/toggle-group';\nimport { ToggleGroupItemVariant, ToggleGroupItemElement } from './ToggleGroupItemElement';\n\nexport interface ToggleGroupItemProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Text rendered inside the toggle group item */\n  text?: React.ReactNode;\n  /** Icon rendered inside the toggle group item */\n  icon?: React.ReactNode;\n  /** Additional classes added to the toggle group item */\n  className?: string;\n  /** Flag indicating if the toggle group item is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if the toggle group item is selected */\n  isSelected?: boolean;\n  /** required when icon is used with no supporting text */\n  'aria-label'?: string;\n  /** Optional id for the button within the toggle group item */\n  buttonId?: string;\n  /** A callback for when the toggle group item selection changes. */\n  onChange?: (selected: boolean, event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent) => void;\n}\n\nexport const ToggleGroupItem: React.FunctionComponent<ToggleGroupItemProps> = ({\n  text,\n  icon,\n  className,\n  isDisabled = false,\n  isSelected = false,\n  'aria-label': ariaLabel = '',\n  onChange = () => {},\n  buttonId = '',\n  ...props\n}: ToggleGroupItemProps) => {\n  const handleChange = (event: any): void => {\n    onChange(!isSelected, event);\n  };\n\n  if (!ariaLabel && icon && !text) {\n    /* eslint-disable no-console */\n    console.warn('An accessible aria-label is required when using the toggle group item icon variant.');\n  }\n\n  return (\n    <div className={css(styles.toggleGroupItem, className)} {...props}>\n      <button\n        type=\"button\"\n        className={css(styles.toggleGroupButton, isSelected && styles.modifiers.selected)}\n        aria-pressed={isSelected}\n        onClick={handleChange}\n        {...(ariaLabel && { 'aria-label': ariaLabel })}\n        {...(isDisabled && { disabled: true })}\n        {...(buttonId && { id: buttonId })}\n      >\n        {icon ? <ToggleGroupItemElement variant={ToggleGroupItemVariant.icon}>{icon}</ToggleGroupItemElement> : null}\n        {text ? <ToggleGroupItemElement variant={ToggleGroupItemVariant.text}>{text}</ToggleGroupItemElement> : null}\n      </button>\n    </div>\n  );\n};\nToggleGroupItem.displayName = 'ToggleGroupItem';\n"]},"metadata":{},"sourceType":"module"}