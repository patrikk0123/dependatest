{"ast":null,"code":"/*\n * URL Query Params are considered to be the Single Point of Truth.\n */\n\n/**\n * @example\n * { 'component1-pageSize': 10, 'component2-pageIndex': 1}\n */\n\n/**\n * Transforms URL Query Params from string to object.\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageSize=10\n * // to:\n * { 'component1-pageIndex': 1, 'component2-pageSize': 10 }\n *\n * @param queryParamsString - URL Query Params in string representation\n * @returns URL Query Params in object representation\n */\nconst parseQueryParamsToObject = queryParamsString => {\n  const searchParams = new URLSearchParams(queryParamsString);\n  const queryParamsObject = {};\n\n  for (const [key, value] of searchParams) {\n    /**\n     * + operator returns the numeric value of the string or NaN\n     *\n     * examples:\n     *  +'12' returns 12\n     *  +'12px' returns NaN\n     *  +'foo' returns NaN\n     */\n    if (Number.isInteger(+value)) {\n      queryParamsObject[key] = Number(value);\n    } else {\n      queryParamsObject[key] = value;\n    }\n  }\n\n  return queryParamsObject;\n};\n/**\n * Update Query Params contained in the URL.\n *\n * @example\n * // from:\n * { 'pageIndex': 1 }\n * // to (for component1):\n * ?component1-pageIndex=1\n *\n * @param queryParamsObject - URL Query Params in object representation\n * @param componentId - Component string identifier to distinguish individual Query Params\n * @param location - Location interface from the history library, see https://reactrouter.com/docs/en/v6/api#location\n * @param navigate - Function that lets you navigate programmatically, see https://reactrouter.com/docs/en/v6/api#usenavigate\n * @param replace - When true it replaces the current entry on the history stack, otherwise it pushes a new entry onto the history stack by default\n */\n\n\nexport const updateQueryParamsInURL = function (queryParamsObject, componentId, location, navigate) {\n  let replace = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  const currentQueryParamsString = location.search;\n  const searchParams = new URLSearchParams(currentQueryParamsString); // add componentId prefix to all keys\n\n  for (const [key, value] of Object.entries(queryParamsObject)) {\n    // set Query Params and delete duplicates if any\n    if (value !== '') {\n      searchParams.set(`${componentId}-${key}`, String(value));\n    } // remove attribute if value is falsy\n    else {\n      searchParams.delete(`${componentId}-${key}`);\n    }\n  }\n\n  const newQueryParamsString = searchParams.toString(); // Prevent from placing the identical record to the history. It would result in \"empty\" back / front button action.\n\n  if (currentQueryParamsString !== `?${newQueryParamsString}`) {\n    // #render\n    navigate({\n      search: newQueryParamsString\n    }, {\n      replace\n    });\n  }\n};\n/**\n * Return Query Params object without componentId prefixes retrieved from the URL for given component.\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageSize=10\n * // to (for component1):\n * { 'pageIndex': 1}\n *\n * @param queryParamsString - URL Query Params in string representation\n * @param componentId - Component string identifier to distinguish individual component related Query Params\n * @returns URL Query Params in object representation without componentId prefixes\n */\n\nexport const getComponentQueryParamsObject = (queryParamsString, componentId) => {\n  const queryParamsObject = parseQueryParamsToObject(queryParamsString); // get Query Params that belong to the given component\n\n  const componentQueryParamsObject = {};\n  Object.keys(queryParamsObject).forEach(keyWithPrefix => {\n    const [prefix, keyWithoutPrefix, ...rest] = keyWithPrefix.split('-');\n\n    if (rest.length) {\n      throw new Error('Exactly one occurrence of \"-\" is expected in Query Params keys');\n    }\n\n    if (prefix === componentId) {\n      componentQueryParamsObject[keyWithoutPrefix] = queryParamsObject[keyWithPrefix];\n    }\n  });\n  return componentQueryParamsObject;\n};\n/**\n * The same as {@link getComponentQueryParamsObject}, but\n *  - it returns just single value (for specific component and key combination) in string\n *  - performance is better\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageIndex=3&component2-pageSize=10\n * // to (for component2 and pageIndex):\n * '3'\n * @param queryParamsString - URL Query Params in string representation\n * @param queryParamKey - URL Query Params key without component prefix\n * @param componentId - Component string identifier to distinguish individual component related Query Params\n */\n\nexport const getComponentQueryParamValue = (queryParamsString, queryParamKey, componentId) => {\n  const searchParams = new URLSearchParams(queryParamsString);\n  return searchParams.get(`${componentId}-${queryParamKey}`);\n};\n/**\n * Compare two Query Params objects.\n *\n * @param queryParams1 - Query Params object 1\n * @param queryParams2 - Query Params object 2\n * @returns true when objects are identical, otherwise false\n */\n\nexport const queryParamsObjectsAreEqual = (queryParams1, queryParams2) => {\n  const queryParams1Keys = Object.keys(queryParams1);\n\n  if (queryParams1Keys.length === Object.keys(queryParams2).length) {\n    for (const key of queryParams1Keys) {\n      if (queryParams1[key] !== queryParams2[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"names":["parseQueryParamsToObject","queryParamsString","searchParams","URLSearchParams","queryParamsObject","key","value","Number","isInteger","updateQueryParamsInURL","componentId","location","navigate","replace","currentQueryParamsString","search","Object","entries","set","String","delete","newQueryParamsString","toString","getComponentQueryParamsObject","componentQueryParamsObject","keys","forEach","keyWithPrefix","prefix","keyWithoutPrefix","rest","split","length","Error","getComponentQueryParamValue","queryParamKey","get","queryParamsObjectsAreEqual","queryParams1","queryParams2","queryParams1Keys"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/utils/queryParamsHelper.ts"],"sourcesContent":["import { Location, NavigateFunction } from 'react-router-dom';\n\n/*\n * URL Query Params are considered to be the Single Point of Truth.\n */\n\n/**\n * @example\n * { 'component1-pageSize': 10, 'component2-pageIndex': 1}\n */\nexport interface IQueryParamsObject {\n  [key: string]: string | number;\n}\n\n/**\n * Transforms URL Query Params from string to object.\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageSize=10\n * // to:\n * { 'component1-pageIndex': 1, 'component2-pageSize': 10 }\n *\n * @param queryParamsString - URL Query Params in string representation\n * @returns URL Query Params in object representation\n */\nconst parseQueryParamsToObject = (queryParamsString: string): IQueryParamsObject => {\n  const searchParams = new URLSearchParams(queryParamsString);\n  const queryParamsObject: IQueryParamsObject = {};\n\n  for (const [key, value] of searchParams) {\n    /**\n     * + operator returns the numeric value of the string or NaN\n     *\n     * examples:\n     *  +'12' returns 12\n     *  +'12px' returns NaN\n     *  +'foo' returns NaN\n     */\n    if (Number.isInteger(+value)) {\n      queryParamsObject[key] = Number(value);\n    } else {\n      queryParamsObject[key] = value;\n    }\n  }\n\n  return queryParamsObject;\n};\n\n/**\n * Update Query Params contained in the URL.\n *\n * @example\n * // from:\n * { 'pageIndex': 1 }\n * // to (for component1):\n * ?component1-pageIndex=1\n *\n * @param queryParamsObject - URL Query Params in object representation\n * @param componentId - Component string identifier to distinguish individual Query Params\n * @param location - Location interface from the history library, see https://reactrouter.com/docs/en/v6/api#location\n * @param navigate - Function that lets you navigate programmatically, see https://reactrouter.com/docs/en/v6/api#usenavigate\n * @param replace - When true it replaces the current entry on the history stack, otherwise it pushes a new entry onto the history stack by default\n */\nexport const updateQueryParamsInURL = (\n  queryParamsObject: IQueryParamsObject,\n  componentId: string,\n  location: Location,\n  navigate: NavigateFunction,\n  replace: boolean = false\n) => {\n  const currentQueryParamsString = location.search;\n  const searchParams = new URLSearchParams(currentQueryParamsString);\n\n  // add componentId prefix to all keys\n  for (const [key, value] of Object.entries(queryParamsObject)) {\n    // set Query Params and delete duplicates if any\n    if (value !== '') {\n      searchParams.set(`${componentId}-${key}`, String(value));\n    }\n    // remove attribute if value is falsy\n    else {\n      searchParams.delete(`${componentId}-${key}`);\n    }\n  }\n\n  const newQueryParamsString = searchParams.toString();\n\n  // Prevent from placing the identical record to the history. It would result in \"empty\" back / front button action.\n  if (currentQueryParamsString !== `?${newQueryParamsString}`) {\n    // #render\n    navigate(\n      {\n        search: newQueryParamsString,\n      },\n      { replace }\n    );\n  }\n};\n\n/**\n * Return Query Params object without componentId prefixes retrieved from the URL for given component.\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageSize=10\n * // to (for component1):\n * { 'pageIndex': 1}\n *\n * @param queryParamsString - URL Query Params in string representation\n * @param componentId - Component string identifier to distinguish individual component related Query Params\n * @returns URL Query Params in object representation without componentId prefixes\n */\nexport const getComponentQueryParamsObject = (queryParamsString: string, componentId: string): IQueryParamsObject => {\n  const queryParamsObject = parseQueryParamsToObject(queryParamsString);\n\n  // get Query Params that belong to the given component\n  const componentQueryParamsObject: IQueryParamsObject = {};\n  Object.keys(queryParamsObject).forEach((keyWithPrefix) => {\n    const [prefix, keyWithoutPrefix, ...rest] = keyWithPrefix.split('-');\n\n    if (rest.length) {\n      throw new Error('Exactly one occurrence of \"-\" is expected in Query Params keys');\n    }\n\n    if (prefix === componentId) {\n      componentQueryParamsObject[keyWithoutPrefix] = queryParamsObject[keyWithPrefix];\n    }\n  });\n\n  return componentQueryParamsObject;\n};\n\n/**\n * The same as {@link getComponentQueryParamsObject}, but\n *  - it returns just single value (for specific component and key combination) in string\n *  - performance is better\n *\n * @example\n * // from:\n * ?component1-pageIndex=1&component2-pageIndex=3&component2-pageSize=10\n * // to (for component2 and pageIndex):\n * '3'\n * @param queryParamsString - URL Query Params in string representation\n * @param queryParamKey - URL Query Params key without component prefix\n * @param componentId - Component string identifier to distinguish individual component related Query Params\n */\nexport const getComponentQueryParamValue = (\n  queryParamsString: string,\n  queryParamKey: string,\n  componentId: string\n): string | null => {\n  const searchParams = new URLSearchParams(queryParamsString);\n  return searchParams.get(`${componentId}-${queryParamKey}`);\n};\n\n/**\n * Compare two Query Params objects.\n *\n * @param queryParams1 - Query Params object 1\n * @param queryParams2 - Query Params object 2\n * @returns true when objects are identical, otherwise false\n */\nexport const queryParamsObjectsAreEqual = (queryParams1: IQueryParamsObject, queryParams2: IQueryParamsObject) => {\n  const queryParams1Keys = Object.keys(queryParams1);\n  if (queryParams1Keys.length === Object.keys(queryParams2).length) {\n    for (const key of queryParams1Keys) {\n      if (queryParams1[key] !== queryParams2[key]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}