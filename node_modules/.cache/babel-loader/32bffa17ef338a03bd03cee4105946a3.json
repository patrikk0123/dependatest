{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Button, ButtonVariant } from '../Button';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationBadge/notification-badge';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nexport var NotificationBadgeVariant;\n\n(function (NotificationBadgeVariant) {\n  NotificationBadgeVariant[\"read\"] = \"read\";\n  NotificationBadgeVariant[\"unread\"] = \"unread\";\n  NotificationBadgeVariant[\"attention\"] = \"attention\";\n})(NotificationBadgeVariant || (NotificationBadgeVariant = {}));\n\nexport var NotificationBadge = function NotificationBadge(_a) {\n  var isRead = _a.isRead,\n      children = _a.children,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? isRead ? 'read' : 'unread' : _a$variant,\n      _a$count = _a.count,\n      count = _a$count === void 0 ? 0 : _a$count,\n      _a$attentionIcon = _a.attentionIcon,\n      attentionIcon = _a$attentionIcon === void 0 ? React.createElement(AttentionBellIcon, null) : _a$attentionIcon,\n      _a$icon = _a.icon,\n      icon = _a$icon === void 0 ? React.createElement(BellIcon, null) : _a$icon,\n      className = _a.className,\n      props = __rest(_a, [\"isRead\", \"children\", \"variant\", \"count\", \"attentionIcon\", \"icon\", \"className\"]);\n\n  var notificationChild = icon;\n\n  if (children !== undefined) {\n    notificationChild = children;\n  } else if (variant === NotificationBadgeVariant.attention) {\n    notificationChild = attentionIcon;\n  }\n\n  return React.createElement(Button, Object.assign({\n    variant: ButtonVariant.plain,\n    className: className\n  }, props), React.createElement(\"span\", {\n    className: css(styles.notificationBadge, styles.modifiers[variant])\n  }, notificationChild, count > 0 && React.createElement(\"span\", {\n    className: css(styles.notificationBadgeCount)\n  }, count)));\n};\nNotificationBadge.displayName = 'NotificationBadge';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAmD,WAAnD;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,8EAAnB;AACA,OAAOC,iBAAP,MAA8B,4DAA9B;AACA,OAAOC,QAAP,MAAqB,kDAArB;AAEA,WAAYC,wBAAZ;;AAAA,WAAYA,wBAAZ,EAAoC;EAClCA;EACAA;EACAA;AACD,CAJD,EAAYA,wBAAwB,KAAxBA,wBAAwB,MAApC;;AAyBA,OAAO,IAAMC,iBAAiB,GAAoD,SAArEA,iBAAqE,CAACC,EAAD,EASrD;MAR3BC,SAMSD,GANTC;MACAC,WAKSF,GALTE;mBAKSF,GAJTG;MAAAA,kCAAUF,MAAM,GAAG,MAAH,GAAY;iBAInBD,GAHTI;MAAAA,8BAAQ;yBAGCJ,GAFTK;MAAAA,8CAAgBd,oBAACK,iBAAD,EAAkB,IAAlB;gBAEPI,GADTM;MAAAA,4BAAOf,oBAACM,QAAD,EAAS,IAAT;MACPU,YAASP,GAATO;MACGC,QAAKC,WARyE,gFAQzE;;EAER,IAAIC,iBAAiB,GAAGJ,IAAxB;;EACA,IAAIJ,QAAQ,KAAKS,SAAjB,EAA4B;IAC1BD,iBAAiB,GAAGR,QAApB;EACD,CAFD,MAEO,IAAIC,OAAO,KAAKL,wBAAwB,CAACc,SAAzC,EAAoD;IACzDF,iBAAiB,GAAGL,aAApB;EACD;;EACD,OACEd,oBAACC,MAAD,EAAOqB;IAACV,OAAO,EAAEV,aAAa,CAACqB,KAAxB;IAA+BP,SAAS,EAAEA;EAA1C,GAAyDC,KAAzD,CAAP,EACEjB;IAAMgB,SAAS,EAAEb,GAAG,CAACC,MAAM,CAACoB,iBAAR,EAA2BpB,MAAM,CAACqB,SAAP,CAAiBb,OAAjB,CAA3B;EAApB,GACGO,iBADH,EAEGN,KAAK,GAAG,CAAR,IAAab;IAAMgB,SAAS,EAAEb,GAAG,CAACC,MAAM,CAACsB,sBAAR;EAApB,GAAsDb,KAAtD,CAFhB,CADF,CADF;AAQD,CAxBM;AAyBPL,iBAAiB,CAACmB,WAAlB,GAAgC,mBAAhC","names":["React","Button","ButtonVariant","css","styles","AttentionBellIcon","BellIcon","NotificationBadgeVariant","NotificationBadge","_a","isRead","children","variant","count","attentionIcon","icon","className","props","__rest","notificationChild","undefined","attention","Object","plain","notificationBadge","modifiers","notificationBadgeCount","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/NotificationBadge/NotificationBadge.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Button, ButtonVariant, ButtonProps } from '../Button';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationBadge/notification-badge';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\n\nexport enum NotificationBadgeVariant {\n  read = 'read',\n  unread = 'unread',\n  attention = 'attention'\n}\n\nexport interface NotificationBadgeProps extends Omit<ButtonProps, 'variant'> {\n  /** @deprecated Use the variant prop instead - Adds styling to the notification badge to indicate it has been read */\n  isRead?: boolean;\n  /** Determines the variant of the notification badge */\n  variant?: NotificationBadgeVariant | 'read' | 'unread' | 'attention';\n  /** A number displayed in the badge alongside the icon */\n  count?: number;\n  /** content rendered inside the notification badge */\n  children?: React.ReactNode;\n  /** additional classes added to the notification badge */\n  className?: string;\n  /** Adds accessible text to the notification badge. */\n  'aria-label'?: string;\n  /** Icon to display for attention variant */\n  attentionIcon?: React.ReactNode;\n  /** Icon do display in notification badge */\n  icon?: React.ReactNode;\n}\n\nexport const NotificationBadge: React.FunctionComponent<NotificationBadgeProps> = ({\n  isRead,\n  children,\n  variant = isRead ? 'read' : 'unread',\n  count = 0,\n  attentionIcon = <AttentionBellIcon />,\n  icon = <BellIcon />,\n  className,\n  ...props\n}: NotificationBadgeProps) => {\n  let notificationChild = icon;\n  if (children !== undefined) {\n    notificationChild = children;\n  } else if (variant === NotificationBadgeVariant.attention) {\n    notificationChild = attentionIcon;\n  }\n  return (\n    <Button variant={ButtonVariant.plain} className={className} {...props}>\n      <span className={css(styles.notificationBadge, styles.modifiers[variant])}>\n        {notificationChild}\n        {count > 0 && <span className={css(styles.notificationBadgeCount)}>{count}</span>}\n      </span>\n    </Button>\n  );\n};\nNotificationBadge.displayName = 'NotificationBadge';\n"]},"metadata":{},"sourceType":"module"}