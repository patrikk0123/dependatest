{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\nexport var ToolbarToggleGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarToggleGroup, _React$Component);\n\n  var _super = _createSuper(ToolbarToggleGroup);\n\n  function ToolbarToggleGroup() {\n    var _this;\n\n    _classCallCheck(this, ToolbarToggleGroup);\n\n    _this = _super.apply(this, arguments);\n\n    _this.isContentPopup = function () {\n      var viewportSize = canUseDOM ? window.innerWidth : 1200;\n      var lgBreakpointValue = parseInt(globalBreakpointLg.value);\n      return viewportSize < lgBreakpointValue;\n    };\n\n    return _this;\n  }\n\n  _createClass(ToolbarToggleGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          toggleIcon = _a.toggleIcon,\n          variant = _a.variant,\n          visibility = _a.visibility,\n          visiblity = _a.visiblity,\n          breakpoint = _a.breakpoint,\n          alignment = _a.alignment,\n          spacer = _a.spacer,\n          spaceItems = _a.spaceItems,\n          className = _a.className,\n          children = _a.children,\n          props = __rest(_a, [\"toggleIcon\", \"variant\", \"visibility\", \"visiblity\", \"breakpoint\", \"alignment\", \"spacer\", \"spaceItems\", \"className\", \"children\"]);\n\n      if (!breakpoint && !toggleIcon) {\n        // eslint-disable-next-line no-console\n        console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n      }\n\n      if (visiblity !== undefined) {\n        // eslint-disable-next-line no-console\n        console.warn('The ToolbarToggleGroup visiblity prop has been deprecated. ' + 'Please use the correctly spelled visibility prop instead.');\n      }\n\n      return React.createElement(PageContext.Consumer, null, function (_ref) {\n        var width = _ref.width,\n            getBreakpoint = _ref.getBreakpoint;\n        return React.createElement(ToolbarContext.Consumer, null, function (_ref2) {\n          var isExpanded = _ref2.isExpanded,\n              toggleIsExpanded = _ref2.toggleIsExpanded;\n          return React.createElement(ToolbarContentContext.Consumer, null, function (_ref3) {\n            var expandableContentRef = _ref3.expandableContentRef,\n                expandableContentId = _ref3.expandableContentId;\n\n            if (expandableContentRef.current && expandableContentRef.current.classList) {\n              if (isExpanded) {\n                expandableContentRef.current.classList.add(styles.modifiers.expanded);\n              } else {\n                expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n              }\n            }\n\n            var breakpointMod = {};\n            breakpointMod[breakpoint] = 'show';\n            return React.createElement(\"div\", Object.assign({\n              className: css(styles.toolbarGroup, styles.modifiers.toggleGroup, variant && styles.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)), formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)), formatBreakpointMods(alignment, styles, '', getBreakpoint(width)), formatBreakpointMods(spacer, styles, '', getBreakpoint(width)), formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)), className)\n            }, props), React.createElement(\"div\", {\n              className: css(styles.toolbarToggle)\n            }, React.createElement(Button, Object.assign({\n              variant: \"plain\",\n              onClick: toggleIsExpanded,\n              \"aria-label\": \"Show Filters\"\n            }, isExpanded && {\n              'aria-expanded': true\n            }, {\n              \"aria-haspopup\": isExpanded && _this2.isContentPopup(),\n              \"aria-controls\": expandableContentId\n            }), toggleIcon)), isExpanded ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild) : children);\n          });\n        });\n      });\n    }\n  }]);\n\n  return ToolbarToggleGroup;\n}(React.Component);\nToolbarToggleGroup.displayName = 'ToolbarToggleGroup';","map":{"version":3,"mappings":"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","names":["React","ReactDOM","styles","css","ToolbarContext","ToolbarContentContext","Button","globalBreakpointLg","formatBreakpointMods","toCamel","canUseDOM","PageContext","ToolbarToggleGroup","viewportSize","window","innerWidth","lgBreakpointValue","parseInt","value","props","toggleIcon","_a","variant","visibility","visiblity","breakpoint","alignment","spacer","spaceItems","className","children","__rest","console","error","undefined","warn","Consumer","width","getBreakpoint","isExpanded","toggleIsExpanded","expandableContentRef","expandableContentId","current","classList","add","modifiers","expanded","remove","breakpointMod","toolbarGroup","toggleGroup","toolbarToggle","Object","onClick","isContentPopup","createPortal","firstElementChild","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarToggleGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroupProps } from './ToolbarGroup';\nimport { ToolbarContext, ToolbarContentContext } from './ToolbarUtils';\nimport { Button } from '../Button';\nimport globalBreakpointLg from '@patternfly/react-tokens/dist/esm/global_breakpoint_lg';\nimport { formatBreakpointMods, toCamel, canUseDOM } from '../../helpers/util';\nimport { PageContext } from '../Page/Page';\n\nexport interface ToolbarToggleGroupProps extends ToolbarGroupProps {\n  /** An icon to be rendered when the toggle group has collapsed down */\n  toggleIcon: React.ReactNode;\n  /** Controls when filters are shown and when the toggle button is hidden. */\n  breakpoint: 'md' | 'lg' | 'xl' | '2xl';\n  /** Visibility at various breakpoints. */\n  visibility?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** @deprecated prop misspelled */\n  visiblity?: {\n    default?: 'hidden' | 'visible';\n    md?: 'hidden' | 'visible';\n    lg?: 'hidden' | 'visible';\n    xl?: 'hidden' | 'visible';\n    '2xl'?: 'hidden' | 'visible';\n  };\n  /** Alignment at various breakpoints. */\n  alignment?: {\n    default?: 'alignRight' | 'alignLeft';\n    md?: 'alignRight' | 'alignLeft';\n    lg?: 'alignRight' | 'alignLeft';\n    xl?: 'alignRight' | 'alignLeft';\n    '2xl'?: 'alignRight' | 'alignLeft';\n  };\n  /** Spacers at various breakpoints. */\n  spacer?: {\n    default?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    md?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    lg?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    xl?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n    '2xl'?: 'spacerNone' | 'spacerSm' | 'spacerMd' | 'spacerLg';\n  };\n  /** Space items at various breakpoints. */\n  spaceItems?: {\n    default?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    md?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    lg?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    xl?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n    '2xl'?: 'spaceItemsNone' | 'spaceItemsSm' | 'spaceItemsMd' | 'spaceItemsLg';\n  };\n}\n\nexport class ToolbarToggleGroup extends React.Component<ToolbarToggleGroupProps> {\n  static displayName = 'ToolbarToggleGroup';\n  isContentPopup = () => {\n    const viewportSize = canUseDOM ? window.innerWidth : 1200;\n    const lgBreakpointValue = parseInt(globalBreakpointLg.value);\n    return viewportSize < lgBreakpointValue;\n  };\n\n  render() {\n    const {\n      toggleIcon,\n      variant,\n      visibility,\n      visiblity,\n      breakpoint,\n      alignment,\n      spacer,\n      spaceItems,\n      className,\n      children,\n      ...props\n    } = this.props;\n\n    if (!breakpoint && !toggleIcon) {\n      // eslint-disable-next-line no-console\n      console.error('ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.');\n    }\n\n    if (visiblity !== undefined) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'The ToolbarToggleGroup visiblity prop has been deprecated. ' +\n          'Please use the correctly spelled visibility prop instead.'\n      );\n    }\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <ToolbarContext.Consumer>\n            {({ isExpanded, toggleIsExpanded }) => (\n              <ToolbarContentContext.Consumer>\n                {({ expandableContentRef, expandableContentId }) => {\n                  if (expandableContentRef.current && expandableContentRef.current.classList) {\n                    if (isExpanded) {\n                      expandableContentRef.current.classList.add(styles.modifiers.expanded);\n                    } else {\n                      expandableContentRef.current.classList.remove(styles.modifiers.expanded);\n                    }\n                  }\n\n                  const breakpointMod: {\n                    md?: 'show';\n                    lg?: 'show';\n                    xl?: 'show';\n                    '2xl'?: 'show';\n                  } = {};\n                  breakpointMod[breakpoint] = 'show';\n\n                  return (\n                    <div\n                      className={css(\n                        styles.toolbarGroup,\n                        styles.modifiers.toggleGroup,\n                        variant &&\n                          styles.modifiers[toCamel(variant) as 'filterGroup' | 'iconButtonGroup' | 'buttonGroup'],\n                        formatBreakpointMods(breakpointMod, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(visibility || visiblity, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(alignment, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spacer, styles, '', getBreakpoint(width)),\n                        formatBreakpointMods(spaceItems, styles, '', getBreakpoint(width)),\n                        className\n                      )}\n                      {...props}\n                    >\n                      <div className={css(styles.toolbarToggle)}>\n                        <Button\n                          variant=\"plain\"\n                          onClick={toggleIsExpanded}\n                          aria-label=\"Show Filters\"\n                          {...(isExpanded && { 'aria-expanded': true })}\n                          aria-haspopup={isExpanded && this.isContentPopup()}\n                          aria-controls={expandableContentId}\n                        >\n                          {toggleIcon}\n                        </Button>\n                      </div>\n                      {isExpanded\n                        ? ReactDOM.createPortal(children, expandableContentRef.current.firstElementChild)\n                        : children}\n                    </div>\n                  );\n                }}\n              </ToolbarContentContext.Consumer>\n            )}\n          </ToolbarContext.Consumer>\n        )}\n      </PageContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}