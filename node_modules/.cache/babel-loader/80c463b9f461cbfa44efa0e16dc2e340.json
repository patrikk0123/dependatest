{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport var DropdownToggleCheckbox = /*#__PURE__*/function (_React$Component) {\n  _inherits(DropdownToggleCheckbox, _React$Component);\n\n  var _super = _createSuper(DropdownToggleCheckbox);\n\n  function DropdownToggleCheckbox(props) {\n    var _this;\n\n    _classCallCheck(this, DropdownToggleCheckbox);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (event) {\n      _this.props.onChange(event.target.checked, event);\n    };\n\n    _this.calculateChecked = function () {\n      var _this$props = _this.props,\n          isChecked = _this$props.isChecked,\n          checked = _this$props.checked;\n\n      if (isChecked === null) {\n        // return false here and the indeterminate state will be set to true through the ref\n        return false;\n      } else if (isChecked !== undefined) {\n        return isChecked;\n      }\n\n      return checked;\n    };\n\n    _this.state = {\n      ouiaStateId: getDefaultOUIAId(DropdownToggleCheckbox.displayName)\n    };\n    return _this;\n  }\n\n  _createClass(DropdownToggleCheckbox, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          isValid = _a.isValid,\n          isDisabled = _a.isDisabled,\n          isChecked = _a.isChecked,\n          children = _a.children,\n          ouiaId = _a.ouiaId,\n          ouiaSafe = _a.ouiaSafe,\n          onChange = _a.onChange,\n          checked = _a.checked,\n          props = __rest(_a, [\"className\", \"isValid\", \"isDisabled\", \"isChecked\", \"children\", \"ouiaId\", \"ouiaSafe\", \"onChange\", \"checked\"]);\n\n      var text = children && React.createElement(\"span\", {\n        className: css(styles.dropdownToggleText, className),\n        \"aria-hidden\": \"true\",\n        id: \"\".concat(props.id, \"-text\")\n      }, children);\n      return React.createElement(\"label\", {\n        className: css(styles.dropdownToggleCheck, className),\n        htmlFor: props.id\n      }, React.createElement(\"input\", Object.assign({}, props, this.calculateChecked() !== undefined && {\n        onChange: this.handleChange\n      }, {\n        type: \"checkbox\",\n        ref: function ref(elem) {\n          return elem && (elem.indeterminate = isChecked === null);\n        },\n        \"aria-invalid\": !isValid,\n        disabled: isDisabled,\n        checked: this.calculateChecked()\n      }, getOUIAProps(DropdownToggleCheckbox.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe))), text);\n    }\n  }]);\n\n  return DropdownToggleCheckbox;\n}(React.Component);\nDropdownToggleCheckbox.displayName = 'DropdownToggleCheckbox';\nDropdownToggleCheckbox.defaultProps = {\n  className: '',\n  isValid: true,\n  isDisabled: false,\n  onChange: function onChange() {\n    return undefined;\n  }\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","getOUIAProps","getDefaultOUIAId","DropdownToggleCheckbox","props","event","onChange","target","checked","isChecked","undefined","state","ouiaStateId","displayName","className","_a","isValid","isDisabled","children","ouiaId","ouiaSafe","__rest","text","dropdownToggleText","id","dropdownToggleCheck","htmlFor","calculateChecked","handleChange","type","ref","elem","indeterminate","disabled","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/DropdownToggleCheckbox.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface DropdownToggleCheckboxProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'type' | 'onChange' | 'disabled' | 'checked'>,\n    OUIAProps {\n  /** Additional classes added to the DropdownToggleCheckbox */\n  className?: string;\n  /** Flag to show if the checkbox selection is valid or invalid */\n  isValid?: boolean;\n  /** Flag to show if the checkbox is disabled */\n  isDisabled?: boolean;\n  /** Flag to show if the checkbox is checked */\n  isChecked?: boolean | null;\n  /** Alternate Flag to show if the checkbox is checked */\n  checked?: boolean | null;\n  /** A callback for when the checkbox selection changes */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Element to be rendered inside the <span> */\n  children?: React.ReactNode;\n  /** Id of the checkbox */\n  id: string;\n  /** Aria-label of the checkbox */\n  'aria-label': string;\n}\n\nexport class DropdownToggleCheckbox extends React.Component<DropdownToggleCheckboxProps, { ouiaStateId: string }> {\n  static displayName = 'DropdownToggleCheckbox';\n  static defaultProps: PickOptional<DropdownToggleCheckboxProps> = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    onChange: () => undefined as any\n  };\n\n  constructor(props: DropdownToggleCheckboxProps) {\n    super(props);\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(DropdownToggleCheckbox.displayName)\n    };\n  }\n\n  handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.onChange((event.target as HTMLInputElement).checked, event);\n  };\n\n  calculateChecked = () => {\n    const { isChecked, checked } = this.props;\n    if (isChecked === null) {\n      // return false here and the indeterminate state will be set to true through the ref\n      return false;\n    } else if (isChecked !== undefined) {\n      return isChecked;\n    }\n    return checked;\n  };\n\n  render() {\n    const {\n      className,\n      isValid,\n      isDisabled,\n      isChecked,\n      children,\n      ouiaId,\n      ouiaSafe,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onChange,\n      checked,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const text = children && (\n      <span className={css(styles.dropdownToggleText, className)} aria-hidden=\"true\" id={`${props.id}-text`}>\n        {children}\n      </span>\n    );\n    return (\n      <label className={css(styles.dropdownToggleCheck, className)} htmlFor={props.id}>\n        <input\n          {...props}\n          {...(this.calculateChecked() !== undefined && { onChange: this.handleChange })}\n          type=\"checkbox\"\n          ref={elem => elem && (elem.indeterminate = isChecked === null)}\n          aria-invalid={!isValid}\n          disabled={isDisabled}\n          checked={this.calculateChecked()}\n          {...getOUIAProps(\n            DropdownToggleCheckbox.displayName,\n            ouiaId !== undefined ? ouiaId : this.state.ouiaStateId,\n            ouiaSafe\n          )}\n        />\n        {text}\n      </label>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}