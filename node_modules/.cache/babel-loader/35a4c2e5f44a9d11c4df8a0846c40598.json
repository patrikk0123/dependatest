{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getComponentQueryParamsObject, queryParamsObjectsAreEqual } from '../utils/queryParamsHelper';\nexport const useQueryParamsEffect = (service, componentId) => {\n  const lastQueryParams = useRef({});\n  const location = useLocation();\n  useEffect(() => {\n    const componentQueryParamsObject = getComponentQueryParamsObject(location.search, componentId); // Prevent service invocation when no Query Params changed\n\n    if (Object.keys(componentQueryParamsObject).length && !queryParamsObjectsAreEqual(lastQueryParams.current, componentQueryParamsObject)) {\n      lastQueryParams.current = componentQueryParamsObject; // Put Query Params coming from the URL to the service\n\n      service({\n        params: componentQueryParamsObject\n      });\n    }\n  }, [location.search, componentId, service]);\n};","map":{"version":3,"names":["useEffect","useRef","useLocation","getComponentQueryParamsObject","queryParamsObjectsAreEqual","useQueryParamsEffect","service","componentId","lastQueryParams","location","componentQueryParamsObject","search","Object","keys","length","current","params"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useQueryParamsEffect.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { getComponentQueryParamsObject, queryParamsObjectsAreEqual } from '../utils/queryParamsHelper';\n\nexport const useQueryParamsEffect = (service: Function, componentId: string) => {\n  const lastQueryParams = useRef({});\n  const location = useLocation();\n\n  useEffect(() => {\n    const componentQueryParamsObject = getComponentQueryParamsObject(location.search, componentId);\n    // Prevent service invocation when no Query Params changed\n    if (\n      Object.keys(componentQueryParamsObject).length &&\n      !queryParamsObjectsAreEqual(lastQueryParams.current, componentQueryParamsObject)\n    ) {\n      lastQueryParams.current = componentQueryParamsObject;\n      // Put Query Params coming from the URL to the service\n      service({ params: componentQueryParamsObject });\n    }\n  }, [location.search, componentId, service]);\n};\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,SAASC,6BAAT,EAAwCC,0BAAxC,QAA0E,4BAA1E;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,OAAD,EAAoBC,WAApB,KAA4C;EAC9E,MAAMC,eAAe,GAAGP,MAAM,CAAC,EAAD,CAA9B;EACA,MAAMQ,QAAQ,GAAGP,WAAW,EAA5B;EAEAF,SAAS,CAAC,MAAM;IACd,MAAMU,0BAA0B,GAAGP,6BAA6B,CAACM,QAAQ,CAACE,MAAV,EAAkBJ,WAAlB,CAAhE,CADc,CAEd;;IACA,IACEK,MAAM,CAACC,IAAP,CAAYH,0BAAZ,EAAwCI,MAAxC,IACA,CAACV,0BAA0B,CAACI,eAAe,CAACO,OAAjB,EAA0BL,0BAA1B,CAF7B,EAGE;MACAF,eAAe,CAACO,OAAhB,GAA0BL,0BAA1B,CADA,CAEA;;MACAJ,OAAO,CAAC;QAAEU,MAAM,EAAEN;MAAV,CAAD,CAAP;IACD;EACF,CAXQ,EAWN,CAACD,QAAQ,CAACE,MAAV,EAAkBJ,WAAlB,EAA+BD,OAA/B,CAXM,CAAT;AAYD,CAhBM"},"metadata":{},"sourceType":"module"}