{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { useOUIAId } from '../../helpers';\nexport const Dropdown = _a => {\n  var {\n    onSelect,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref,\n    // Types of Ref are different for React.FunctionComponent vs React.Component\n    ouiaId,\n    ouiaSafe,\n    alignments,\n    contextProps,\n    menuAppendTo = 'inline',\n    isFlipEnabled = false\n  } = _a,\n      props = __rest(_a, [\"onSelect\", \"ref\", \"ouiaId\", \"ouiaSafe\", \"alignments\", \"contextProps\", \"menuAppendTo\", \"isFlipEnabled\"]);\n\n  return React.createElement(DropdownContext.Provider, {\n    value: Object.assign({\n      onSelect: event => onSelect && onSelect(event),\n      toggleTextClass: styles.dropdownToggleText,\n      toggleIconClass: styles.dropdownToggleImage,\n      toggleIndicatorClass: styles.dropdownToggleIcon,\n      menuClass: styles.dropdownMenu,\n      itemClass: styles.dropdownMenuItem,\n      toggleClass: styles.dropdownToggle,\n      baseClass: styles.dropdown,\n      baseComponent: 'div',\n      sectionClass: styles.dropdownGroup,\n      sectionTitleClass: styles.dropdownGroupTitle,\n      sectionComponent: 'section',\n      disabledClass: styles.modifiers.disabled,\n      plainTextClass: styles.modifiers.text,\n      ouiaId: useOUIAId(Dropdown.displayName, ouiaId),\n      ouiaSafe,\n      ouiaComponentType: Dropdown.displayName,\n      alignments\n    }, contextProps)\n  }, React.createElement(DropdownWithContext, Object.assign({\n    menuAppendTo: menuAppendTo,\n    isFlipEnabled: isFlipEnabled\n  }, props)));\n};\nDropdown.displayName = 'Dropdown';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,2DAAnB;AACA,SAA8CC,eAA9C,QAAqE,qBAArE;AACA,SAASC,mBAAT,QAAoC,uBAApC;AAEA,SAAoBC,SAApB,QAAqC,eAArC;AA2DA,OAAO,MAAMC,QAAQ,GAA4CC,EAAD,IAW5C;MAX6C;IAC/DC,QAD+D;IAE/D;IACAC,GAH+D;IAG1D;IACLC,MAJ+D;IAK/DC,QAL+D;IAM/DC,UAN+D;IAO/DC,YAP+D;IAQ/DC,YAAY,GAAG,QARgD;IAS/DC,aAAa,GAAG;EAT+C,IAS1CR;MAClBS,KAAK,cAVuD,wGAUvD;;EACW,OACnBf,oBAACE,eAAe,CAACc,QAAjB,EAAyB;IACvBC,KAAK;MACHV,QAAQ,EAAEW,KAAK,IAAIX,QAAQ,IAAIA,QAAQ,CAACW,KAAD,CADpC;MAEHC,eAAe,EAAElB,MAAM,CAACmB,kBAFrB;MAGHC,eAAe,EAAEpB,MAAM,CAACqB,mBAHrB;MAIHC,oBAAoB,EAAEtB,MAAM,CAACuB,kBAJ1B;MAKHC,SAAS,EAAExB,MAAM,CAACyB,YALf;MAMHC,SAAS,EAAE1B,MAAM,CAAC2B,gBANf;MAOHC,WAAW,EAAE5B,MAAM,CAAC6B,cAPjB;MAQHC,SAAS,EAAE9B,MAAM,CAAC+B,QARf;MASHC,aAAa,EAAE,KATZ;MAUHC,YAAY,EAAEjC,MAAM,CAACkC,aAVlB;MAWHC,iBAAiB,EAAEnC,MAAM,CAACoC,kBAXvB;MAYHC,gBAAgB,EAAE,SAZf;MAaHC,aAAa,EAAEtC,MAAM,CAACuC,SAAP,CAAiBC,QAb7B;MAcHC,cAAc,EAAEzC,MAAM,CAACuC,SAAP,CAAiBG,IAd9B;MAeHlC,MAAM,EAAEL,SAAS,CAACC,QAAQ,CAACuC,WAAV,EAAuBnC,MAAvB,CAfd;MAgBHC,QAhBG;MAiBHmC,iBAAiB,EAAExC,QAAQ,CAACuC,WAjBzB;MAkBHjC;IAlBG,GAmBAC,YAnBA;EADkB,CAAzB,EAuBEZ,oBAACG,mBAAD,EAAoB2C;IAACjC,YAAY,EAAEA,YAAf;IAA6BC,aAAa,EAAEA;EAA5C,GAA+DC,KAA/D,CAApB,CAvBF,CADmB;AA0BpB,CArCM;AAsCPV,QAAQ,CAACuC,WAAT,GAAuB,UAAvB","names":["React","styles","DropdownContext","DropdownWithContext","useOUIAId","Dropdown","_a","onSelect","ref","ouiaId","ouiaSafe","alignments","contextProps","menuAppendTo","isFlipEnabled","props","Provider","value","event","toggleTextClass","dropdownToggleText","toggleIconClass","dropdownToggleImage","toggleIndicatorClass","dropdownToggleIcon","menuClass","dropdownMenu","itemClass","dropdownMenuItem","toggleClass","dropdownToggle","baseClass","dropdown","baseComponent","sectionClass","dropdownGroup","sectionTitleClass","dropdownGroupTitle","sectionComponent","disabledClass","modifiers","disabled","plainTextClass","text","displayName","ouiaComponentType","Object"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/Dropdown.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownPosition, DropdownDirection, DropdownContext } from './dropdownConstants';\nimport { DropdownWithContext } from './DropdownWithContext';\nimport { ToggleMenuBaseProps } from '../../helpers/Popper/Popper';\nimport { OUIAProps, useOUIAId } from '../../helpers';\n\nexport interface DropdownProps\n  extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>,\n    React.HTMLProps<HTMLDivElement>,\n    OUIAProps {\n  /** Anything which can be rendered in a dropdown */\n  children?: React.ReactNode;\n  /** Classes applied to root element of dropdown */\n  className?: string;\n  /** Array of DropdownItem nodes that will be rendered in the dropdown Menu list */\n  dropdownItems?: any[];\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Display the toggle in text only mode */\n  isText?: boolean;\n  /** Flag indicating that the dropdown should expand to full height */\n  isFullHeight?: boolean;\n  /** Indicates where menu will be aligned horizontally */\n  position?: DropdownPosition | 'right' | 'left';\n  /** Indicates how the menu will align at screen size breakpoints. Default alignment is set via the position property. */\n  alignments?: {\n    sm?: 'right' | 'left';\n    md?: 'right' | 'left';\n    lg?: 'right' | 'left';\n    xl?: 'right' | 'left';\n    '2xl'?: 'right' | 'left';\n  };\n  /** Display menu above or below dropdown toggle */\n  direction?: DropdownDirection | 'up' | 'down';\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n  /** Flag to indicate if dropdown has groups */\n  isGrouped?: boolean;\n  /** Toggle for the dropdown, examples: <DropdownToggle> or <DropdownToggleCheckbox> */\n  toggle: React.ReactElement<any>;\n  /** Function callback called when user selects item */\n  onSelect?: (event?: React.SyntheticEvent<HTMLDivElement>) => void;\n  /** Flag to indicate if the first dropdown item should gain initial focus, set false when adding\n   * a specific auto-focus item (like a current selection) otherwise leave as true\n   */\n  autoFocus?: boolean;\n  /** Props for extreme customization of dropdown */\n  contextProps?: typeof DropdownContext;\n  /** Flag for indicating that the dropdown menu should automatically flip vertically when\n   * it reaches the boundary. This prop can only be used when the dropdown component is not\n   * appended inline, e.g. `menuAppendTo=\"parent\"`\n   */\n  isFlipEnabled?: boolean;\n}\n\nexport const Dropdown: React.FunctionComponent<DropdownProps> = ({\n  onSelect,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n  ouiaId,\n  ouiaSafe,\n  alignments,\n  contextProps,\n  menuAppendTo = 'inline',\n  isFlipEnabled = false,\n  ...props\n}: DropdownProps) => (\n  <DropdownContext.Provider\n    value={{\n      onSelect: event => onSelect && onSelect(event),\n      toggleTextClass: styles.dropdownToggleText,\n      toggleIconClass: styles.dropdownToggleImage,\n      toggleIndicatorClass: styles.dropdownToggleIcon,\n      menuClass: styles.dropdownMenu,\n      itemClass: styles.dropdownMenuItem,\n      toggleClass: styles.dropdownToggle,\n      baseClass: styles.dropdown,\n      baseComponent: 'div',\n      sectionClass: styles.dropdownGroup,\n      sectionTitleClass: styles.dropdownGroupTitle,\n      sectionComponent: 'section',\n      disabledClass: styles.modifiers.disabled,\n      plainTextClass: styles.modifiers.text,\n      ouiaId: useOUIAId(Dropdown.displayName, ouiaId),\n      ouiaSafe,\n      ouiaComponentType: Dropdown.displayName,\n      alignments,\n      ...contextProps\n    }}\n  >\n    <DropdownWithContext menuAppendTo={menuAppendTo} isFlipEnabled={isFlipEnabled} {...props} />\n  </DropdownContext.Provider>\n);\nDropdown.displayName = 'Dropdown';\n"]},"metadata":{},"sourceType":"module"}