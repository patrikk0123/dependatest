{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { handleArrows } from '../../helpers';\nexport const DualListSelectorControlsWrapperBase = _a => {\n  var {\n    innerRef,\n    children = null,\n    className,\n    'aria-label': ariaLabel = 'Controls for moving options between lists'\n  } = _a,\n      props = __rest(_a, [\"innerRef\", \"children\", \"className\", 'aria-label']);\n\n  const wrapperRef = innerRef || React.useRef(null); // Adds keyboard navigation to the dynamically built dual list selector controls. Works when controls are dynamically built\n  // as well as when they are passed in via children.\n\n  const handleKeys = event => {\n    if (!wrapperRef.current || wrapperRef.current !== event.target.closest('.pf-c-dual-list-selector__controls') && !Array.from(wrapperRef.current.getElementsByClassName('pf-c-dual-list-selector__controls')).includes(event.target.closest('.pf-c-dual-list-selector__controls'))) {\n      return;\n    }\n\n    event.stopImmediatePropagation();\n    const controls = Array.from(wrapperRef.current.getElementsByTagName('BUTTON')).filter(el => !el.classList.contains('pf-m-disabled'));\n    const activeElement = document.activeElement;\n    handleArrows(event, controls, element => activeElement.contains(element), element => element, undefined, undefined, true, false);\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [wrapperRef.current]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorControls, className),\n    tabIndex: 0,\n    ref: wrapperRef,\n    \"aria-label\": ariaLabel\n  }, props), children);\n};\nDualListSelectorControlsWrapperBase.displayName = 'DualListSelectorControlsWrapperBase';\nexport const DualListSelectorControlsWrapper = React.forwardRef((props, ref) => React.createElement(DualListSelectorControlsWrapperBase, Object.assign({\n  innerRef: ref\n}, props)));\nDualListSelectorControlsWrapper.displayName = 'DualListSelectorControlsWrapper';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,6EAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,YAAT,QAA6B,eAA7B;AAaA,OAAO,MAAMC,mCAAmC,GAAmEC,EAAD,IAMvE;MANwE;IACjHC,QADiH;IAEjHC,QAAQ,GAAG,IAFsG;IAGjHC,SAHiH;IAIjH,cAAcC,SAAS,GAAG;EAJuF,IAI5CJ;MAClEK,KAAK,cALyG,mDAKzG;;EAER,MAAMC,UAAU,GAAGL,QAAQ,IAAIN,KAAK,CAACY,MAAN,CAAa,IAAb,CAA/B,CADyC,CAEzC;EACA;;EACA,MAAMC,UAAU,GAAIC,KAAD,IAAyB;IAC1C,IACE,CAACH,UAAU,CAACI,OAAZ,IACCJ,UAAU,CAACI,OAAX,KAAwBD,KAAK,CAACE,MAAN,CAA6BC,OAA7B,CAAqC,oCAArC,CAAxB,IACC,CAACC,KAAK,CAACC,IAAN,CAAWR,UAAU,CAACI,OAAX,CAAmBK,sBAAnB,CAA0C,mCAA1C,CAAX,EAA2FC,QAA3F,CACEP,KAAK,CAACE,MAAN,CAA6BC,OAA7B,CAAqC,oCAArC,CADF,CAHL,EAME;MACA;IACD;;IACDH,KAAK,CAACQ,wBAAN;IAEA,MAAMC,QAAQ,GAAIL,KAAK,CAACC,IAAN,CAAWR,UAAU,CAACI,OAAX,CAAmBS,oBAAnB,CAAwC,QAAxC,CAAX,EAA4EC,MAA5E,CAChBC,EAAE,IAAI,CAACA,EAAE,CAACC,SAAH,CAAaC,QAAb,CAAsB,eAAtB,CADS,CAAlB;IAGA,MAAMC,aAAa,GAAGC,QAAQ,CAACD,aAA/B;IACA1B,YAAY,CACVW,KADU,EAEVS,QAFU,EAGTQ,OAAD,IAAsBF,aAAa,CAACD,QAAd,CAAuBG,OAAvB,CAHZ,EAITA,OAAD,IAAsBA,OAJZ,EAKVC,SALU,EAMVA,SANU,EAOV,IAPU,EAQV,KARU,CAAZ;EAUD,CA1BD;;EA4BAhC,KAAK,CAACiC,SAAN,CAAgB,MAAK;IACnBC,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCtB,UAAnC;IACA,OAAO,MAAK;MACVqB,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCvB,UAAtC;IACD,CAFD;EAGD,CALD,EAKG,CAACF,UAAU,CAACI,OAAZ,CALH;EAOA,OACEf;IACEQ,SAAS,EAAEN,GAAG,CAACD,MAAM,CAACoC,wBAAR,EAAkC7B,SAAlC,CADhB;IAEE8B,QAAQ,EAAE,CAFZ;IAGEC,GAAG,EAAE5B,UAHP;IAGiB,cACHF;EAJd,GAKMC,KALN,GAOGH,QAPH,CADF;AAWD,CAxDM;AA0DPH,mCAAmC,CAACoC,WAApC,GAAkD,qCAAlD;AAEA,OAAO,MAAMC,+BAA+B,GAAGzC,KAAK,CAAC0C,UAAN,CAC7C,CAAChC,KAAD,EAA8C6B,GAA9C,KACEvC,oBAACI,mCAAD,EAAoCuC;EAACrC,QAAQ,EAAEiC;AAAX,GAAmD7B,KAAnD,CAApC,CAF2C,CAAxC;AAMP+B,+BAA+B,CAACD,WAAhC,GAA8C,iCAA9C","names":["React","styles","css","handleArrows","DualListSelectorControlsWrapperBase","_a","innerRef","children","className","ariaLabel","props","wrapperRef","useRef","handleKeys","event","current","target","closest","Array","from","getElementsByClassName","includes","stopImmediatePropagation","controls","getElementsByTagName","filter","el","classList","contains","activeElement","document","element","undefined","useEffect","window","addEventListener","removeEventListener","dualListSelectorControls","tabIndex","ref","displayName","DualListSelectorControlsWrapper","forwardRef","Object"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorControlsWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { handleArrows } from '../../helpers';\n\nexport interface DualListSelectorControlsWrapperProps extends React.HTMLProps<HTMLDivElement> {\n  /** Anything that can be rendered inside of the wrapper. */\n  children?: React.ReactNode;\n  /** Additional classes added to the wrapper. */\n  className?: string;\n  /** @hide Forwarded ref */\n  innerRef?: React.RefObject<HTMLDivElement>;\n  /** Accessible label for the dual list selector controls wrapper. */\n  'aria-label'?: string;\n}\n\nexport const DualListSelectorControlsWrapperBase: React.FunctionComponent<DualListSelectorControlsWrapperProps> = ({\n  innerRef,\n  children = null,\n  className,\n  'aria-label': ariaLabel = 'Controls for moving options between lists',\n  ...props\n}: DualListSelectorControlsWrapperProps) => {\n  const wrapperRef = innerRef || React.useRef(null);\n  // Adds keyboard navigation to the dynamically built dual list selector controls. Works when controls are dynamically built\n  // as well as when they are passed in via children.\n  const handleKeys = (event: KeyboardEvent) => {\n    if (\n      !wrapperRef.current ||\n      (wrapperRef.current !== (event.target as HTMLElement).closest('.pf-c-dual-list-selector__controls') &&\n        !Array.from(wrapperRef.current.getElementsByClassName('pf-c-dual-list-selector__controls')).includes(\n          (event.target as HTMLElement).closest('.pf-c-dual-list-selector__controls')\n        ))\n    ) {\n      return;\n    }\n    event.stopImmediatePropagation();\n\n    const controls = (Array.from(wrapperRef.current.getElementsByTagName('BUTTON')) as Element[]).filter(\n      el => !el.classList.contains('pf-m-disabled')\n    );\n    const activeElement = document.activeElement;\n    handleArrows(\n      event,\n      controls,\n      (element: Element) => activeElement.contains(element),\n      (element: Element) => element,\n      undefined,\n      undefined,\n      true,\n      false\n    );\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeys);\n    return () => {\n      window.removeEventListener('keydown', handleKeys);\n    };\n  }, [wrapperRef.current]);\n\n  return (\n    <div\n      className={css(styles.dualListSelectorControls, className)}\n      tabIndex={0}\n      ref={wrapperRef}\n      aria-label={ariaLabel}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nDualListSelectorControlsWrapperBase.displayName = 'DualListSelectorControlsWrapperBase';\n\nexport const DualListSelectorControlsWrapper = React.forwardRef(\n  (props: DualListSelectorControlsWrapperProps, ref: React.Ref<HTMLDivElement>) => (\n    <DualListSelectorControlsWrapperBase innerRef={ref as React.MutableRefObject<any>} {...props} />\n  )\n);\n\nDualListSelectorControlsWrapper.displayName = 'DualListSelectorControlsWrapper';\n"]},"metadata":{},"sourceType":"module"}