{"ast":null,"code":"import{useRef,useEffect,useCallback}from'react';/**\n * React hook for setting up and using intervals.\n * As suggested by Dan Abramov in a blog post here:\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n * @param callback - Function to be called every interval tick\n * @param delay - Delay in ms between interval ticks\n * @param runImmediately - Whether the callback should be run at the begging\n * @returns function to restart the interval\n */export var useInterval=function useInterval(callback,delay){var runImmediately=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var savedCallback=useRef();// useRef needs to be used here since if it was declared as a let variable,\n// it would not persist the state during rerenders\nvar savedTimer=useRef();useEffect(function(){savedCallback.current=callback;},[callback]);useEffect(function(){if(runImmediately){savedCallback.current();}savedTimer.current=setInterval(function(){savedCallback.current();},delay);return function(){return clearInterval(savedTimer.current);};},[delay,runImmediately]);var restart=useCallback(function(){clearInterval(savedTimer.current);savedTimer.current=setInterval(function(){savedCallback.current();},delay);},[delay]);return restart;};","map":{"version":3,"names":["useRef","useEffect","useCallback","useInterval","callback","delay","runImmediately","savedCallback","savedTimer","current","setInterval","clearInterval","restart"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useInterval.ts"],"sourcesContent":["import { useRef, useEffect, MutableRefObject, useCallback } from 'react';\n\n/**\n * React hook for setting up and using intervals.\n * As suggested by Dan Abramov in a blog post here:\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n * @param callback - Function to be called every interval tick\n * @param delay - Delay in ms between interval ticks\n * @param runImmediately - Whether the callback should be run at the begging\n * @returns function to restart the interval\n */\nexport const useInterval = (callback: Function, delay: number, runImmediately: boolean = false) => {\n  const savedCallback: MutableRefObject<Function | undefined> = useRef();\n  // useRef needs to be used here since if it was declared as a let variable,\n  // it would not persist the state during rerenders\n  const savedTimer: MutableRefObject<NodeJS.Timer | undefined> = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (runImmediately) {\n      savedCallback.current!();\n    }\n    savedTimer.current = setInterval(() => {\n      savedCallback.current!();\n    }, delay);\n    return () => clearInterval(savedTimer.current);\n  }, [delay, runImmediately]);\n\n  const restart = useCallback(() => {\n    clearInterval(savedTimer.current);\n    savedTimer.current = setInterval(() => {\n      savedCallback.current!();\n    }, delay);\n  }, [delay]);\n\n  return restart;\n};\n"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,SAAjB,CAA8CC,WAA9C,KAAiE,OAAjE,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,YAAW,CAAG,QAAdA,YAAc,CAACC,QAAD,CAAqBC,KAArB,CAAwE,IAApCC,eAAoC,2DAAV,KAAU,CACjG,GAAMC,cAAqD,CAAGP,MAAM,EAApE,CACA;AACA;AACA,GAAMQ,WAAsD,CAAGR,MAAM,EAArE,CAEAC,SAAS,CAAC,UAAM,CACdM,aAAa,CAACE,OAAd,CAAwBL,QAAxB,CACD,CAFQ,CAEN,CAACA,QAAD,CAFM,CAAT,CAIAH,SAAS,CAAC,UAAM,CACd,GAAIK,cAAJ,CAAoB,CAClBC,aAAa,CAACE,OAAd,GACD,CACDD,UAAU,CAACC,OAAX,CAAqBC,WAAW,CAAC,UAAM,CACrCH,aAAa,CAACE,OAAd,GACD,CAF+B,CAE7BJ,KAF6B,CAAhC,CAGA,MAAO,kBAAMM,cAAa,CAACH,UAAU,CAACC,OAAZ,CAAnB,EAAP,CACD,CARQ,CAQN,CAACJ,KAAD,CAAQC,cAAR,CARM,CAAT,CAUA,GAAMM,QAAO,CAAGV,WAAW,CAAC,UAAM,CAChCS,aAAa,CAACH,UAAU,CAACC,OAAZ,CAAb,CACAD,UAAU,CAACC,OAAX,CAAqBC,WAAW,CAAC,UAAM,CACrCH,aAAa,CAACE,OAAd,GACD,CAF+B,CAE7BJ,KAF6B,CAAhC,CAGD,CAL0B,CAKxB,CAACA,KAAD,CALwB,CAA3B,CAOA,MAAOO,QAAP,CACD,CA5BM"},"metadata":{},"sourceType":"module"}