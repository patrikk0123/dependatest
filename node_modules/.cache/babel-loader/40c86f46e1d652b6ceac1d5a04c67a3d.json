{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SimpleList/simple-list';\nimport { SimpleListGroup } from './SimpleListGroup';\nexport const SimpleListContext = React.createContext({});\nexport class SimpleList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      currentRef: null\n    };\n\n    this.handleCurrentUpdate = (newCurrentRef, itemProps) => {\n      this.setState({\n        currentRef: newCurrentRef\n      });\n      const {\n        onSelect\n      } = this.props;\n      onSelect && onSelect(newCurrentRef, itemProps);\n    };\n  }\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const _a = this.props,\n          {\n      children,\n      className,\n      onSelect,\n      isControlled\n    } = _a,\n          props = __rest(_a, [\"children\", \"className\", \"onSelect\", \"isControlled\"]);\n\n    let isGrouped = false;\n\n    if (children) {\n      isGrouped = React.Children.toArray(children)[0].type === SimpleListGroup;\n    }\n\n    return React.createElement(SimpleListContext.Provider, {\n      value: {\n        currentRef: this.state.currentRef,\n        updateCurrentRef: this.handleCurrentUpdate,\n        isControlled\n      }\n    }, React.createElement(\"div\", Object.assign({\n      className: css(styles.simpleList, className)\n    }, props), isGrouped && children, !isGrouped && React.createElement(\"ul\", null, children)));\n  }\n\n}\nSimpleList.displayName = 'SimpleList';\nSimpleList.defaultProps = {\n  children: null,\n  className: '',\n  isControlled: true\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,gEAAnB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AA+BA,OAAO,MAAMC,iBAAiB,GAAGJ,KAAK,CAACK,aAAN,CAAqD,EAArD,CAA1B;AAEP,OAAM,MAAOC,UAAP,SAA0BN,KAAK,CAACO,SAAhC,CAA2E;EAAjFC;;IAEE,aAAQ;MACNC,UAAU,EAAE;IADN,CAAR;;IAUA,2BAAsB,CACpBC,aADoB,EAEpBC,SAFoB,KAGlB;MACF,KAAKC,QAAL,CAAc;QAAEH,UAAU,EAAEC;MAAd,CAAd;MACA,MAAM;QAAEG;MAAF,IAAe,KAAKC,KAA1B;MACAD,QAAQ,IAAIA,QAAQ,CAACH,aAAD,EAAgBC,SAAhB,CAApB;IACD,CAPD;EAiCD;;EAxBCI,MAAM;IACJ;IACA,MAAMC,KAA4D,KAAKF,KAAvE;IAAA,MAAM;MAAEG,QAAF;MAAYC,SAAZ;MAAuBL,QAAvB;MAAiCM;IAAjC,IAA6CH,EAAnD;IAAA,MAAwDF,KAAK,cAAvD,qDAAuD,CAA7D;;IAEA,IAAIM,SAAS,GAAG,KAAhB;;IACA,IAAIH,QAAJ,EAAc;MACZG,SAAS,GAAIpB,KAAK,CAACqB,QAAN,CAAeC,OAAf,CAAuBL,QAAvB,EAAiC,CAAjC,EAA2DM,IAA3D,KAAoEpB,eAAjF;IACD;;IAED,OACEH,oBAACI,iBAAiB,CAACoB,QAAnB,EAA2B;MACzBC,KAAK,EAAE;QACLhB,UAAU,EAAE,KAAKiB,KAAL,CAAWjB,UADlB;QAELkB,gBAAgB,EAAE,KAAKC,mBAFlB;QAGLT;MAHK;IADkB,CAA3B,EAOEnB;MAAKkB,SAAS,EAAEjB,GAAG,CAACC,MAAM,CAAC2B,UAAR,EAAoBX,SAApB;IAAnB,GAAuDJ,KAAvD,GACGM,SAAS,IAAIH,QADhB,EAEG,CAACG,SAAD,IAAcpB,gCAAKiB,QAAL,CAFjB,CAPF,CADF;EAcD;;AA5C8E;AACxEX,yBAAc,YAAd;AAKAA,0BAAgC;EACrCW,QAAQ,EAAE,IAD2B;EAErCC,SAAS,EAAE,EAF0B;EAGrCC,YAAY,EAAE;AAHuB,CAAhC","names":["React","css","styles","SimpleListGroup","SimpleListContext","createContext","SimpleList","Component","constructor","currentRef","newCurrentRef","itemProps","setState","onSelect","props","render","_a","children","className","isControlled","isGrouped","Children","toArray","type","Provider","value","state","updateCurrentRef","handleCurrentUpdate","simpleList"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/SimpleList/SimpleList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SimpleList/simple-list';\nimport { SimpleListGroup } from './SimpleListGroup';\nimport { SimpleListItemProps } from './SimpleListItem';\n\nexport interface SimpleListProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onSelect'> {\n  /** Content rendered inside the SimpleList */\n  children?: React.ReactNode;\n  /** Additional classes added to the SimpleList container */\n  className?: string;\n  /** Callback when an item is selected */\n  onSelect?: (\n    ref: React.RefObject<HTMLButtonElement> | React.RefObject<HTMLAnchorElement>,\n    props: SimpleListItemProps\n  ) => void;\n  /** Indicates whether component is controlled by its internal state */\n  isControlled?: boolean;\n}\n\nexport interface SimpleListState {\n  /** Ref of the current SimpleListItem */\n  currentRef: React.RefObject<HTMLButtonElement> | React.RefObject<HTMLAnchorElement>;\n}\n\ninterface SimpleListContextProps {\n  currentRef: React.RefObject<HTMLButtonElement> | React.RefObject<HTMLAnchorElement>;\n  updateCurrentRef: (\n    id: React.RefObject<HTMLButtonElement> | React.RefObject<HTMLAnchorElement>,\n    props: SimpleListItemProps\n  ) => void;\n  isControlled: boolean;\n}\n\nexport const SimpleListContext = React.createContext<Partial<SimpleListContextProps>>({});\n\nexport class SimpleList extends React.Component<SimpleListProps, SimpleListState> {\n  static displayName = 'SimpleList';\n  state = {\n    currentRef: null as React.RefObject<HTMLButtonElement> | React.RefObject<HTMLAnchorElement>\n  };\n\n  static defaultProps: SimpleListProps = {\n    children: null as React.ReactNode,\n    className: '',\n    isControlled: true\n  };\n\n  handleCurrentUpdate = (\n    newCurrentRef: React.RefObject<HTMLButtonElement> | React.RefObject<HTMLAnchorElement>,\n    itemProps: SimpleListItemProps\n  ) => {\n    this.setState({ currentRef: newCurrentRef });\n    const { onSelect } = this.props;\n    onSelect && onSelect(newCurrentRef, itemProps);\n  };\n\n  render() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { children, className, onSelect, isControlled, ...props } = this.props;\n\n    let isGrouped = false;\n    if (children) {\n      isGrouped = (React.Children.toArray(children)[0] as React.ReactElement).type === SimpleListGroup;\n    }\n\n    return (\n      <SimpleListContext.Provider\n        value={{\n          currentRef: this.state.currentRef,\n          updateCurrentRef: this.handleCurrentUpdate,\n          isControlled\n        }}\n      >\n        <div className={css(styles.simpleList, className)} {...props}>\n          {isGrouped && children}\n          {!isGrouped && <ul>{children}</ul>}\n        </div>\n      </SimpleListContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}