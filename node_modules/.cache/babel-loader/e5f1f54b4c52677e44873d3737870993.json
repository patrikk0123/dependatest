{"ast":null,"code":"export var emptyTD = function emptyTD() {\n  return {\n    component: 'td'\n  };\n};\nexport var scopeColTransformer = function scopeColTransformer() {\n  return {\n    scope: 'col'\n  };\n};\nexport var emptyCol = function emptyCol(label) {\n  return Object.assign({}, label ? {} : {\n    scope: ''\n  });\n};\nexport var parentId = function parentId(_value, _ref) {\n  var rowData = _ref.rowData;\n  return {\n    parentId: rowData.parent\n  };\n};\nexport var mapProps = function mapProps(_label, _ref2) {\n  var property = _ref2.property,\n      rowData = _ref2.rowData;\n  return Object.assign({}, rowData[property] && rowData[property].props);\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,OAAO,GAAe,SAAtBA,OAAsB;EAAA,OAAO;IACxCC,SAAS,EAAE;EAD6B,CAAP;AAAA,CAA5B;AAIP,OAAO,IAAMC,mBAAmB,GAAe,SAAlCA,mBAAkC;EAAA,OAAO;IACpDC,KAAK,EAAE;EAD6C,CAAP;AAAA,CAAxC;AAIP,OAAO,IAAMC,QAAQ,GAAe,SAAvBA,QAAuB,CAACC,KAAD;EAAA,OAAgCC,kBAC9DD,KAAK,GAAG,EAAH,GAAQ;IAAEF,KAAK,EAAE;EAAT,CADiD,CAAhC;AAAA,CAA7B;AAIP,OAAO,IAAMI,QAAQ,GAAe,SAAvBA,QAAuB,CAACC,MAAD;EAAA,IAAgCC,OAAhC,QAAgCA,OAAhC;EAAA,OAAuD;IACzFF,QAAQ,EAAEE,OAAO,CAACC;EADuE,CAAvD;AAAA,CAA7B;AAIP,OAAO,IAAMC,QAAQ,GAAe,SAAvBA,QAAuB,CAACC,MAAD;EAAA,IAAgCC,QAAhC,SAAgCA,QAAhC;EAAA,IAA0CJ,OAA1C,SAA0CA,OAA1C;EAAA,OAAgEH,kBAC9FG,OAAO,CAACI,QAAD,CAAP,IAAqBJ,OAAO,CAACI,QAAD,CAAP,CAAkBC,KADuD,CAAhE;AAAA,CAA7B","names":["emptyTD","component","scopeColTransformer","scope","emptyCol","label","Object","parentId","_value","rowData","parent","mapProps","_label","property","props"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/utils/transformers.tsx"],"sourcesContent":["import { IFormatterValueType, IExtra, ITransform } from '../TableTypes';\n\nexport const emptyTD: ITransform = () => ({\n  component: 'td'\n});\n\nexport const scopeColTransformer: ITransform = () => ({\n  scope: 'col'\n});\n\nexport const emptyCol: ITransform = (label: IFormatterValueType) => ({\n  ...(label ? {} : { scope: '' })\n});\n\nexport const parentId: ITransform = (_value: IFormatterValueType, { rowData }: IExtra) => ({\n  parentId: rowData.parent\n});\n\nexport const mapProps: ITransform = (_label: IFormatterValueType, { property, rowData }: IExtra) => ({\n  ...(rowData[property] && rowData[property].props)\n});\n"]},"metadata":{},"sourceType":"module"}