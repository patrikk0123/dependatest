{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nconst gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid',\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\nexport var DataListWrapModifier;\n\n(function (DataListWrapModifier) {\n  DataListWrapModifier[\"nowrap\"] = \"nowrap\";\n  DataListWrapModifier[\"truncate\"] = \"truncate\";\n  DataListWrapModifier[\"breakWord\"] = \"breakWord\";\n})(DataListWrapModifier || (DataListWrapModifier = {}));\n\nexport const DataListContext = React.createContext({\n  isSelectable: false\n});\n\nconst moveItem = (arr, i1, toIndex) => {\n  const fromIndex = arr.indexOf(i1);\n\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n\n  const temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n  return arr;\n};\n\nexport class DataList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.dragFinished = false;\n    this.html5DragDrop = false;\n    this.arrayCopy = React.Children.toArray(this.props.children);\n    this.ref = React.createRef();\n    this.state = {\n      tempItemOrder: [],\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    };\n\n    this.getIndex = id => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n\n    this.move = itemOrder => {\n      const ulNode = this.ref.current;\n      const nodes = Array.from(ulNode.children);\n\n      if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n        return;\n      }\n\n      while (ulNode.firstChild) {\n        ulNode.removeChild(ulNode.lastChild);\n      }\n\n      itemOrder.forEach(id => {\n        ulNode.appendChild(nodes.find(n => n.id === id));\n      });\n    };\n\n    this.dragStart0 = el => {\n      const {\n        onDragStart\n      } = this.props;\n      const draggedItemId = el.id;\n      el.classList.add(styles.modifiers.ghostRow);\n      el.setAttribute('aria-pressed', 'true');\n      this.setState({\n        draggedItemId,\n        dragging: true\n      });\n      onDragStart && onDragStart(draggedItemId);\n    };\n\n    this.dragStart = evt => {\n      evt.dataTransfer.effectAllowed = 'move';\n      evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n      this.dragStart0(evt.currentTarget);\n    };\n\n    this.onDragCancel = () => {\n      this.move(this.props.itemOrder);\n      Array.from(this.ref.current.children).forEach(el => {\n        el.classList.remove(styles.modifiers.ghostRow);\n        el.classList.remove(styles.modifiers.dragOver);\n        el.setAttribute('aria-pressed', 'false');\n      });\n      this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n\n      if (this.props.onDragCancel) {\n        this.props.onDragCancel();\n      }\n    };\n\n    this.dragLeave = evt => {\n      // This event false fires when we call `this.move()`, so double check we're out of zone\n      if (!this.isValidDrop(evt)) {\n        this.move(this.props.itemOrder);\n        this.setState({\n          draggingToItemIndex: null\n        });\n      }\n    };\n\n    this.dragEnd0 = el => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n      this.setState({\n        draggedItemId: null,\n        draggingToItemIndex: null,\n        dragging: false\n      });\n    };\n\n    this.dragEnd = evt => {\n      this.dragEnd0(evt.target);\n    };\n\n    this.isValidDrop = evt => {\n      const ulRect = this.ref.current.getBoundingClientRect();\n      return evt.clientX > ulRect.x && evt.clientX < ulRect.x + ulRect.width && evt.clientY > ulRect.y && evt.clientY < ulRect.y + ulRect.height;\n    };\n\n    this.drop = evt => {\n      if (this.isValidDrop(evt)) {\n        this.props.onDragFinish(this.state.tempItemOrder);\n      } else {\n        this.onDragCancel();\n      }\n    };\n\n    this.dragOver0 = id => {\n      const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n\n      if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n        const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n        this.move(tempItemOrder);\n        this.setState({\n          draggingToItemIndex,\n          tempItemOrder\n        });\n      }\n    };\n\n    this.dragOver = evt => {\n      evt.preventDefault();\n      const curListItem = evt.target.closest('li');\n\n      if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n        // We're going nowhere, don't bother calling `dragOver0`\n        return null;\n      } else {\n        this.dragOver0(curListItem.id);\n      }\n    };\n\n    this.handleDragButtonKeys = evt => {\n      const {\n        dragging\n      } = this.state;\n\n      if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !this.html5DragDrop) {\n        if (dragging) {\n          evt.preventDefault();\n        }\n\n        return;\n      }\n\n      evt.preventDefault();\n      const dragItem = evt.target.closest('li');\n\n      if (evt.key === ' ' || evt.key === 'Enter' && !dragging) {\n        this.dragStart0(dragItem);\n      } else if (dragging) {\n        if (evt.key === 'Escape' || evt.key === 'Enter') {\n          this.setState({\n            dragging: false\n          });\n          this.dragFinished = true;\n\n          if (evt.key === 'Enter') {\n            this.dragEnd0(dragItem);\n            this.props.onDragFinish(this.state.tempItemOrder);\n          } else {\n            this.onDragCancel();\n          }\n        } else if (evt.key === 'ArrowUp') {\n          const nextSelection = dragItem.previousSibling;\n\n          if (nextSelection) {\n            this.dragOver0(nextSelection.id);\n            dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n          }\n        } else if (evt.key === 'ArrowDown') {\n          const nextSelection = dragItem.nextSibling;\n\n          if (nextSelection) {\n            this.dragOver0(nextSelection.id);\n            dragItem.querySelector(`.${styles.dataListItemDraggableButton}`).focus();\n          }\n        }\n      }\n    };\n\n    this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n\n    if (this.html5DragDrop) {\n      // eslint-disable-next-line no-console\n      console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n    }\n  }\n\n  componentDidUpdate(oldProps) {\n    if (this.dragFinished) {\n      this.dragFinished = false;\n      this.setState({\n        tempItemOrder: [...this.props.itemOrder],\n        draggedItemId: null,\n        dragging: false\n      });\n    }\n\n    if (oldProps.itemOrder !== this.props.itemOrder) {\n      this.move(this.props.itemOrder);\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      children,\n      onSelectDataListItem,\n      selectedDataListItemId,\n      isCompact,\n      wrapModifier,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onDragStart,\n      onDragMove,\n      onDragCancel,\n      onDragFinish,\n      gridBreakpoint,\n      itemOrder,\n      selectableRow\n    } = _a,\n\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, [\"className\", \"children\", \"onSelectDataListItem\", \"selectedDataListItemId\", \"isCompact\", \"wrapModifier\", \"onDragStart\", \"onDragMove\", \"onDragCancel\", \"onDragFinish\", \"gridBreakpoint\", \"itemOrder\", \"selectableRow\"]);\n\n    const {\n      dragging\n    } = this.state;\n    const isSelectable = onSelectDataListItem !== undefined;\n\n    const updateSelectedDataListItem = id => {\n      onSelectDataListItem(id);\n    };\n\n    const dragProps = this.html5DragDrop && {\n      onDragOver: this.dragOver,\n      onDrop: this.dragOver,\n      onDragLeave: this.dragLeave\n    };\n    return React.createElement(DataListContext.Provider, {\n      value: {\n        isSelectable,\n        selectedDataListItemId,\n        updateSelectedDataListItem,\n        selectableRow,\n        isDraggable: this.html5DragDrop,\n        dragStart: this.dragStart,\n        dragEnd: this.dragEnd,\n        drop: this.drop,\n        dragKeyHandler: this.handleDragButtonKeys\n      }\n    }, React.createElement(\"ul\", Object.assign({\n      className: css(styles.dataList, isCompact && styles.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && styles.modifiers[wrapModifier], dragging && styles.modifiers.dragOver, className),\n      style: props.style\n    }, props, dragProps, {\n      ref: this.ref\n    }), children));\n  }\n\n}\nDataList.displayName = 'DataList';\nDataList.defaultProps = {\n  children: null,\n  className: '',\n  selectedDataListItemId: '',\n  isCompact: false,\n  gridBreakpoint: 'md',\n  wrapModifier: null\n};","map":{"version":3,"mappings":"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","names":["React","css","styles","stylesGrid","gridBreakpointClasses","none","modifiers","gridNone","always","sm","gridSm","md","gridMd","lg","gridLg","xl","gridXl","grid_2xl","DataListWrapModifier","DataListContext","createContext","isSelectable","moveItem","arr","i1","toIndex","fromIndex","indexOf","temp","splice","DataList","Component","constructor","props","Children","toArray","children","createRef","tempItemOrder","draggedItemId","draggingToItemIndex","dragging","id","Array","from","ref","current","findIndex","item","itemOrder","ulNode","nodes","map","node","every","i","firstChild","removeChild","lastChild","forEach","appendChild","find","n","el","onDragStart","classList","add","ghostRow","setAttribute","setState","evt","dataTransfer","effectAllowed","setData","currentTarget","dragStart0","move","remove","dragOver","onDragCancel","isValidDrop","dragEnd0","target","ulRect","getBoundingClientRect","clientX","x","width","clientY","y","height","onDragFinish","state","preventDefault","curListItem","closest","contains","dragOver0","includes","key","html5DragDrop","dragItem","dragFinished","nextSelection","previousSibling","querySelector","dataListItemDraggableButton","focus","nextSibling","Boolean","onDragMove","console","warn","componentDidUpdate","oldProps","render","_a","className","onSelectDataListItem","selectedDataListItemId","isCompact","wrapModifier","gridBreakpoint","selectableRow","undefined","updateSelectedDataListItem","dragProps","onDragOver","onDrop","onDragLeave","dragLeave","Provider","value","isDraggable","dragStart","dragEnd","drop","dragKeyHandler","handleDragButtonKeys","dataList","compact","style"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataList.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport stylesGrid from '@patternfly/react-styles/css/components/DataList/data-list-grid';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nconst gridBreakpointClasses = {\n  none: stylesGrid.modifiers.gridNone,\n  always: 'pf-m-grid', // Placeholder per https://github.com/patternfly/patternfly-react/issues/4965#issuecomment-704984236\n  sm: stylesGrid.modifiers.gridSm,\n  md: stylesGrid.modifiers.gridMd,\n  lg: stylesGrid.modifiers.gridLg,\n  xl: stylesGrid.modifiers.gridXl,\n  '2xl': stylesGrid.modifiers.grid_2xl\n};\n\nexport enum DataListWrapModifier {\n  nowrap = 'nowrap',\n  truncate = 'truncate',\n  breakWord = 'breakWord'\n}\n\nexport interface SelectableRowObject {\n  /** Determines if only one of the selectable rows should be selectable at a time */\n  type: 'multiple' | 'single';\n  /** Callback that executes when the screen reader accessible element receives a change event */\n  onChange: (id: string, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport interface DataListProps extends Omit<React.HTMLProps<HTMLUListElement>, 'onDragStart' | 'ref'> {\n  /** Content rendered inside the DataList list */\n  children?: React.ReactNode;\n  /** Additional classes added to the DataList list */\n  className?: string;\n  /** Adds accessible text to the DataList list */\n  'aria-label': string;\n  /** Optional callback to make DataList selectable, fired when DataListItem selected */\n  onSelectDataListItem?: (id: string) => void;\n  /** @deprecated Optional callback to make DataList draggable, fired when dragging ends */\n  onDragFinish?: (newItemOrder: string[]) => void;\n  /** @deprecated Optional informational callback for dragging, fired when dragging starts */\n  onDragStart?: (id: string) => void;\n  /** @deprecated Optional informational callback for dragging, fired when an item moves */\n  onDragMove?: (oldIndex: number, newIndex: number) => void;\n  /** @deprecated Optional informational callback for dragging, fired when dragging is cancelled */\n  onDragCancel?: () => void;\n  /** Id of DataList item currently selected */\n  selectedDataListItemId?: string;\n  /** Flag indicating if DataList should have compact styling */\n  isCompact?: boolean;\n  /** Specifies the grid breakpoints  */\n  gridBreakpoint?: 'none' | 'always' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Determines which wrapping modifier to apply to the DataList */\n  wrapModifier?: DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord';\n  /** @deprecated Order of items in a draggable DataList */\n  itemOrder?: string[];\n  /** @beta Object that causes the data list to render hidden inputs which improve selectable item a11y */\n  selectableRow?: SelectableRowObject;\n}\n\ninterface DataListState {\n  draggedItemId: string;\n  draggingToItemIndex: number;\n  dragging: boolean;\n  tempItemOrder: string[];\n}\n\ninterface DataListContextProps {\n  isSelectable: boolean;\n  selectedDataListItemId: string;\n  updateSelectedDataListItem: (id: string) => void;\n  selectableRow?: SelectableRowObject;\n  isDraggable: boolean;\n  dragStart: (e: React.DragEvent) => void;\n  dragEnd: (e: React.DragEvent) => void;\n  drop: (e: React.DragEvent) => void;\n  dragKeyHandler: (e: React.KeyboardEvent) => void;\n}\n\nexport const DataListContext = React.createContext<Partial<DataListContextProps>>({\n  isSelectable: false\n});\n\nconst moveItem = (arr: string[], i1: string, toIndex: number) => {\n  const fromIndex = arr.indexOf(i1);\n  if (fromIndex === toIndex) {\n    return arr;\n  }\n  const temp = arr.splice(fromIndex, 1);\n  arr.splice(toIndex, 0, temp[0]);\n\n  return arr;\n};\n\nexport class DataList extends React.Component<DataListProps, DataListState> {\n  static displayName = 'DataList';\n  static defaultProps: PickOptional<DataListProps> = {\n    children: null,\n    className: '',\n    selectedDataListItemId: '',\n    isCompact: false,\n    gridBreakpoint: 'md',\n    wrapModifier: null\n  };\n  dragFinished: boolean = false;\n  html5DragDrop: boolean = false;\n  arrayCopy: React.ReactElement[] = React.Children.toArray(this.props.children) as React.ReactElement[];\n  ref = React.createRef<HTMLUListElement>();\n\n  state: DataListState = {\n    tempItemOrder: [],\n    draggedItemId: null,\n    draggingToItemIndex: null,\n    dragging: false\n  };\n\n  constructor(props: DataListProps) {\n    super(props);\n\n    this.html5DragDrop = Boolean(props.onDragFinish || props.onDragStart || props.onDragMove || props.onDragCancel);\n    if (this.html5DragDrop) {\n      // eslint-disable-next-line no-console\n      console.warn(\"DataList's onDrag API is deprecated. Use DragDrop instead.\");\n    }\n  }\n\n  componentDidUpdate(oldProps: DataListProps) {\n    if (this.dragFinished) {\n      this.dragFinished = false;\n\n      this.setState({\n        tempItemOrder: [...this.props.itemOrder],\n        draggedItemId: null,\n        dragging: false\n      });\n    }\n    if (oldProps.itemOrder !== this.props.itemOrder) {\n      this.move(this.props.itemOrder);\n    }\n  }\n\n  getIndex = (id: string) => Array.from(this.ref.current.children).findIndex(item => item.id === id);\n\n  move = (itemOrder: string[]) => {\n    const ulNode = this.ref.current;\n    const nodes = Array.from(ulNode.children);\n    if (nodes.map(node => node.id).every((id, i) => id === itemOrder[i])) {\n      return;\n    }\n    while (ulNode.firstChild) {\n      ulNode.removeChild(ulNode.lastChild);\n    }\n\n    itemOrder.forEach(id => {\n      ulNode.appendChild(nodes.find(n => n.id === id));\n    });\n  };\n\n  dragStart0 = (el: HTMLElement) => {\n    const { onDragStart } = this.props;\n    const draggedItemId = el.id;\n\n    el.classList.add(styles.modifiers.ghostRow);\n    el.setAttribute('aria-pressed', 'true');\n    this.setState({\n      draggedItemId,\n      dragging: true\n    });\n    onDragStart && onDragStart(draggedItemId);\n  };\n\n  dragStart = (evt: React.DragEvent) => {\n    evt.dataTransfer.effectAllowed = 'move';\n    evt.dataTransfer.setData('text/plain', evt.currentTarget.id);\n    this.dragStart0(evt.currentTarget as HTMLElement);\n  };\n\n  onDragCancel = () => {\n    this.move(this.props.itemOrder);\n    Array.from(this.ref.current.children).forEach(el => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.classList.remove(styles.modifiers.dragOver);\n      el.setAttribute('aria-pressed', 'false');\n    });\n    this.setState({\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    });\n\n    if (this.props.onDragCancel) {\n      this.props.onDragCancel();\n    }\n  };\n\n  dragLeave = (evt: React.DragEvent) => {\n    // This event false fires when we call `this.move()`, so double check we're out of zone\n    if (!this.isValidDrop(evt)) {\n      this.move(this.props.itemOrder);\n      this.setState({\n        draggingToItemIndex: null\n      });\n    }\n  };\n\n  dragEnd0 = (el: HTMLElement) => {\n    el.classList.remove(styles.modifiers.ghostRow);\n    el.classList.remove(styles.modifiers.dragOver);\n    el.setAttribute('aria-pressed', 'false');\n    this.setState({\n      draggedItemId: null,\n      draggingToItemIndex: null,\n      dragging: false\n    });\n  };\n\n  dragEnd = (evt: React.DragEvent) => {\n    this.dragEnd0(evt.target as HTMLElement);\n  };\n\n  isValidDrop = (evt: React.DragEvent) => {\n    const ulRect = this.ref.current.getBoundingClientRect();\n    return (\n      evt.clientX > ulRect.x &&\n      evt.clientX < ulRect.x + ulRect.width &&\n      evt.clientY > ulRect.y &&\n      evt.clientY < ulRect.y + ulRect.height\n    );\n  };\n\n  drop = (evt: React.DragEvent) => {\n    if (this.isValidDrop(evt)) {\n      this.props.onDragFinish(this.state.tempItemOrder);\n    } else {\n      this.onDragCancel();\n    }\n  };\n\n  dragOver0 = (id: string) => {\n    const draggingToItemIndex = Array.from(this.ref.current.children).findIndex(item => item.id === id);\n    if (draggingToItemIndex !== this.state.draggingToItemIndex) {\n      const tempItemOrder = moveItem([...this.props.itemOrder], this.state.draggedItemId, draggingToItemIndex);\n      this.move(tempItemOrder);\n\n      this.setState({\n        draggingToItemIndex,\n        tempItemOrder\n      });\n    }\n  };\n\n  dragOver = (evt: React.DragEvent): string | null => {\n    evt.preventDefault();\n\n    const curListItem = (evt.target as HTMLElement).closest('li');\n    if (!curListItem || !this.ref.current.contains(curListItem) || curListItem.id === this.state.draggedItemId) {\n      // We're going nowhere, don't bother calling `dragOver0`\n      return null;\n    } else {\n      this.dragOver0(curListItem.id);\n    }\n  };\n\n  handleDragButtonKeys = (evt: React.KeyboardEvent) => {\n    const { dragging } = this.state;\n    if (![' ', 'Escape', 'Enter', 'ArrowUp', 'ArrowDown'].includes(evt.key) || !this.html5DragDrop) {\n      if (dragging) {\n        evt.preventDefault();\n      }\n      return;\n    }\n    evt.preventDefault();\n\n    const dragItem = (evt.target as Element).closest('li');\n\n    if (evt.key === ' ' || (evt.key === 'Enter' && !dragging)) {\n      this.dragStart0(dragItem);\n    } else if (dragging) {\n      if (evt.key === 'Escape' || evt.key === 'Enter') {\n        this.setState({\n          dragging: false\n        });\n        this.dragFinished = true;\n        if (evt.key === 'Enter') {\n          this.dragEnd0(dragItem);\n          this.props.onDragFinish(this.state.tempItemOrder);\n        } else {\n          this.onDragCancel();\n        }\n      } else if (evt.key === 'ArrowUp') {\n        const nextSelection = dragItem.previousSibling as HTMLElement;\n        if (nextSelection) {\n          this.dragOver0(nextSelection.id);\n          (dragItem.querySelector(`.${styles.dataListItemDraggableButton}`) as HTMLElement).focus();\n        }\n      } else if (evt.key === 'ArrowDown') {\n        const nextSelection = dragItem.nextSibling as HTMLElement;\n        if (nextSelection) {\n          this.dragOver0(nextSelection.id);\n          (dragItem.querySelector(`.${styles.dataListItemDraggableButton}`) as HTMLElement).focus();\n        }\n      }\n    }\n  };\n\n  render() {\n    const {\n      className,\n      children,\n      onSelectDataListItem,\n      selectedDataListItemId,\n      isCompact,\n      wrapModifier,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onDragStart,\n      onDragMove,\n      onDragCancel,\n      onDragFinish,\n      gridBreakpoint,\n      itemOrder,\n      selectableRow,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const { dragging } = this.state;\n    const isSelectable = onSelectDataListItem !== undefined;\n\n    const updateSelectedDataListItem = (id: string) => {\n      onSelectDataListItem(id);\n    };\n\n    const dragProps = this.html5DragDrop && {\n      onDragOver: this.dragOver,\n      onDrop: this.dragOver,\n      onDragLeave: this.dragLeave\n    };\n\n    return (\n      <DataListContext.Provider\n        value={{\n          isSelectable,\n          selectedDataListItemId,\n          updateSelectedDataListItem,\n          selectableRow,\n          isDraggable: this.html5DragDrop,\n          dragStart: this.dragStart,\n          dragEnd: this.dragEnd,\n          drop: this.drop,\n          dragKeyHandler: this.handleDragButtonKeys\n        }}\n      >\n        <ul\n          className={css(\n            styles.dataList,\n            isCompact && styles.modifiers.compact,\n            gridBreakpointClasses[gridBreakpoint],\n            wrapModifier && styles.modifiers[wrapModifier],\n            dragging && styles.modifiers.dragOver,\n            className\n          )}\n          style={props.style}\n          {...props}\n          {...dragProps}\n          ref={this.ref}\n        >\n          {children}\n        </ul>\n      </DataListContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}