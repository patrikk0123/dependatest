{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nexport var ContextSelectorToggle = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContextSelectorToggle, _React$Component);\n\n  var _super = _createSuper(ContextSelectorToggle);\n\n  function ContextSelectorToggle() {\n    var _this;\n\n    _classCallCheck(this, ContextSelectorToggle);\n\n    _this = _super.apply(this, arguments);\n    _this.toggle = React.createRef();\n\n    _this.componentDidMount = function () {\n      document.addEventListener('mousedown', _this.onDocClick);\n      document.addEventListener('touchstart', _this.onDocClick);\n      document.addEventListener('keydown', _this.onEscPress);\n    };\n\n    _this.componentWillUnmount = function () {\n      document.removeEventListener('mousedown', _this.onDocClick);\n      document.removeEventListener('touchstart', _this.onDocClick);\n      document.removeEventListener('keydown', _this.onEscPress);\n    };\n\n    _this.onDocClick = function (event) {\n      var _this$props = _this.props,\n          isOpen = _this$props.isOpen,\n          parentRef = _this$props.parentRef,\n          onToggle = _this$props.onToggle;\n\n      if (isOpen && (parentRef === null || parentRef === void 0 ? void 0 : parentRef.current) && !parentRef.current.contains(event.target)) {\n        onToggle(null, false);\n\n        _this.toggle.current.focus();\n      }\n    };\n\n    _this.onEscPress = function (event) {\n      var _this$props2 = _this.props,\n          isOpen = _this$props2.isOpen,\n          onToggle = _this$props2.onToggle;\n      var keyCode = event.keyCode || event.which;\n\n      if (isOpen && keyCode === KEY_CODES.ESCAPE_KEY) {\n        onToggle(null, false);\n\n        _this.toggle.current.focus();\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      var _this$props3 = _this.props,\n          isOpen = _this$props3.isOpen,\n          onToggle = _this$props3.onToggle,\n          onEnter = _this$props3.onEnter;\n\n      if (event.keyCode === KEY_CODES.TAB && !isOpen || event.key !== KEY_CODES.ENTER) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if ((event.keyCode === KEY_CODES.TAB || event.keyCode === KEY_CODES.ENTER || event.key !== KEY_CODES.SPACE) && isOpen) {\n        onToggle(null, !isOpen);\n      } else if ((event.keyCode === KEY_CODES.ENTER || event.key === ' ') && !isOpen) {\n        onToggle(null, !isOpen);\n        onEnter();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ContextSelectorToggle, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          toggleText = _a.toggleText,\n          isOpen = _a.isOpen,\n          onToggle = _a.onToggle,\n          id = _a.id,\n          isPlain = _a.isPlain,\n          isText = _a.isText,\n          isActive = _a.isActive,\n          onEnter = _a.onEnter,\n          parentRef = _a.parentRef,\n          props = __rest(_a, [\"className\", \"toggleText\", \"isOpen\", \"onToggle\", \"id\", \"isPlain\", \"isText\", \"isActive\", \"onEnter\", \"parentRef\"]);\n\n      return React.createElement(\"button\", Object.assign({}, props, {\n        id: id,\n        ref: this.toggle,\n        className: css(styles.contextSelectorToggle, isActive && styles.modifiers.active, isPlain && styles.modifiers.plain, isText && styles.modifiers.text, className),\n        type: \"button\",\n        onClick: function onClick(event) {\n          return onToggle(event, !isOpen);\n        },\n        \"aria-expanded\": isOpen,\n        onKeyDown: this.onKeyDown\n      }), React.createElement(\"span\", {\n        className: css(styles.contextSelectorToggleText)\n      }, toggleText), React.createElement(\"span\", {\n        className: css(styles.contextSelectorToggleIcon)\n      }, React.createElement(CaretDownIcon, {\n        \"aria-hidden\": true\n      })));\n    }\n  }]);\n\n  return ContextSelectorToggle;\n}(React.Component);\nContextSelectorToggle.displayName = 'ContextSelectorToggle';\nContextSelectorToggle.defaultProps = {\n  className: '',\n  toggleText: '',\n  isOpen: false,\n  onEnter: function onEnter() {\n    return undefined;\n  },\n  parentRef: null,\n  isActive: false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: function onToggle(event, value) {\n    return undefined;\n  }\n};","map":{"version":3,"mappings":"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","names":["React","CaretDownIcon","styles","css","KEY_CODES","ContextSelectorToggle","createRef","document","addEventListener","onDocClick","onEscPress","removeEventListener","event","props","isOpen","parentRef","onToggle","current","contains","target","toggle","focus","keyCode","which","ESCAPE_KEY","onEnter","TAB","key","ENTER","preventDefault","SPACE","className","_a","toggleText","id","isPlain","isText","isActive","__rest","ref","contextSelectorToggle","modifiers","active","plain","text","type","onClick","onKeyDown","contextSelectorToggleText","contextSelectorToggleIcon","Component","undefined","value"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ContextSelector/ContextSelectorToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ContextSelectorToggleProps {\n  /** HTML ID of toggle */\n  id: string;\n  /** Classes applied to root element of toggle */\n  className?: string;\n  /** Text that appears in the Context Selector Toggle */\n  toggleText?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Callback called when toggle is clicked */\n  onToggle?: (event: any, value: boolean) => void;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n}\n\nexport class ContextSelectorToggle extends React.Component<ContextSelectorToggleProps> {\n  static displayName = 'ContextSelectorToggle';\n  static defaultProps: PickOptional<ContextSelectorToggleProps> = {\n    className: '',\n    toggleText: '',\n    isOpen: false,\n    onEnter: () => undefined as any,\n    parentRef: null as any,\n    isActive: false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (event: any, value: boolean) => undefined as any\n  };\n\n  toggle: React.RefObject<HTMLButtonElement> = React.createRef();\n\n  componentDidMount = () => {\n    document.addEventListener('mousedown', this.onDocClick);\n    document.addEventListener('touchstart', this.onDocClick);\n    document.addEventListener('keydown', this.onEscPress);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener('mousedown', this.onDocClick);\n    document.removeEventListener('touchstart', this.onDocClick);\n    document.removeEventListener('keydown', this.onEscPress);\n  };\n\n  onDocClick = (event: any) => {\n    const { isOpen, parentRef, onToggle } = this.props;\n    if (isOpen && parentRef?.current && !parentRef.current.contains(event.target)) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onEscPress = (event: any) => {\n    const { isOpen, onToggle } = this.props;\n    const keyCode = event.keyCode || event.which;\n    if (isOpen && keyCode === KEY_CODES.ESCAPE_KEY) {\n      onToggle(null, false);\n      this.toggle.current.focus();\n    }\n  };\n\n  onKeyDown = (event: any) => {\n    const { isOpen, onToggle, onEnter } = this.props;\n    if ((event.keyCode === KEY_CODES.TAB && !isOpen) || event.key !== KEY_CODES.ENTER) {\n      return;\n    }\n    event.preventDefault();\n    if (\n      (event.keyCode === KEY_CODES.TAB || event.keyCode === KEY_CODES.ENTER || event.key !== KEY_CODES.SPACE) &&\n      isOpen\n    ) {\n      onToggle(null, !isOpen);\n    } else if ((event.keyCode === KEY_CODES.ENTER || event.key === ' ') && !isOpen) {\n      onToggle(null, !isOpen);\n      onEnter();\n    }\n  };\n\n  render() {\n    const {\n      className,\n      toggleText,\n      isOpen,\n      onToggle,\n      id,\n      isPlain,\n      isText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isActive,\n      onEnter,\n      parentRef,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    return (\n      <button\n        {...props}\n        id={id}\n        ref={this.toggle}\n        className={css(\n          styles.contextSelectorToggle,\n          isActive && styles.modifiers.active,\n          isPlain && styles.modifiers.plain,\n          isText && styles.modifiers.text,\n          className\n        )}\n        type=\"button\"\n        onClick={event => onToggle(event, !isOpen)}\n        aria-expanded={isOpen}\n        onKeyDown={this.onKeyDown}\n      >\n        <span className={css(styles.contextSelectorToggleText)}>{toggleText}</span>\n        <span className={css(styles.contextSelectorToggleIcon)}>\n          <CaretDownIcon aria-hidden />\n        </span>\n      </button>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}