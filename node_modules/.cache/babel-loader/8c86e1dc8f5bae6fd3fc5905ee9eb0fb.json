{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Tr } from '../TableComposable';\nexport var TreeRowWrapper = function TreeRowWrapper(_a) {\n  var className = _a.className,\n      rowProps = _a.rowProps,\n      row = _a.row,\n      props = __rest(_a, [\"className\", \"rowProps\", \"row\"]);\n\n  var _row$props = row.props,\n      level = _row$props['aria-level'],\n      posinset = _row$props['aria-posinset'],\n      setsize = _row$props['aria-setsize'],\n      isExpanded = _row$props.isExpanded,\n      isDetailsExpanded = _row$props.isDetailsExpanded,\n      isHidden = _row$props.isHidden;\n  return React.createElement(Tr, Object.assign({\n    \"aria-level\": level,\n    \"aria-posinset\": posinset,\n    \"aria-setsize\": setsize,\n    \"aria-expanded\": !!isExpanded,\n    isHidden: isHidden,\n    className: css(className, isExpanded && styles.modifiers.expanded, isDetailsExpanded && stylesTreeView.modifiers.treeViewDetailsExpanded)\n  }, props));\n};\nTreeRowWrapper.displayName = 'TreeRowWrapper';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,qDAAnB;AACA,OAAOC,cAAP,MAA2B,+DAA3B;AAEA,SAASC,EAAT,QAAmB,oBAAnB;AAEA,OAAO,IAAMC,cAAc,GAA6C,SAA3DA,cAA2D,CAACC,EAAD,EAMlD;MALpBC,YAGGD,GAHHC;MAEAC,WACGF,GADHE;MACAC,MAAGH,GAAHG;MACGC,QAAKC,WAL+D,gCAK/D;;EAER,iBAOIF,GAAG,CAACC,KAPR;EAAA,IACgBE,KADhB,cACE,YADF;EAAA,IAEmBC,QAFnB,cAEE,eAFF;EAAA,IAGkBC,OAHlB,cAGE,cAHF;EAAA,IAIEC,UAJF,cAIEA,UAJF;EAAA,IAKEC,iBALF,cAKEA,iBALF;EAAA,IAMEC,QANF,cAMEA,QANF;EAQA,OACEjB,oBAACI,EAAD,EAAGc;IAAA,cACWN,KADX;IACgB,iBACFC,QAFd;IAEsB,gBACTC,OAHb;IAGoB,iBACN,CAAC,CAACC,UAJhB;IAKDE,QAAQ,EAAEA,QALT;IAMDV,SAAS,EAAEN,GAAG,CACZM,SADY,EAEZQ,UAAU,IAAIb,MAAM,CAACiB,SAAP,CAAiBC,QAFnB,EAGZJ,iBAAiB,IAAIb,cAAc,CAACgB,SAAf,CAAyBE,uBAHlC;EANb,GAWGX,KAXH,CAAH,CADF;AAeD,CA9BM;AA+BPL,cAAc,CAACiB,WAAf,GAA6B,gBAA7B","names":["React","css","styles","stylesTreeView","Tr","TreeRowWrapper","_a","className","rowProps","row","props","__rest","level","posinset","setsize","isExpanded","isDetailsExpanded","isHidden","Object","modifiers","expanded","treeViewDetailsExpanded","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/TreeRowWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { RowWrapperProps } from './RowWrapper';\nimport { Tr } from '../TableComposable';\n\nexport const TreeRowWrapper: React.FunctionComponent<RowWrapperProps> = ({\n  className,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  rowProps,\n  row,\n  ...props\n}: RowWrapperProps) => {\n  const {\n    'aria-level': level,\n    'aria-posinset': posinset,\n    'aria-setsize': setsize,\n    isExpanded,\n    isDetailsExpanded,\n    isHidden\n  } = row.props;\n  return (\n    <Tr\n      aria-level={level}\n      aria-posinset={posinset}\n      aria-setsize={setsize}\n      aria-expanded={!!isExpanded}\n      isHidden={isHidden}\n      className={css(\n        className,\n        isExpanded && styles.modifiers.expanded,\n        isDetailsExpanded && stylesTreeView.modifiers.treeViewDetailsExpanded\n      )}\n      {...props}\n    />\n  );\n};\nTreeRowWrapper.displayName = 'TreeRowWrapper';\n"]},"metadata":{},"sourceType":"module"}