{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nexport var ClipboardCopyExpanded = /*#__PURE__*/function (_React$Component) {\n  _inherits(ClipboardCopyExpanded, _React$Component);\n\n  var _super = _createSuper(ClipboardCopyExpanded);\n\n  function ClipboardCopyExpanded(props) {\n    _classCallCheck(this, ClipboardCopyExpanded);\n\n    return _super.call(this, props);\n  }\n\n  _createClass(ClipboardCopyExpanded, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          children = _a.children,\n          onChange = _a.onChange,\n          isReadOnly = _a.isReadOnly,\n          isCode = _a.isCode,\n          props = __rest(_a, [\"className\", \"children\", \"onChange\", \"isReadOnly\", \"isCode\"]);\n\n      return React.createElement(\"div\", Object.assign({\n        suppressContentEditableWarning: true,\n        className: css(styles.clipboardCopyExpandableContent, className),\n        onInput: function onInput(e) {\n          return onChange(e.target.innerText, e);\n        },\n        contentEditable: !isReadOnly\n      }, props), isCode ? React.createElement(\"pre\", null, children) : children);\n    }\n  }]);\n\n  return ClipboardCopyExpanded;\n}(React.Component);\nClipboardCopyExpanded.displayName = 'ClipboardCopyExpanded';\nClipboardCopyExpanded.defaultProps = {\n  onChange: function onChange() {\n    return undefined;\n  },\n  className: '',\n  isReadOnly: false,\n  isCode: false\n};","map":{"version":3,"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,sEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAYA,WAAaC,qBAAb;EAAA;;EAAA;;EAEE,+BAAYC,KAAZ,EAAsB;IAAA;;IAAA,yBACdA,KADc;EAErB;;EAJH;IAAA;IAAA,OAaE,kBAAM;MACE,SAAkE,KAAKA,KAAvE;MAAA,IAAEC,SAAF,GAAmDC,EAAnD,CAAED,SAAF;MAAA,IAAaE,QAAb,GAAmDD,EAAnD,CAAaC,QAAb;MAAA,IAAuBC,QAAvB,GAAmDF,EAAnD,CAAuBE,QAAvB;MAAA,IAAiCC,UAAjC,GAAmDH,EAAnD,CAAiCG,UAAjC;MAAA,IAA6CC,MAA7C,GAAmDJ,EAAnD,CAA6CI,MAA7C;MAAA,IAAwDN,KAAxD,GAA6DO,WAA7D,6DAA6D,CAA7D;;MAEN,OACEX;QACEY,8BAA8B,MADhC;QAEEP,SAAS,EAAEH,GAAG,CAACD,MAAM,CAACY,8BAAR,EAAwCR,SAAxC,CAFhB;QAGES,OAAO,EAAE,iBAACC,CAAD;UAAA,OAAYP,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASC,SAAV,EAAqBF,CAArB,CAApB;QAAA,CAHX;QAIEG,eAAe,EAAE,CAACT;MAJpB,GAKML,KALN,GAOGM,MAAM,GAAGV,iCAAMO,QAAN,CAAH,GAA2BA,QAPpC,CADF;IAWD;EA3BH;;EAAA;AAAA,EAA2CP,KAAK,CAACmB,SAAjD;AACShB,oCAAc,uBAAd;AAKAA,qCAAyD;EAC9DK,QAAQ,EAAE;IAAA,OAAWY,SAAX;EAAA,CADoD;EAE9Df,SAAS,EAAE,EAFmD;EAG9DI,UAAU,EAAE,KAHkD;EAI9DC,MAAM,EAAE;AAJsD,CAAzD","names":["React","styles","css","ClipboardCopyExpanded","props","className","_a","children","onChange","isReadOnly","isCode","__rest","suppressContentEditableWarning","clipboardCopyExpandableContent","onInput","e","target","innerText","contentEditable","Component","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopyExpanded.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { ClipboardCopyProps } from './ClipboardCopy';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ClipboardCopyExpandedProps extends Omit<ClipboardCopyProps, 'onChange'> {\n  className?: string;\n  children: React.ReactNode;\n  onChange?: (text: string, e: React.FormEvent<HTMLDivElement>) => void;\n  isReadOnly?: boolean;\n  isCode?: boolean;\n}\n\nexport class ClipboardCopyExpanded extends React.Component<ClipboardCopyExpandedProps> {\n  static displayName = 'ClipboardCopyExpanded';\n  constructor(props: any) {\n    super(props);\n  }\n\n  static defaultProps: PickOptional<ClipboardCopyExpandedProps> = {\n    onChange: (): any => undefined,\n    className: '',\n    isReadOnly: false,\n    isCode: false\n  };\n\n  render() {\n    const { className, children, onChange, isReadOnly, isCode, ...props } = this.props;\n\n    return (\n      <div\n        suppressContentEditableWarning\n        className={css(styles.clipboardCopyExpandableContent, className)}\n        onInput={(e: any) => onChange(e.target.innerText, e)}\n        contentEditable={!isReadOnly}\n        {...props}\n      >\n        {isCode ? <pre>{children}</pre> : children}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}