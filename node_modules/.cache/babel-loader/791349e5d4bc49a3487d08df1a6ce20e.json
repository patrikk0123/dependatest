{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport class ToolbarFilter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMounted: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      categoryName,\n      chips\n    } = this.props;\n    this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n    this.setState({\n      isMounted: true\n    });\n  }\n\n  componentDidUpdate() {\n    const {\n      categoryName,\n      chips\n    } = this.props;\n    this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      chips,\n      deleteChipGroup,\n      deleteChip,\n      chipGroupExpandedText,\n      chipGroupCollapsedText,\n      categoryName,\n      showToolbarItem\n    } = _a,\n          props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"chipGroupExpandedText\", \"chipGroupCollapsedText\", \"categoryName\", \"showToolbarItem\"]);\n\n    const {\n      isExpanded,\n      chipGroupContentRef\n    } = this.context;\n    const categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString();\n    const chipGroup = chips.length ? React.createElement(ToolbarItem, {\n      variant: \"chip-group\"\n    }, React.createElement(ChipGroup, {\n      key: categoryKey,\n      categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name,\n      isClosable: deleteChipGroup !== undefined,\n      onClick: () => deleteChipGroup(categoryName),\n      collapsedText: chipGroupCollapsedText,\n      expandedText: chipGroupExpandedText\n    }, chips.map(chip => typeof chip === 'string' ? React.createElement(Chip, {\n      key: chip,\n      onClick: () => deleteChip(categoryKey, chip)\n    }, chip) : React.createElement(Chip, {\n      key: chip.key,\n      onClick: () => deleteChip(categoryKey, chip)\n    }, chip.node)))) : null;\n\n    if (!isExpanded && this.state.isMounted) {\n      return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild));\n    }\n\n    return React.createElement(ToolbarContentContext.Consumer, null, _ref => {\n      let {\n        chipContainerRef\n      } = _ref;\n      return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current));\n    });\n  }\n\n}\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n  chips: [],\n  showToolbarItem: true\n};","map":{"version":3,"mappings":"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","names":["React","ReactDOM","ToolbarItem","ChipGroup","Chip","ToolbarContentContext","ToolbarContext","ToolbarFilter","Component","constructor","props","state","isMounted","componentDidMount","categoryName","chips","context","updateNumberFilters","hasOwnProperty","key","toString","length","setState","componentDidUpdate","render","_a","children","deleteChipGroup","deleteChip","chipGroupExpandedText","chipGroupCollapsedText","showToolbarItem","isExpanded","chipGroupContentRef","categoryKey","chipGroup","variant","name","isClosable","undefined","onClick","collapsedText","expandedText","map","chip","node","Fragment","Object","createPortal","current","firstElementChild","Consumer","chipContainerRef"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarFilter.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem, ToolbarItemProps } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarChipGroup {\n  /** A unique key to identify this chip group category */\n  key: string;\n  /** The category name to display for the chip group */\n  name: string;\n}\n\nexport interface ToolbarChip {\n  /** A unique key to identify this chip */\n  key: string;\n  /** The ReactNode to display in the chip */\n  node: React.ReactNode;\n}\n\nexport interface ToolbarFilterProps extends ToolbarItemProps {\n  /** An array of strings to be displayed as chips in the expandable content */\n  chips?: (string | ToolbarChip)[];\n  /** Callback passed by consumer used to close the entire chip group */\n  deleteChipGroup?: (category: string | ToolbarChipGroup) => void;\n  /** Callback passed by consumer used to delete a chip from the chips[] */\n  deleteChip?: (category: string | ToolbarChipGroup, chip: ToolbarChip | string) => void;\n  /** Customizable \"Show Less\" text string for the chip group */\n  chipGroupExpandedText?: string;\n  /** Customizeable template string for the chip group. Use variable \"${remaining}\" for the overflow chip count. */\n  chipGroupCollapsedText?: string;\n  /** Content to be rendered inside the data toolbar item associated with the chip group */\n  children: React.ReactNode;\n  /** Unique category name to be used as a label for the chip group */\n  categoryName: string | ToolbarChipGroup;\n  /** Flag to show the toolbar item */\n  showToolbarItem?: boolean;\n}\n\ninterface ToolbarFilterState {\n  isMounted: boolean;\n}\n\nexport class ToolbarFilter extends React.Component<ToolbarFilterProps, ToolbarFilterState> {\n  static displayName = 'ToolbarFilter';\n  static contextType = ToolbarContext;\n  context!: React.ContextType<typeof ToolbarContext>;\n  static defaultProps: PickOptional<ToolbarFilterProps> = {\n    chips: [] as (string | ToolbarChip)[],\n    showToolbarItem: true\n  };\n\n  constructor(props: ToolbarFilterProps) {\n    super(props);\n    this.state = {\n      isMounted: false\n    };\n  }\n\n  componentDidMount() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n    this.setState({ isMounted: true });\n  }\n\n  componentDidUpdate() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n  }\n\n  render() {\n    const {\n      children,\n      chips,\n      deleteChipGroup,\n      deleteChip,\n      chipGroupExpandedText,\n      chipGroupCollapsedText,\n      categoryName,\n      showToolbarItem,\n      ...props\n    } = this.props;\n    const { isExpanded, chipGroupContentRef } = this.context;\n    const categoryKey =\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString();\n\n    const chipGroup = chips.length ? (\n      <ToolbarItem variant=\"chip-group\">\n        <ChipGroup\n          key={categoryKey}\n          categoryName={typeof categoryName === 'string' ? categoryName : categoryName.name}\n          isClosable={deleteChipGroup !== undefined}\n          onClick={() => deleteChipGroup(categoryName)}\n          collapsedText={chipGroupCollapsedText}\n          expandedText={chipGroupExpandedText}\n        >\n          {chips.map(chip =>\n            typeof chip === 'string' ? (\n              <Chip key={chip} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip}\n              </Chip>\n            ) : (\n              <Chip key={chip.key} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip.node}\n              </Chip>\n            )\n          )}\n        </ChipGroup>\n      </ToolbarItem>\n    ) : null;\n\n    if (!isExpanded && this.state.isMounted) {\n      return (\n        <React.Fragment>\n          {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n          {ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <ToolbarContentContext.Consumer>\n        {({ chipContainerRef }) => (\n          <React.Fragment>\n            {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n            {chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)}\n          </React.Fragment>\n        )}\n      </ToolbarContentContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}