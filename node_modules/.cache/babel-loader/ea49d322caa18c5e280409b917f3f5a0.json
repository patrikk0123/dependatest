{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\nexport const FormGroup = _a => {\n  var {\n    children = null,\n    className = '',\n    label,\n    labelInfo,\n    labelIcon,\n    isRequired = false,\n    validated = 'default',\n    isInline = false,\n    hasNoPaddingTop = false,\n    isStack = false,\n    helperText,\n    isHelperTextBeforeField = false,\n    helperTextInvalid,\n    helperTextIcon,\n    helperTextInvalidIcon,\n    fieldId\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"label\", \"labelInfo\", \"labelIcon\", \"isRequired\", \"validated\", \"isInline\", \"hasNoPaddingTop\", \"isStack\", \"helperText\", \"isHelperTextBeforeField\", \"helperTextInvalid\", \"helperTextIcon\", \"helperTextInvalidIcon\", \"fieldId\"]);\n\n  const validHelperText = typeof helperText !== 'string' ? helperText : React.createElement(\"div\", {\n    className: css(styles.formHelperText, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n    id: `${fieldId}-helper`,\n    \"aria-live\": \"polite\"\n  }, helperTextIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextIcon), helperText);\n  const inValidHelperText = typeof helperTextInvalid !== 'string' ? helperTextInvalid : React.createElement(\"div\", {\n    className: css(styles.formHelperText, styles.modifiers.error),\n    id: `${fieldId}-helper`,\n    \"aria-live\": \"polite\"\n  }, helperTextInvalidIcon && React.createElement(\"span\", {\n    className: css(styles.formHelperTextIcon)\n  }, helperTextInvalidIcon), helperTextInvalid);\n\n  const showValidHelperTxt = validationType => validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n\n  const helperTextToDisplay = validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n  const labelContent = React.createElement(React.Fragment, null, React.createElement(\"label\", {\n    className: css(styles.formLabel),\n    htmlFor: fieldId\n  }, React.createElement(\"span\", {\n    className: css(styles.formLabelText)\n  }, label), isRequired && React.createElement(\"span\", {\n    className: css(styles.formLabelRequired),\n    \"aria-hidden\": \"true\"\n  }, ' ', ASTERISK)), ' ', React.isValidElement(labelIcon) && labelIcon);\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.formGroup, className)\n  }), label && React.createElement(\"div\", {\n    className: css(styles.formGroupLabel, labelInfo && styles.modifiers.info, hasNoPaddingTop && styles.modifiers.noPaddingTop)\n  }, labelInfo && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: css(styles.formGroupLabelMain)\n  }, labelContent), React.createElement(\"div\", {\n    className: css(styles.formGroupLabelInfo)\n  }, labelInfo)), !labelInfo && labelContent), React.createElement(\"div\", {\n    className: css(styles.formGroupControl, isInline && styles.modifiers.inline, isStack && styles.modifiers.stack)\n  }, isHelperTextBeforeField && helperTextToDisplay, children, !isHelperTextBeforeField && helperTextToDisplay));\n};\nFormGroup.displayName = 'FormGroup';","map":{"version":3,"mappings":"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","names":["React","styles","ASTERISK","css","ValidatedOptions","FormGroup","_a","children","className","label","labelInfo","labelIcon","isRequired","validated","isInline","hasNoPaddingTop","isStack","helperText","isHelperTextBeforeField","helperTextInvalid","helperTextIcon","helperTextInvalidIcon","fieldId","props","validHelperText","formHelperText","success","modifiers","warning","id","formHelperTextIcon","inValidHelperText","error","showValidHelperTxt","validationType","helperTextToDisplay","labelContent","Fragment","formLabel","htmlFor","formLabelText","formLabelRequired","isValidElement","formGroup","formGroupLabel","info","noPaddingTop","formGroupLabelMain","formGroupLabelInfo","formGroupControl","inline","stack","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Form/FormGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { ValidatedOptions } from '../../helpers/constants';\n\nexport interface FormGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'label'> {\n  /** Anything that can be rendered as FormGroup content. */\n  children?: React.ReactNode;\n  /** Additional classes added to the FormGroup. */\n  className?: string;\n  /** Label text before the field. */\n  label?: React.ReactNode;\n  /** Additional label information displayed after the label. */\n  labelInfo?: React.ReactNode;\n  /** Sets an icon for the label. For providing additional context. Host element for Popover  */\n  labelIcon?: React.ReactElement;\n  /** Sets the FormGroup required. */\n  isRequired?: boolean;\n  /**\n   * Sets the FormGroup validated. If you set to success, text color of helper text will be modified to indicate valid state.\n   * If set to error, text color of helper text will be modified to indicate error state.\n   * If set to warning, text color of helper text will be modified to indicate warning state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Sets the FormGroup isInline. */\n  isInline?: boolean;\n  /** Sets the FormGroupControl to be stacked */\n  isStack?: boolean;\n  /** Removes top spacer from label. */\n  hasNoPaddingTop?: boolean;\n  /** Helper text regarding the field. It can be a simple text or an object. */\n  helperText?: React.ReactNode;\n  /** Flag to position the helper text before the field. False by default */\n  isHelperTextBeforeField?: boolean;\n  /** Helper text after the field when the field is invalid. It can be a simple text or an object. */\n  helperTextInvalid?: React.ReactNode;\n  /** Icon displayed to the left of the helper text. */\n  helperTextIcon?: React.ReactNode;\n  /** Icon displayed to the left of the helper text when the field is invalid. */\n  helperTextInvalidIcon?: React.ReactNode;\n  /** ID of the included field. It has to be the same for proper working. */\n  fieldId: string;\n}\n\nexport const FormGroup: React.FunctionComponent<FormGroupProps> = ({\n  children = null,\n  className = '',\n  label,\n  labelInfo,\n  labelIcon,\n  isRequired = false,\n  validated = 'default',\n  isInline = false,\n  hasNoPaddingTop = false,\n  isStack = false,\n  helperText,\n  isHelperTextBeforeField = false,\n  helperTextInvalid,\n  helperTextIcon,\n  helperTextInvalidIcon,\n  fieldId,\n  ...props\n}: FormGroupProps) => {\n  const validHelperText =\n    typeof helperText !== 'string' ? (\n      helperText\n    ) : (\n      <div\n        className={css(\n          styles.formHelperText,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        id={`${fieldId}-helper`}\n        aria-live=\"polite\"\n      >\n        {helperTextIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextIcon}</span>}\n        {helperText}\n      </div>\n    );\n\n  const inValidHelperText =\n    typeof helperTextInvalid !== 'string' ? (\n      helperTextInvalid\n    ) : (\n      <div className={css(styles.formHelperText, styles.modifiers.error)} id={`${fieldId}-helper`} aria-live=\"polite\">\n        {helperTextInvalidIcon && <span className={css(styles.formHelperTextIcon)}>{helperTextInvalidIcon}</span>}\n        {helperTextInvalid}\n      </div>\n    );\n\n  const showValidHelperTxt = (validationType: 'success' | 'warning' | 'error' | 'default') =>\n    validationType !== ValidatedOptions.error && helperText ? validHelperText : '';\n\n  const helperTextToDisplay =\n    validated === ValidatedOptions.error && helperTextInvalid ? inValidHelperText : showValidHelperTxt(validated);\n\n  const labelContent = (\n    <React.Fragment>\n      <label className={css(styles.formLabel)} htmlFor={fieldId}>\n        <span className={css(styles.formLabelText)}>{label}</span>\n        {isRequired && (\n          <span className={css(styles.formLabelRequired)} aria-hidden=\"true\">\n            {' '}\n            {ASTERISK}\n          </span>\n        )}\n      </label>{' '}\n      {React.isValidElement(labelIcon) && labelIcon}\n    </React.Fragment>\n  );\n\n  return (\n    <div {...props} className={css(styles.formGroup, className)}>\n      {label && (\n        <div\n          className={css(\n            styles.formGroupLabel,\n            labelInfo && styles.modifiers.info,\n            hasNoPaddingTop && styles.modifiers.noPaddingTop\n          )}\n        >\n          {labelInfo && (\n            <React.Fragment>\n              <div className={css(styles.formGroupLabelMain)}>{labelContent}</div>\n              <div className={css(styles.formGroupLabelInfo)}>{labelInfo}</div>\n            </React.Fragment>\n          )}\n          {!labelInfo && labelContent}\n        </div>\n      )}\n      <div\n        className={css(styles.formGroupControl, isInline && styles.modifiers.inline, isStack && styles.modifiers.stack)}\n      >\n        {isHelperTextBeforeField && helperTextToDisplay}\n        {children}\n        {!isHelperTextBeforeField && helperTextToDisplay}\n      </div>\n    </div>\n  );\n};\nFormGroup.displayName = 'FormGroup';\n"]},"metadata":{},"sourceType":"module"}