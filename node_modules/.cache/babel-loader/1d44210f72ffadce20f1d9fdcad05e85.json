{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/AppLauncher/app-launcher';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport ThIcon from '@patternfly/react-icons/dist/esm/icons/th-icon';\nimport { DropdownDirection, DropdownPosition, DropdownToggle, DropdownContext } from '../Dropdown';\nimport { DropdownWithContext } from '../Dropdown/DropdownWithContext';\nimport { ApplicationLauncherGroup } from './ApplicationLauncherGroup';\nimport { ApplicationLauncherSeparator } from './ApplicationLauncherSeparator';\nimport { ApplicationLauncherItem } from './ApplicationLauncherItem';\nimport { ApplicationLauncherContext } from './ApplicationLauncherContext';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\nexport class ApplicationLauncher extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.createSearchBox = () => {\n      const {\n        onSearch,\n        searchPlaceholderText,\n        searchProps\n      } = this.props;\n      return React.createElement(\"div\", {\n        key: \"search\",\n        className: css(styles.appLauncherMenuSearch)\n      }, React.createElement(ApplicationLauncherItem, {\n        customChild: React.createElement(\"input\", Object.assign({\n          type: \"search\",\n          className: css(formStyles.formControl),\n          placeholder: searchPlaceholderText,\n          onChange: e => onSearch(e.target.value)\n        }, searchProps))\n      }));\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      'aria-label': ariaLabel,\n      isOpen,\n      onToggle,\n      toggleIcon,\n      toggleId,\n      onSelect,\n      isDisabled,\n      className,\n      isGrouped,\n      favorites,\n      onFavorite,\n      onSearch,\n      items,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      searchPlaceholderText,\n      searchProps,\n      ref,\n\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      favoritesLabel,\n      searchNoResultsText,\n      menuAppendTo\n    } = _a,\n          props = __rest(_a, ['aria-label', \"isOpen\", \"onToggle\", \"toggleIcon\", \"toggleId\", \"onSelect\", \"isDisabled\", \"className\", \"isGrouped\", \"favorites\", \"onFavorite\", \"onSearch\", \"items\", \"searchPlaceholderText\", \"searchProps\", \"ref\", \"favoritesLabel\", \"searchNoResultsText\", \"menuAppendTo\"]);\n\n    let renderableItems = [];\n\n    if (onFavorite) {\n      let favoritesGroup = [];\n      let renderableFavorites = [];\n\n      if (favorites.length > 0) {\n        renderableFavorites = createRenderableFavorites(items, isGrouped, favorites, true);\n        favoritesGroup = [React.createElement(ApplicationLauncherGroup, {\n          key: \"favorites\",\n          label: favoritesLabel\n        }, renderableFavorites, React.createElement(ApplicationLauncherSeparator, {\n          key: \"separator\"\n        }))];\n      }\n\n      if (renderableFavorites.length > 0) {\n        renderableItems = favoritesGroup.concat(extendItemsWithFavorite(items, isGrouped, favorites));\n      } else {\n        renderableItems = extendItemsWithFavorite(items, isGrouped, favorites);\n      }\n    } else {\n      renderableItems = items;\n    }\n\n    if (items.length === 0) {\n      renderableItems = [React.createElement(ApplicationLauncherGroup, {\n        key: \"no-results-group\"\n      }, React.createElement(ApplicationLauncherItem, {\n        key: \"no-results\"\n      }, searchNoResultsText))];\n    }\n\n    if (onSearch) {\n      renderableItems = [this.createSearchBox(), ...renderableItems];\n    }\n\n    return React.createElement(ApplicationLauncherContext.Provider, {\n      value: {\n        onFavorite\n      }\n    }, React.createElement(DropdownContext.Provider, {\n      value: {\n        onSelect,\n        menuClass: styles.appLauncherMenu,\n        itemClass: styles.appLauncherMenuItem,\n        toggleClass: styles.appLauncherToggle,\n        baseClass: styles.appLauncher,\n        baseComponent: 'nav',\n        sectionClass: styles.appLauncherGroup,\n        sectionTitleClass: styles.appLauncherGroupTitle,\n        sectionComponent: 'section',\n        disabledClass: styles.modifiers.disabled,\n        ouiaComponentType: ApplicationLauncher.displayName\n      }\n    }, React.createElement(DropdownWithContext, Object.assign({}, props, {\n      dropdownItems: renderableItems,\n      isOpen: isOpen,\n      className: className,\n      \"aria-label\": ariaLabel,\n      menuAppendTo: menuAppendTo,\n      toggle: React.createElement(DropdownToggle, {\n        id: toggleId,\n        toggleIndicator: null,\n        isOpen: isOpen,\n        onToggle: onToggle,\n        isDisabled: isDisabled,\n        \"aria-label\": ariaLabel\n      }, toggleIcon),\n      isGrouped: isGrouped\n    }))));\n  }\n\n}\nApplicationLauncher.displayName = 'ApplicationLauncher';\nApplicationLauncher.defaultProps = {\n  className: '',\n  isDisabled: false,\n  direction: DropdownDirection.down,\n  favorites: [],\n  isOpen: false,\n  position: DropdownPosition.left,\n\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  onSelect: _event => undefined,\n  onToggle: _value => undefined,\n\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  'aria-label': 'Application launcher',\n  isGrouped: false,\n  toggleIcon: React.createElement(ThIcon, null),\n  searchPlaceholderText: 'Filter by name...',\n  searchNoResultsText: 'No results found',\n  favoritesLabel: 'Favorites',\n  menuAppendTo: 'inline'\n};","map":{"version":3,"mappings":"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","names":["React","css","styles","formStyles","ThIcon","DropdownDirection","DropdownPosition","DropdownToggle","DropdownContext","DropdownWithContext","ApplicationLauncherGroup","ApplicationLauncherSeparator","ApplicationLauncherItem","ApplicationLauncherContext","createRenderableFavorites","extendItemsWithFavorite","ApplicationLauncher","Component","constructor","onSearch","searchPlaceholderText","searchProps","props","key","className","appLauncherMenuSearch","customChild","type","formControl","placeholder","onChange","e","target","value","render","_a","ariaLabel","isOpen","onToggle","toggleIcon","toggleId","onSelect","isDisabled","isGrouped","favorites","onFavorite","items","ref","favoritesLabel","searchNoResultsText","menuAppendTo","renderableItems","favoritesGroup","renderableFavorites","length","label","concat","createSearchBox","Provider","menuClass","appLauncherMenu","itemClass","appLauncherMenuItem","toggleClass","appLauncherToggle","baseClass","appLauncher","baseComponent","sectionClass","appLauncherGroup","sectionTitleClass","appLauncherGroupTitle","sectionComponent","disabledClass","modifiers","disabled","ouiaComponentType","displayName","Object","dropdownItems","toggle","id","toggleIndicator","direction","down","position","left","_event","undefined","_value"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ApplicationLauncher/ApplicationLauncher.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/AppLauncher/app-launcher';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport ThIcon from '@patternfly/react-icons/dist/esm/icons/th-icon';\nimport { DropdownDirection, DropdownPosition, DropdownToggle, DropdownContext } from '../Dropdown';\nimport { DropdownWithContext } from '../Dropdown/DropdownWithContext';\nimport { ApplicationLauncherGroup } from './ApplicationLauncherGroup';\nimport { ApplicationLauncherSeparator } from './ApplicationLauncherSeparator';\nimport { ApplicationLauncherItem } from './ApplicationLauncherItem';\nimport { ApplicationLauncherContext } from './ApplicationLauncherContext';\nimport { ToggleMenuBaseProps } from '../../helpers/Popper/Popper';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\n\nexport interface ApplicationLauncherProps\n  extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>,\n    React.HTMLProps<HTMLDivElement> {\n  /** Additional element css classes */\n  className?: string;\n  /** Display menu above or below dropdown toggle */\n  direction?: DropdownDirection | 'up' | 'down';\n  /** Array of application launcher items */\n  items?: React.ReactNode[];\n  /** Render Application launcher toggle as disabled icon */\n  isDisabled?: boolean;\n  /** open bool */\n  isOpen?: boolean;\n  /** Indicates where menu will be alligned horizontally */\n  position?: DropdownPosition | 'right' | 'left';\n  /** Function callback called when user selects item */\n  onSelect?: (event: any) => void;\n  /** Callback called when application launcher toggle is clicked */\n  onToggle?: (value: boolean) => void;\n  /** Adds accessible text to the button. Required for plain buttons */\n  'aria-label'?: string;\n  /** Flag to indicate if application launcher has groups */\n  isGrouped?: boolean;\n  /** Toggle Icon, optional to override the icon used for the toggle */\n  toggleIcon?: React.ReactNode;\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n  /** ID list of favorited ApplicationLauncherItems */\n  favorites?: string[];\n  /** Enables favorites. Callback called when an ApplicationLauncherItem's favorite button is clicked */\n  onFavorite?: (itemId: string, isFavorite: boolean) => void;\n  /** Enables search. Callback called when text input is entered into search box */\n  onSearch?: (textInput: string) => void;\n  /** Placeholder text for search input */\n  searchPlaceholderText?: string;\n  /** Text for search input when no results are found */\n  searchNoResultsText?: string;\n  /** Additional properties for search input */\n  searchProps?: any;\n  /** Label for the favorites group */\n  favoritesLabel?: string;\n  /** ID of toggle */\n  toggleId?: string;\n}\n\nexport class ApplicationLauncher extends React.Component<ApplicationLauncherProps> {\n  static displayName = 'ApplicationLauncher';\n  static defaultProps: ApplicationLauncherProps = {\n    className: '',\n    isDisabled: false,\n    direction: DropdownDirection.down,\n    favorites: [] as string[],\n    isOpen: false,\n    position: DropdownPosition.left,\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    onSelect: (_event: any): any => undefined,\n    onToggle: (_value: boolean): any => undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    'aria-label': 'Application launcher',\n    isGrouped: false,\n    toggleIcon: <ThIcon />,\n    searchPlaceholderText: 'Filter by name...',\n    searchNoResultsText: 'No results found',\n    favoritesLabel: 'Favorites',\n    menuAppendTo: 'inline'\n  };\n\n  createSearchBox = () => {\n    const { onSearch, searchPlaceholderText, searchProps } = this.props;\n\n    return (\n      <div key=\"search\" className={css(styles.appLauncherMenuSearch)}>\n        <ApplicationLauncherItem\n          customChild={\n            <input\n              type=\"search\"\n              className={css(formStyles.formControl)}\n              placeholder={searchPlaceholderText}\n              onChange={e => onSearch(e.target.value)}\n              {...searchProps}\n            ></input>\n          }\n        ></ApplicationLauncherItem>\n      </div>\n    );\n  };\n\n  render() {\n    const {\n      'aria-label': ariaLabel,\n      isOpen,\n      onToggle,\n      toggleIcon,\n      toggleId,\n      onSelect,\n      isDisabled,\n      className,\n      isGrouped,\n      favorites,\n      onFavorite,\n      onSearch,\n      items,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      searchPlaceholderText,\n      searchProps,\n      ref,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      favoritesLabel,\n      searchNoResultsText,\n      menuAppendTo,\n      ...props\n    } = this.props;\n    let renderableItems: React.ReactNode[] = [];\n\n    if (onFavorite) {\n      let favoritesGroup: React.ReactNode[] = [];\n      let renderableFavorites: React.ReactNode[] = [];\n      if (favorites.length > 0) {\n        renderableFavorites = createRenderableFavorites(items, isGrouped, favorites, true);\n        favoritesGroup = [\n          <ApplicationLauncherGroup key=\"favorites\" label={favoritesLabel}>\n            {renderableFavorites}\n            <ApplicationLauncherSeparator key=\"separator\" />\n          </ApplicationLauncherGroup>\n        ];\n      }\n      if (renderableFavorites.length > 0) {\n        renderableItems = favoritesGroup.concat(extendItemsWithFavorite(items, isGrouped, favorites));\n      } else {\n        renderableItems = extendItemsWithFavorite(items, isGrouped, favorites);\n      }\n    } else {\n      renderableItems = items;\n    }\n\n    if (items.length === 0) {\n      renderableItems = [\n        <ApplicationLauncherGroup key=\"no-results-group\">\n          <ApplicationLauncherItem key=\"no-results\">{searchNoResultsText}</ApplicationLauncherItem>\n        </ApplicationLauncherGroup>\n      ];\n    }\n    if (onSearch) {\n      renderableItems = [this.createSearchBox(), ...renderableItems];\n    }\n\n    return (\n      <ApplicationLauncherContext.Provider value={{ onFavorite }}>\n        <DropdownContext.Provider\n          value={{\n            onSelect,\n            menuClass: styles.appLauncherMenu,\n            itemClass: styles.appLauncherMenuItem,\n            toggleClass: styles.appLauncherToggle,\n            baseClass: styles.appLauncher,\n            baseComponent: 'nav',\n            sectionClass: styles.appLauncherGroup,\n            sectionTitleClass: styles.appLauncherGroupTitle,\n            sectionComponent: 'section',\n            disabledClass: styles.modifiers.disabled,\n            ouiaComponentType: ApplicationLauncher.displayName\n          }}\n        >\n          <DropdownWithContext\n            {...props}\n            dropdownItems={renderableItems}\n            isOpen={isOpen}\n            className={className}\n            aria-label={ariaLabel}\n            menuAppendTo={menuAppendTo}\n            toggle={\n              <DropdownToggle\n                id={toggleId}\n                toggleIndicator={null}\n                isOpen={isOpen}\n                onToggle={onToggle}\n                isDisabled={isDisabled}\n                aria-label={ariaLabel}\n              >\n                {toggleIcon}\n              </DropdownToggle>\n            }\n            isGrouped={isGrouped}\n          />\n        </DropdownContext.Provider>\n      </ApplicationLauncherContext.Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}