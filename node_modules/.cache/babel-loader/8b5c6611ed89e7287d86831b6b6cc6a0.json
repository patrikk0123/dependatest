{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { WizardHeader } from './WizardHeader';\nexport class Wizard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleKeyClicks = event => {\n      if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n        if (this.state.isNavOpen) {\n          this.setState({\n            isNavOpen: !this.state.isNavOpen\n          });\n        } else if (this.props.isOpen) {\n          this.props.onClose();\n        }\n      }\n    };\n\n    this.onNext = () => {\n      const {\n        onNext,\n        onClose,\n        onSave\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n      const maxSteps = flattenedSteps.length;\n\n      if (currentStep >= maxSteps) {\n        // Hit the save button at the end of the wizard\n        if (onSave) {\n          return onSave();\n        }\n\n        return onClose();\n      } else {\n        const newStep = currentStep + 1;\n        this.setState({\n          currentStep: newStep\n        });\n        const {\n          id: prevId,\n          name: prevName\n        } = flattenedSteps[currentStep - 1];\n        const {\n          id,\n          name\n        } = flattenedSteps[newStep - 1];\n        return onNext && onNext({\n          id,\n          name\n        }, {\n          prevId,\n          prevName\n        });\n      }\n    };\n\n    this.onBack = () => {\n      const {\n        onBack\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n\n      if (flattenedSteps.length < currentStep) {\n        // Previous step was removed, just update the currentStep state\n        const adjustedStep = flattenedSteps.length;\n        this.setState({\n          currentStep: adjustedStep\n        });\n      } else {\n        const newStep = currentStep - 1 <= 0 ? 0 : currentStep - 1;\n        this.setState({\n          currentStep: newStep\n        });\n        const {\n          id: prevId,\n          name: prevName\n        } = flattenedSteps[newStep];\n        const {\n          id,\n          name\n        } = flattenedSteps[newStep - 1];\n        return onBack && onBack({\n          id,\n          name\n        }, {\n          prevId,\n          prevName\n        });\n      }\n    };\n\n    this.goToStep = step => {\n      const {\n        onGoToStep\n      } = this.props;\n      const {\n        currentStep\n      } = this.state;\n      const flattenedSteps = this.getFlattenedSteps();\n      const maxSteps = flattenedSteps.length;\n\n      if (step < 1) {\n        step = 1;\n      } else if (step > maxSteps) {\n        step = maxSteps;\n      }\n\n      this.setState({\n        currentStep: step,\n        isNavOpen: false\n      });\n      const {\n        id: prevId,\n        name: prevName\n      } = flattenedSteps[currentStep - 1];\n      const {\n        id,\n        name\n      } = flattenedSteps[step - 1];\n      return onGoToStep && onGoToStep({\n        id,\n        name\n      }, {\n        prevId,\n        prevName\n      });\n    };\n\n    this.goToStepById = stepId => {\n      const flattenedSteps = this.getFlattenedSteps();\n      let step;\n\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].id === stepId) {\n          step = i + 1;\n          break;\n        }\n      }\n\n      if (step) {\n        this.setState({\n          currentStep: step\n        });\n      }\n    };\n\n    this.goToStepByName = stepName => {\n      const flattenedSteps = this.getFlattenedSteps();\n      let step;\n\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          step = i + 1;\n          break;\n        }\n      }\n\n      if (step) {\n        this.setState({\n          currentStep: step\n        });\n      }\n    };\n\n    this.getFlattenedSteps = () => {\n      const {\n        steps\n      } = this.props;\n      const flattenedSteps = [];\n\n      for (const step of steps) {\n        if (step.steps) {\n          for (const childStep of step.steps) {\n            flattenedSteps.push(childStep);\n          }\n        } else {\n          flattenedSteps.push(step);\n        }\n      }\n\n      return flattenedSteps;\n    };\n\n    this.getFlattenedStepsIndex = (flattenedSteps, stepName) => {\n      for (let i = 0; i < flattenedSteps.length; i++) {\n        if (flattenedSteps[i].name === stepName) {\n          return i + 1;\n        }\n      }\n\n      return 0;\n    };\n\n    this.initSteps = steps => {\n      // Set default Step values\n      for (let i = 0; i < steps.length; i++) {\n        if (steps[i].steps) {\n          for (let j = 0; j < steps[i].steps.length; j++) {\n            steps[i].steps[j] = Object.assign({\n              canJumpTo: true\n            }, steps[i].steps[j]);\n          }\n        }\n\n        steps[i] = Object.assign({\n          canJumpTo: true\n        }, steps[i]);\n      }\n\n      return steps;\n    };\n\n    this.getElement = appendTo => {\n      if (typeof appendTo === 'function') {\n        return appendTo();\n      }\n\n      return appendTo || document.body;\n    };\n\n    const newId = Wizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n    this.state = {\n      currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n    this.drawerRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = typeof document !== 'undefined' && document.body || null;\n\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n      height,\n      title,\n      description,\n      descriptionComponent,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      className,\n      steps,\n      startAtStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      isNavExpandable,\n      hasDrawer,\n      isDrawerExpanded\n    } = _a,\n          rest = __rest(_a, [\"width\", \"height\", \"title\", \"description\", \"descriptionComponent\", \"onClose\", \"onSave\", \"onBack\", \"onNext\", \"onGoToStep\", \"className\", \"steps\", \"startAtStep\", \"nextButtonText\", \"backButtonText\", \"cancelButtonText\", \"hideClose\", \"closeButtonAriaLabel\", \"navAriaLabel\", \"navAriaLabelledBy\", \"mainAriaLabel\", \"mainAriaLabelledBy\", \"hasNoBodyPadding\", \"footer\", \"appendTo\", \"isOpen\", \"titleId\", \"descriptionId\", \"isNavExpandable\", \"hasDrawer\", \"isDrawerExpanded\"])\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ;\n\n    const {\n      currentStep\n    } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n    const nav = isWizardNavOpen => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n      };\n      return React.createElement(WizardNav, Object.assign({}, wizNavAProps), computedSteps.map((step, index) => {\n        if (step.isFinishedStep) {\n          // Don't show finished step in the side nav\n          return;\n        }\n\n        let enabled;\n        let navItemStep;\n\n        if (step.steps) {\n          let hasActiveChild = false;\n          let canJumpToParent = false;\n\n          for (const subStep of step.steps) {\n            if (activeStep.name === subStep.name) {\n              // one of the children matches\n              hasActiveChild = true;\n            }\n\n            if (subStep.canJumpTo) {\n              canJumpToParent = true;\n            }\n          }\n\n          navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n          return React.createElement(WizardNavItem, {\n            key: index,\n            id: step.id,\n            content: step.name,\n            isExpandable: isNavExpandable,\n            isCurrent: hasActiveChild,\n            isDisabled: !canJumpToParent,\n            step: navItemStep,\n            onNavItemClick: this.goToStep\n          }, React.createElement(WizardNav, Object.assign({}, wizNavAProps, {\n            returnList: true\n          }), step.steps.map((childStep, indexChild) => {\n            if (childStep.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return;\n            }\n\n            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n            enabled = childStep.canJumpTo;\n            return React.createElement(WizardNavItem, {\n              key: `child_${indexChild}`,\n              id: childStep.id,\n              content: childStep.name,\n              isCurrent: activeStep.name === childStep.name,\n              isDisabled: !enabled,\n              step: navItemStep,\n              onNavItemClick: this.goToStep\n            });\n          })));\n        }\n\n        navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n        enabled = step.canJumpTo;\n        return React.createElement(WizardNavItem, Object.assign({}, step.stepNavItemProps, {\n          key: index,\n          id: step.id,\n          content: step.name,\n          isCurrent: activeStep.name === step.name,\n          isDisabled: !enabled,\n          step: navItemStep,\n          onNavItemClick: this.goToStep\n        }));\n      }));\n    };\n\n    const context = {\n      goToStepById: this.goToStepById,\n      goToStepByName: this.goToStepByName,\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose,\n      activeStep\n    };\n    const divStyles = Object.assign(Object.assign({}, height ? {\n      height\n    } : {}), width ? {\n      width\n    } : {});\n    const wizard = React.createElement(WizardContextProvider, {\n      value: context\n    }, React.createElement(\"div\", Object.assign({}, rest, {\n      className: css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className),\n      style: Object.keys(divStyles).length ? divStyles : undefined\n    }), title && React.createElement(WizardHeader, {\n      titleId: this.titleId,\n      descriptionId: this.descriptionId,\n      onClose: onClose,\n      title: title,\n      description: description,\n      descriptionComponent: descriptionComponent,\n      closeButtonAriaLabel: closeButtonAriaLabel,\n      hideClose: hideClose\n    }), React.createElement(WizardToggle, {\n      hasDrawer: hasDrawer,\n      isDrawerExpanded: isDrawerExpanded,\n      mainAriaLabel: mainAriaLabel,\n      isInPage: isOpen === undefined,\n      mainAriaLabelledBy: (title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId),\n      isNavOpen: this.state.isNavOpen,\n      onNavToggle: isNavOpen => this.setState({\n        isNavOpen\n      }),\n      nav: nav,\n      steps: steps,\n      activeStep: activeStep,\n      hasNoBodyPadding: hasNoBodyPadding\n    }, footer || React.createElement(WizardFooterInternal, {\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose: onClose,\n      isValid: isValid,\n      firstStep: firstStep,\n      activeStep: activeStep,\n      nextButtonText: activeStep && activeStep.nextButtonText || nextButtonText,\n      backButtonText: backButtonText,\n      cancelButtonText: cancelButtonText\n    }))));\n\n    if (isOpen !== undefined) {\n      return React.createElement(Modal, {\n        width: width !== null ? width : undefined,\n        isOpen: isOpen,\n        variant: ModalVariant.large,\n        \"aria-labelledby\": this.titleId,\n        \"aria-describedby\": this.descriptionId,\n        showClose: false,\n        hasNoBodyWrapper: true\n      }, wizard);\n    }\n\n    return wizard;\n  }\n\n}\nWizard.displayName = 'Wizard';\nWizard.currentId = 0;\nWizard.defaultProps = {\n  title: null,\n  description: '',\n  descriptionComponent: 'p',\n  className: '',\n  startAtStep: 1,\n  nextButtonText: 'Next',\n  backButtonText: 'Back',\n  cancelButtonText: 'Cancel',\n  hideClose: false,\n  closeButtonAriaLabel: 'Close',\n  navAriaLabel: null,\n  navAriaLabelledBy: null,\n  mainAriaLabel: null,\n  mainAriaLabelledBy: null,\n  hasNoBodyPadding: false,\n  onBack: null,\n  onNext: null,\n  onGoToStep: null,\n  width: null,\n  height: null,\n  footer: null,\n  onClose: () => undefined,\n  appendTo: null,\n  isOpen: undefined,\n  isNavExpandable: false,\n  hasDrawer: false,\n  isDrawerExpanded: false\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,uDAAnB;AACA,SAASC,KAAT,EAAgBC,YAAhB,QAAoC,UAApC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,aAAT,QAAkD,iBAAlD;AACA,SAASC,qBAAT,QAAsC,iBAAtC;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AA0GA,OAAM,MAAOC,MAAP,SAAsBZ,KAAK,CAACa,SAA5B,CAA+D;EAoCnEC,YAAYC,KAAZ,EAA8B;IAC5B,MAAMA,KAAN;;IAaM,uBAAmBC,KAAD,IAA+B;MACvD,IAAIA,KAAK,CAACC,OAAN,KAAkBhB,SAAS,CAACiB,UAAhC,EAA4C;QAC1C,IAAI,KAAKC,KAAL,CAAWC,SAAf,EAA0B;UACxB,KAAKC,QAAL,CAAc;YAAED,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;UAAzB,CAAd;QACD,CAFD,MAEO,IAAI,KAAKL,KAAL,CAAWO,MAAf,EAAuB;UAC5B,KAAKP,KAAL,CAAWQ,OAAX;QACD;MACF;IACF,CARO;;IAUA,cAAS,MAAW;MAC1B,MAAM;QAAEC,MAAF;QAAUD,OAAV;QAAmBE;MAAnB,IAA8B,KAAKV,KAAzC;MACA,MAAM;QAAEW;MAAF,IAAkB,KAAKP,KAA7B;MACA,MAAMQ,cAAc,GAAG,KAAKC,iBAAL,EAAvB;MACA,MAAMC,QAAQ,GAAGF,cAAc,CAACG,MAAhC;;MACA,IAAIJ,WAAW,IAAIG,QAAnB,EAA6B;QAC3B;QACA,IAAIJ,MAAJ,EAAY;UACV,OAAOA,MAAM,EAAb;QACD;;QACD,OAAOF,OAAO,EAAd;MACD,CAND,MAMO;QACL,MAAMQ,OAAO,GAAGL,WAAW,GAAG,CAA9B;QACA,KAAKL,QAAL,CAAc;UACZK,WAAW,EAAEK;QADD,CAAd;QAGA,MAAM;UAAEC,EAAE,EAAEC,MAAN;UAAcC,IAAI,EAAEC;QAApB,IAAiCR,cAAc,CAACD,WAAW,GAAG,CAAf,CAArD;QACA,MAAM;UAAEM,EAAF;UAAME;QAAN,IAAeP,cAAc,CAACI,OAAO,GAAG,CAAX,CAAnC;QACA,OAAOP,MAAM,IAAIA,MAAM,CAAC;UAAEQ,EAAF;UAAME;QAAN,CAAD,EAAe;UAAED,MAAF;UAAUE;QAAV,CAAf,CAAvB;MACD;IACF,CApBO;;IAsBA,cAAS,MAAW;MAC1B,MAAM;QAAEC;MAAF,IAAa,KAAKrB,KAAxB;MACA,MAAM;QAAEW;MAAF,IAAkB,KAAKP,KAA7B;MACA,MAAMQ,cAAc,GAAG,KAAKC,iBAAL,EAAvB;;MACA,IAAID,cAAc,CAACG,MAAf,GAAwBJ,WAA5B,EAAyC;QACvC;QACA,MAAMW,YAAY,GAAGV,cAAc,CAACG,MAApC;QACA,KAAKT,QAAL,CAAc;UACZK,WAAW,EAAEW;QADD,CAAd;MAGD,CAND,MAMO;QACL,MAAMN,OAAO,GAAGL,WAAW,GAAG,CAAd,IAAmB,CAAnB,GAAuB,CAAvB,GAA2BA,WAAW,GAAG,CAAzD;QACA,KAAKL,QAAL,CAAc;UACZK,WAAW,EAAEK;QADD,CAAd;QAGA,MAAM;UAAEC,EAAE,EAAEC,MAAN;UAAcC,IAAI,EAAEC;QAApB,IAAiCR,cAAc,CAACI,OAAD,CAArD;QACA,MAAM;UAAEC,EAAF;UAAME;QAAN,IAAeP,cAAc,CAACI,OAAO,GAAG,CAAX,CAAnC;QACA,OAAOK,MAAM,IAAIA,MAAM,CAAC;UAAEJ,EAAF;UAAME;QAAN,CAAD,EAAe;UAAED,MAAF;UAAUE;QAAV,CAAf,CAAvB;MACD;IACF,CAnBO;;IAqBA,gBAAYG,IAAD,IAAuB;MACxC,MAAM;QAAEC;MAAF,IAAiB,KAAKxB,KAA5B;MACA,MAAM;QAAEW;MAAF,IAAkB,KAAKP,KAA7B;MACA,MAAMQ,cAAc,GAAG,KAAKC,iBAAL,EAAvB;MACA,MAAMC,QAAQ,GAAGF,cAAc,CAACG,MAAhC;;MACA,IAAIQ,IAAI,GAAG,CAAX,EAAc;QACZA,IAAI,GAAG,CAAP;MACD,CAFD,MAEO,IAAIA,IAAI,GAAGT,QAAX,EAAqB;QAC1BS,IAAI,GAAGT,QAAP;MACD;;MACD,KAAKR,QAAL,CAAc;QAAEK,WAAW,EAAEY,IAAf;QAAqBlB,SAAS,EAAE;MAAhC,CAAd;MACA,MAAM;QAAEY,EAAE,EAAEC,MAAN;QAAcC,IAAI,EAAEC;MAApB,IAAiCR,cAAc,CAACD,WAAW,GAAG,CAAf,CAArD;MACA,MAAM;QAAEM,EAAF;QAAME;MAAN,IAAeP,cAAc,CAACW,IAAI,GAAG,CAAR,CAAnC;MACA,OAAOC,UAAU,IAAIA,UAAU,CAAC;QAAEP,EAAF;QAAME;MAAN,CAAD,EAAe;QAAED,MAAF;QAAUE;MAAV,CAAf,CAA/B;IACD,CAdO;;IAgBA,oBAAgBK,MAAD,IAAkC;MACvD,MAAMb,cAAc,GAAG,KAAKC,iBAAL,EAAvB;MACA,IAAIU,IAAJ;;MACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,cAAc,CAACG,MAAnC,EAA2CW,CAAC,EAA5C,EAAgD;QAC9C,IAAId,cAAc,CAACc,CAAD,CAAd,CAAkBT,EAAlB,KAAyBQ,MAA7B,EAAqC;UACnCF,IAAI,GAAGG,CAAC,GAAG,CAAX;UACA;QACD;MACF;;MACD,IAAIH,IAAJ,EAAU;QACR,KAAKjB,QAAL,CAAc;UAAEK,WAAW,EAAEY;QAAf,CAAd;MACD;IACF,CAZO;;IAcA,sBAAkBI,QAAD,IAA2B;MAClD,MAAMf,cAAc,GAAG,KAAKC,iBAAL,EAAvB;MACA,IAAIU,IAAJ;;MACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,cAAc,CAACG,MAAnC,EAA2CW,CAAC,EAA5C,EAAgD;QAC9C,IAAId,cAAc,CAACc,CAAD,CAAd,CAAkBP,IAAlB,KAA2BQ,QAA/B,EAAyC;UACvCJ,IAAI,GAAGG,CAAC,GAAG,CAAX;UACA;QACD;MACF;;MACD,IAAIH,IAAJ,EAAU;QACR,KAAKjB,QAAL,CAAc;UAAEK,WAAW,EAAEY;QAAf,CAAd;MACD;IACF,CAZO;;IAcA,yBAAoB,MAAmB;MAC7C,MAAM;QAAEK;MAAF,IAAY,KAAK5B,KAAvB;MACA,MAAMY,cAAc,GAAiB,EAArC;;MACA,KAAK,MAAMW,IAAX,IAAmBK,KAAnB,EAA0B;QACxB,IAAIL,IAAI,CAACK,KAAT,EAAgB;UACd,KAAK,MAAMC,SAAX,IAAwBN,IAAI,CAACK,KAA7B,EAAoC;YAClChB,cAAc,CAACkB,IAAf,CAAoBD,SAApB;UACD;QACF,CAJD,MAIO;UACLjB,cAAc,CAACkB,IAAf,CAAoBP,IAApB;QACD;MACF;;MACD,OAAOX,cAAP;IACD,CAbO;;IAeA,8BAAyB,CAACA,cAAD,EAA+Be,QAA/B,KAAoE;MACnG,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,cAAc,CAACG,MAAnC,EAA2CW,CAAC,EAA5C,EAAgD;QAC9C,IAAId,cAAc,CAACc,CAAD,CAAd,CAAkBP,IAAlB,KAA2BQ,QAA/B,EAAyC;UACvC,OAAOD,CAAC,GAAG,CAAX;QACD;MACF;;MAED,OAAO,CAAP;IACD,CARO;;IAUA,iBAAaE,KAAD,IAAsC;MACxD;MACA,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,KAAK,CAACb,MAA1B,EAAkCW,CAAC,EAAnC,EAAuC;QACrC,IAAIE,KAAK,CAACF,CAAD,CAAL,CAASE,KAAb,EAAoB;UAClB,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACF,CAAD,CAAL,CAASE,KAAT,CAAeb,MAAnC,EAA2CgB,CAAC,EAA5C,EAAgD;YAC9CH,KAAK,CAACF,CAAD,CAAL,CAASE,KAAT,CAAeG,CAAf,IAAoBC,MAAM,CAACC,MAAP,CAAc;cAAEC,SAAS,EAAE;YAAb,CAAd,EAAmCN,KAAK,CAACF,CAAD,CAAL,CAASE,KAAT,CAAeG,CAAf,CAAnC,CAApB;UACD;QACF;;QACDH,KAAK,CAACF,CAAD,CAAL,GAAWM,MAAM,CAACC,MAAP,CAAc;UAAEC,SAAS,EAAE;QAAb,CAAd,EAAmCN,KAAK,CAACF,CAAD,CAAxC,CAAX;MACD;;MACD,OAAOE,KAAP;IACD,CAXO;;IAaR,kBAAcO,QAAD,IAAgD;MAC3D,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;QAClC,OAAOA,QAAQ,EAAf;MACD;;MACD,OAAOA,QAAQ,IAAIC,QAAQ,CAACC,IAA5B;IACD,CALD;;IAnJE,MAAMC,KAAK,GAAGzC,MAAM,CAAC0C,SAAP,EAAd;IACA,KAAKC,OAAL,GAAexC,KAAK,CAACwC,OAAN,IAAiB,mBAAmBF,KAAK,EAAxD;IACA,KAAKG,aAAL,GAAqBzC,KAAK,CAACyC,aAAN,IAAuB,yBAAyBH,KAAK,EAA1E;IAEA,KAAKlC,KAAL,GAAa;MACXO,WAAW,EAAE,KAAKX,KAAL,CAAW0C,WAAX,IAA0BC,MAAM,CAACC,SAAP,CAAiB,KAAK5C,KAAL,CAAW0C,WAA5B,CAA1B,GAAqE,KAAK1C,KAAL,CAAW0C,WAAhF,GAA8F,CADhG;MAEXrC,SAAS,EAAE;IAFA,CAAb;IAKA,KAAKwC,SAAL,GAAiB5D,KAAK,CAAC6D,SAAN,EAAjB;EACD;;EAgJDC,iBAAiB;IACf,MAAMC,MAAM,GAAG,OAAOZ,QAAP,KAAoB,WAApB,GAAkCA,QAAQ,CAACC,IAA3C,GAAkD,IAAjE;;IACA,IAAIW,MAAJ,EAAY;MACVA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKC,eAAxC,EAAyD,KAAzD;IACD;EACF;;EAEDC,oBAAoB;IAClB,MAAMH,MAAM,GAAI,OAAOZ,QAAP,KAAoB,WAApB,IAAmCA,QAAQ,CAACC,IAA7C,IAAsD,IAArE;;IACA,IAAIW,MAAJ,EAAY;MACVA,MAAM,CAACI,mBAAP,CAA2B,SAA3B,EAAsC,KAAKF,eAA3C,EAA4D,KAA5D;IACD;EACF;;EAEDG,MAAM;IACJ,MAAMC,KAmCF,KAAKtD,KAnCT;IAAA,MAAM;MACJ;MACAuD,KAFI;MAGJC,MAHI;MAIJC,KAJI;MAKJC,WALI;MAMJC,oBANI;MAOJnD,OAPI;MAQJE,MARI;MASJW,MATI;MAUJZ,MAVI;MAWJe,UAXI;MAYJoC,SAZI;MAaJhC,KAbI;MAcJc,WAdI;MAeJmB,cAAc,GAAG,MAfb;MAgBJC,cAAc,GAAG,MAhBb;MAiBJC,gBAAgB,GAAG,QAjBf;MAkBJC,SAlBI;MAmBJC,oBAAoB,GAAG,OAnBnB;MAoBJC,YApBI;MAqBJC,iBArBI;MAsBJC,aAtBI;MAuBJC,kBAvBI;MAwBJC,gBAxBI;MAyBJC,MAzBI;MA0BJpC,QA1BI;MA2BJ5B,MA3BI;MA4BJiC,OA5BI;MA6BJC,aA7BI;MA8BJ+B,eA9BI;MA+BJC,SA/BI;MAgCJC;IAhCI,IAgCYpB,EAhClB;IAAA,MAiCKqB,IAAI,cAjCH,4cAiCG;IACP;IAlCF;;IAoCA,MAAM;MAAEhE;IAAF,IAAkB,KAAKP,KAA7B;IACA,MAAMQ,cAAc,GAAG,KAAKC,iBAAL,EAAvB;IACA,MAAMS,YAAY,GAAGV,cAAc,CAACG,MAAf,GAAwBJ,WAAxB,GAAsCC,cAAc,CAACG,MAArD,GAA8DJ,WAAnF;IACA,MAAMiE,UAAU,GAAGhE,cAAc,CAACU,YAAY,GAAG,CAAhB,CAAjC;IACA,MAAMuD,aAAa,GAAiB,KAAKC,SAAL,CAAelD,KAAf,CAApC;IACA,MAAMmD,SAAS,GAAGH,UAAU,KAAKhE,cAAc,CAAC,CAAD,CAA/C;IACA,MAAMoE,OAAO,GAAGJ,UAAU,IAAIA,UAAU,CAACK,UAAX,KAA0BC,SAAxC,GAAoDN,UAAU,CAACK,UAA/D,GAA4E,IAA5F;;IAEA,MAAME,GAAG,GAAIC,eAAD,IAA6B;MACvC,MAAMC,YAAY,GAAG;QACnB9E,MAAM,EAAE6E,eADW;QAEnB,cAAclB,YAFK;QAGnB,mBAAmB,CAACT,KAAK,IAAIU,iBAAV,MAAiCA,iBAAiB,IAAI,KAAK3B,OAA3D;MAHA,CAArB;MAMA,OACEvD,oBAACQ,SAAD,EAAUuC,kBAAKqD,YAAL,CAAV,EACGR,aAAa,CAACS,GAAd,CAAkB,CAAC/D,IAAD,EAAOgE,KAAP,KAAgB;QACjC,IAAIhE,IAAI,CAACiE,cAAT,EAAyB;UACvB;UACA;QACD;;QACD,IAAIC,OAAJ;QACA,IAAIC,WAAJ;;QACA,IAAInE,IAAI,CAACK,KAAT,EAAgB;UACd,IAAI+D,cAAc,GAAG,KAArB;UACA,IAAIC,eAAe,GAAG,KAAtB;;UACA,KAAK,MAAMC,OAAX,IAAsBtE,IAAI,CAACK,KAA3B,EAAkC;YAChC,IAAIgD,UAAU,CAACzD,IAAX,KAAoB0E,OAAO,CAAC1E,IAAhC,EAAsC;cACpC;cACAwE,cAAc,GAAG,IAAjB;YACD;;YACD,IAAIE,OAAO,CAAC3D,SAAZ,EAAuB;cACrB0D,eAAe,GAAG,IAAlB;YACD;UACF;;UACDF,WAAW,GAAG,KAAKI,sBAAL,CAA4BlF,cAA5B,EAA4CW,IAAI,CAACK,KAAL,CAAW,CAAX,EAAcT,IAA1D,CAAd;UACA,OACElC,oBAACS,aAAD,EAAc;YACZqG,GAAG,EAAER,KADO;YAEZtE,EAAE,EAAEM,IAAI,CAACN,EAFG;YAGZ+E,OAAO,EAAEzE,IAAI,CAACJ,IAHF;YAIZ8E,YAAY,EAAEzB,eAJF;YAKZ0B,SAAS,EAAEP,cALC;YAMZQ,UAAU,EAAE,CAACP,eAND;YAOZrE,IAAI,EAAEmE,WAPM;YAQZU,cAAc,EAAE,KAAKC;UART,CAAd,EAUEpH,oBAACQ,SAAD,EAAUuC,kBAAKqD,YAAL,EAAiB;YAAEiB,UAAU;UAAZ,CAAjB,CAAV,EACG/E,IAAI,CAACK,KAAL,CAAW0D,GAAX,CAAe,CAACzD,SAAD,EAAwB0E,UAAxB,KAA8C;YAC5D,IAAI1E,SAAS,CAAC2D,cAAd,EAA8B;cAC5B;cACA;YACD;;YACDE,WAAW,GAAG,KAAKI,sBAAL,CAA4BlF,cAA5B,EAA4CiB,SAAS,CAACV,IAAtD,CAAd;YACAsE,OAAO,GAAG5D,SAAS,CAACK,SAApB;YACA,OACEjD,oBAACS,aAAD,EAAc;cACZqG,GAAG,EAAE,SAASQ,UAAU,EADZ;cAEZtF,EAAE,EAAEY,SAAS,CAACZ,EAFF;cAGZ+E,OAAO,EAAEnE,SAAS,CAACV,IAHP;cAIZ+E,SAAS,EAAEtB,UAAU,CAACzD,IAAX,KAAoBU,SAAS,CAACV,IAJ7B;cAKZgF,UAAU,EAAE,CAACV,OALD;cAMZlE,IAAI,EAAEmE,WANM;cAOZU,cAAc,EAAE,KAAKC;YAPT,CAAd,CADF;UAWD,CAlBA,CADH,CAVF,CADF;QAkCD;;QACDX,WAAW,GAAG,KAAKI,sBAAL,CAA4BlF,cAA5B,EAA4CW,IAAI,CAACJ,IAAjD,CAAd;QACAsE,OAAO,GAAGlE,IAAI,CAACW,SAAf;QACA,OACEjD,oBAACS,aAAD,EAAcsC,kBACRT,IAAI,CAACiF,gBADG,EACa;UACzBT,GAAG,EAAER,KADoB;UAEzBtE,EAAE,EAAEM,IAAI,CAACN,EAFgB;UAGzB+E,OAAO,EAAEzE,IAAI,CAACJ,IAHW;UAIzB+E,SAAS,EAAEtB,UAAU,CAACzD,IAAX,KAAoBI,IAAI,CAACJ,IAJX;UAKzBgF,UAAU,EAAE,CAACV,OALY;UAMzBlE,IAAI,EAAEmE,WANmB;UAOzBU,cAAc,EAAE,KAAKC;QAPI,CADb,CAAd,CADF;MAYD,CArEA,CADH,CADF;IA0ED,CAjFD;;IAmFA,MAAMI,OAAO,GAAG;MACdC,YAAY,EAAE,KAAKA,YADL;MAEdC,cAAc,EAAE,KAAKA,cAFP;MAGdlG,MAAM,EAAE,KAAKA,MAHC;MAIdY,MAAM,EAAE,KAAKA,MAJC;MAKdb,OALc;MAMdoE;IANc,CAAhB;IASA,MAAMgC,SAAS,mCACTpD,MAAM,GAAG;MAAEA;IAAF,CAAH,GAAgB,EADb,GAETD,KAAK,GAAG;MAAEA;IAAF,CAAH,GAAe,EAFX,CAAf;IAKA,MAAMsD,MAAM,GACV5H,oBAACU,qBAAD,EAAsB;MAACmH,KAAK,EAAEL;IAAR,CAAtB,EACExH,6CACM0F,IADN,EACU;MACRf,SAAS,EAAEzE,GAAG,CAACC,MAAM,CAACyH,MAAR,EAAgBjC,UAAU,IAAIA,UAAU,CAACY,cAAzB,IAA2C,eAA3D,EAA4E5B,SAA5E,CADN;MAERmD,KAAK,EAAE/E,MAAM,CAACgF,IAAP,CAAYJ,SAAZ,EAAuB7F,MAAvB,GAAgC6F,SAAhC,GAA4C1B;IAF3C,CADV,GAKGzB,KAAK,IACJxE,oBAACW,YAAD,EAAa;MACX4C,OAAO,EAAE,KAAKA,OADH;MAEXC,aAAa,EAAE,KAAKA,aAFT;MAGXjC,OAAO,EAAEA,OAHE;MAIXiD,KAAK,EAAEA,KAJI;MAKXC,WAAW,EAAEA,WALF;MAMXC,oBAAoB,EAAEA,oBANX;MAOXM,oBAAoB,EAAEA,oBAPX;MAQXD,SAAS,EAAEA;IARA,CAAb,CANJ,EAiBE/E,oBAACO,YAAD,EAAa;MACXiF,SAAS,EAAEA,SADA;MAEXC,gBAAgB,EAAEA,gBAFP;MAGXN,aAAa,EAAEA,aAHJ;MAIX6C,QAAQ,EAAE1G,MAAM,KAAK2E,SAJV;MAKXb,kBAAkB,EAAE,CAACZ,KAAK,IAAIY,kBAAV,MAAkCA,kBAAkB,IAAI,KAAK7B,OAA7D,CALT;MAMXnC,SAAS,EAAE,KAAKD,KAAL,CAAWC,SANX;MAOX6G,WAAW,EAAE7G,SAAS,IAAI,KAAKC,QAAL,CAAc;QAAED;MAAF,CAAd,CAPf;MAQX8E,GAAG,EAAEA,GARM;MASXvD,KAAK,EAAEA,KATI;MAUXgD,UAAU,EAAEA,UAVD;MAWXN,gBAAgB,EAAEA;IAXP,CAAb,EAaGC,MAAM,IACLtF,oBAACM,oBAAD,EAAqB;MACnBkB,MAAM,EAAE,KAAKA,MADM;MAEnBY,MAAM,EAAE,KAAKA,MAFM;MAGnBb,OAAO,EAAEA,OAHU;MAInBwE,OAAO,EAAEA,OAJU;MAKnBD,SAAS,EAAEA,SALQ;MAMnBH,UAAU,EAAEA,UANO;MAOnBf,cAAc,EAAGe,UAAU,IAAIA,UAAU,CAACf,cAA1B,IAA6CA,cAP1C;MAQnBC,cAAc,EAAEA,cARG;MASnBC,gBAAgB,EAAEA;IATC,CAArB,CAdJ,CAjBF,CADF,CADF;;IAkDA,IAAIxD,MAAM,KAAK2E,SAAf,EAA0B;MACxB,OACEjG,oBAACI,KAAD,EAAM;QACJkE,KAAK,EAAEA,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB2B,SAD5B;QAEJ3E,MAAM,EAAEA,MAFJ;QAGJ4G,OAAO,EAAE7H,YAAY,CAAC8H,KAHlB;QAGuB,mBACV,KAAK5E,OAJlB;QAIyB,oBACX,KAAKC,aALnB;QAMJ4E,SAAS,EAAE,KANP;QAOJC,gBAAgB;MAPZ,CAAN,EASGT,MATH,CADF;IAaD;;IAED,OAAOA,MAAP;EACD;;AA/ZkE;AAC5DhH,qBAAc,QAAd;AACQA,mBAAY,CAAZ;AACRA,sBAA0C;EAC/C4D,KAAK,EAAE,IADwC;EAE/CC,WAAW,EAAE,EAFkC;EAG/CC,oBAAoB,EAAE,GAHyB;EAI/CC,SAAS,EAAE,EAJoC;EAK/ClB,WAAW,EAAE,CALkC;EAM/CmB,cAAc,EAAE,MAN+B;EAO/CC,cAAc,EAAE,MAP+B;EAQ/CC,gBAAgB,EAAE,QAR6B;EAS/CC,SAAS,EAAE,KAToC;EAU/CC,oBAAoB,EAAE,OAVyB;EAW/CC,YAAY,EAAE,IAXiC;EAY/CC,iBAAiB,EAAE,IAZ4B;EAa/CC,aAAa,EAAE,IAbgC;EAc/CC,kBAAkB,EAAE,IAd2B;EAe/CC,gBAAgB,EAAE,KAf6B;EAgB/CjD,MAAM,EAAE,IAhBuC;EAiB/CZ,MAAM,EAAE,IAjBuC;EAkB/Ce,UAAU,EAAE,IAlBmC;EAmB/C+B,KAAK,EAAE,IAnBwC;EAoB/CC,MAAM,EAAE,IApBuC;EAqB/Ce,MAAM,EAAE,IArBuC;EAsB/C/D,OAAO,EAAE,MAAM0E,SAtBgC;EAuB/C/C,QAAQ,EAAE,IAvBqC;EAwB/C5B,MAAM,EAAE2E,SAxBuC;EAyB/CV,eAAe,EAAE,KAzB8B;EA0B/CC,SAAS,EAAE,KA1BoC;EA2B/CC,gBAAgB,EAAE;AA3B6B,CAA1C","names":["React","KEY_CODES","css","styles","Modal","ModalVariant","WizardFooterInternal","WizardToggle","WizardNav","WizardNavItem","WizardContextProvider","WizardHeader","Wizard","Component","constructor","props","event","keyCode","ESCAPE_KEY","state","isNavOpen","setState","isOpen","onClose","onNext","onSave","currentStep","flattenedSteps","getFlattenedSteps","maxSteps","length","newStep","id","prevId","name","prevName","onBack","adjustedStep","step","onGoToStep","stepId","i","stepName","steps","childStep","push","j","Object","assign","canJumpTo","appendTo","document","body","newId","currentId","titleId","descriptionId","startAtStep","Number","isInteger","drawerRef","createRef","componentDidMount","target","addEventListener","handleKeyClicks","componentWillUnmount","removeEventListener","render","_a","width","height","title","description","descriptionComponent","className","nextButtonText","backButtonText","cancelButtonText","hideClose","closeButtonAriaLabel","navAriaLabel","navAriaLabelledBy","mainAriaLabel","mainAriaLabelledBy","hasNoBodyPadding","footer","isNavExpandable","hasDrawer","isDrawerExpanded","rest","activeStep","computedSteps","initSteps","firstStep","isValid","enableNext","undefined","nav","isWizardNavOpen","wizNavAProps","map","index","isFinishedStep","enabled","navItemStep","hasActiveChild","canJumpToParent","subStep","getFlattenedStepsIndex","key","content","isExpandable","isCurrent","isDisabled","onNavItemClick","goToStep","returnList","indexChild","stepNavItemProps","context","goToStepById","goToStepByName","divStyles","wizard","value","style","keys","isInPage","onNavToggle","variant","large","showClose","hasNoBodyWrapper"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Wizard/Wizard.tsx"],"sourcesContent":["import * as React from 'react';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport { Modal, ModalVariant } from '../Modal';\nimport { WizardFooterInternal } from './WizardFooterInternal';\nimport { WizardToggle } from './WizardToggle';\nimport { WizardNav } from './WizardNav';\nimport { WizardNavItem, WizardNavItemProps } from './WizardNavItem';\nimport { WizardContextProvider } from './WizardContext';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { WizardHeader } from './WizardHeader';\n\nexport interface WizardStep {\n  /** Optional identifier */\n  id?: string | number;\n  /** The name of the step */\n  name: React.ReactNode;\n  /** The component to render in the main body */\n  component?: any;\n  /** @beta The content to render in the drawer panel (use when hasDrawer prop is set on the wizard).   */\n  drawerPanelContent?: any;\n  /** @beta Custom drawer toggle button that opens the drawer. */\n  drawerToggleButton?: React.ReactNode;\n  /** Setting to true hides the side nav and footer */\n  isFinishedStep?: boolean;\n  /** Enables or disables the step in the navigation. Enabled by default. */\n  canJumpTo?: boolean;\n  /** Sub steps */\n  steps?: WizardStep[];\n  /** Props to pass to the WizardNavItem */\n  stepNavItemProps?: React.HTMLProps<HTMLButtonElement | HTMLAnchorElement> | WizardNavItemProps;\n  /** (Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it. */\n  nextButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The condition needed to enable the Next button */\n  enableNext?: boolean;\n  /** (Unused if footer is controlled) True to hide the Cancel button */\n  hideCancelButton?: boolean;\n  /** (Unused if footer is controlled) True to hide the Back button */\n  hideBackButton?: boolean;\n}\n\nexport type WizardStepFunctionType = (\n  newStep: { id?: string | number; name: React.ReactNode },\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\n) => void;\n\nexport interface WizardProps extends React.HTMLProps<HTMLDivElement> {\n  /** Custom width of the wizard */\n  width?: number | string;\n  /** Custom height of the wizard */\n  height?: number | string;\n  /** The wizard title to display if header is desired */\n  title?: string;\n  /** An optional id for the title */\n  titleId?: string;\n  /** An optional id for the description */\n  descriptionId?: string;\n  /** The wizard description */\n  description?: React.ReactNode;\n  /** Component type of the description */\n  descriptionComponent?: 'div' | 'p';\n  /** Flag indicating whether the close button should be in the header */\n  hideClose?: boolean;\n  /** Callback function to close the wizard */\n  onClose?: () => void;\n  /** Callback function when a step in the nav is clicked */\n  onGoToStep?: WizardStepFunctionType;\n  /** Additional classes spread to the Wizard */\n  className?: string;\n  /** The wizard steps configuration object */\n  steps: WizardStep[];\n  /** The current step the wizard is on (1 or higher) */\n  startAtStep?: number;\n  /** Aria-label for the Nav */\n  navAriaLabel?: string;\n  /** Sets aria-labelledby on nav element */\n  navAriaLabelledBy?: string;\n  /** Aria-label for the main element */\n  mainAriaLabel?: string;\n  /** Sets aria-labelledby on the main element */\n  mainAriaLabelledBy?: string;\n  /** Can remove the default padding around the main body content by setting this to true */\n  hasNoBodyPadding?: boolean;\n  /** (Use to control the footer) Passing in a footer component lets you control the buttons yourself */\n  footer?: React.ReactNode;\n  /** (Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose */\n  onSave?: () => void;\n  /** (Unused if footer is controlled) Callback function after Next button is clicked */\n  onNext?: WizardStepFunctionType;\n  /** (Unused if footer is controlled) Callback function after Back button is clicked */\n  onBack?: WizardStepFunctionType;\n  /** (Unused if footer is controlled) The Next button text */\n  nextButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The Back button text */\n  backButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) The Cancel button text */\n  cancelButtonText?: React.ReactNode;\n  /** (Unused if footer is controlled) aria-label for the close button */\n  closeButtonAriaLabel?: string;\n  /** The parent container to append the modal to. Defaults to document.body */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided */\n  isOpen?: boolean;\n  /** Flag indicating nav items with sub steps are expandable */\n  isNavExpandable?: boolean;\n  /** @beta Flag indicating the wizard has a drawer for at least one of the wizard steps */\n  hasDrawer?: boolean;\n  /** @beta Flag indicating the wizard drawer is expanded */\n  isDrawerExpanded?: boolean;\n}\n\ninterface WizardState {\n  currentStep: number;\n  isNavOpen: boolean;\n}\n\nexport class Wizard extends React.Component<WizardProps, WizardState> {\n  static displayName = 'Wizard';\n  private static currentId = 0;\n  static defaultProps: PickOptional<WizardProps> = {\n    title: null,\n    description: '',\n    descriptionComponent: 'p',\n    className: '',\n    startAtStep: 1,\n    nextButtonText: 'Next',\n    backButtonText: 'Back',\n    cancelButtonText: 'Cancel',\n    hideClose: false,\n    closeButtonAriaLabel: 'Close',\n    navAriaLabel: null,\n    navAriaLabelledBy: null,\n    mainAriaLabel: null,\n    mainAriaLabelledBy: null,\n    hasNoBodyPadding: false,\n    onBack: null as WizardStepFunctionType,\n    onNext: null as WizardStepFunctionType,\n    onGoToStep: null as WizardStepFunctionType,\n    width: null as string,\n    height: null as string,\n    footer: null as React.ReactNode,\n    onClose: () => undefined as any,\n    appendTo: null as HTMLElement,\n    isOpen: undefined,\n    isNavExpandable: false,\n    hasDrawer: false,\n    isDrawerExpanded: false\n  };\n  private titleId: string;\n  private descriptionId: string;\n  private drawerRef: React.RefObject<any>;\n\n  constructor(props: WizardProps) {\n    super(props);\n    const newId = Wizard.currentId++;\n    this.titleId = props.titleId || `pf-wizard-title-${newId}`;\n    this.descriptionId = props.descriptionId || `pf-wizard-description-${newId}`;\n\n    this.state = {\n      currentStep: this.props.startAtStep && Number.isInteger(this.props.startAtStep) ? this.props.startAtStep : 1,\n      isNavOpen: false\n    };\n\n    this.drawerRef = React.createRef();\n  }\n\n  private handleKeyClicks = (event: KeyboardEvent): void => {\n    if (event.keyCode === KEY_CODES.ESCAPE_KEY) {\n      if (this.state.isNavOpen) {\n        this.setState({ isNavOpen: !this.state.isNavOpen });\n      } else if (this.props.isOpen) {\n        this.props.onClose();\n      }\n    }\n  };\n\n  private onNext = (): void => {\n    const { onNext, onClose, onSave } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const maxSteps = flattenedSteps.length;\n    if (currentStep >= maxSteps) {\n      // Hit the save button at the end of the wizard\n      if (onSave) {\n        return onSave();\n      }\n      return onClose();\n    } else {\n      const newStep = currentStep + 1;\n      this.setState({\n        currentStep: newStep\n      });\n      const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n      const { id, name } = flattenedSteps[newStep - 1];\n      return onNext && onNext({ id, name }, { prevId, prevName });\n    }\n  };\n\n  private onBack = (): void => {\n    const { onBack } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    if (flattenedSteps.length < currentStep) {\n      // Previous step was removed, just update the currentStep state\n      const adjustedStep = flattenedSteps.length;\n      this.setState({\n        currentStep: adjustedStep\n      });\n    } else {\n      const newStep = currentStep - 1 <= 0 ? 0 : currentStep - 1;\n      this.setState({\n        currentStep: newStep\n      });\n      const { id: prevId, name: prevName } = flattenedSteps[newStep];\n      const { id, name } = flattenedSteps[newStep - 1];\n      return onBack && onBack({ id, name }, { prevId, prevName });\n    }\n  };\n\n  private goToStep = (step: number): void => {\n    const { onGoToStep } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const maxSteps = flattenedSteps.length;\n    if (step < 1) {\n      step = 1;\n    } else if (step > maxSteps) {\n      step = maxSteps;\n    }\n    this.setState({ currentStep: step, isNavOpen: false });\n    const { id: prevId, name: prevName } = flattenedSteps[currentStep - 1];\n    const { id, name } = flattenedSteps[step - 1];\n    return onGoToStep && onGoToStep({ id, name }, { prevId, prevName });\n  };\n\n  private goToStepById = (stepId: number | string): void => {\n    const flattenedSteps = this.getFlattenedSteps();\n    let step;\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].id === stepId) {\n        step = i + 1;\n        break;\n      }\n    }\n    if (step) {\n      this.setState({ currentStep: step });\n    }\n  };\n\n  private goToStepByName = (stepName: string): void => {\n    const flattenedSteps = this.getFlattenedSteps();\n    let step;\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        step = i + 1;\n        break;\n      }\n    }\n    if (step) {\n      this.setState({ currentStep: step });\n    }\n  };\n\n  private getFlattenedSteps = (): WizardStep[] => {\n    const { steps } = this.props;\n    const flattenedSteps: WizardStep[] = [];\n    for (const step of steps) {\n      if (step.steps) {\n        for (const childStep of step.steps) {\n          flattenedSteps.push(childStep);\n        }\n      } else {\n        flattenedSteps.push(step);\n      }\n    }\n    return flattenedSteps;\n  };\n\n  private getFlattenedStepsIndex = (flattenedSteps: WizardStep[], stepName: React.ReactNode): number => {\n    for (let i = 0; i < flattenedSteps.length; i++) {\n      if (flattenedSteps[i].name === stepName) {\n        return i + 1;\n      }\n    }\n\n    return 0;\n  };\n\n  private initSteps = (steps: WizardStep[]): WizardStep[] => {\n    // Set default Step values\n    for (let i = 0; i < steps.length; i++) {\n      if (steps[i].steps) {\n        for (let j = 0; j < steps[i].steps.length; j++) {\n          steps[i].steps[j] = Object.assign({ canJumpTo: true }, steps[i].steps[j]);\n        }\n      }\n      steps[i] = Object.assign({ canJumpTo: true }, steps[i]);\n    }\n    return steps;\n  };\n\n  getElement = (appendTo: HTMLElement | (() => HTMLElement)) => {\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  };\n\n  componentDidMount() {\n    const target = typeof document !== 'undefined' ? document.body : null;\n    if (target) {\n      target.addEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  componentWillUnmount() {\n    const target = (typeof document !== 'undefined' && document.body) || null;\n    if (target) {\n      target.removeEventListener('keydown', this.handleKeyClicks, false);\n    }\n  }\n\n  render() {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      width,\n      height,\n      title,\n      description,\n      descriptionComponent,\n      onClose,\n      onSave,\n      onBack,\n      onNext,\n      onGoToStep,\n      className,\n      steps,\n      startAtStep,\n      nextButtonText = 'Next',\n      backButtonText = 'Back',\n      cancelButtonText = 'Cancel',\n      hideClose,\n      closeButtonAriaLabel = 'Close',\n      navAriaLabel,\n      navAriaLabelledBy,\n      mainAriaLabel,\n      mainAriaLabelledBy,\n      hasNoBodyPadding,\n      footer,\n      appendTo,\n      isOpen,\n      titleId,\n      descriptionId,\n      isNavExpandable,\n      hasDrawer,\n      isDrawerExpanded,\n      ...rest\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n    } = this.props;\n    const { currentStep } = this.state;\n    const flattenedSteps = this.getFlattenedSteps();\n    const adjustedStep = flattenedSteps.length < currentStep ? flattenedSteps.length : currentStep;\n    const activeStep = flattenedSteps[adjustedStep - 1];\n    const computedSteps: WizardStep[] = this.initSteps(steps);\n    const firstStep = activeStep === flattenedSteps[0];\n    const isValid = activeStep && activeStep.enableNext !== undefined ? activeStep.enableNext : true;\n\n    const nav = (isWizardNavOpen: boolean) => {\n      const wizNavAProps = {\n        isOpen: isWizardNavOpen,\n        'aria-label': navAriaLabel,\n        'aria-labelledby': (title || navAriaLabelledBy) && (navAriaLabelledBy || this.titleId)\n      };\n\n      return (\n        <WizardNav {...wizNavAProps}>\n          {computedSteps.map((step, index) => {\n            if (step.isFinishedStep) {\n              // Don't show finished step in the side nav\n              return;\n            }\n            let enabled;\n            let navItemStep;\n            if (step.steps) {\n              let hasActiveChild = false;\n              let canJumpToParent = false;\n              for (const subStep of step.steps) {\n                if (activeStep.name === subStep.name) {\n                  // one of the children matches\n                  hasActiveChild = true;\n                }\n                if (subStep.canJumpTo) {\n                  canJumpToParent = true;\n                }\n              }\n              navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.steps[0].name);\n              return (\n                <WizardNavItem\n                  key={index}\n                  id={step.id}\n                  content={step.name}\n                  isExpandable={isNavExpandable}\n                  isCurrent={hasActiveChild}\n                  isDisabled={!canJumpToParent}\n                  step={navItemStep}\n                  onNavItemClick={this.goToStep}\n                >\n                  <WizardNav {...wizNavAProps} returnList>\n                    {step.steps.map((childStep: WizardStep, indexChild: number) => {\n                      if (childStep.isFinishedStep) {\n                        // Don't show finished step in the side nav\n                        return;\n                      }\n                      navItemStep = this.getFlattenedStepsIndex(flattenedSteps, childStep.name);\n                      enabled = childStep.canJumpTo;\n                      return (\n                        <WizardNavItem\n                          key={`child_${indexChild}`}\n                          id={childStep.id}\n                          content={childStep.name}\n                          isCurrent={activeStep.name === childStep.name}\n                          isDisabled={!enabled}\n                          step={navItemStep}\n                          onNavItemClick={this.goToStep}\n                        />\n                      );\n                    })}\n                  </WizardNav>\n                </WizardNavItem>\n              );\n            }\n            navItemStep = this.getFlattenedStepsIndex(flattenedSteps, step.name);\n            enabled = step.canJumpTo;\n            return (\n              <WizardNavItem\n                {...step.stepNavItemProps}\n                key={index}\n                id={step.id}\n                content={step.name}\n                isCurrent={activeStep.name === step.name}\n                isDisabled={!enabled}\n                step={navItemStep}\n                onNavItemClick={this.goToStep}\n              />\n            );\n          })}\n        </WizardNav>\n      );\n    };\n\n    const context = {\n      goToStepById: this.goToStepById,\n      goToStepByName: this.goToStepByName,\n      onNext: this.onNext,\n      onBack: this.onBack,\n      onClose,\n      activeStep\n    };\n\n    const divStyles = {\n      ...(height ? { height } : {}),\n      ...(width ? { width } : {})\n    };\n\n    const wizard = (\n      <WizardContextProvider value={context}>\n        <div\n          {...rest}\n          className={css(styles.wizard, activeStep && activeStep.isFinishedStep && 'pf-m-finished', className)}\n          style={Object.keys(divStyles).length ? divStyles : undefined}\n        >\n          {title && (\n            <WizardHeader\n              titleId={this.titleId}\n              descriptionId={this.descriptionId}\n              onClose={onClose}\n              title={title}\n              description={description}\n              descriptionComponent={descriptionComponent}\n              closeButtonAriaLabel={closeButtonAriaLabel}\n              hideClose={hideClose}\n            />\n          )}\n          <WizardToggle\n            hasDrawer={hasDrawer}\n            isDrawerExpanded={isDrawerExpanded}\n            mainAriaLabel={mainAriaLabel}\n            isInPage={isOpen === undefined}\n            mainAriaLabelledBy={(title || mainAriaLabelledBy) && (mainAriaLabelledBy || this.titleId)}\n            isNavOpen={this.state.isNavOpen}\n            onNavToggle={isNavOpen => this.setState({ isNavOpen })}\n            nav={nav}\n            steps={steps}\n            activeStep={activeStep}\n            hasNoBodyPadding={hasNoBodyPadding}\n          >\n            {footer || (\n              <WizardFooterInternal\n                onNext={this.onNext}\n                onBack={this.onBack}\n                onClose={onClose}\n                isValid={isValid}\n                firstStep={firstStep}\n                activeStep={activeStep}\n                nextButtonText={(activeStep && activeStep.nextButtonText) || nextButtonText}\n                backButtonText={backButtonText}\n                cancelButtonText={cancelButtonText}\n              />\n            )}\n          </WizardToggle>\n        </div>\n      </WizardContextProvider>\n    );\n\n    if (isOpen !== undefined) {\n      return (\n        <Modal\n          width={width !== null ? width : undefined}\n          isOpen={isOpen}\n          variant={ModalVariant.large}\n          aria-labelledby={this.titleId}\n          aria-describedby={this.descriptionId}\n          showClose={false}\n          hasNoBodyWrapper\n        >\n          {wizard}\n        </Modal>\n      );\n    }\n\n    return wizard;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}