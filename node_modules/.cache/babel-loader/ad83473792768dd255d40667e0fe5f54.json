{"ast":null,"code":"// @ts-nocheck\nimport format from './format';\nimport { modifierPhases } from '../enums';\nconst INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nconst MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nconst VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\n/**\n * @param modifiers\n */\n\nexport default function validateModifiers(modifiers) {\n  modifiers.forEach(modifier => {\n    Object.keys(modifier).forEach(key => {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', `\"${String(modifier.name)}\"`));\n          }\n\n          break;\n\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', `\"${String(modifier.enabled)}\"`));\n          }\n\n        case 'phase':\n          if (modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', `either ${modifierPhases.join(', ')}`, `\"${String(modifier.phase)}\"`));\n          }\n\n          break;\n\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n          }\n\n          break;\n\n        case 'effect':\n          if (typeof modifier.effect !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', `\"${String(modifier.fn)}\"`));\n          }\n\n          break;\n\n        case 'requires':\n          if (!Array.isArray(modifier.requires)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', `\"${String(modifier.requires)}\"`));\n          }\n\n          break;\n\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', `\"${String(modifier.requiresIfExists)}\"`));\n          }\n\n          break;\n\n        case 'options':\n        case 'data':\n          break;\n\n        default:\n          console.error(`PopperJS: an invalid property has been provided to the \"${modifier.name}\" modifier, valid properties are ${VALID_PROPERTIES.map(s => `\"${s}\"`).join(', ')}; but \"${key}\" was provided.`);\n      }\n\n      modifier.requires && modifier.requires.forEach(requirement => {\n        if (modifiers.find(mod => mod.name === requirement) == null) {\n          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n        }\n      });\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["format","modifierPhases","INVALID_MODIFIER_ERROR","MISSING_DEPENDENCY_ERROR","VALID_PROPERTIES","validateModifiers","modifiers","forEach","modifier","Object","keys","key","name","console","error","String","enabled","indexOf","phase","join","fn","effect","Array","isArray","requires","requiresIfExists","map","s","requirement","find","mod"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/utils/validateModifiers.ts"],"sourcesContent":["// @ts-nocheck\nimport format from './format';\nimport { modifierPhases } from '../enums';\n\nconst INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nconst MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nconst VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\n\n/**\n * @param modifiers\n */\nexport default function validateModifiers(modifiers: any[]): void {\n  modifiers.forEach(modifier => {\n    Object.keys(modifier).forEach(key => {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', `\"${String(modifier.name)}\"`)\n            );\n          }\n\n          break;\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', `\"${String(modifier.enabled)}\"`)\n            );\n          }\n\n        case 'phase':\n          if (modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error(\n              format(\n                INVALID_MODIFIER_ERROR,\n                modifier.name,\n                '\"phase\"',\n                `either ${modifierPhases.join(', ')}`,\n                `\"${String(modifier.phase)}\"`\n              )\n            );\n          }\n\n          break;\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', `\"${String(modifier.fn)}\"`)\n            );\n          }\n\n          break;\n        case 'effect':\n          if (typeof modifier.effect !== 'function') {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', `\"${String(modifier.fn)}\"`)\n            );\n          }\n\n          break;\n        case 'requires':\n          if (!Array.isArray(modifier.requires)) {\n            console.error(\n              format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', `\"${String(modifier.requires)}\"`)\n            );\n          }\n\n          break;\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(\n              format(\n                INVALID_MODIFIER_ERROR,\n                modifier.name,\n                '\"requiresIfExists\"',\n                '\"array\"',\n                `\"${String(modifier.requiresIfExists)}\"`\n              )\n            );\n          }\n\n          break;\n        case 'options':\n        case 'data':\n          break;\n        default:\n          console.error(\n            `PopperJS: an invalid property has been provided to the \"${\n              modifier.name\n            }\" modifier, valid properties are ${VALID_PROPERTIES.map(s => `\"${s}\"`).join(\n              ', '\n            )}; but \"${key}\" was provided.`\n          );\n      }\n\n      modifier.requires &&\n        modifier.requires.forEach(requirement => {\n          if (modifiers.find(mod => mod.name === requirement) == null) {\n            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n          }\n        });\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}