{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\nexport var DualListSelectorTree = function DualListSelectorTree(_a) {\n  var data = _a.data,\n      _a$hasBadges = _a.hasBadges,\n      hasBadges = _a$hasBadges === void 0 ? false : _a$hasBadges,\n      _a$isNested = _a.isNested,\n      isNested = _a$isNested === void 0 ? false : _a$isNested,\n      _a$defaultAllExpanded = _a.defaultAllExpanded,\n      defaultAllExpanded = _a$defaultAllExpanded === void 0 ? false : _a$defaultAllExpanded,\n      onOptionCheck = _a.onOptionCheck,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      props = __rest(_a, [\"data\", \"hasBadges\", \"isNested\", \"defaultAllExpanded\", \"onOptionCheck\", \"isDisabled\"]);\n\n  var dataToRender = typeof data === 'function' ? data() : data;\n  var tree = dataToRender.map(function (item) {\n    return React.createElement(DualListSelectorTreeItem, Object.assign({\n      key: item.id,\n      text: item.text,\n      id: item.id,\n      defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded,\n      onOptionCheck: onOptionCheck,\n      isChecked: item.isChecked,\n      checkProps: item.checkProps,\n      hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges,\n      badgeProps: item.badgeProps,\n      itemData: item,\n      isDisabled: isDisabled,\n      useMemo: true\n    }, item.children && {\n      children: React.createElement(DualListSelectorTree, {\n        isNested: true,\n        data: item.children,\n        hasBadges: hasBadges,\n        defaultAllExpanded: defaultAllExpanded,\n        onOptionCheck: onOptionCheck,\n        isDisabled: isDisabled\n      })\n    }));\n  });\n  return isNested ? React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList),\n    role: \"group\"\n  }, props), tree) : React.createElement(React.Fragment, null, tree);\n};\nDualListSelectorTree.displayName = 'DualListSelectorTree';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,6EAAnB;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AAsDA,OAAO,IAAMC,oBAAoB,GAAuD,SAA3EA,oBAA2E,CAACC,EAAD,EAQxD;MAP9BC,OAKkBD,GALlBC;qBAKkBD,GAJlBE;MAAAA,sCAAY;oBAIMF,GAHlBG;MAAAA,oCAAW;8BAGOH,GAFlBI;MAAAA,wDAAqB;MACrBC,gBACkBL,GADlBK;sBACkBL,GAAlBM;MAAAA,wCAAa;MACVC,QAAKC,WAP+E,sFAO/E;;EAER,IAAMC,YAAY,GAAG,OAAOR,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,EAAjC,GAAsCA,IAA3D;EACA,IAAMS,IAAI,GAAGD,YAAY,CAACE,GAAb,CAAiB,cAAI;IAAA,OAChChB,oBAACG,wBAAD,EAAyBc;MACvBC,GAAG,EAAEC,IAAI,CAACC,EADa;MAEvBC,IAAI,EAAEF,IAAI,CAACE,IAFY;MAGvBD,EAAE,EAAED,IAAI,CAACC,EAHc;MAIvBE,eAAe,EAAEH,IAAI,CAACG,eAAL,KAAyBC,SAAzB,GAAqCJ,IAAI,CAACG,eAA1C,GAA4Db,kBAJtD;MAKvBC,aAAa,EAAEA,aALQ;MAMvBc,SAAS,EAAEL,IAAI,CAACK,SANO;MAOvBC,UAAU,EAAEN,IAAI,CAACM,UAPM;MAQvBC,QAAQ,EAAEP,IAAI,CAACO,QAAL,KAAkBH,SAAlB,GAA8BJ,IAAI,CAACO,QAAnC,GAA8CnB,SARjC;MASvBoB,UAAU,EAAER,IAAI,CAACQ,UATM;MAUvBC,QAAQ,EAAET,IAVa;MAWvBR,UAAU,EAAEA,UAXW;MAYvBkB,OAAO,EAAE;IAZc,GAalBV,IAAI,CAACW,QAAL,IAAiB;MACpBA,QAAQ,EACN9B,oBAACI,oBAAD,EAAqB;QACnBI,QAAQ,MADW;QAEnBF,IAAI,EAAEa,IAAI,CAACW,QAFQ;QAGnBvB,SAAS,EAAEA,SAHQ;QAInBE,kBAAkB,EAAEA,kBAJD;QAKnBC,aAAa,EAAEA,aALI;QAMnBC,UAAU,EAAEA;MANO,CAArB;IAFkB,CAbC,CAAzB,CADgC;EAAA,CAArB,CAAb;EA4BA,OAAOH,QAAQ,GACbR;IAAI+B,SAAS,EAAE9B,GAAG,CAACC,MAAM,CAAC8B,oBAAR,CAAlB;IAAiDC,IAAI,EAAC;EAAtD,GAAkErB,KAAlE,GACGG,IADH,CADa,GAKbf,0CAAGe,IAAH,CALF;AAOD,CA7CM;AA+CPX,oBAAoB,CAAC8B,WAArB,GAAmC,sBAAnC","names":["React","css","styles","DualListSelectorTreeItem","DualListSelectorTree","_a","data","hasBadges","isNested","defaultAllExpanded","onOptionCheck","isDisabled","props","__rest","dataToRender","tree","map","Object","key","item","id","text","defaultExpanded","undefined","isChecked","checkProps","hasBadge","badgeProps","itemData","useMemo","children","className","dualListSelectorList","role","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorTree.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorTreeItem } from './DualListSelectorTreeItem';\n\nexport interface DualListSelectorTreeItemData {\n  /** Content rendered inside the dual list selector. */\n  children?: DualListSelectorTreeItemData[];\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating this option is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Flag indicating this option has a badge */\n  hasBadge?: boolean;\n  /** Callback fired when an option is checked */\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    isChosen: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** ID of the option */\n  id: string;\n  /** Text of the option */\n  text: string;\n  /** Parent id of an option */\n  parentId?: string;\n  /** Checked state of the option */\n  isChecked: boolean;\n  /** Additional properties to pass to the option checkbox */\n  checkProps?: any;\n  /** Additional properties to pass to the option badge */\n  badgeProps?: any;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n}\n\nexport interface DualListSelectorTreeProps {\n  /** Data of the tree view */\n  data: DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[]);\n  /** ID of the tree view */\n  id?: string;\n  /** @hide Flag indicating if the list is nested */\n  isNested?: boolean;\n  /** Flag indicating if all options should have badges */\n  hasBadges?: boolean;\n  /** Sets the default expanded behavior */\n  defaultAllExpanded?: boolean;\n  /** Callback fired when an option is checked */\n  isDisabled?: boolean;\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n}\n\nexport const DualListSelectorTree: React.FunctionComponent<DualListSelectorTreeProps> = ({\n  data,\n  hasBadges = false,\n  isNested = false,\n  defaultAllExpanded = false,\n  onOptionCheck,\n  isDisabled = false,\n  ...props\n}: DualListSelectorTreeProps) => {\n  const dataToRender = typeof data === 'function' ? data() : data;\n  const tree = dataToRender.map(item => (\n    <DualListSelectorTreeItem\n      key={item.id}\n      text={item.text}\n      id={item.id}\n      defaultExpanded={item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded}\n      onOptionCheck={onOptionCheck}\n      isChecked={item.isChecked}\n      checkProps={item.checkProps}\n      hasBadge={item.hasBadge !== undefined ? item.hasBadge : hasBadges}\n      badgeProps={item.badgeProps}\n      itemData={item}\n      isDisabled={isDisabled}\n      useMemo={true}\n      {...(item.children && {\n        children: (\n          <DualListSelectorTree\n            isNested\n            data={item.children}\n            hasBadges={hasBadges}\n            defaultAllExpanded={defaultAllExpanded}\n            onOptionCheck={onOptionCheck}\n            isDisabled={isDisabled}\n          />\n        )\n      })}\n    />\n  ));\n  return isNested ? (\n    <ul className={css(styles.dualListSelectorList)} role=\"group\" {...props}>\n      {tree}\n    </ul>\n  ) : (\n    <>{tree}</>\n  );\n};\n\nDualListSelectorTree.displayName = 'DualListSelectorTree';\n"]},"metadata":{},"sourceType":"module"}