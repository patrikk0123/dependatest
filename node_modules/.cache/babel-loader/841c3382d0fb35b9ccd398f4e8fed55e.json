{"ast":null,"code":"import { useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Objects consisting of whether is input required and validation function\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> fieldValues - values of input fields\n *  -> fieldErrors - error messages of inout fields\n *  -> fieldStates - 'default' | 'success' | 'error'\n *  -> isSubmitDisabled - submit disabled or not\n *  -> onChange - callback for input fields on change\n *  -> setFieldValues - set all field values\n *  -> onSubmit - callback for submit button\n *\n * initValues, validators, fieldValues, fieldErrors, fieldStates are objects whose keys are equal to ids of inputs fields.\n * example: validators.projectUrl.isRequired\n */\nexport const useForm = (initValues, validators, callback) => {\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true); // has any field been changed?\n  // important for edit page (do not submit until any new content)\n\n  const [hasChanged, setHasChanged] = useState(false); // input values\n\n  const [fieldValues, setFieldValues] = useState(initValues); // input error messages\n\n  const [fieldErrors, setFieldErrors] = useState({}); // inpur validation functions\n\n  const [fieldValidators, setFieldValidators] = useState(validators);\n  let obj = {};\n  const initFieldStates = obj.copyAndSetValues(); // input states - 'default' | 'success' | 'error'\n\n  const [fieldStates, setFieldStates] = useState(initFieldStates);\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fieldValues]); // are all validated inputs valid?\n\n  const isFormValid = () => {\n    return !Object.keys(fieldErrors).length;\n  }; // are all required inputs filled?\n\n\n  const areRequiredFilled = () => {\n    for (const key in fieldValidators) {\n      if (fieldValidators[key].isRequired && !fieldValues[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // callback (on change of input)\n\n\n  const onChange = event => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n    setFieldValues({ ...fieldValues,\n      [fieldName]: fieldValue\n    });\n    validate(fieldName, fieldValue);\n    setHasChanged(true);\n  }; // validate field\n\n\n  const validate = (fieldName, fieldValue) => {\n    if (fieldValidators[fieldName]) {\n      const isRequired = fieldValidators[fieldName].isRequired;\n      const validator = fieldValidators[fieldName].validator;\n\n      if (isRequired) {\n        const error = fieldValue ? '' : 'Field must be filled!';\n        setError(fieldName, fieldValue, error);\n      } else if (validator) {\n        const error = validator(fieldValue);\n        setError(fieldName, fieldValue, error);\n      }\n    }\n  }; // set error message and state\n\n\n  const setError = (fieldName, fieldValue, error) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors,\n        [fieldName]: error\n      });\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'error'\n      });\n    } else {\n      // if no error, delete old error (if any)\n      const newErrors = { ...fieldErrors\n      };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors); // display success state only if not empty\n\n      if (fieldValue) {\n        setFieldStates({ ...fieldStates,\n          [fieldName]: 'success'\n        });\n      } else {\n        setFieldStates({ ...fieldStates,\n          [fieldName]: 'default'\n        });\n      }\n    }\n  }; // callback (on submit of form)\n\n\n  const onSubmit = () => {\n    callback(fieldValues); // reset state to 'default' (valid inputs wont be highlighted)\n\n    setFieldStates(initFieldStates);\n    setIsSubmitDisabled(true);\n  };\n\n  return {\n    fieldValues,\n    fieldErrors,\n    fieldStates,\n    isSubmitDisabled,\n    onChange,\n    setFieldValues,\n    onSubmit\n  };\n};","map":{"version":3,"names":["useEffect","useState","useForm","initValues","validators","callback","isSubmitDisabled","setIsSubmitDisabled","hasChanged","setHasChanged","fieldValues","setFieldValues","fieldErrors","setFieldErrors","fieldValidators","setFieldValidators","obj","initFieldStates","copyAndSetValues","fieldStates","setFieldStates","isFormValid","areRequiredFilled","Object","keys","length","key","isRequired","onChange","event","fieldName","currentTarget","name","fieldValue","value","validate","validator","error","setError","newErrors","onSubmit"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\ninterface IFieldValues {\n  [key: string]: string;\n}\n\ninterface IFieldErrors {\n  [key: string]: string | undefined;\n}\n\ninterface IFieldValidators {\n  [key: string]: IValidator;\n}\n\ninterface IValidator {\n  isRequired?: boolean;\n  validator?: Function;\n}\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Objects consisting of whether is input required and validation function\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> fieldValues - values of input fields\n *  -> fieldErrors - error messages of inout fields\n *  -> fieldStates - 'default' | 'success' | 'error'\n *  -> isSubmitDisabled - submit disabled or not\n *  -> onChange - callback for input fields on change\n *  -> setFieldValues - set all field values\n *  -> onSubmit - callback for submit button\n *\n * initValues, validators, fieldValues, fieldErrors, fieldStates are objects whose keys are equal to ids of inputs fields.\n * example: validators.projectUrl.isRequired\n */\nexport const useForm = (initValues: IFieldValues, validators: IFieldValidators, callback: Function) => {\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  // has any field been changed?\n  // important for edit page (do not submit until any new content)\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // input values\n  const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  // input error messages\n  const [fieldErrors, setFieldErrors] = useState<IFieldErrors>({});\n  // inpur validation functions\n  const [fieldValidators, setFieldValidators] = useState<IFieldValidators>(validators);\n\n  let obj = {};\n  const initFieldStates = obj.copyAndSetValues();\n  // input states - 'default' | 'success' | 'error'\n  const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fieldValues]);\n\n  // are all validated inputs valid?\n  const isFormValid = () => {\n    return !Object.keys(fieldErrors).length;\n  };\n\n  // are all required inputs filled?\n  const areRequiredFilled = () => {\n    for (const key in fieldValidators) {\n      if (fieldValidators[key].isRequired && !fieldValues[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  // callback (on change of input)\n  const onChange = (event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n\n    setFieldValues({ ...fieldValues, [fieldName]: fieldValue });\n    validate(fieldName, fieldValue);\n    setHasChanged(true);\n  };\n\n  // validate field\n  const validate = (fieldName: string, fieldValue: string) => {\n    if (fieldValidators[fieldName]) {\n      const isRequired = fieldValidators[fieldName].isRequired;\n      const validator = fieldValidators[fieldName].validator;\n      if (isRequired) {\n        const error = fieldValue ? '' : 'Field must be filled!';\n        setError(fieldName, fieldValue, error);\n      } else if (validator) {\n        const error = validator(fieldValue);\n        setError(fieldName, fieldValue, error);\n      }\n    }\n  };\n\n  // set error message and state\n  const setError = (fieldName: string, fieldValue: string, error: string) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors, [fieldName]: error });\n      setFieldStates({ ...fieldStates, [fieldName]: 'error' });\n    } else {\n      // if no error, delete old error (if any)\n      const newErrors = { ...fieldErrors };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      // display success state only if not empty\n      if (fieldValue) {\n        setFieldStates({ ...fieldStates, [fieldName]: 'success' });\n      } else {\n        setFieldStates({ ...fieldStates, [fieldName]: 'default' });\n      }\n    }\n  };\n\n  // callback (on submit of form)\n  const onSubmit = () => {\n    callback(fieldValues);\n    // reset state to 'default' (valid inputs wont be highlighted)\n    setFieldStates(initFieldStates);\n    setIsSubmitDisabled(true);\n  };\n\n  return { fieldValues, fieldErrors, fieldStates, isSubmitDisabled, onChange, setFieldValues, onSubmit };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}