{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SearchInput/search-input';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\n\nconst SearchInputBase = _a => {\n  var {\n    className,\n    value = '',\n    attributes = [],\n    formAdditionalItems,\n    hasWordsAttrLabel = 'Has words',\n    advancedSearchDelimiter,\n    placeholder,\n    hint,\n    onChange,\n    onSearch,\n    onClear,\n    onToggleAdvancedSearch,\n    isAdvancedSearchOpen,\n    resultsCount,\n    onNextClick,\n    onPreviousClick,\n    innerRef,\n    'aria-label': ariaLabel = 'Search input',\n    resetButtonLabel = 'Reset',\n    openMenuButtonAriaLabel = 'Open advanced search',\n    previousNavigationButtonAriaLabel = 'Previous',\n    isPreviousNavigationButtonDisabled = false,\n    isNextNavigationButtonDisabled = false,\n    nextNavigationButtonAriaLabel = 'Next',\n    submitSearchButtonLabel = 'Search',\n    isDisabled = false\n  } = _a,\n      props = __rest(_a, [\"className\", \"value\", \"attributes\", \"formAdditionalItems\", \"hasWordsAttrLabel\", \"advancedSearchDelimiter\", \"placeholder\", \"hint\", \"onChange\", \"onSearch\", \"onClear\", \"onToggleAdvancedSearch\", \"isAdvancedSearchOpen\", \"resultsCount\", \"onNextClick\", \"onPreviousClick\", \"innerRef\", 'aria-label', \"resetButtonLabel\", \"openMenuButtonAriaLabel\", \"previousNavigationButtonAriaLabel\", \"isPreviousNavigationButtonDisabled\", \"isNextNavigationButtonDisabled\", \"nextNavigationButtonAriaLabel\", \"submitSearchButtonLabel\", \"isDisabled\"]);\n\n  const [isSearchMenuOpen, setIsSearchMenuOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(value);\n  const searchInputRef = React.useRef(null);\n  const searchInputInputRef = innerRef || React.useRef(null);\n  React.useEffect(() => {\n    setSearchValue(value);\n  }, [value]);\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error('An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop');\n    }\n  });\n  React.useEffect(() => {\n    setIsSearchMenuOpen(isAdvancedSearchOpen);\n  }, [isAdvancedSearchOpen]);\n\n  const onChangeHandler = (value, event) => {\n    if (onChange) {\n      onChange(value, event);\n    }\n\n    setSearchValue(value);\n  };\n\n  const onToggle = e => {\n    const isOpen = !isSearchMenuOpen;\n    setIsSearchMenuOpen(isOpen);\n\n    if (onToggleAdvancedSearch) {\n      onToggleAdvancedSearch(e, isOpen);\n    }\n  };\n\n  const onSearchHandler = event => {\n    event.preventDefault();\n\n    if (onSearch) {\n      onSearch(value, event, getAttrValueMap());\n    }\n\n    setIsSearchMenuOpen(false);\n  };\n\n  const getAttrValueMap = () => {\n    const attrValue = {};\n    const pairs = searchValue.split(' ');\n    pairs.map(pair => {\n      const splitPair = pair.split(advancedSearchDelimiter);\n\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1];\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords') ? `${attrValue.haswords} ${splitPair[0]}` : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n\n  const onEnter = event => {\n    if (event.key === 'Enter') {\n      onSearchHandler(event);\n    }\n  };\n\n  const onClearInput = e => {\n    if (onClear) {\n      onClear(e);\n    }\n\n    if (searchInputInputRef && searchInputInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  };\n\n  const buildSearchTextInputGroup = function () {\n    let _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var searchInputProps = __rest(_a, []);\n\n    return React.createElement(TextInputGroup, Object.assign({\n      isDisabled: isDisabled\n    }, searchInputProps), React.createElement(TextInputGroupMain, {\n      hint: hint,\n      icon: React.createElement(SearchIcon, null),\n      innerRef: searchInputInputRef,\n      value: searchValue,\n      placeholder: placeholder,\n      \"aria-label\": ariaLabel,\n      onKeyDown: onEnter,\n      onChange: onChangeHandler\n    }), value && React.createElement(TextInputGroupUtilities, null, resultsCount && React.createElement(Badge, {\n      isRead: true\n    }, resultsCount), !!onNextClick && !!onPreviousClick && React.createElement(\"div\", {\n      className: \"pf-c-text-input-group__group\"\n    }, React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": previousNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isPreviousNavigationButtonDisabled,\n      onClick: onPreviousClick\n    }, React.createElement(AngleUpIcon, null)), React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      \"aria-label\": nextNavigationButtonAriaLabel,\n      isDisabled: isDisabled || isNextNavigationButtonDisabled,\n      onClick: onNextClick\n    }, React.createElement(AngleDownIcon, null))), !!onClear && React.createElement(Button, {\n      variant: ButtonVariant.plain,\n      isDisabled: isDisabled,\n      \"aria-label\": resetButtonLabel,\n      onClick: onClearInput\n    }, React.createElement(TimesIcon, null))));\n  };\n\n  const buildSearchTextInputGroupWithExtraButtons = function () {\n    let _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var searchInputProps = __rest(_a, []);\n\n    return React.createElement(InputGroup, Object.assign({}, searchInputProps), buildSearchTextInputGroup(), (attributes.length > 0 || onToggleAdvancedSearch) && React.createElement(Button, {\n      className: isSearchMenuOpen && 'pf-m-expanded',\n      variant: ButtonVariant.control,\n      \"aria-label\": openMenuButtonAriaLabel,\n      onClick: onToggle,\n      isDisabled: isDisabled,\n      \"aria-expanded\": isSearchMenuOpen\n    }, React.createElement(CaretDownIcon, null)), !!onSearch && React.createElement(Button, {\n      type: \"submit\",\n      variant: ButtonVariant.control,\n      \"aria-label\": submitSearchButtonLabel,\n      onClick: onSearchHandler,\n      isDisabled: isDisabled || !searchValue\n    }, React.createElement(ArrowRightIcon, null)));\n  };\n\n  const searchInputProps = Object.assign(Object.assign({}, props), {\n    className: className && css(className),\n    innerRef: searchInputRef\n  });\n\n  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n    if (attributes.length > 0) {\n      return React.createElement(\"div\", Object.assign({\n        className: css(className, styles.searchInput),\n        ref: searchInputRef\n      }, props), buildSearchTextInputGroupWithExtraButtons(), React.createElement(AdvancedSearchMenu, {\n        className: styles.searchInputMenu,\n        value: value,\n        parentRef: searchInputRef,\n        parentInputRef: searchInputInputRef,\n        onSearch: onSearch,\n        onClear: onClear,\n        onChange: onChange,\n        onToggleAdvancedMenu: onToggle,\n        resetButtonLabel: resetButtonLabel,\n        submitSearchButtonLabel: submitSearchButtonLabel,\n        attributes: attributes,\n        formAdditionalItems: formAdditionalItems,\n        hasWordsAttrLabel: hasWordsAttrLabel,\n        advancedSearchDelimiter: advancedSearchDelimiter,\n        getAttrValueMap: getAttrValueMap,\n        isSearchMenuOpen: isSearchMenuOpen\n      }));\n    }\n\n    return buildSearchTextInputGroupWithExtraButtons(Object.assign({}, searchInputProps));\n  }\n\n  return buildSearchTextInputGroup(searchInputProps);\n};\n\nSearchInputBase.displayName = 'SearchInputBase';\nexport const SearchInput = React.forwardRef((props, ref) => React.createElement(SearchInputBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nSearchInput.displayName = 'SearchInput';","map":{"version":3,"mappings":"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","names":["React","css","styles","Button","ButtonVariant","Badge","AngleDownIcon","AngleUpIcon","TimesIcon","SearchIcon","CaretDownIcon","ArrowRightIcon","AdvancedSearchMenu","TextInputGroup","TextInputGroupMain","TextInputGroupUtilities","InputGroup","SearchInputBase","_a","className","value","attributes","formAdditionalItems","hasWordsAttrLabel","advancedSearchDelimiter","placeholder","hint","onChange","onSearch","onClear","onToggleAdvancedSearch","isAdvancedSearchOpen","resultsCount","onNextClick","onPreviousClick","innerRef","ariaLabel","resetButtonLabel","openMenuButtonAriaLabel","previousNavigationButtonAriaLabel","isPreviousNavigationButtonDisabled","isNextNavigationButtonDisabled","nextNavigationButtonAriaLabel","submitSearchButtonLabel","isDisabled","props","isSearchMenuOpen","setIsSearchMenuOpen","useState","searchValue","setSearchValue","searchInputRef","useRef","searchInputInputRef","useEffect","length","console","error","onChangeHandler","event","onToggle","e","isOpen","onSearchHandler","preventDefault","getAttrValueMap","attrValue","pairs","split","map","pair","splitPair","haswords","hasOwnProperty","onEnter","key","onClearInput","current","focus","buildSearchTextInputGroup","searchInputProps","Object","icon","onKeyDown","isRead","variant","plain","onClick","buildSearchTextInputGroupWithExtraButtons","control","type","searchInput","ref","searchInputMenu","parentRef","parentInputRef","onToggleAdvancedMenu","displayName","SearchInput","forwardRef"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/SearchInput/SearchInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/SearchInput/search-input';\nimport { Button, ButtonVariant } from '../Button';\nimport { Badge } from '../Badge';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport ArrowRightIcon from '@patternfly/react-icons/dist/esm/icons/arrow-right-icon';\nimport { AdvancedSearchMenu } from './AdvancedSearchMenu';\nimport { TextInputGroup, TextInputGroupMain, TextInputGroupUtilities } from '../TextInputGroup';\nimport { InputGroup } from '../InputGroup';\n\nexport interface SearchAttribute {\n  /** The search attribute's value to be provided in the search input's query string.\n   * It should have no spaces and be unique for every attribute */\n  attr: string;\n  /** The search attribute's display name. It is used to label the field in the advanced search menu */\n  display: React.ReactNode;\n}\n\nexport interface SearchInputProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'results' | 'ref'> {\n  /** Additional classes added to the banner */\n  className?: string;\n  /** Value of the search input */\n  value?: string;\n  /** Flag indicating if search input is disabled */\n  isDisabled?: boolean;\n  /** An accessible label for the search input */\n  'aria-label'?: string;\n  /** placeholder text of the search input */\n  placeholder?: string;\n  /** @hide A reference object to attach to the input box */\n  innerRef?: React.RefObject<any>;\n  /** A callback for when the input value changes */\n  onChange?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** A suggestion for autocompleting */\n  hint?: string;\n\n  /** A callback for when the search button clicked changes */\n  onSearch?: (\n    value: string,\n    event: React.SyntheticEvent<HTMLButtonElement>,\n    attrValueMap: { [key: string]: string }\n  ) => void;\n  /** A callback for when the user clicks the clear button */\n  onClear?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Label for the buttons which reset the advanced search form and clear the search input */\n  resetButtonLabel?: string;\n  /** Label for the buttons which called the onSearch event handler */\n  submitSearchButtonLabel?: string;\n  /** A callback for when the open advanced search button is clicked */\n  onToggleAdvancedSearch?: (event: React.SyntheticEvent<HTMLButtonElement>, isOpen?: boolean) => void;\n  /** A flag for controlling the open state of a custom advanced search implementation */\n  isAdvancedSearchOpen?: boolean;\n  /** Label for the button which opens the advanced search form menu */\n  openMenuButtonAriaLabel?: string;\n  /** Label for the button to navigate to previous result  */\n  previousNavigationButtonAriaLabel?: string;\n  /** Flag indicating if the previous navigation button is disabled */\n  isPreviousNavigationButtonDisabled?: boolean;\n  /** Label for the button to navigate to next result */\n  nextNavigationButtonAriaLabel?: string;\n  /** Flag indicating if the next navigation button is disabled */\n  isNextNavigationButtonDisabled?: boolean;\n  /** Function called when user clicks to navigate to next result */\n  onNextClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Function called when user clicks to navigate to previous result */\n  onPreviousClick?: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** The number of search results returned. Either a total number of results,\n   * or a string representing the current result over the total number of results. i.e. \"1 / 5\" */\n  resultsCount?: number | string;\n\n  /** Array of attribute values used for dynamically generated advanced search */\n  attributes?: string[] | SearchAttribute[];\n  /* Additional elements added after the attributes in the form.\n   * The new form elements can be wrapped in a FormGroup component for automatic formatting */\n  formAdditionalItems?: React.ReactNode;\n  /** Attribute label for strings unassociated with one of the provided listed attributes */\n  hasWordsAttrLabel?: React.ReactNode;\n  /** Delimiter in the query string for pairing attributes with search values.\n   * Required whenever attributes are passed as props */\n  advancedSearchDelimiter?: string;\n}\n\nconst SearchInputBase: React.FunctionComponent<SearchInputProps> = ({\n  className,\n  value = '',\n  attributes = [] as string[],\n  formAdditionalItems,\n  hasWordsAttrLabel = 'Has words',\n  advancedSearchDelimiter,\n  placeholder,\n  hint,\n  onChange,\n  onSearch,\n  onClear,\n  onToggleAdvancedSearch,\n  isAdvancedSearchOpen,\n  resultsCount,\n  onNextClick,\n  onPreviousClick,\n  innerRef,\n  'aria-label': ariaLabel = 'Search input',\n  resetButtonLabel = 'Reset',\n  openMenuButtonAriaLabel = 'Open advanced search',\n  previousNavigationButtonAriaLabel = 'Previous',\n  isPreviousNavigationButtonDisabled = false,\n  isNextNavigationButtonDisabled = false,\n  nextNavigationButtonAriaLabel = 'Next',\n  submitSearchButtonLabel = 'Search',\n  isDisabled = false,\n  ...props\n}: SearchInputProps) => {\n  const [isSearchMenuOpen, setIsSearchMenuOpen] = React.useState(false);\n  const [searchValue, setSearchValue] = React.useState(value);\n  const searchInputRef = React.useRef(null);\n  const searchInputInputRef = innerRef || React.useRef(null);\n\n  React.useEffect(() => {\n    setSearchValue(value);\n  }, [value]);\n\n  React.useEffect(() => {\n    if (attributes.length > 0 && !advancedSearchDelimiter) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop'\n      );\n    }\n  });\n\n  React.useEffect(() => {\n    setIsSearchMenuOpen(isAdvancedSearchOpen);\n  }, [isAdvancedSearchOpen]);\n\n  const onChangeHandler = (value: string, event: React.FormEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(value, event);\n    }\n    setSearchValue(value);\n  };\n\n  const onToggle = (e: React.SyntheticEvent<HTMLButtonElement>) => {\n    const isOpen = !isSearchMenuOpen;\n    setIsSearchMenuOpen(isOpen);\n    if (onToggleAdvancedSearch) {\n      onToggleAdvancedSearch(e, isOpen);\n    }\n  };\n\n  const onSearchHandler = (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    if (onSearch) {\n      onSearch(value, event, getAttrValueMap());\n    }\n    setIsSearchMenuOpen(false);\n  };\n\n  const getAttrValueMap = () => {\n    const attrValue: { [key: string]: string } = {};\n    const pairs = searchValue.split(' ');\n    pairs.map(pair => {\n      const splitPair = pair.split(advancedSearchDelimiter);\n      if (splitPair.length === 2) {\n        attrValue[splitPair[0]] = splitPair[1];\n      } else if (splitPair.length === 1) {\n        attrValue.haswords = attrValue.hasOwnProperty('haswords')\n          ? `${attrValue.haswords} ${splitPair[0]}`\n          : splitPair[0];\n      }\n    });\n    return attrValue;\n  };\n\n  const onEnter = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Enter') {\n      onSearchHandler(event);\n    }\n  };\n\n  const onClearInput = (e: React.SyntheticEvent<HTMLButtonElement>) => {\n    if (onClear) {\n      onClear(e);\n    }\n    if (searchInputInputRef && searchInputInputRef.current) {\n      searchInputInputRef.current.focus();\n    }\n  };\n\n  const buildSearchTextInputGroup = ({ ...searchInputProps } = {}) => (\n    <TextInputGroup isDisabled={isDisabled} {...searchInputProps}>\n      <TextInputGroupMain\n        hint={hint}\n        icon={<SearchIcon />}\n        innerRef={searchInputInputRef}\n        value={searchValue}\n        placeholder={placeholder}\n        aria-label={ariaLabel}\n        onKeyDown={onEnter}\n        onChange={onChangeHandler}\n      />\n      {value && (\n        <TextInputGroupUtilities>\n          {resultsCount && <Badge isRead>{resultsCount}</Badge>}\n          {!!onNextClick && !!onPreviousClick && (\n            <div className=\"pf-c-text-input-group__group\">\n              <Button\n                variant={ButtonVariant.plain}\n                aria-label={previousNavigationButtonAriaLabel}\n                isDisabled={isDisabled || isPreviousNavigationButtonDisabled}\n                onClick={onPreviousClick}\n              >\n                <AngleUpIcon />\n              </Button>\n              <Button\n                variant={ButtonVariant.plain}\n                aria-label={nextNavigationButtonAriaLabel}\n                isDisabled={isDisabled || isNextNavigationButtonDisabled}\n                onClick={onNextClick}\n              >\n                <AngleDownIcon />\n              </Button>\n            </div>\n          )}\n          {!!onClear && (\n            <Button\n              variant={ButtonVariant.plain}\n              isDisabled={isDisabled}\n              aria-label={resetButtonLabel}\n              onClick={onClearInput}\n            >\n              <TimesIcon />\n            </Button>\n          )}\n        </TextInputGroupUtilities>\n      )}\n    </TextInputGroup>\n  );\n\n  const buildSearchTextInputGroupWithExtraButtons = ({ ...searchInputProps } = {}) => (\n    <InputGroup {...searchInputProps}>\n      {buildSearchTextInputGroup()}\n      {(attributes.length > 0 || onToggleAdvancedSearch) && (\n        <Button\n          className={isSearchMenuOpen && 'pf-m-expanded'}\n          variant={ButtonVariant.control}\n          aria-label={openMenuButtonAriaLabel}\n          onClick={onToggle}\n          isDisabled={isDisabled}\n          aria-expanded={isSearchMenuOpen}\n        >\n          <CaretDownIcon />\n        </Button>\n      )}\n      {!!onSearch && (\n        <Button\n          type=\"submit\"\n          variant={ButtonVariant.control}\n          aria-label={submitSearchButtonLabel}\n          onClick={onSearchHandler}\n          isDisabled={isDisabled || !searchValue}\n        >\n          <ArrowRightIcon />\n        </Button>\n      )}\n    </InputGroup>\n  );\n\n  const searchInputProps = {\n    ...props,\n    className: className && css(className),\n    innerRef: searchInputRef\n  };\n\n  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {\n    if (attributes.length > 0) {\n      return (\n        <div className={css(className, styles.searchInput)} ref={searchInputRef} {...props}>\n          {buildSearchTextInputGroupWithExtraButtons()}\n          <AdvancedSearchMenu\n            className={styles.searchInputMenu}\n            value={value}\n            parentRef={searchInputRef}\n            parentInputRef={searchInputInputRef}\n            onSearch={onSearch}\n            onClear={onClear}\n            onChange={onChange}\n            onToggleAdvancedMenu={onToggle}\n            resetButtonLabel={resetButtonLabel}\n            submitSearchButtonLabel={submitSearchButtonLabel}\n            attributes={attributes}\n            formAdditionalItems={formAdditionalItems}\n            hasWordsAttrLabel={hasWordsAttrLabel}\n            advancedSearchDelimiter={advancedSearchDelimiter}\n            getAttrValueMap={getAttrValueMap}\n            isSearchMenuOpen={isSearchMenuOpen}\n          />\n        </div>\n      );\n    }\n\n    return buildSearchTextInputGroupWithExtraButtons({ ...searchInputProps });\n  }\n  return buildSearchTextInputGroup(searchInputProps);\n};\nSearchInputBase.displayName = 'SearchInputBase';\n\nexport const SearchInput = React.forwardRef((props: SearchInputProps, ref: React.Ref<HTMLInputElement>) => (\n  <SearchInputBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nSearchInput.displayName = 'SearchInput';\n"]},"metadata":{},"sourceType":"module"}