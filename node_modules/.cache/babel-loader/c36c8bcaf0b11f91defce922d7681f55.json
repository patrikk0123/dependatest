{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\nexport var LoginForm = function LoginForm(_a) {\n  var _a$noAutoFocus = _a.noAutoFocus,\n      noAutoFocus = _a$noAutoFocus === void 0 ? false : _a$noAutoFocus,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$showHelperText = _a.showHelperText,\n      showHelperText = _a$showHelperText === void 0 ? false : _a$showHelperText,\n      _a$helperText = _a.helperText,\n      helperText = _a$helperText === void 0 ? null : _a$helperText,\n      _a$helperTextIcon = _a.helperTextIcon,\n      helperTextIcon = _a$helperTextIcon === void 0 ? null : _a$helperTextIcon,\n      _a$usernameLabel = _a.usernameLabel,\n      usernameLabel = _a$usernameLabel === void 0 ? 'Username' : _a$usernameLabel,\n      _a$usernameValue = _a.usernameValue,\n      usernameValue = _a$usernameValue === void 0 ? '' : _a$usernameValue,\n      _a$onChangeUsername = _a.onChangeUsername,\n      onChangeUsername = _a$onChangeUsername === void 0 ? function () {\n    return undefined;\n  } : _a$onChangeUsername,\n      _a$isValidUsername = _a.isValidUsername,\n      isValidUsername = _a$isValidUsername === void 0 ? true : _a$isValidUsername,\n      _a$passwordLabel = _a.passwordLabel,\n      passwordLabel = _a$passwordLabel === void 0 ? 'Password' : _a$passwordLabel,\n      _a$passwordValue = _a.passwordValue,\n      passwordValue = _a$passwordValue === void 0 ? '' : _a$passwordValue,\n      _a$onChangePassword = _a.onChangePassword,\n      onChangePassword = _a$onChangePassword === void 0 ? function () {\n    return undefined;\n  } : _a$onChangePassword,\n      _a$isShowPasswordEnab = _a.isShowPasswordEnabled,\n      isShowPasswordEnabled = _a$isShowPasswordEnab === void 0 ? false : _a$isShowPasswordEnab,\n      _a$hidePasswordAriaLa = _a.hidePasswordAriaLabel,\n      hidePasswordAriaLabel = _a$hidePasswordAriaLa === void 0 ? 'Hide password' : _a$hidePasswordAriaLa,\n      _a$showPasswordAriaLa = _a.showPasswordAriaLabel,\n      showPasswordAriaLabel = _a$showPasswordAriaLa === void 0 ? 'Show password' : _a$showPasswordAriaLa,\n      _a$isValidPassword = _a.isValidPassword,\n      isValidPassword = _a$isValidPassword === void 0 ? true : _a$isValidPassword,\n      _a$loginButtonLabel = _a.loginButtonLabel,\n      loginButtonLabel = _a$loginButtonLabel === void 0 ? 'Log In' : _a$loginButtonLabel,\n      _a$isLoginButtonDisab = _a.isLoginButtonDisabled,\n      isLoginButtonDisabled = _a$isLoginButtonDisab === void 0 ? false : _a$isLoginButtonDisab,\n      _a$onLoginButtonClick = _a.onLoginButtonClick,\n      onLoginButtonClick = _a$onLoginButtonClick === void 0 ? function () {\n    return undefined;\n  } : _a$onLoginButtonClick,\n      _a$rememberMeLabel = _a.rememberMeLabel,\n      rememberMeLabel = _a$rememberMeLabel === void 0 ? '' : _a$rememberMeLabel,\n      _a$isRememberMeChecke = _a.isRememberMeChecked,\n      isRememberMeChecked = _a$isRememberMeChecke === void 0 ? false : _a$isRememberMeChecke,\n      _a$onChangeRememberMe = _a.onChangeRememberMe,\n      onChangeRememberMe = _a$onChangeRememberMe === void 0 ? function () {\n    return undefined;\n  } : _a$onChangeRememberMe,\n      props = __rest(_a, [\"noAutoFocus\", \"className\", \"showHelperText\", \"helperText\", \"helperTextIcon\", \"usernameLabel\", \"usernameValue\", \"onChangeUsername\", \"isValidUsername\", \"passwordLabel\", \"passwordValue\", \"onChangePassword\", \"isShowPasswordEnabled\", \"hidePasswordAriaLabel\", \"showPasswordAriaLabel\", \"isValidPassword\", \"loginButtonLabel\", \"isLoginButtonDisabled\", \"onLoginButtonClick\", \"rememberMeLabel\", \"isRememberMeChecked\", \"onChangeRememberMe\"]);\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      passwordHidden = _React$useState2[0],\n      setPasswordHidden = _React$useState2[1];\n\n  var passwordInput = React.createElement(TextInput, {\n    isRequired: true,\n    type: passwordHidden ? 'password' : 'text',\n    id: \"pf-login-password-id\",\n    name: \"pf-login-password-id\",\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    value: passwordValue,\n    onChange: onChangePassword\n  });\n  return React.createElement(Form, Object.assign({\n    className: className\n  }, props), React.createElement(FormHelperText, {\n    isError: !isValidUsername || !isValidPassword,\n    isHidden: !showHelperText,\n    icon: helperTextIcon\n  }, helperText), React.createElement(FormGroup, {\n    label: usernameLabel,\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-username-id\"\n  }, React.createElement(TextInput, {\n    autoFocus: !noAutoFocus,\n    id: \"pf-login-username-id\",\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    type: \"text\",\n    name: \"pf-login-username-id\",\n    value: usernameValue,\n    onChange: onChangeUsername\n  })), React.createElement(FormGroup, {\n    label: passwordLabel,\n    isRequired: true,\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-password-id\"\n  }, isShowPasswordEnabled && React.createElement(InputGroup, null, passwordInput, React.createElement(Button, {\n    variant: \"control\",\n    onClick: function onClick() {\n      return setPasswordHidden(!passwordHidden);\n    },\n    \"aria-label\": passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel\n  }, passwordHidden ? React.createElement(EyeIcon, null) : React.createElement(EyeSlashIcon, null))), !isShowPasswordEnabled && passwordInput), rememberMeLabel.length > 0 && React.createElement(FormGroup, {\n    fieldId: \"pf-login-remember-me-id\"\n  }, React.createElement(Checkbox, {\n    id: \"pf-login-remember-me-id\",\n    label: rememberMeLabel,\n    isChecked: isRememberMeChecked,\n    onChange: onChangeRememberMe\n  })), React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onLoginButtonClick,\n    isBlock: true,\n    isDisabled: isLoginButtonDisabled\n  }, loginButtonLabel)));\n};\nLoginForm.displayName = 'LoginForm';","map":{"version":3,"mappings":"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","names":["React","Form","FormGroup","ActionGroup","FormHelperText","TextInput","Button","Checkbox","ValidatedOptions","InputGroup","EyeSlashIcon","EyeIcon","LoginForm","_a","noAutoFocus","className","showHelperText","helperText","helperTextIcon","usernameLabel","usernameValue","onChangeUsername","undefined","isValidUsername","passwordLabel","passwordValue","onChangePassword","isShowPasswordEnabled","hidePasswordAriaLabel","showPasswordAriaLabel","isValidPassword","loginButtonLabel","isLoginButtonDisabled","onLoginButtonClick","rememberMeLabel","isRememberMeChecked","onChangeRememberMe","props","__rest","useState","passwordHidden","setPasswordHidden","passwordInput","isRequired","type","id","name","validated","default","error","value","onChange","Object","isError","isHidden","icon","label","fieldId","autoFocus","variant","onClick","length","isChecked","isBlock","isDisabled","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/LoginPage/LoginForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\n\nexport interface LoginFormProps extends React.HTMLProps<HTMLFormElement> {\n  /** Flag to indicate if the first dropdown item should not gain initial focus */\n  noAutoFocus?: boolean;\n  /** Additional classes added to the Login Main Body's Form */\n  className?: string;\n  /** Flag indicating the Helper Text is visible * */\n  showHelperText?: boolean;\n  /** Content displayed in the Helper Text component * */\n  helperText?: React.ReactNode;\n  /** Icon displayed to the left in the Helper Text */\n  helperTextIcon?: React.ReactNode;\n  /** Label for the Username Input Field */\n  usernameLabel?: string;\n  /** Value for the Username */\n  usernameValue?: string;\n  /** Function that handles the onChange event for the Username */\n  onChangeUsername?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the Username is valid */\n  isValidUsername?: boolean;\n  /** Label for the Password Input Field */\n  passwordLabel?: string;\n  /** Value for the Password */\n  passwordValue?: string;\n  /** Function that handles the onChange event for the Password */\n  onChangePassword?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the Password is valid */\n  isValidPassword?: boolean;\n  /** Flag indicating if the user can toggle hiding the password */\n  isShowPasswordEnabled?: boolean;\n  /** Accessible label for the show password button */\n  showPasswordAriaLabel?: string;\n  /** Accessible label for the hide password button */\n  hidePasswordAriaLabel?: string;\n  /** Label for the Log in Button Input */\n  loginButtonLabel?: string;\n  /** Flag indicating if the Login Button is disabled */\n  isLoginButtonDisabled?: boolean;\n  /** Function that is called when the Login button is clicked */\n  onLoginButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** Label for the Remember Me Checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show. */\n  rememberMeLabel?: string;\n  /** Flag indicating if the remember me Checkbox is checked. */\n  isRememberMeChecked?: boolean;\n  /** Function that handles the onChange event for the Remember Me Checkbox */\n  onChangeRememberMe?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport const LoginForm: React.FunctionComponent<LoginFormProps> = ({\n  noAutoFocus = false,\n  className = '',\n  showHelperText = false,\n  helperText = null,\n  helperTextIcon = null,\n  usernameLabel = 'Username',\n  usernameValue = '',\n  onChangeUsername = () => undefined as any,\n  isValidUsername = true,\n  passwordLabel = 'Password',\n  passwordValue = '',\n  onChangePassword = () => undefined as any,\n  isShowPasswordEnabled = false,\n  hidePasswordAriaLabel = 'Hide password',\n  showPasswordAriaLabel = 'Show password',\n  isValidPassword = true,\n  loginButtonLabel = 'Log In',\n  isLoginButtonDisabled = false,\n  onLoginButtonClick = () => undefined as any,\n  rememberMeLabel = '',\n  isRememberMeChecked = false,\n  onChangeRememberMe = () => undefined as any,\n  ...props\n}: LoginFormProps) => {\n  const [passwordHidden, setPasswordHidden] = React.useState(true);\n\n  const passwordInput = (\n    <TextInput\n      isRequired\n      type={passwordHidden ? 'password' : 'text'}\n      id=\"pf-login-password-id\"\n      name=\"pf-login-password-id\"\n      validated={isValidPassword ? ValidatedOptions.default : ValidatedOptions.error}\n      value={passwordValue}\n      onChange={onChangePassword}\n    />\n  );\n\n  return (\n    <Form className={className} {...props}>\n      <FormHelperText isError={!isValidUsername || !isValidPassword} isHidden={!showHelperText} icon={helperTextIcon}>\n        {helperText}\n      </FormHelperText>\n      <FormGroup\n        label={usernameLabel}\n        isRequired\n        validated={isValidUsername ? ValidatedOptions.default : ValidatedOptions.error}\n        fieldId=\"pf-login-username-id\"\n      >\n        <TextInput\n          autoFocus={!noAutoFocus}\n          id=\"pf-login-username-id\"\n          isRequired\n          validated={isValidUsername ? ValidatedOptions.default : ValidatedOptions.error}\n          type=\"text\"\n          name=\"pf-login-username-id\"\n          value={usernameValue}\n          onChange={onChangeUsername}\n        />\n      </FormGroup>\n      <FormGroup\n        label={passwordLabel}\n        isRequired\n        validated={isValidPassword ? ValidatedOptions.default : ValidatedOptions.error}\n        fieldId=\"pf-login-password-id\"\n      >\n        {isShowPasswordEnabled && (\n          <InputGroup>\n            {passwordInput}\n            <Button\n              variant=\"control\"\n              onClick={() => setPasswordHidden(!passwordHidden)}\n              aria-label={passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel}\n            >\n              {passwordHidden ? <EyeIcon /> : <EyeSlashIcon />}\n            </Button>\n          </InputGroup>\n        )}\n        {!isShowPasswordEnabled && passwordInput}\n      </FormGroup>\n      {rememberMeLabel.length > 0 && (\n        <FormGroup fieldId=\"pf-login-remember-me-id\">\n          <Checkbox\n            id=\"pf-login-remember-me-id\"\n            label={rememberMeLabel}\n            isChecked={isRememberMeChecked}\n            onChange={onChangeRememberMe}\n          />\n        </FormGroup>\n      )}\n      <ActionGroup>\n        <Button variant=\"primary\" type=\"submit\" onClick={onLoginButtonClick} isBlock isDisabled={isLoginButtonDisabled}>\n          {loginButtonLabel}\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\nLoginForm.displayName = 'LoginForm';\n"]},"metadata":{},"sourceType":"module"}