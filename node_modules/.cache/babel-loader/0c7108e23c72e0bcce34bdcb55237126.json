{"ast":null,"code":"import * as WebConfigAPI from '../services/WebConfigService';\nimport { Keycloak } from '../services/keycloakHolder';\n\n/**\n * Enum with possible authentication roles in keycloak.\n *\n */\nexport let AUTH_ROLE;\n/**\n * Class managing authentication functionality.\n */\n\n(function (AUTH_ROLE) {\n  AUTH_ROLE[\"Admin\"] = \"admin\";\n  AUTH_ROLE[\"User\"] = \"user\";\n  AUTH_ROLE[\"System\"] = \"system-user\";\n  AUTH_ROLE[\"Power\"] = \"power-user\";\n})(AUTH_ROLE || (AUTH_ROLE = {}));\n\nclass KeycloakService {\n  //We can't get KeycloakInstance type because of dynamic loading of keycloak library\n  // Default: 24 Hours\n  constructor() {\n    this.keycloakAuth = void 0;\n    this.KEYCLOAK_TOKEN_MIN_EXP = 86400;\n    this.isKeycloakInitialized = void 0;\n    this.isKeycloakInitialized = this.init();\n  }\n  /**\n   * Initialize keycloak and create instance.\n   *\n   * @returns Promise\n   */\n\n\n  init() {\n    const keycloakConfig = WebConfigAPI.getWebConfig().keycloak;\n    console.log(keycloakConfig);\n\n    if (keycloakConfig) {\n      this.keycloakAuth = new Keycloak({\n        url: keycloakConfig.url,\n        realm: keycloakConfig.realm,\n        clientId: keycloakConfig.clientId\n      });\n      return new Promise((resolve, reject) => {\n        this.keycloakAuth.init({\n          onLoad: 'check-sso'\n        }).then(() => {\n          resolve('success');\n        }).catch(errorData => {\n          reject(errorData);\n        });\n      });\n    } else {\n      return Promise.reject('Keycloak library not available');\n    }\n  }\n  /**\n   * Returns promise of keycloak initialization.\n   *\n   * @returns Promise\n   */\n\n\n  isInitialized() {\n    return this.isKeycloakInitialized;\n  }\n  /**\n   * Returns if user is authenticated.\n   *\n   * @returns true if user is authenticated, otherwise returns false.\n   */\n\n\n  isAuthenticated() {\n    return this.keycloakAuth.authenticated;\n  }\n  /**\n   * Initiate login process in keycloak.\n   *\n   * @returns Promise\n   */\n\n\n  login() {\n    return this.keycloakAuth.login();\n  }\n  /**\n   * Initiate logout process in keycloak.\n   *\n   * @param redirectUri - uri to redirect after logout\n   */\n\n\n  logout(redirectUri) {\n    this.keycloakAuth.logout({\n      redirectUri\n    });\n  }\n  /**\n   * Gets keycloak token.\n   *\n   * @returns String with token if user is logged in or returns undefined when not.\n   */\n\n\n  getToken() {\n    this.updateToken().then(isTokenRefreshed => {\n      if (isTokenRefreshed) {\n        console.log('Token refreshed.');\n      } else {//console.log('Token not refreshed, valid for: \\n' + this.getTokenValidity()); //dev purpose, too much spam\n      }\n    }).catch(() => {\n      throw new Error('Failed to refresh token');\n    });\n    return this.keycloakAuth.token;\n  }\n\n  getTokenValidity() {\n    if (!this.keycloakAuth.tokenParsed) {\n      return 'Not authenticated';\n    }\n\n    let validity = 'Token Expires:\\t\\t' + new Date((this.keycloakAuth.tokenParsed.exp + this.keycloakAuth.timeSkew) * 1000).toLocaleString() + '\\n';\n    validity += 'Token Expires in:\\t' + Math.round(this.keycloakAuth.tokenParsed.exp + this.keycloakAuth.timeSkew - new Date().getTime() / 1000) + ' seconds\\n';\n\n    if (this.keycloakAuth.refreshTokenParsed) {\n      validity += 'Refresh Token Expires:\\t' + new Date((this.keycloakAuth.refreshTokenParsed.exp + this.keycloakAuth.timeSkew) * 1000).toLocaleString() + '\\n';\n      validity += 'Refresh Expires in:\\t' + Math.round(this.keycloakAuth.refreshTokenParsed.exp + this.keycloakAuth.timeSkew - new Date().getTime() / 1000) + ' seconds';\n    }\n\n    return validity;\n  }\n\n  isTokenExpired() {\n    return this.keycloakAuth.isTokenExpired(this.KEYCLOAK_TOKEN_MIN_EXP);\n  }\n\n  updateToken() {\n    return this.keycloakAuth.updateToken(this.KEYCLOAK_TOKEN_MIN_EXP);\n  }\n  /**\n   * Gets user name from keycloak.\n   *\n   * @returns String with username if user is logged in or returns undefined when not.\n   */\n\n\n  getUser() {\n    var _this$keycloakAuth$id;\n\n    return (_this$keycloakAuth$id = this.keycloakAuth.idTokenParsed) === null || _this$keycloakAuth$id === void 0 ? void 0 : _this$keycloakAuth$id.preferred_username;\n  }\n  /**\n   * Checks if user has required auth role.\n   *\n   * @param role AUTH_ROLE\n   * @returns true when user is logged in and has required role for access, otherwise return false.\n   */\n\n\n  hasRealmRole(role) {\n    return this.keycloakAuth.hasRealmRole(role);\n  }\n\n}\n/**\n * Instance of KeycloakService providing group of Keycloak related API operations.\n */\n\n\nexport const keycloakService = new KeycloakService();","map":{"version":3,"names":["WebConfigAPI","Keycloak","AUTH_ROLE","KeycloakService","constructor","keycloakAuth","KEYCLOAK_TOKEN_MIN_EXP","isKeycloakInitialized","init","keycloakConfig","getWebConfig","keycloak","console","log","url","realm","clientId","Promise","resolve","reject","onLoad","then","catch","errorData","isInitialized","isAuthenticated","authenticated","login","logout","redirectUri","getToken","updateToken","isTokenRefreshed","Error","token","getTokenValidity","tokenParsed","validity","Date","exp","timeSkew","toLocaleString","Math","round","getTime","refreshTokenParsed","isTokenExpired","getUser","idTokenParsed","preferred_username","hasRealmRole","role","keycloakService"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/services/keycloakService.ts"],"sourcesContent":["import * as WebConfigAPI from '../services/WebConfigService';\nimport { Keycloak } from '../services/keycloakHolder';\nimport { KeyTypes } from '@patternfly/react-core';\n/**\n * Enum with possible authentication roles in keycloak.\n *\n */\nexport enum AUTH_ROLE {\n  Admin = 'admin',\n  User = 'user',\n  System = 'system-user',\n  Power = 'power-user',\n}\n\n/**\n * Class managing authentication functionality.\n */\nclass KeycloakService {\n  //We can't get KeycloakInstance type because of dynamic loading of keycloak library\n  private keycloakAuth: any;\n\n  private KEYCLOAK_TOKEN_MIN_EXP = 86400; // Default: 24 Hours\n\n  private isKeycloakInitialized;\n\n  constructor() {\n    this.isKeycloakInitialized = this.init();\n  }\n\n  /**\n   * Initialize keycloak and create instance.\n   *\n   * @returns Promise\n   */\n  private init(): Promise<any> {\n    const keycloakConfig = WebConfigAPI.getWebConfig().keycloak;\n    console.log(keycloakConfig);\n\n    if (keycloakConfig) {\n      this.keycloakAuth = new Keycloak({\n        url: keycloakConfig.url,\n        realm: keycloakConfig.realm,\n        clientId: keycloakConfig.clientId,\n      });\n\n      return new Promise((resolve, reject) => {\n        this.keycloakAuth\n          .init({ onLoad: 'check-sso' })\n          .then(() => {\n            resolve('success');\n          })\n          .catch((errorData: any) => {\n            reject(errorData);\n          });\n      });\n    } else {\n      return Promise.reject('Keycloak library not available');\n    }\n  }\n  /**\n   * Returns promise of keycloak initialization.\n   *\n   * @returns Promise\n   */\n  public isInitialized(): Promise<any> {\n    return this.isKeycloakInitialized;\n  }\n  /**\n   * Returns if user is authenticated.\n   *\n   * @returns true if user is authenticated, otherwise returns false.\n   */\n  public isAuthenticated(): boolean {\n    return this.keycloakAuth.authenticated!;\n  }\n\n  /**\n   * Initiate login process in keycloak.\n   *\n   * @returns Promise\n   */\n  public login(): Promise<any> {\n    return this.keycloakAuth.login();\n  }\n\n  /**\n   * Initiate logout process in keycloak.\n   *\n   * @param redirectUri - uri to redirect after logout\n   */\n  public logout(redirectUri?: String): void {\n    this.keycloakAuth.logout({ redirectUri });\n  }\n\n  /**\n   * Gets keycloak token.\n   *\n   * @returns String with token if user is logged in or returns undefined when not.\n   */\n  public getToken(): String {\n    this.updateToken()\n      .then((isTokenRefreshed: boolean) => {\n        if (isTokenRefreshed) {\n          console.log('Token refreshed.');\n        } else {\n          //console.log('Token not refreshed, valid for: \\n' + this.getTokenValidity()); //dev purpose, too much spam\n        }\n      })\n      .catch(() => {\n        throw new Error('Failed to refresh token');\n      });\n\n    return this.keycloakAuth.token;\n  }\n\n  public getTokenValidity(): String {\n    if (!this.keycloakAuth.tokenParsed) {\n      return 'Not authenticated';\n    }\n\n    let validity =\n      'Token Expires:\\t\\t' +\n      new Date((this.keycloakAuth.tokenParsed.exp + this.keycloakAuth.timeSkew) * 1000).toLocaleString() +\n      '\\n';\n    validity +=\n      'Token Expires in:\\t' +\n      Math.round(this.keycloakAuth.tokenParsed.exp + this.keycloakAuth.timeSkew - new Date().getTime() / 1000) +\n      ' seconds\\n';\n\n    if (this.keycloakAuth.refreshTokenParsed) {\n      validity +=\n        'Refresh Token Expires:\\t' +\n        new Date((this.keycloakAuth.refreshTokenParsed.exp + this.keycloakAuth.timeSkew) * 1000).toLocaleString() +\n        '\\n';\n      validity +=\n        'Refresh Expires in:\\t' +\n        Math.round(this.keycloakAuth.refreshTokenParsed.exp + this.keycloakAuth.timeSkew - new Date().getTime() / 1000) +\n        ' seconds';\n    }\n\n    return validity;\n  }\n\n  public isTokenExpired(): boolean {\n    return this.keycloakAuth.isTokenExpired(this.KEYCLOAK_TOKEN_MIN_EXP);\n  }\n\n  public updateToken(): Promise<boolean> {\n    return this.keycloakAuth.updateToken(this.KEYCLOAK_TOKEN_MIN_EXP);\n  }\n\n  /**\n   * Gets user name from keycloak.\n   *\n   * @returns String with username if user is logged in or returns undefined when not.\n   */\n  public getUser(): String {\n    return this.keycloakAuth.idTokenParsed?.preferred_username;\n  }\n\n  /**\n   * Checks if user has required auth role.\n   *\n   * @param role AUTH_ROLE\n   * @returns true when user is logged in and has required role for access, otherwise return false.\n   */\n  public hasRealmRole(role: AUTH_ROLE): boolean {\n    return this.keycloakAuth.hasRealmRole(role);\n  }\n}\n/**\n * Instance of KeycloakService providing group of Keycloak related API operations.\n */\nexport const keycloakService = new KeycloakService();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}