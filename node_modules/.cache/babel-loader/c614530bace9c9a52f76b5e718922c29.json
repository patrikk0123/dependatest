{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/BuildStatusIcon/BuildStatusIcon.tsx\";\nimport { Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon, OutlinedClockIcon } from '@patternfly/react-icons';\nimport { isBuild } from 'utils/entityRecognition';\nimport styles from './BuildStatusIcon.module.css';\nimport iconBlue from './icons/blue.svg';\nimport iconError from './icons/error.svg';\nimport iconGreen from './icons/green.svg';\nimport iconGrey from './icons/grey.svg';\nimport iconNoBuilds from './icons/no-builds.svg';\nimport iconOrange from './icons/orange.svg';\nimport iconRed from './icons/red.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst iconData = {\n  SUCCESS: {\n    tooltip: 'Build completed successfully',\n    icon: iconGreen\n  },\n  FAILED: {\n    tooltip: 'Build Failed',\n    icon: iconRed\n  },\n  NO_REBUILD_REQUIRED: {\n    tooltip: 'No rebuild required',\n    icon: iconGreen,\n    className: 'added-opacity'\n  },\n  ENQUEUED: {\n    tooltip: 'Enqueued',\n    icon: iconBlue\n  },\n  WAITING_FOR_DEPENDENCIES: {\n    tooltip: 'Waiting for dependencies',\n    icon: iconBlue\n  },\n  BUILDING: {\n    tooltip: 'Build in progress',\n    icon: iconBlue,\n    className: 'animate-flicker'\n  },\n  REJECTED: {\n    tooltip: 'Build rejected',\n    icon: iconRed\n  },\n  REJECTED_FAILED_DEPENDENCIES: {\n    tooltip: 'Build rejected: dependencies failed',\n    icon: iconOrange\n  },\n  CANCELLED: {\n    tooltip: 'Build cancelled',\n    icon: iconGrey\n  },\n  SYSTEM_ERROR: {\n    tooltip: 'A system error occurred',\n    icon: iconError\n  },\n  NEW: {\n    tooltip: 'New',\n    icon: iconGrey\n  },\n  UNKNOWN: {\n    tooltip: 'Unknown build status',\n    icon: iconNoBuilds\n  }\n};\nconst alignmentData = {\n  PREFER_TEMPORARY: {\n    tooltip: `Test build, which cannot be used for product release and which will be garbage collected during automatic cleaning. \n    Latest temporary dependencies' versions were preferred in alignment.`,\n    className: 'icon-color-info'\n  },\n  PREFER_PERSISTENT: {\n    tooltip: `Test build, which cannot be used for product release and which will be garbage collected during automatic cleaning. \n    Latest persistent dependencies' versions were preferred in alignment.`,\n    className: 'icon-color-warning'\n  },\n  NOT_SPECIFIED: {\n    tooltip: `Test build, which cannot be used for product release and which will be garbage collected during automatic\n    cleaning. Alignment Preference was not defined.`,\n    className: 'icon-color-info'\n  }\n};\n\n/**\n * Represents a component for displaying the status of a build/groupBuild in form of an icon.\n * There are two versions: short (default) and long.\n *\n * Long version additionally also includes the status in the text format next to the icon.\n *\n * @param build - Build or GroupBuild\n * @param long - Whether the component should be of the long version\n */\nexport const BuildStatusIcon = _ref => {\n  var _attributes, _attributes2;\n\n  let {\n    build,\n    long\n  } = _ref;\n  const selectedIconData = build.status ? iconData[build.status] : iconData.UNKNOWN;\n  const selectedIconImage = selectedIconData.icon;\n  const isCorrupted = isBuild(build) && (((_attributes = build.attributes) === null || _attributes === void 0 ? void 0 : _attributes.POST_BUILD_REPO_VALIDATION) === 'REPO_SYSTEM_ERROR' || ((_attributes2 = build.attributes) === null || _attributes2 === void 0 ? void 0 : _attributes2.PNC_SYSTEM_ERROR) === 'DISABLED_FIREWALL');\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: styles['build-status-icon'],\n    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: selectedIconData.tooltip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: selectedIconImage,\n        width: \"28px\",\n        height: \"28px\",\n        className: selectedIconData.className && styles[selectedIconData.className],\n        alt: selectedIconData.tooltip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), isCorrupted && /*#__PURE__*/_jsxDEV(Tooltip, {\n      position: \"right\",\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"The build may have completed successfully but has since been corrupted by a system error.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 20\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(ExclamationTriangleIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), build.temporaryBuild && /*#__PURE__*/_jsxDEV(Tooltip, {\n      position: \"right\",\n      content: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: alignmentData[build.alignmentPreference || 'NOT_SPECIFIED'].tooltip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 44\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(OutlinedClockIcon, {\n        className: styles[alignmentData[build.alignmentPreference || 'NOT_SPECIFIED'].className]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), long && build.status]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Tooltip","ExclamationTriangleIcon","OutlinedClockIcon","isBuild","styles","iconBlue","iconError","iconGreen","iconGrey","iconNoBuilds","iconOrange","iconRed","iconData","SUCCESS","tooltip","icon","FAILED","NO_REBUILD_REQUIRED","className","ENQUEUED","WAITING_FOR_DEPENDENCIES","BUILDING","REJECTED","REJECTED_FAILED_DEPENDENCIES","CANCELLED","SYSTEM_ERROR","NEW","UNKNOWN","alignmentData","PREFER_TEMPORARY","PREFER_PERSISTENT","NOT_SPECIFIED","BuildStatusIcon","build","long","selectedIconData","status","selectedIconImage","isCorrupted","attributes","POST_BUILD_REPO_VALIDATION","PNC_SYSTEM_ERROR","temporaryBuild","alignmentPreference"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/BuildStatusIcon/BuildStatusIcon.tsx"],"sourcesContent":["import { Tooltip } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon, OutlinedClockIcon } from '@patternfly/react-icons';\n\nimport { Build, GroupBuild } from 'pnc-api-types-ts';\n\nimport { isBuild } from 'utils/entityRecognition';\n\nimport styles from './BuildStatusIcon.module.css';\nimport iconBlue from './icons/blue.svg';\nimport iconError from './icons/error.svg';\nimport iconGreen from './icons/green.svg';\nimport iconGrey from './icons/grey.svg';\nimport iconNoBuilds from './icons/no-builds.svg';\nimport iconOrange from './icons/orange.svg';\nimport iconRed from './icons/red.svg';\n\nconst iconData: { [buildStatus: string]: { tooltip: string; icon: any; className?: string } } = {\n  SUCCESS: {\n    tooltip: 'Build completed successfully',\n    icon: iconGreen,\n  },\n  FAILED: {\n    tooltip: 'Build Failed',\n    icon: iconRed,\n  },\n  NO_REBUILD_REQUIRED: {\n    tooltip: 'No rebuild required',\n    icon: iconGreen,\n    className: 'added-opacity',\n  },\n  ENQUEUED: {\n    tooltip: 'Enqueued',\n    icon: iconBlue,\n  },\n  WAITING_FOR_DEPENDENCIES: {\n    tooltip: 'Waiting for dependencies',\n    icon: iconBlue,\n  },\n  BUILDING: {\n    tooltip: 'Build in progress',\n    icon: iconBlue,\n    className: 'animate-flicker',\n  },\n  REJECTED: {\n    tooltip: 'Build rejected',\n    icon: iconRed,\n  },\n  REJECTED_FAILED_DEPENDENCIES: {\n    tooltip: 'Build rejected: dependencies failed',\n    icon: iconOrange,\n  },\n  CANCELLED: {\n    tooltip: 'Build cancelled',\n    icon: iconGrey,\n  },\n  SYSTEM_ERROR: {\n    tooltip: 'A system error occurred',\n    icon: iconError,\n  },\n  NEW: {\n    tooltip: 'New',\n    icon: iconGrey,\n  },\n  UNKNOWN: {\n    tooltip: 'Unknown build status',\n    icon: iconNoBuilds,\n  },\n};\n\nconst alignmentData = {\n  PREFER_TEMPORARY: {\n    tooltip: `Test build, which cannot be used for product release and which will be garbage collected during automatic cleaning. \n    Latest temporary dependencies' versions were preferred in alignment.`,\n    className: 'icon-color-info',\n  },\n  PREFER_PERSISTENT: {\n    tooltip: `Test build, which cannot be used for product release and which will be garbage collected during automatic cleaning. \n    Latest persistent dependencies' versions were preferred in alignment.`,\n    className: 'icon-color-warning',\n  },\n  NOT_SPECIFIED: {\n    tooltip: `Test build, which cannot be used for product release and which will be garbage collected during automatic\n    cleaning. Alignment Preference was not defined.`,\n    className: 'icon-color-info',\n  },\n};\n\ninterface IBuildStatusIcon {\n  build: Build | GroupBuild;\n  long?: boolean;\n}\n\n/**\n * Represents a component for displaying the status of a build/groupBuild in form of an icon.\n * There are two versions: short (default) and long.\n *\n * Long version additionally also includes the status in the text format next to the icon.\n *\n * @param build - Build or GroupBuild\n * @param long - Whether the component should be of the long version\n */\nexport const BuildStatusIcon = ({ build, long }: IBuildStatusIcon) => {\n  const selectedIconData = build.status ? iconData[build.status] : iconData.UNKNOWN;\n  const selectedIconImage = selectedIconData.icon;\n  const isCorrupted =\n    isBuild(build) &&\n    ((build as Build).attributes?.POST_BUILD_REPO_VALIDATION === 'REPO_SYSTEM_ERROR' ||\n      (build as Build).attributes?.PNC_SYSTEM_ERROR === 'DISABLED_FIREWALL');\n\n  return (\n    <span className={styles['build-status-icon']}>\n      <Tooltip content={<div>{selectedIconData.tooltip}</div>}>\n        <img\n          src={selectedIconImage}\n          width=\"28px\"\n          height=\"28px\"\n          className={selectedIconData.className && styles[selectedIconData.className]}\n          alt={selectedIconData.tooltip}\n        />\n      </Tooltip>\n      {isCorrupted && (\n        <Tooltip\n          position=\"right\"\n          content={<div>The build may have completed successfully but has since been corrupted by a system error.</div>}\n        >\n          <ExclamationTriangleIcon />\n        </Tooltip>\n      )}\n      {build.temporaryBuild && (\n        <Tooltip position=\"right\" content={<div>{alignmentData[build.alignmentPreference || 'NOT_SPECIFIED'].tooltip}</div>}>\n          <OutlinedClockIcon className={styles[alignmentData[build.alignmentPreference || 'NOT_SPECIFIED'].className]} />\n        </Tooltip>\n      )}\n      {long && build.status}\n    </span>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}