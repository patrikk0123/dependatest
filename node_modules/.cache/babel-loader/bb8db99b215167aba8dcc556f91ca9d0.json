{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nexport class ToolbarExpandableContent extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      className,\n      expandableContentRef,\n      chipContainerRef,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isExpanded,\n      clearAllFilters,\n      clearFiltersButtonText,\n      showClearFiltersButton\n    } = _a,\n          props = __rest(_a, [\"className\", \"expandableContentRef\", \"chipContainerRef\", \"isExpanded\", \"clearAllFilters\", \"clearFiltersButtonText\", \"showClearFiltersButton\"]);\n\n    const {\n      numberOfFilters,\n      customChipGroupContent\n    } = this.context;\n\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n\n    return React.createElement(\"div\", Object.assign({\n      className: css(styles.toolbarExpandableContent, className),\n      ref: expandableContentRef\n    }, props), React.createElement(ToolbarGroup, null), numberOfFilters > 0 && React.createElement(ToolbarGroup, {\n      className: styles.modifiers.chipContainer\n    }, React.createElement(ToolbarGroup, {\n      ref: chipContainerRef\n    }), showClearFiltersButton && !customChipGroupContent && React.createElement(ToolbarItem, null, React.createElement(Button, {\n      variant: \"link\",\n      onClick: clearChipGroups,\n      isInline: true\n    }, clearFiltersButtonText)), customChipGroupContent && customChipGroupContent));\n  }\n\n}\nToolbarExpandableContent.displayName = 'ToolbarExpandableContent';\nToolbarExpandableContent.contextType = ToolbarContext;\nToolbarExpandableContent.defaultProps = {\n  isExpanded: false,\n  clearFiltersButtonText: 'Clear all filters'\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,yDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAGA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AAoBA,OAAM,MAAOC,wBAAP,SAAwCP,KAAK,CAACQ,SAA9C,CAAsF;EAS1FC,MAAM;IACJ,MAAMC,KAUF,KAAKC,KAVT;IAAA,MAAM;MACJC,SADI;MAEJC,oBAFI;MAGJC,gBAHI;MAIJ;MACAC,UALI;MAMJC,eANI;MAOJC,sBAPI;MAQJC;IARI,IAQkBR,EARxB;IAAA,MASKC,KAAK,cATJ,8IASI,CATV;;IAWA,MAAM;MAAEQ,eAAF;MAAmBC;IAAnB,IAA8C,KAAKC,OAAzD;;IAEA,MAAMC,eAAe,GAAG,MAAK;MAC3BN,eAAe;IAChB,CAFD;;IAIA,OACEhB;MAAKY,SAAS,EAAEV,GAAG,CAACD,MAAM,CAACsB,wBAAR,EAAkCX,SAAlC,CAAnB;MAAiEY,GAAG,EAAEX;IAAtE,GAAgGF,KAAhG,GACEX,oBAACG,YAAD,EAAa,IAAb,CADF,EAEGgB,eAAe,GAAG,CAAlB,IACCnB,oBAACG,YAAD,EAAa;MAACS,SAAS,EAAEX,MAAM,CAACwB,SAAP,CAAiBC;IAA7B,CAAb,EACE1B,oBAACG,YAAD,EAAa;MAACqB,GAAG,EAAEV;IAAN,CAAb,CADF,EAEGI,sBAAsB,IAAI,CAACE,sBAA3B,IACCpB,oBAACI,WAAD,EAAY,IAAZ,EACEJ,oBAACK,MAAD,EAAO;MAACsB,OAAO,EAAC,MAAT;MAAgBC,OAAO,EAAEN,eAAzB;MAA0CO,QAAQ;IAAlD,CAAP,EACGZ,sBADH,CADF,CAHJ,EASGG,sBAAsB,IAAIA,sBAT7B,CAHJ,CADF;EAkBD;;AA7CyF;AACnFb,uCAAc,0BAAd;AACAA,uCAAcD,cAAd;AAEAC,wCAA4D;EACjEQ,UAAU,EAAE,KADqD;EAEjEE,sBAAsB,EAAE;AAFyC,CAA5D","names":["React","styles","css","ToolbarGroup","ToolbarItem","Button","ToolbarContext","ToolbarExpandableContent","Component","render","_a","props","className","expandableContentRef","chipContainerRef","isExpanded","clearAllFilters","clearFiltersButtonText","showClearFiltersButton","numberOfFilters","customChipGroupContent","context","clearChipGroups","toolbarExpandableContent","ref","modifiers","chipContainer","variant","onClick","isInline"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarExpandableContent.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { css } from '@patternfly/react-styles';\n\nimport { RefObject } from 'react';\nimport { ToolbarGroup } from './ToolbarGroup';\nimport { ToolbarItem } from './ToolbarItem';\nimport { Button } from '../Button';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarExpandableContentProps extends React.HTMLProps<HTMLDivElement> {\n  /** Classes added to the root element of the data toolbar expandable content */\n  className?: string;\n  /** Flag indicating the expandable content is expanded */\n  isExpanded?: boolean;\n  /** Expandable content reference for passing to data toolbar children */\n  expandableContentRef?: RefObject<HTMLDivElement>;\n  /** Chip container reference for passing to data toolbar children */\n  chipContainerRef?: RefObject<any>;\n  /** optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Flag indicating that the clear all filters button should be visible */\n  showClearFiltersButton: boolean;\n}\n\nexport class ToolbarExpandableContent extends React.Component<ToolbarExpandableContentProps> {\n  static displayName = 'ToolbarExpandableContent';\n  static contextType = ToolbarContext;\n  context!: React.ContextType<typeof ToolbarContext>;\n  static defaultProps: PickOptional<ToolbarExpandableContentProps> = {\n    isExpanded: false,\n    clearFiltersButtonText: 'Clear all filters'\n  };\n\n  render() {\n    const {\n      className,\n      expandableContentRef,\n      chipContainerRef,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isExpanded,\n      clearAllFilters,\n      clearFiltersButtonText,\n      showClearFiltersButton,\n      ...props\n    } = this.props;\n    const { numberOfFilters, customChipGroupContent } = this.context;\n\n    const clearChipGroups = () => {\n      clearAllFilters();\n    };\n\n    return (\n      <div className={css(styles.toolbarExpandableContent, className)} ref={expandableContentRef} {...props}>\n        <ToolbarGroup />\n        {numberOfFilters > 0 && (\n          <ToolbarGroup className={styles.modifiers.chipContainer}>\n            <ToolbarGroup ref={chipContainerRef} />\n            {showClearFiltersButton && !customChipGroupContent && (\n              <ToolbarItem>\n                <Button variant=\"link\" onClick={clearChipGroups} isInline>\n                  {clearFiltersButtonText}\n                </Button>\n              </ToolbarItem>\n            )}\n            {customChipGroupContent && customChipGroupContent}\n          </ToolbarGroup>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}