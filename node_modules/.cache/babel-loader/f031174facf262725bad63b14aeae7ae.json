{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport var CardContext = React.createContext({\n  cardId: '',\n  registerTitleId: function registerTitleId() {},\n  isExpanded: false\n});\nexport var Card = function Card(_a) {\n  var _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$id = _a.id,\n      id = _a$id === void 0 ? '' : _a$id,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'article' : _a$component,\n      _a$isHoverable = _a.isHoverable,\n      isHoverable = _a$isHoverable === void 0 ? false : _a$isHoverable,\n      _a$isCompact = _a.isCompact,\n      isCompact = _a$isCompact === void 0 ? false : _a$isCompact,\n      _a$isSelectable = _a.isSelectable,\n      isSelectable = _a$isSelectable === void 0 ? false : _a$isSelectable,\n      _a$isSelectableRaised = _a.isSelectableRaised,\n      isSelectableRaised = _a$isSelectableRaised === void 0 ? false : _a$isSelectableRaised,\n      _a$isSelected = _a.isSelected,\n      isSelected = _a$isSelected === void 0 ? false : _a$isSelected,\n      _a$isDisabledRaised = _a.isDisabledRaised,\n      isDisabledRaised = _a$isDisabledRaised === void 0 ? false : _a$isDisabledRaised,\n      _a$isFlat = _a.isFlat,\n      isFlat = _a$isFlat === void 0 ? false : _a$isFlat,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      _a$isRounded = _a.isRounded,\n      isRounded = _a$isRounded === void 0 ? false : _a$isRounded,\n      _a$isLarge = _a.isLarge,\n      isLarge = _a$isLarge === void 0 ? false : _a$isLarge,\n      _a$isFullHeight = _a.isFullHeight,\n      isFullHeight = _a$isFullHeight === void 0 ? false : _a$isFullHeight,\n      _a$isPlain = _a.isPlain,\n      isPlain = _a$isPlain === void 0 ? false : _a$isPlain,\n      ouiaId = _a.ouiaId,\n      _a$ouiaSafe = _a.ouiaSafe,\n      ouiaSafe = _a$ouiaSafe === void 0 ? true : _a$ouiaSafe,\n      _a$hasSelectableInput = _a.hasSelectableInput,\n      hasSelectableInput = _a$hasSelectableInput === void 0 ? false : _a$hasSelectableInput,\n      selectableInputAriaLabel = _a.selectableInputAriaLabel,\n      _a$onSelectableInputC = _a.onSelectableInputChange,\n      onSelectableInputChange = _a$onSelectableInputC === void 0 ? function () {} : _a$onSelectableInputC,\n      props = __rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\", \"hasSelectableInput\", \"selectableInputAriaLabel\", \"onSelectableInputChange\"]);\n\n  var Component = component;\n  var ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      titleId = _React$useState2[0],\n      setTitleId = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      ariaProps = _React$useState4[0],\n      setAriaProps = _React$useState4[1];\n\n  if (isCompact && isLarge) {\n    // eslint-disable-next-line no-console\n    console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n    isLarge = false;\n  }\n\n  var getSelectableModifiers = function getSelectableModifiers() {\n    if (isDisabledRaised) {\n      return css(styles.modifiers.nonSelectableRaised);\n    }\n\n    if (isSelectableRaised) {\n      return css(styles.modifiers.selectableRaised, isSelected && styles.modifiers.selectedRaised);\n    }\n\n    if (isSelectable || isHoverable) {\n      return css(styles.modifiers.selectable, isSelected && styles.modifiers.selected);\n    }\n\n    return '';\n  };\n\n  var containsCardTitleChildRef = React.useRef(false);\n\n  var registerTitleId = function registerTitleId(id) {\n    setTitleId(id);\n    containsCardTitleChildRef.current = !!id;\n  };\n\n  React.useEffect(function () {\n    if (selectableInputAriaLabel) {\n      setAriaProps({\n        'aria-label': selectableInputAriaLabel\n      });\n    } else if (titleId) {\n      setAriaProps({\n        'aria-labelledby': titleId\n      });\n    } else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n      setAriaProps({}); // eslint-disable-next-line no-console\n\n      console.warn('If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed');\n    }\n  }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n  return React.createElement(CardContext.Provider, {\n    value: {\n      cardId: id,\n      registerTitleId: registerTitleId,\n      isExpanded: isExpanded\n    }\n  }, hasSelectableInput && React.createElement(\"input\", Object.assign({\n    className: \"pf-screen-reader\",\n    id: \"\".concat(id, \"-input\")\n  }, ariaProps, {\n    type: \"checkbox\",\n    checked: isSelected,\n    onChange: function onChange(event) {\n      return onSelectableInputChange(id, event);\n    },\n    disabled: isDisabledRaised,\n    tabIndex: -1\n  })), React.createElement(Component, Object.assign({\n    id: id,\n    className: css(styles.card, isCompact && styles.modifiers.compact, isExpanded && styles.modifiers.expanded, isFlat && styles.modifiers.flat, isRounded && styles.modifiers.rounded, isLarge && styles.modifiers.displayLg, isFullHeight && styles.modifiers.fullHeight, isPlain && styles.modifiers.plain, getSelectableModifiers(), className),\n    tabIndex: isSelectable || isSelectableRaised ? '0' : undefined\n  }, props, ouiaProps), children));\n};\nCard.displayName = 'Card';","map":{"version":3,"mappings":"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","names":["React","styles","css","useOUIAProps","CardContext","createContext","cardId","registerTitleId","isExpanded","Card","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","hasSelectableInput","selectableInputAriaLabel","onSelectableInputChange","props","__rest","Component","ouiaProps","displayName","useState","titleId","setTitleId","ariaProps","setAriaProps","console","warn","getSelectableModifiers","modifiers","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","containsCardTitleChildRef","useRef","current","useEffect","Provider","value","type","checked","onChange","event","disabled","tabIndex","Object","card","compact","expanded","flat","rounded","displayLg","fullHeight","plain","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Card/Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface CardProps extends React.HTMLProps<HTMLElement>, OUIAProps {\n  /** Content rendered inside the Card */\n  children?: React.ReactNode;\n  /** ID of the Card. Also passed back in the CardHeader onExpand callback. */\n  id?: string;\n  /** Additional classes added to the Card */\n  className?: string;\n  /** Sets the base component to render. defaults to article */\n  component?: keyof JSX.IntrinsicElements;\n  /** @deprecated to make a card hoverable, use isSelectable or isSelectableRaised. */\n  isHoverable?: boolean;\n  /** Modifies the card to include compact styling. Should not be used with isLarge. */\n  isCompact?: boolean;\n  /** Modifies the card to include selectable styling */\n  isSelectable?: boolean;\n  /** @beta Specifies the card is selectable, and applies the new raised styling on hover and select */\n  isSelectableRaised?: boolean;\n  /** Modifies the card to include selected styling */\n  isSelected?: boolean;\n  /** @beta Modifies a raised selectable card to have disabled styling */\n  isDisabledRaised?: boolean;\n  /** Modifies the card to include flat styling */\n  isFlat?: boolean;\n  /** Modifies the card to include rounded styling */\n  isRounded?: boolean;\n  /** Modifies the card to be large. Should not be used with isCompact. */\n  isLarge?: boolean;\n  /** Cause component to consume the available height of its container */\n  isFullHeight?: boolean;\n  /** Modifies the card to include plain styling; this removes border and background */\n  isPlain?: boolean;\n  /** Flag indicating if a card is expanded. Modifies the card to be expandable. */\n  isExpanded?: boolean;\n  /** Flag indicating that the card should render a hidden input to make it selectable */\n  hasSelectableInput?: boolean;\n  /** Aria label to apply to the selectable input if one is rendered */\n  selectableInputAriaLabel?: string;\n  /** Callback that executes when the selectable input is changed */\n  onSelectableInputChange?: (labelledBy: string, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\ninterface CardContextProps {\n  cardId: string;\n  registerTitleId: (id: string) => void;\n  isExpanded: boolean;\n}\n\ninterface AriaProps {\n  'aria-label'?: string;\n  'aria-labelledby'?: string;\n}\n\nexport const CardContext = React.createContext<Partial<CardContextProps>>({\n  cardId: '',\n  registerTitleId: () => {},\n  isExpanded: false\n});\n\nexport const Card: React.FunctionComponent<CardProps> = ({\n  children = null,\n  id = '',\n  className = '',\n  component = 'article',\n  isHoverable = false,\n  isCompact = false,\n  isSelectable = false,\n  isSelectableRaised = false,\n  isSelected = false,\n  isDisabledRaised = false,\n  isFlat = false,\n  isExpanded = false,\n  isRounded = false,\n  isLarge = false,\n  isFullHeight = false,\n  isPlain = false,\n  ouiaId,\n  ouiaSafe = true,\n  hasSelectableInput = false,\n  selectableInputAriaLabel,\n  onSelectableInputChange = () => {},\n  ...props\n}: CardProps) => {\n  const Component = component as any;\n  const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);\n  const [titleId, setTitleId] = React.useState('');\n  const [ariaProps, setAriaProps] = React.useState<AriaProps>();\n\n  if (isCompact && isLarge) {\n    // eslint-disable-next-line no-console\n    console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n    isLarge = false;\n  }\n\n  const getSelectableModifiers = () => {\n    if (isDisabledRaised) {\n      return css(styles.modifiers.nonSelectableRaised);\n    }\n    if (isSelectableRaised) {\n      return css(styles.modifiers.selectableRaised, isSelected && styles.modifiers.selectedRaised);\n    }\n    if (isSelectable || isHoverable) {\n      return css(styles.modifiers.selectable, isSelected && styles.modifiers.selected);\n    }\n    return '';\n  };\n\n  const containsCardTitleChildRef = React.useRef(false);\n\n  const registerTitleId = (id: string) => {\n    setTitleId(id);\n    containsCardTitleChildRef.current = !!id;\n  };\n\n  React.useEffect(() => {\n    if (selectableInputAriaLabel) {\n      setAriaProps({ 'aria-label': selectableInputAriaLabel });\n    } else if (titleId) {\n      setAriaProps({ 'aria-labelledby': titleId });\n    } else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n      setAriaProps({});\n      // eslint-disable-next-line no-console\n      console.warn(\n        'If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed'\n      );\n    }\n  }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n\n  return (\n    <CardContext.Provider\n      value={{\n        cardId: id,\n        registerTitleId,\n        isExpanded\n      }}\n    >\n      {hasSelectableInput && (\n        <input\n          className=\"pf-screen-reader\"\n          id={`${id}-input`}\n          {...ariaProps}\n          type=\"checkbox\"\n          checked={isSelected}\n          onChange={event => onSelectableInputChange(id, event)}\n          disabled={isDisabledRaised}\n          tabIndex={-1}\n        />\n      )}\n      <Component\n        id={id}\n        className={css(\n          styles.card,\n          isCompact && styles.modifiers.compact,\n          isExpanded && styles.modifiers.expanded,\n          isFlat && styles.modifiers.flat,\n          isRounded && styles.modifiers.rounded,\n          isLarge && styles.modifiers.displayLg,\n          isFullHeight && styles.modifiers.fullHeight,\n          isPlain && styles.modifiers.plain,\n          getSelectableModifiers(),\n          className\n        )}\n        tabIndex={isSelectable || isSelectableRaised ? '0' : undefined}\n        {...props}\n        {...ouiaProps}\n      >\n        {children}\n      </Component>\n    </CardContext.Provider>\n  );\n};\nCard.displayName = 'Card';\n"]},"metadata":{},"sourceType":"module"}