{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/ActionButton/ActionButton.tsx\";\nimport { Button } from '@patternfly/react-core';\nimport { CopyIcon, ExternalLinkAltIcon, FileIcon, FlagIcon, LockIcon, PencilAltIcon, TagIcon, TrashIcon } from '@patternfly/react-icons';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst iconDictionary = {\n  create: /*#__PURE__*/_jsxDEV(FileIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 11\n  }, this),\n  edit: /*#__PURE__*/_jsxDEV(PencilAltIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this),\n  delete: /*#__PURE__*/_jsxDEV(TrashIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 11\n  }, this),\n  clone: /*#__PURE__*/_jsxDEV(CopyIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, this),\n  quality: /*#__PURE__*/_jsxDEV(TagIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this),\n  external: /*#__PURE__*/_jsxDEV(ExternalLinkAltIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 13\n  }, this),\n  close: /*#__PURE__*/_jsxDEV(LockIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this),\n  mark: /*#__PURE__*/_jsxDEV(FlagIcon, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this)\n};\n\n/**\n * Represents a button component with a predefined icon.\n * Can also serve as a link (if link prop is specified).\n * Only either action or link prop should be specified.\n * Most often will be used together with SectionHeader.\n *\n * @param iconType - specifies the icon of the button (view typescript definition for all possible options)\n * @param link - optional prop if the button should serve as a link component (will redirect to the specified link)\n * @param action - function to perform on clicking the button\n * @param children - the inner components of the button (usually a textual description)\n */\nexport const ActionButton = _ref => {\n  let {\n    iconType,\n    link,\n    action,\n    children\n  } = _ref;\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"secondary\",\n    isSmall: true,\n    icon: iconType ? iconDictionary[iconType] : null,\n    onClick: link ? () => navigate(link) : action,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Button","CopyIcon","ExternalLinkAltIcon","FileIcon","FlagIcon","LockIcon","PencilAltIcon","TagIcon","TrashIcon","useNavigate","iconDictionary","create","edit","delete","clone","quality","external","close","mark","ActionButton","iconType","link","action","children","navigate"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/ActionButton/ActionButton.tsx"],"sourcesContent":["import { Button } from '@patternfly/react-core';\nimport {\n  CopyIcon,\n  ExternalLinkAltIcon,\n  FileIcon,\n  FlagIcon,\n  LockIcon,\n  PencilAltIcon,\n  TagIcon,\n  TrashIcon,\n} from '@patternfly/react-icons';\nimport { useNavigate } from 'react-router-dom';\n\nconst iconDictionary = {\n  create: <FileIcon />,\n  edit: <PencilAltIcon />,\n  delete: <TrashIcon />,\n  clone: <CopyIcon />,\n  quality: <TagIcon />,\n  external: <ExternalLinkAltIcon />,\n  close: <LockIcon />,\n  mark: <FlagIcon />,\n} as const;\n\nexport interface IActionButtonProps {\n  iconType?: keyof typeof iconDictionary;\n  link?: string;\n  action?: React.MouseEventHandler<HTMLButtonElement>;\n}\n\n/**\n * Represents a button component with a predefined icon.\n * Can also serve as a link (if link prop is specified).\n * Only either action or link prop should be specified.\n * Most often will be used together with SectionHeader.\n *\n * @param iconType - specifies the icon of the button (view typescript definition for all possible options)\n * @param link - optional prop if the button should serve as a link component (will redirect to the specified link)\n * @param action - function to perform on clicking the button\n * @param children - the inner components of the button (usually a textual description)\n */\nexport const ActionButton = ({ iconType, link, action, children }: React.PropsWithChildren<IActionButtonProps>) => {\n  const navigate = useNavigate();\n\n  return (\n    <Button\n      variant=\"secondary\"\n      isSmall\n      icon={iconType ? iconDictionary[iconType] : null}\n      onClick={link ? () => navigate(link) : action}\n    >\n      {children}\n    </Button>\n  );\n};\n"],"mappings":";AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,SACEC,QADF,EAEEC,mBAFF,EAGEC,QAHF,EAIEC,QAJF,EAKEC,QALF,EAMEC,aANF,EAOEC,OAPF,EAQEC,SARF,QASO,yBATP;AAUA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,cAAc,GAAG;EACrBC,MAAM,eAAE,QAAC,QAAD;IAAA;IAAA;IAAA;EAAA,QADa;EAErBC,IAAI,eAAE,QAAC,aAAD;IAAA;IAAA;IAAA;EAAA,QAFe;EAGrBC,MAAM,eAAE,QAAC,SAAD;IAAA;IAAA;IAAA;EAAA,QAHa;EAIrBC,KAAK,eAAE,QAAC,QAAD;IAAA;IAAA;IAAA;EAAA,QAJc;EAKrBC,OAAO,eAAE,QAAC,OAAD;IAAA;IAAA;IAAA;EAAA,QALY;EAMrBC,QAAQ,eAAE,QAAC,mBAAD;IAAA;IAAA;IAAA;EAAA,QANW;EAOrBC,KAAK,eAAE,QAAC,QAAD;IAAA;IAAA;IAAA;EAAA,QAPc;EAQrBC,IAAI,eAAE,QAAC,QAAD;IAAA;IAAA;IAAA;EAAA;AARe,CAAvB;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,QAAuF;EAAA,IAAtF;IAAEC,QAAF;IAAYC,IAAZ;IAAkBC,MAAlB;IAA0BC;EAA1B,CAAsF;EACjH,MAAMC,QAAQ,GAAGf,WAAW,EAA5B;EAEA,oBACE,QAAC,MAAD;IACE,OAAO,EAAC,WADV;IAEE,OAAO,MAFT;IAGE,IAAI,EAAEW,QAAQ,GAAGV,cAAc,CAACU,QAAD,CAAjB,GAA8B,IAH9C;IAIE,OAAO,EAAEC,IAAI,GAAG,MAAMG,QAAQ,CAACH,IAAD,CAAjB,GAA0BC,MAJzC;IAAA,UAMGC;EANH;IAAA;IAAA;IAAA;EAAA,QADF;AAUD,CAbM"},"metadata":{},"sourceType":"module"}