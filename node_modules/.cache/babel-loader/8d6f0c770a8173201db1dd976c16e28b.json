{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Truncate/truncate';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip } from '../Tooltip';\nexport var TruncatePosition;\n\n(function (TruncatePosition) {\n  TruncatePosition[\"start\"] = \"start\";\n  TruncatePosition[\"end\"] = \"end\";\n  TruncatePosition[\"middle\"] = \"middle\";\n})(TruncatePosition || (TruncatePosition = {}));\n\nconst truncateStyles = {\n  start: styles.truncateEnd,\n  end: styles.truncateStart\n};\nconst minWidthCharacters = 12;\n\nconst sliceContent = (str, slice) => [str.slice(0, str.length - slice), str.slice(-slice)];\n\nexport const Truncate = _a => {\n  var {\n    className,\n    position = 'end',\n    tooltipPosition = 'top',\n    trailingNumChars = 7,\n    content\n  } = _a,\n      props = __rest(_a, [\"className\", \"position\", \"tooltipPosition\", \"trailingNumChars\", \"content\"]);\n\n  return React.createElement(Tooltip, {\n    position: tooltipPosition,\n    content: content\n  }, React.createElement(\"span\", Object.assign({\n    className: css(styles.truncate, className)\n  }, props), (position === TruncatePosition.end || position === TruncatePosition.start) && React.createElement(\"span\", {\n    className: truncateStyles[position]\n  }, content, position === TruncatePosition.start && React.createElement(React.Fragment, null, \"\\u200E\")), position === TruncatePosition.middle && content.slice(0, content.length - trailingNumChars).length > minWidthCharacters && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: styles.truncateStart\n  }, sliceContent(content, trailingNumChars)[0]), React.createElement(\"span\", {\n    className: styles.truncateEnd\n  }, sliceContent(content, trailingNumChars)[1])), position === TruncatePosition.middle && content.slice(0, content.length - trailingNumChars).length <= minWidthCharacters && content));\n};\nTruncate.displayName = 'Truncate';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,2DAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,OAAT,QAAyC,YAAzC;AAEA,WAAYC,gBAAZ;;AAAA,WAAYA,gBAAZ,EAA4B;EAC1BA;EACAA;EACAA;AACD,CAJD,EAAYA,gBAAgB,KAAhBA,gBAAgB,MAA5B;;AAMA,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAEL,MAAM,CAACM,WADO;EAErBC,GAAG,EAAEP,MAAM,CAACQ;AAFS,CAAvB;AAKA,MAAMC,kBAAkB,GAAW,EAAnC;;AA6BA,MAAMC,YAAY,GAAG,CAACC,GAAD,EAAcC,KAAd,KAAgC,CAACD,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAaD,GAAG,CAACE,MAAJ,GAAaD,KAA1B,CAAD,EAAmCD,GAAG,CAACC,KAAJ,CAAU,CAACA,KAAX,CAAnC,CAArD;;AAEA,OAAO,MAAME,QAAQ,GAA4CC,EAAD,IAO5C;MAP6C;IAC/DC,SAD+D;IAE/DC,QAAQ,GAAG,KAFoD;IAG/DC,eAAe,GAAG,KAH6C;IAI/DC,gBAAgB,GAAG,CAJ4C;IAK/DC;EAL+D,IAKxDL;MACJM,KAAK,cANuD,2EAMvD;;EACW,OACnBtB,oBAACG,OAAD,EAAQ;IAACe,QAAQ,EAAEC,eAAX;IAA4BE,OAAO,EAAEA;EAArC,CAAR,EACErB;IAAMiB,SAAS,EAAEf,GAAG,CAACD,MAAM,CAACsB,QAAR,EAAkBN,SAAlB;EAApB,GAAsDK,KAAtD,GACG,CAACJ,QAAQ,KAAKd,gBAAgB,CAACI,GAA9B,IAAqCU,QAAQ,KAAKd,gBAAgB,CAACE,KAApE,KACCN;IAAMiB,SAAS,EAAEZ,cAAc,CAACa,QAAD;EAA/B,GACGG,OADH,EAEGH,QAAQ,KAAKd,gBAAgB,CAACE,KAA9B,IAAuCN,oBAACA,KAAK,CAACwB,QAAP,EAAe,IAAf,EAAe,QAAf,CAF1C,CAFJ,EAOGN,QAAQ,KAAKd,gBAAgB,CAACqB,MAA9B,IACCJ,OAAO,CAACR,KAAR,CAAc,CAAd,EAAiBQ,OAAO,CAACP,MAAR,GAAiBM,gBAAlC,EAAoDN,MAApD,GAA6DJ,kBAD9D,IAEGV,oBAACA,KAAK,CAACwB,QAAP,EAAe,IAAf,EACExB;IAAMiB,SAAS,EAAEhB,MAAM,CAACQ;EAAxB,GAAwCE,YAAY,CAACU,OAAD,EAAUD,gBAAV,CAAZ,CAAwC,CAAxC,CAAxC,CADF,EAEEpB;IAAMiB,SAAS,EAAEhB,MAAM,CAACM;EAAxB,GAAsCI,YAAY,CAACU,OAAD,EAAUD,gBAAV,CAAZ,CAAwC,CAAxC,CAAtC,CAFF,CATN,EAcGF,QAAQ,KAAKd,gBAAgB,CAACqB,MAA9B,IACCJ,OAAO,CAACR,KAAR,CAAc,CAAd,EAAiBQ,OAAO,CAACP,MAAR,GAAiBM,gBAAlC,EAAoDN,MAApD,IAA8DJ,kBAD/D,IAECW,OAhBJ,CADF,CADmB;AAqBpB,CA5BM;AA6BPN,QAAQ,CAACW,WAAT,GAAuB,UAAvB","names":["React","styles","css","Tooltip","TruncatePosition","truncateStyles","start","truncateEnd","end","truncateStart","minWidthCharacters","sliceContent","str","slice","length","Truncate","_a","className","position","tooltipPosition","trailingNumChars","content","props","truncate","Fragment","middle","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Truncate/Truncate.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Truncate/truncate';\nimport { css } from '@patternfly/react-styles';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\n\nexport enum TruncatePosition {\n  start = 'start',\n  end = 'end',\n  middle = 'middle'\n}\n\nconst truncateStyles = {\n  start: styles.truncateEnd,\n  end: styles.truncateStart\n};\n\nconst minWidthCharacters: number = 12;\n\ninterface TruncateProps extends React.HTMLProps<HTMLSpanElement> {\n  /** Class to add to outer span */\n  className?: string;\n  /** Text to truncate */\n  content: string;\n  /** The number of characters displayed in the second half of the truncation */\n  trailingNumChars?: number;\n  /** Where the text will be truncated */\n  position?: 'start' | 'middle' | 'end';\n  /** Tooltip position */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\nconst sliceContent = (str: string, slice: number) => [str.slice(0, str.length - slice), str.slice(-slice)];\n\nexport const Truncate: React.FunctionComponent<TruncateProps> = ({\n  className,\n  position = 'end',\n  tooltipPosition = 'top',\n  trailingNumChars = 7,\n  content,\n  ...props\n}: TruncateProps) => (\n  <Tooltip position={tooltipPosition} content={content}>\n    <span className={css(styles.truncate, className)} {...props}>\n      {(position === TruncatePosition.end || position === TruncatePosition.start) && (\n        <span className={truncateStyles[position]}>\n          {content}\n          {position === TruncatePosition.start && <React.Fragment>&lrm;</React.Fragment>}\n        </span>\n      )}\n      {position === TruncatePosition.middle &&\n        content.slice(0, content.length - trailingNumChars).length > minWidthCharacters && (\n          <React.Fragment>\n            <span className={styles.truncateStart}>{sliceContent(content, trailingNumChars)[0]}</span>\n            <span className={styles.truncateEnd}>{sliceContent(content, trailingNumChars)[1]}</span>\n          </React.Fragment>\n        )}\n      {position === TruncatePosition.middle &&\n        content.slice(0, content.length - trailingNumChars).length <= minWidthCharacters &&\n        content}\n    </span>\n  </Tooltip>\n);\nTruncate.displayName = 'Truncate';\n"]},"metadata":{},"sourceType":"module"}