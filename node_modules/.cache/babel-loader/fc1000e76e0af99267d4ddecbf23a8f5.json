{"ast":null,"code":"import { useRef, useEffect, useCallback } from 'react';\n/**\n * React hook for setting up and using intervals.\n * As suggested by Dan Abramov in a blog post here:\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n * @param callback - Function to be called every interval tick\n * @param delay - Delay in ms between interval ticks\n * @param runImmediately - Whether the callback should be run at the begging\n * @returns function to restart the interval\n */\n\nexport const useInterval = function (callback, delay) {\n  let runImmediately = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const savedCallback = useRef(); // useRef needs to be used here since if it was declared as a let variable,\n  // it would not persist the state during rerenders\n\n  const savedTimer = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    if (runImmediately) {\n      savedCallback.current();\n    }\n\n    savedTimer.current = setInterval(() => {\n      savedCallback.current();\n    }, delay);\n    return () => clearInterval(savedTimer.current);\n  }, [delay, runImmediately]);\n  const restart = useCallback(() => {\n    clearInterval(savedTimer.current);\n    savedTimer.current = setInterval(() => {\n      savedCallback.current();\n    }, delay);\n  }, [delay]);\n  return restart;\n};","map":{"version":3,"names":["useRef","useEffect","useCallback","useInterval","callback","delay","runImmediately","savedCallback","savedTimer","current","setInterval","clearInterval","restart"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useInterval.ts"],"sourcesContent":["import { useRef, useEffect, MutableRefObject, useCallback } from 'react';\n\n/**\n * React hook for setting up and using intervals.\n * As suggested by Dan Abramov in a blog post here:\n * https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n * @param callback - Function to be called every interval tick\n * @param delay - Delay in ms between interval ticks\n * @param runImmediately - Whether the callback should be run at the begging\n * @returns function to restart the interval\n */\nexport const useInterval = (callback: Function, delay: number, runImmediately: boolean = false) => {\n  const savedCallback: MutableRefObject<Function | undefined> = useRef();\n  // useRef needs to be used here since if it was declared as a let variable,\n  // it would not persist the state during rerenders\n  const savedTimer: MutableRefObject<NodeJS.Timer | undefined> = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (runImmediately) {\n      savedCallback.current!();\n    }\n    savedTimer.current = setInterval(() => {\n      savedCallback.current!();\n    }, delay);\n    return () => clearInterval(savedTimer.current);\n  }, [delay, runImmediately]);\n\n  const restart = useCallback(() => {\n    clearInterval(savedTimer.current);\n    savedTimer.current = setInterval(() => {\n      savedCallback.current!();\n    }, delay);\n  }, [delay]);\n\n  return restart;\n};\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA8CC,WAA9C,QAAiE,OAAjE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,UAACC,QAAD,EAAqBC,KAArB,EAAwE;EAAA,IAApCC,cAAoC,uEAAV,KAAU;EACjG,MAAMC,aAAqD,GAAGP,MAAM,EAApE,CADiG,CAEjG;EACA;;EACA,MAAMQ,UAAsD,GAAGR,MAAM,EAArE;EAEAC,SAAS,CAAC,MAAM;IACdM,aAAa,CAACE,OAAd,GAAwBL,QAAxB;EACD,CAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;EAIAH,SAAS,CAAC,MAAM;IACd,IAAIK,cAAJ,EAAoB;MAClBC,aAAa,CAACE,OAAd;IACD;;IACDD,UAAU,CAACC,OAAX,GAAqBC,WAAW,CAAC,MAAM;MACrCH,aAAa,CAACE,OAAd;IACD,CAF+B,EAE7BJ,KAF6B,CAAhC;IAGA,OAAO,MAAMM,aAAa,CAACH,UAAU,CAACC,OAAZ,CAA1B;EACD,CARQ,EAQN,CAACJ,KAAD,EAAQC,cAAR,CARM,CAAT;EAUA,MAAMM,OAAO,GAAGV,WAAW,CAAC,MAAM;IAChCS,aAAa,CAACH,UAAU,CAACC,OAAZ,CAAb;IACAD,UAAU,CAACC,OAAX,GAAqBC,WAAW,CAAC,MAAM;MACrCH,aAAa,CAACE,OAAd;IACD,CAF+B,EAE7BJ,KAF6B,CAAhC;EAGD,CAL0B,EAKxB,CAACA,KAAD,CALwB,CAA3B;EAOA,OAAOO,OAAP;AACD,CA5BM"},"metadata":{},"sourceType":"module"}