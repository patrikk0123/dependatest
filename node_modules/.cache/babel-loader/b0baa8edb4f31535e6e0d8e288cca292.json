{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { cellActions } from '../Table/utils/decorators/cellActions';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { compoundExpand } from '../Table/utils/decorators/compoundExpand';\nimport { cellWidth } from '../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { favoritable } from '../Table/utils/decorators/favoritable';\nimport { draggable } from '../Table/utils/decorators/draggable';\nimport { treeRow } from '../Table/utils/decorators/treeRow';\nimport { mergeProps } from '../Table/base/merge-props';\n\nconst TdBase = _a => {\n  var {\n    children,\n    className,\n    isActionCell = false,\n    component = 'td',\n    dataLabel,\n    textCenter = false,\n    modifier,\n    select = null,\n    actions = null,\n    expand = null,\n    treeRow: treeRowProp = null,\n    compoundExpand: compoundExpandProp = null,\n    noPadding,\n    width,\n    visibility,\n    innerRef,\n    favorites = null,\n    draggableRow: draggableRowProp = null\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"isActionCell\", \"component\", \"dataLabel\", \"textCenter\", \"modifier\", \"select\", \"actions\", \"expand\", \"treeRow\", \"compoundExpand\", \"noPadding\", \"width\", \"visibility\", \"innerRef\", \"favorites\", \"draggableRow\"]);\n\n  const selectParams = select ? selectable(children, {\n    rowIndex: select.rowIndex,\n    rowData: {\n      selected: select.isSelected,\n      disableSelection: select === null || select === void 0 ? void 0 : select.disable,\n      props: select === null || select === void 0 ? void 0 : select.props\n    },\n    column: {\n      extraParams: {\n        onSelect: select === null || select === void 0 ? void 0 : select.onSelect,\n        selectVariant: select.variant || 'checkbox'\n      }\n    }\n  }) : null;\n  const favoriteParams = favorites ? favoritable(null, {\n    rowIndex: favorites === null || favorites === void 0 ? void 0 : favorites.rowIndex,\n    rowData: {\n      favorited: favorites.isFavorited,\n      favoritesProps: favorites === null || favorites === void 0 ? void 0 : favorites.props\n    },\n    column: {\n      extraParams: {\n        onFavorite: favorites === null || favorites === void 0 ? void 0 : favorites.onFavorite\n      }\n    }\n  }) : null;\n  const draggableParams = draggableRowProp !== null ? draggable(null, {\n    rowData: {\n      id: draggableRowProp.id\n    }\n  }) : null;\n  const actionParamsFunc = actions ? cellActions(actions.items, null, null) : null;\n  const actionParams = actionParamsFunc ? actionParamsFunc(null, {\n    rowIndex: actions === null || actions === void 0 ? void 0 : actions.rowIndex,\n    rowData: {\n      disableActions: actions === null || actions === void 0 ? void 0 : actions.disable\n    },\n    column: {\n      extraParams: {\n        dropdownPosition: actions === null || actions === void 0 ? void 0 : actions.dropdownPosition,\n        dropdownDirection: actions === null || actions === void 0 ? void 0 : actions.dropdownDirection,\n        actionsToggle: actions === null || actions === void 0 ? void 0 : actions.actionsToggle\n      }\n    }\n  }) : null;\n  const expandableParams = expand !== null ? collapsible(null, {\n    rowIndex: expand.rowIndex,\n    columnIndex: expand === null || expand === void 0 ? void 0 : expand.columnIndex,\n    rowData: {\n      isOpen: expand.isExpanded\n    },\n    column: {\n      extraParams: {\n        onCollapse: expand === null || expand === void 0 ? void 0 : expand.onToggle\n      }\n    }\n  }) : null;\n  const compoundParams = compoundExpandProp !== null ? compoundExpand({\n    title: children,\n    props: {\n      isOpen: compoundExpandProp.isExpanded\n    }\n  }, {\n    column: {\n      extraParams: {\n        onExpand: compoundExpandProp === null || compoundExpandProp === void 0 ? void 0 : compoundExpandProp.onToggle\n      }\n    }\n  }) : null;\n  const widthParams = width ? cellWidth(width)() : null;\n  const visibilityParams = visibility ? classNames(...visibility.map(vis => Visibility[vis]))() : null;\n  const treeRowParams = treeRowProp !== null ? treeRow(treeRowProp.onCollapse, treeRowProp.onCheckChange, treeRowProp.onToggleRowDetails)({\n    title: children\n  }, {\n    rowIndex: treeRowProp.rowIndex,\n    rowData: {\n      props: treeRowProp.props\n    }\n  }) : null;\n  const merged = mergeProps(selectParams, actionParams, expandableParams, compoundParams, widthParams, visibilityParams, favoriteParams, treeRowParams, draggableParams);\n\n  const {\n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null,\n    children: mergedChildren = null,\n    className: mergedClassName = '',\n    component: MergedComponent = component\n  } = merged,\n        mergedProps = __rest(merged, [\"isVisible\", \"children\", \"className\", \"component\"]);\n\n  const treeTableTitleCell = className && className.includes('pf-c-table__tree-view-title-cell') || mergedClassName && mergedClassName.includes('pf-c-table__tree-view-title-cell');\n  return React.createElement(MergedComponent, Object.assign({}, !treeTableTitleCell && {\n    'data-label': dataLabel\n  }, {\n    className: css(className, isActionCell && styles.tableAction, textCenter && styles.modifiers.center, noPadding && styles.modifiers.noPadding, styles.modifiers[modifier], draggableParams && styles.tableDraggable, mergedClassName),\n    ref: innerRef\n  }, mergedProps, props), mergedChildren || children);\n};\n\nexport const Td = React.forwardRef((props, ref) => React.createElement(TdBase, Object.assign({}, props, {\n  innerRef: ref\n})));\nTd.displayName = 'Td';","map":{"version":3,"mappings":"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","names":["React","css","styles","cellActions","selectable","collapsible","compoundExpand","cellWidth","Visibility","classNames","favoritable","draggable","treeRow","mergeProps","TdBase","_a","children","className","isActionCell","component","dataLabel","textCenter","modifier","select","actions","expand","treeRowProp","compoundExpandProp","noPadding","width","visibility","innerRef","favorites","draggableRow","draggableRowProp","props","selectParams","rowIndex","rowData","selected","isSelected","disableSelection","disable","column","extraParams","onSelect","selectVariant","variant","favoriteParams","favorited","isFavorited","favoritesProps","onFavorite","draggableParams","id","actionParamsFunc","items","actionParams","disableActions","dropdownPosition","dropdownDirection","actionsToggle","expandableParams","columnIndex","isOpen","isExpanded","onCollapse","onToggle","compoundParams","title","onExpand","widthParams","visibilityParams","map","vis","treeRowParams","onCheckChange","onToggleRowDetails","merged","isVisible","mergedChildren","mergedClassName","MergedComponent","mergedProps","treeTableTitleCell","includes","Object","tableAction","modifiers","center","tableDraggable","ref","Td","forwardRef","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/TableComposable/Td.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { BaseCellProps } from './TableComposable';\nimport { cellActions } from '../Table/utils/decorators/cellActions';\nimport { selectable } from '../Table/utils/decorators/selectable';\nimport { collapsible } from '../Table/utils/decorators/collapsible';\nimport { compoundExpand } from '../Table/utils/decorators/compoundExpand';\nimport { cellWidth } from '../Table/utils/decorators/cellWidth';\nimport { Visibility, classNames } from './../Table/utils/decorators/classNames';\nimport { favoritable } from '../Table/utils/decorators/favoritable';\nimport { draggable } from '../Table/utils/decorators/draggable';\nimport { treeRow } from '../Table/utils/decorators/treeRow';\nimport { mergeProps } from '../Table/base/merge-props';\nimport { IVisibility } from '../Table/utils/decorators/classNames';\nimport { IFormatterValueType, IExtra } from '../Table/TableTypes';\nimport {\n  TdActionsType,\n  TdCompoundExpandType,\n  TdDraggableType,\n  TdExpandType,\n  TdFavoritesType,\n  TdSelectType,\n  TdTreeRowType\n} from '../Table/base';\nexport interface TdProps extends BaseCellProps, Omit<React.HTMLProps<HTMLTableDataCellElement>, 'onSelect' | 'width'> {\n  /**\n   * The column header the cell corresponds to.\n   * This attribute replaces table header in mobile viewport. It is rendered by ::before pseudo element.\n   */\n  dataLabel?: string;\n  /** Renders a checkbox or radio select */\n  select?: TdSelectType;\n  /** Turns the cell into an actions cell */\n  actions?: TdActionsType;\n  /** Turns the cell into an expansion toggle and determines if the corresponding expansion row is open */\n  expand?: TdExpandType;\n  /** Turns the cell into a compound expansion toggle */\n  compoundExpand?: TdCompoundExpandType;\n  /** Turns the cell into a favorites cell with a star button */\n  favorites?: TdFavoritesType;\n  /** Turns the cell into the first cell in a tree table row */\n  treeRow?: TdTreeRowType;\n  /** Turns the cell into the first cell in a draggable row*/\n  draggableRow?: TdDraggableType;\n  /** True to remove padding */\n  noPadding?: boolean;\n  /** Applies pf-c-table__action to td */\n  isActionCell?: boolean;\n}\n\nconst TdBase: React.FunctionComponent<TdProps> = ({\n  children,\n  className,\n  isActionCell = false,\n  component = 'td',\n  dataLabel,\n  textCenter = false,\n  modifier,\n  select = null,\n  actions = null,\n  expand = null,\n  treeRow: treeRowProp = null,\n  compoundExpand: compoundExpandProp = null,\n  noPadding,\n  width,\n  visibility,\n  innerRef,\n  favorites = null,\n  draggableRow: draggableRowProp = null,\n  ...props\n}: TdProps) => {\n  const selectParams = select\n    ? selectable(children as IFormatterValueType, {\n        rowIndex: select.rowIndex,\n        rowData: {\n          selected: select.isSelected,\n          disableSelection: select?.disable,\n          props: select?.props\n        },\n        column: {\n          extraParams: {\n            onSelect: select?.onSelect,\n            selectVariant: select.variant || 'checkbox'\n          }\n        }\n      })\n    : null;\n  const favoriteParams = favorites\n    ? favoritable(null, {\n        rowIndex: favorites?.rowIndex,\n        rowData: {\n          favorited: favorites.isFavorited,\n          favoritesProps: favorites?.props\n        },\n        column: {\n          extraParams: {\n            onFavorite: favorites?.onFavorite\n          }\n        }\n      })\n    : null;\n  const draggableParams =\n    draggableRowProp !== null\n      ? draggable(null, {\n          rowData: {\n            id: draggableRowProp.id\n          }\n        })\n      : null;\n  const actionParamsFunc = actions ? cellActions(actions.items, null, null) : null;\n  const actionParams = actionParamsFunc\n    ? actionParamsFunc(null, {\n        rowIndex: actions?.rowIndex,\n        rowData: {\n          disableActions: actions?.disable\n        },\n        column: {\n          extraParams: {\n            dropdownPosition: actions?.dropdownPosition,\n            dropdownDirection: actions?.dropdownDirection,\n            actionsToggle: actions?.actionsToggle\n          }\n        }\n      })\n    : null;\n  const expandableParams =\n    expand !== null\n      ? collapsible(null, {\n          rowIndex: expand.rowIndex,\n          columnIndex: expand?.columnIndex,\n          rowData: {\n            isOpen: expand.isExpanded\n          },\n          column: {\n            extraParams: {\n              onCollapse: expand?.onToggle\n            }\n          }\n        })\n      : null;\n  const compoundParams =\n    compoundExpandProp !== null\n      ? compoundExpand(\n          {\n            title: children,\n            props: {\n              isOpen: compoundExpandProp.isExpanded\n            }\n          } as IFormatterValueType,\n          {\n            column: {\n              extraParams: {\n                onExpand: compoundExpandProp?.onToggle\n              }\n            }\n          }\n        )\n      : null;\n  const widthParams = width ? cellWidth(width)() : null;\n  const visibilityParams = visibility\n    ? classNames(...visibility.map((vis: keyof IVisibility) => Visibility[vis]))()\n    : null;\n  const treeRowParams =\n    treeRowProp !== null\n      ? treeRow(\n          treeRowProp.onCollapse,\n          treeRowProp.onCheckChange,\n          treeRowProp.onToggleRowDetails\n        )(\n          {\n            title: children\n          } as IFormatterValueType,\n          {\n            rowIndex: treeRowProp.rowIndex,\n            rowData: {\n              props: treeRowProp.props\n            }\n          } as IExtra\n        )\n      : null;\n  const merged = mergeProps(\n    selectParams,\n    actionParams,\n    expandableParams,\n    compoundParams,\n    widthParams,\n    visibilityParams,\n    favoriteParams,\n    treeRowParams,\n    draggableParams\n  );\n  const {\n    // selectable adds this but we don't want it\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isVisible = null,\n    children: mergedChildren = null,\n    className: mergedClassName = '',\n    component: MergedComponent = component,\n    ...mergedProps\n  } = merged;\n\n  const treeTableTitleCell =\n    (className && className.includes('pf-c-table__tree-view-title-cell')) ||\n    (mergedClassName && mergedClassName.includes('pf-c-table__tree-view-title-cell'));\n\n  return (\n    <MergedComponent\n      {...(!treeTableTitleCell && { 'data-label': dataLabel })}\n      className={css(\n        className,\n        isActionCell && styles.tableAction,\n        textCenter && styles.modifiers.center,\n        noPadding && styles.modifiers.noPadding,\n        styles.modifiers[modifier as 'breakWord' | 'fitContent' | 'nowrap' | 'truncate' | 'wrap' | undefined],\n        draggableParams && styles.tableDraggable,\n        mergedClassName\n      )}\n      ref={innerRef}\n      {...mergedProps}\n      {...props}\n    >\n      {mergedChildren || children}\n    </MergedComponent>\n  );\n};\n\nexport const Td = React.forwardRef((props: TdProps, ref: React.Ref<HTMLTableDataCellElement>) => (\n  <TdBase {...props} innerRef={ref} />\n));\nTd.displayName = 'Td';\n"]},"metadata":{},"sourceType":"module"}