{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Popover } from '../Popover/Popover';\nimport { InputGroup } from '../InputGroup/InputGroup';\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\nimport { CalendarMonth, isValidDate } from '../CalendarMonth';\nimport { useImperativeHandle } from 'react';\nexport const yyyyMMddFormat = date => `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n\nconst DatePickerBase = (_a, ref) => {\n  var {\n    className,\n    locale = undefined,\n    dateFormat = yyyyMMddFormat,\n    dateParse = val => val.split('-').length === 3 && new Date(`${val}T00:00:00`),\n    isDisabled = false,\n    placeholder = 'YYYY-MM-DD',\n    value: valueProp = '',\n    'aria-label': ariaLabel = 'Date picker',\n    buttonAriaLabel = 'Toggle date picker',\n    onChange = () => undefined,\n    onBlur = () => undefined,\n    invalidFormatText = 'Invalid date',\n    helperText,\n    appendTo,\n    popoverProps,\n    monthFormat,\n    weekdayFormat,\n    longWeekdayFormat,\n    dayFormat,\n    weekStart,\n    validators = [],\n    rangeStart,\n    style: styleProps = {},\n    inputProps = {}\n  } = _a,\n      props = __rest(_a, [\"className\", \"locale\", \"dateFormat\", \"dateParse\", \"isDisabled\", \"placeholder\", \"value\", 'aria-label', \"buttonAriaLabel\", \"onChange\", \"onBlur\", \"invalidFormatText\", \"helperText\", \"appendTo\", \"popoverProps\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"validators\", \"rangeStart\", \"style\", \"inputProps\"]);\n\n  const [value, setValue] = React.useState(valueProp);\n  const [valueDate, setValueDate] = React.useState(dateParse(value));\n  const [errorText, setErrorText] = React.useState('');\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n  const [selectOpen, setSelectOpen] = React.useState(false);\n  const [pristine, setPristine] = React.useState(true);\n  const widthChars = React.useMemo(() => Math.max(dateFormat(new Date()).length, placeholder.length), [dateFormat]);\n  const style = Object.assign({\n    '--pf-c-date-picker__input--c-form-control--width-chars': widthChars\n  }, styleProps);\n  const buttonRef = React.useRef();\n  React.useEffect(() => {\n    setValue(valueProp);\n    setValueDate(dateParse(valueProp));\n  }, [valueProp]);\n  React.useEffect(() => {\n    setPristine(!value);\n  }, [value]);\n\n  const setError = date => setErrorText(validators.map(validator => validator(date)).join('\\n') || '');\n\n  const onTextInput = value => {\n    setValue(value);\n    setErrorText('');\n    const newValueDate = dateParse(value);\n    setValueDate(newValueDate);\n\n    if (isValidDate(newValueDate)) {\n      onChange(value, new Date(newValueDate));\n    } else {\n      onChange(value);\n    }\n  };\n\n  const onInputBlur = () => {\n    if (pristine) {\n      return;\n    }\n\n    const newValueDate = dateParse(value);\n\n    if (isValidDate(newValueDate)) {\n      onBlur(value, new Date(newValueDate));\n      setError(newValueDate);\n    } else {\n      onBlur(value);\n      setErrorText(invalidFormatText);\n    }\n  };\n\n  const onDateClick = newValueDate => {\n    const newValue = dateFormat(newValueDate);\n    setValue(newValue);\n    setValueDate(newValueDate);\n    setError(newValueDate);\n    setPopoverOpen(false);\n    onChange(newValue, new Date(newValueDate));\n  };\n\n  const onKeyPress = ev => {\n    if (ev.key === 'Enter' && value) {\n      if (isValidDate(valueDate)) {\n        setError(valueDate);\n      } else {\n        setErrorText(invalidFormatText);\n      }\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    setCalendarOpen: isOpen => setPopoverOpen(isOpen),\n    toggleCalendar: () => setPopoverOpen(prev => !prev)\n  }), [setPopoverOpen]);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.datePicker, className),\n    style: style\n  }, props), React.createElement(Popover, Object.assign({\n    position: \"bottom\",\n    bodyContent: React.createElement(CalendarMonth, {\n      date: valueDate,\n      onChange: onDateClick,\n      locale: locale,\n      // Use truthy values of strings\n      validators: validators.map(validator => date => !validator(date)),\n      onSelectToggle: open => setSelectOpen(open),\n      monthFormat: monthFormat,\n      weekdayFormat: weekdayFormat,\n      longWeekdayFormat: longWeekdayFormat,\n      dayFormat: dayFormat,\n      weekStart: weekStart,\n      rangeStart: rangeStart\n    }),\n    showClose: false,\n    isVisible: popoverOpen,\n    shouldClose: (_1, _2, event) => {\n      event = event; // Let the select menu close\n\n      if (event.keyCode && event.keyCode === 27 && selectOpen) {\n        return false;\n      } // Let our button handle toggling\n\n\n      if (buttonRef.current && buttonRef.current.contains(event.target)) {\n        return false;\n      }\n\n      setPopoverOpen(false);\n      return true;\n    },\n    withFocusTrap: true,\n    hasNoPadding: true,\n    hasAutoWidth: true,\n    appendTo: appendTo\n  }, popoverProps), React.createElement(\"div\", {\n    className: styles.datePickerInput\n  }, React.createElement(InputGroup, null, React.createElement(TextInput, Object.assign({\n    isDisabled: isDisabled,\n    \"aria-label\": ariaLabel,\n    placeholder: placeholder,\n    validated: errorText ? 'error' : 'default',\n    value: value,\n    onChange: onTextInput,\n    onBlur: onInputBlur,\n    onKeyPress: onKeyPress\n  }, inputProps)), React.createElement(\"button\", {\n    ref: buttonRef,\n    className: css(buttonStyles.button, buttonStyles.modifiers.control),\n    \"aria-label\": buttonAriaLabel,\n    type: \"button\",\n    onClick: () => setPopoverOpen(!popoverOpen),\n    disabled: isDisabled\n  }, React.createElement(OutlinedCalendarAltIcon, null))))), helperText && React.createElement(\"div\", {\n    className: styles.datePickerHelperText\n  }, helperText), errorText.trim() && React.createElement(\"div\", {\n    className: css(styles.datePickerHelperText, styles.modifiers.error)\n  }, errorText));\n};\n\nexport const DatePicker = React.forwardRef(DatePickerBase);\nDatePicker.displayName = 'DatePicker';","map":{"version":3,"mappings":"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","names":["React","css","styles","buttonStyles","TextInput","Popover","InputGroup","OutlinedCalendarAltIcon","CalendarMonth","isValidDate","useImperativeHandle","yyyyMMddFormat","date","getFullYear","getMonth","toString","padStart","getDate","DatePickerBase","_a","ref","className","locale","undefined","dateFormat","dateParse","val","split","length","Date","isDisabled","placeholder","value","valueProp","ariaLabel","buttonAriaLabel","onChange","onBlur","invalidFormatText","helperText","appendTo","popoverProps","monthFormat","weekdayFormat","longWeekdayFormat","dayFormat","weekStart","validators","rangeStart","style","styleProps","inputProps","props","setValue","useState","valueDate","setValueDate","errorText","setErrorText","popoverOpen","setPopoverOpen","selectOpen","setSelectOpen","pristine","setPristine","widthChars","useMemo","Math","max","buttonRef","useRef","useEffect","setError","map","validator","join","onTextInput","newValueDate","onInputBlur","onDateClick","newValue","onKeyPress","ev","key","setCalendarOpen","isOpen","toggleCalendar","prev","datePicker","Object","position","bodyContent","onSelectToggle","open","showClose","isVisible","shouldClose","_1","_2","event","keyCode","current","contains","target","withFocusTrap","hasNoPadding","hasAutoWidth","datePickerInput","validated","button","modifiers","control","type","onClick","disabled","datePickerHelperText","trim","error","DatePicker","forwardRef","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DatePicker/DatePicker.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { TextInput, TextInputProps } from '../TextInput/TextInput';\nimport { Popover, PopoverProps } from '../Popover/Popover';\nimport { InputGroup } from '../InputGroup/InputGroup';\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\nimport { CalendarMonth, CalendarFormat, isValidDate } from '../CalendarMonth';\nimport { useImperativeHandle } from 'react';\n\nexport interface DatePickerProps\n  extends CalendarFormat,\n    Omit<React.HTMLProps<HTMLInputElement>, 'onChange' | 'onFocus' | 'onBlur' | 'disabled' | 'ref'> {\n  /** Additional classes added to the date time picker. */\n  className?: string;\n  /** Accessible label for the date picker */\n  'aria-label'?: string;\n  /** How to format the date in the TextInput */\n  dateFormat?: (date: Date) => string;\n  /** How to format the date in the TextInput */\n  dateParse?: (value: string) => Date;\n  /** Flag indicating the date picker is disabled*/\n  isDisabled?: boolean;\n  /** String to display in the empty date picker field as a hint for the expected date format */\n  placeholder?: string;\n  /** Value of TextInput */\n  value?: string;\n  /** Error message to display when the TextInput cannot be parsed. */\n  invalidFormatText?: string;\n  /** Callback called every time the input value changes */\n  onChange?: (value: string, date?: Date) => void;\n  /** Callback called every time the input loses focus */\n  onBlur?: (value: string, date?: Date) => void;\n  /** Text for label */\n  helperText?: React.ReactNode;\n  /** Aria label for the button to open the date picker */\n  buttonAriaLabel?: string;\n  /** The element to append the popover to */\n  appendTo?: HTMLElement | ((ref?: HTMLElement) => HTMLElement);\n  /** Props to pass to the Popover */\n  popoverProps?: Omit<PopoverProps, 'appendTo'>;\n  /** Functions that returns an error message if a date is invalid */\n  validators?: ((date: Date) => string)[];\n  /** Additional props for input field */\n  inputProps?: TextInputProps;\n}\n\nexport interface DatePickerRef {\n  /** Sets the calendar open status */\n  setCalendarOpen: (isOpen: boolean) => void;\n  /** Toggles the calendar open status */\n  toggleCalendar: () => void;\n}\n\nexport const yyyyMMddFormat = (date: Date) =>\n  `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date\n    .getDate()\n    .toString()\n    .padStart(2, '0')}`;\n\nconst DatePickerBase = (\n  {\n    className,\n    locale = undefined,\n    dateFormat = yyyyMMddFormat,\n    dateParse = (val: string) => val.split('-').length === 3 && new Date(`${val}T00:00:00`),\n    isDisabled = false,\n    placeholder = 'YYYY-MM-DD',\n    value: valueProp = '',\n    'aria-label': ariaLabel = 'Date picker',\n    buttonAriaLabel = 'Toggle date picker',\n    onChange = (): any => undefined,\n    onBlur = (): any => undefined,\n    invalidFormatText = 'Invalid date',\n    helperText,\n    appendTo,\n    popoverProps,\n    monthFormat,\n    weekdayFormat,\n    longWeekdayFormat,\n    dayFormat,\n    weekStart,\n    validators = [],\n    rangeStart,\n    style: styleProps = {},\n    inputProps = {},\n    ...props\n  }: DatePickerProps,\n  ref: React.Ref<DatePickerRef>\n) => {\n  const [value, setValue] = React.useState(valueProp);\n  const [valueDate, setValueDate] = React.useState(dateParse(value));\n  const [errorText, setErrorText] = React.useState('');\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n  const [selectOpen, setSelectOpen] = React.useState(false);\n  const [pristine, setPristine] = React.useState(true);\n  const widthChars = React.useMemo(() => Math.max(dateFormat(new Date()).length, placeholder.length), [dateFormat]);\n  const style = { '--pf-c-date-picker__input--c-form-control--width-chars': widthChars, ...styleProps };\n  const buttonRef = React.useRef<HTMLButtonElement>();\n\n  React.useEffect(() => {\n    setValue(valueProp);\n    setValueDate(dateParse(valueProp));\n  }, [valueProp]);\n\n  React.useEffect(() => {\n    setPristine(!value);\n  }, [value]);\n\n  const setError = (date: Date) => setErrorText(validators.map(validator => validator(date)).join('\\n') || '');\n\n  const onTextInput = (value: string) => {\n    setValue(value);\n    setErrorText('');\n    const newValueDate = dateParse(value);\n    setValueDate(newValueDate);\n    if (isValidDate(newValueDate)) {\n      onChange(value, new Date(newValueDate));\n    } else {\n      onChange(value);\n    }\n  };\n\n  const onInputBlur = () => {\n    if (pristine) {\n      return;\n    }\n    const newValueDate = dateParse(value);\n    if (isValidDate(newValueDate)) {\n      onBlur(value, new Date(newValueDate));\n      setError(newValueDate);\n    } else {\n      onBlur(value);\n      setErrorText(invalidFormatText);\n    }\n  };\n\n  const onDateClick = (newValueDate: Date) => {\n    const newValue = dateFormat(newValueDate);\n    setValue(newValue);\n    setValueDate(newValueDate);\n    setError(newValueDate);\n    setPopoverOpen(false);\n    onChange(newValue, new Date(newValueDate));\n  };\n\n  const onKeyPress = (ev: React.KeyboardEvent<HTMLInputElement>) => {\n    if (ev.key === 'Enter' && value) {\n      if (isValidDate(valueDate)) {\n        setError(valueDate);\n      } else {\n        setErrorText(invalidFormatText);\n      }\n    }\n  };\n\n  useImperativeHandle<DatePickerRef, DatePickerRef>(\n    ref,\n    () => ({\n      setCalendarOpen: (isOpen: boolean) => setPopoverOpen(isOpen),\n      toggleCalendar: () => setPopoverOpen(prev => !prev)\n    }),\n    [setPopoverOpen]\n  );\n\n  return (\n    <div className={css(styles.datePicker, className)} style={style} {...props}>\n      <Popover\n        position=\"bottom\"\n        bodyContent={\n          <CalendarMonth\n            date={valueDate}\n            onChange={onDateClick}\n            locale={locale}\n            // Use truthy values of strings\n            validators={validators.map(validator => (date: Date) => !validator(date))}\n            onSelectToggle={open => setSelectOpen(open)}\n            monthFormat={monthFormat}\n            weekdayFormat={weekdayFormat}\n            longWeekdayFormat={longWeekdayFormat}\n            dayFormat={dayFormat}\n            weekStart={weekStart}\n            rangeStart={rangeStart}\n          />\n        }\n        showClose={false}\n        isVisible={popoverOpen}\n        shouldClose={(_1, _2, event) => {\n          event = event as KeyboardEvent;\n          // Let the select menu close\n          if (event.keyCode && event.keyCode === 27 && selectOpen) {\n            return false;\n          }\n          // Let our button handle toggling\n          if (buttonRef.current && buttonRef.current.contains(event.target as Node)) {\n            return false;\n          }\n          setPopoverOpen(false);\n          return true;\n        }}\n        withFocusTrap\n        hasNoPadding\n        hasAutoWidth\n        appendTo={appendTo}\n        {...popoverProps}\n      >\n        <div className={styles.datePickerInput}>\n          <InputGroup>\n            <TextInput\n              isDisabled={isDisabled}\n              aria-label={ariaLabel}\n              placeholder={placeholder}\n              validated={errorText ? 'error' : 'default'}\n              value={value}\n              onChange={onTextInput}\n              onBlur={onInputBlur}\n              onKeyPress={onKeyPress}\n              {...inputProps}\n            />\n            <button\n              ref={buttonRef}\n              className={css(buttonStyles.button, buttonStyles.modifiers.control)}\n              aria-label={buttonAriaLabel}\n              type=\"button\"\n              onClick={() => setPopoverOpen(!popoverOpen)}\n              disabled={isDisabled}\n            >\n              <OutlinedCalendarAltIcon />\n            </button>\n          </InputGroup>\n        </div>\n      </Popover>\n      {helperText && <div className={styles.datePickerHelperText}>{helperText}</div>}\n      {errorText.trim() && <div className={css(styles.datePickerHelperText, styles.modifiers.error)}>{errorText}</div>}\n    </div>\n  );\n};\n\nexport const DatePicker = React.forwardRef<DatePickerRef, DatePickerProps>(DatePickerBase);\nDatePicker.displayName = 'DatePicker';\n"]},"metadata":{},"sourceType":"module"}