{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nconst DualListSelectorTreeItemBase = _a => {\n  var {\n    onOptionCheck,\n    children,\n    className,\n    id,\n    text,\n    defaultExpanded,\n    hasBadge,\n    isChecked,\n    checkProps,\n    badgeProps,\n    itemData,\n    isDisabled = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    useMemo\n  } = _a,\n      props = __rest(_a, [\"onOptionCheck\", \"children\", \"className\", \"id\", \"text\", \"defaultExpanded\", \"hasBadge\", \"isChecked\", \"checkProps\", \"badgeProps\", \"itemData\", \"isDisabled\", \"useMemo\"]);\n\n  const ref = React.useRef(null);\n  const [isExpanded, setIsExpanded] = React.useState(defaultExpanded || false);\n  const {\n    setFocusedOption\n  } = React.useContext(DualListSelectorListContext);\n  React.useEffect(() => {\n    setIsExpanded(defaultExpanded);\n  }, [defaultExpanded]);\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.dualListSelectorListItem, className, children && styles.modifiers.expandable, isExpanded && styles.modifiers.expanded, isDisabled && styles.modifiers.disabled),\n    id: id\n  }, props, {\n    \"aria-selected\": isChecked,\n    role: \"treeitem\"\n  }, isExpanded && {\n    'aria-expanded': 'true'\n  }), React.createElement(\"div\", {\n    className: css(styles.dualListSelectorListItemRow, isChecked && styles.modifiers.selected, styles.modifiers.check)\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItem),\n    ref: ref,\n    tabIndex: -1,\n    onClick: isDisabled ? undefined : evt => {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    }\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemMain)\n  }, children && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorItemToggle),\n    onClick: e => {\n      if (children) {\n        setIsExpanded(!isExpanded);\n      }\n\n      e.stopPropagation();\n    },\n    onKeyDown: e => {\n      if (e.key === ' ' || e.key === 'Enter') {\n        document.activeElement.click();\n        e.preventDefault();\n      }\n    },\n    tabIndex: -1\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemToggleIcon)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  }))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCheck)\n  }, React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    onChange: evt => {\n      onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n      setFocusedOption(id);\n    },\n    onClick: evt => evt.stopPropagation(),\n    onKeyDown: e => {\n      if (e.key === ' ' || e.key === 'Enter') {\n        onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n        setFocusedOption(id);\n        e.preventDefault();\n      }\n    },\n    ref: elem => elem && (elem.indeterminate = isChecked === null),\n    checked: isChecked || false,\n    tabIndex: -1\n  }, checkProps))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemText)\n  }, text), hasBadge && children && React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemCount)\n  }, React.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length))))), isExpanded && children);\n};\n\nexport const DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  if (prevProps.className !== nextProps.className || prevProps.text !== nextProps.text || prevProps.id !== nextProps.id || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isChecked !== nextProps.isChecked || prevProps.itemData !== nextProps.itemData) {\n    return false;\n  }\n\n  return true;\n});\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,6EAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,2BAAT,QAA4C,2BAA5C;;AAmCA,MAAMC,4BAA4B,GAA4DC,EAAD,IAgBzD;MAhB0D;IAC5FC,aAD4F;IAE5FC,QAF4F;IAG5FC,SAH4F;IAI5FC,EAJ4F;IAK5FC,IAL4F;IAM5FC,eAN4F;IAO5FC,QAP4F;IAQ5FC,SAR4F;IAS5FC,UAT4F;IAU5FC,UAV4F;IAW5FC,QAX4F;IAY5FC,UAAU,GAAG,KAZ+E;IAa5F;IACAC;EAd4F,IAcrFb;MACJc,KAAK,cAfoF,qKAepF;;EAER,MAAMC,GAAG,GAAGvB,KAAK,CAACwB,MAAN,CAAa,IAAb,CAAZ;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B1B,KAAK,CAAC2B,QAAN,CAAeb,eAAe,IAAI,KAAlC,CAApC;EACA,MAAM;IAAEc;EAAF,IAAuB5B,KAAK,CAAC6B,UAAN,CAAiBvB,2BAAjB,CAA7B;EAEAN,KAAK,CAAC8B,SAAN,CAAgB,MAAK;IACnBJ,aAAa,CAACZ,eAAD,CAAb;EACD,CAFD,EAEG,CAACA,eAAD,CAFH;EAIA,OACEd;IACEW,SAAS,EAAET,GAAG,CACZD,MAAM,CAAC8B,wBADK,EAEZpB,SAFY,EAGZD,QAAQ,IAAIT,MAAM,CAAC+B,SAAP,CAAiBC,UAHjB,EAIZR,UAAU,IAAIxB,MAAM,CAAC+B,SAAP,CAAiBE,QAJnB,EAKZd,UAAU,IAAInB,MAAM,CAAC+B,SAAP,CAAiBG,QALnB,CADhB;IAQEvB,EAAE,EAAEA;EARN,GASMU,KATN,EASW;IAAA,iBACMN,SADN;IAEToB,IAAI,EAAC;EAFI,CATX,EAYOX,UAAU,IAAI;IAAE,iBAAiB;EAAnB,CAZrB,GAcEzB;IACEW,SAAS,EAAET,GAAG,CACZD,MAAM,CAACoC,2BADK,EAEZrB,SAAS,IAAIf,MAAM,CAAC+B,SAAP,CAAiBM,QAFlB,EAGZrC,MAAM,CAAC+B,SAAP,CAAiBO,KAHL;EADhB,GAOEvC;IACEW,SAAS,EAAET,GAAG,CAACD,MAAM,CAACuC,oBAAR,CADhB;IAEEjB,GAAG,EAAEA,GAFP;IAGEkB,QAAQ,EAAE,CAAC,CAHb;IAIEC,OAAO,EACLtB,UAAU,GACNuB,SADM,GAENC,GAAG,IAAG;MACJnC,aAAa,IAAIA,aAAa,CAACmC,GAAD,EAAM,CAAC5B,SAAP,EAAkBG,QAAlB,CAA9B;MACAS,gBAAgB,CAAChB,EAAD,CAAhB;IACD;EAVT,GAaEZ;IAAMW,SAAS,EAAET,GAAG,CAACD,MAAM,CAAC4C,wBAAR;EAApB,GACGnC,QAAQ,IACPV;IACEW,SAAS,EAAET,GAAG,CAACD,MAAM,CAAC6C,0BAAR,CADhB;IAEEJ,OAAO,EAAEK,CAAC,IAAG;MACX,IAAIrC,QAAJ,EAAc;QACZgB,aAAa,CAAC,CAACD,UAAF,CAAb;MACD;;MACDsB,CAAC,CAACC,eAAF;IACD,CAPH;IAQEC,SAAS,EAAGF,CAAD,IAA2B;MACpC,IAAIA,CAAC,CAACG,GAAF,KAAU,GAAV,IAAiBH,CAAC,CAACG,GAAF,KAAU,OAA/B,EAAwC;QACrCC,QAAQ,CAACC,aAAT,CAAuCC,KAAvC;QACDN,CAAC,CAACO,cAAF;MACD;IACF,CAbH;IAcEb,QAAQ,EAAE,CAAC;EAdb,GAgBEzC;IAAMW,SAAS,EAAET,GAAG,CAACD,MAAM,CAACsD,8BAAR;EAApB,GACEvD,oBAACI,cAAD,EAAe;IAAA;EAAA,CAAf,CADF,CAhBF,CAFJ,EAuBEJ;IAAMW,SAAS,EAAET,GAAG,CAACD,MAAM,CAACuD,yBAAR;EAApB,GACExD;IACEyD,IAAI,EAAC,UADP;IAEEC,QAAQ,EAAGd,GAAD,IAA6C;MACrDnC,aAAa,IAAIA,aAAa,CAACmC,GAAD,EAAM,CAAC5B,SAAP,EAAkBG,QAAlB,CAA9B;MACAS,gBAAgB,CAAChB,EAAD,CAAhB;IACD,CALH;IAME8B,OAAO,EAAGE,GAAD,IAA2BA,GAAG,CAACI,eAAJ,EANtC;IAOEC,SAAS,EAAGF,CAAD,IAA2B;MACpC,IAAIA,CAAC,CAACG,GAAF,KAAU,GAAV,IAAiBH,CAAC,CAACG,GAAF,KAAU,OAA/B,EAAwC;QACtCzC,aAAa,IAAIA,aAAa,CAACsC,CAAD,EAAI,CAAC/B,SAAL,EAAgBG,QAAhB,CAA9B;QACAS,gBAAgB,CAAChB,EAAD,CAAhB;QACAmC,CAAC,CAACO,cAAF;MACD;IACF,CAbH;IAcE/B,GAAG,EAAEoC,IAAI,IAAIA,IAAI,KAAKA,IAAI,CAACC,aAAL,GAAqB5C,SAAS,KAAK,IAAxC,CAdnB;IAeE6C,OAAO,EAAE7C,SAAS,IAAI,KAfxB;IAgBEyB,QAAQ,EAAE,CAAC;EAhBb,GAiBMxB,UAjBN,EADF,CAvBF,EA6CEjB;IAAMW,SAAS,EAAET,GAAG,CAACD,MAAM,CAAC6D,wBAAR;EAApB,GAAwDjD,IAAxD,CA7CF,EA8CGE,QAAQ,IAAIL,QAAZ,IACCV;IAAMW,SAAS,EAAET,GAAG,CAACD,MAAM,CAAC8D,yBAAR;EAApB,GACE/D,oBAACG,KAAD,EAAM6D,kBAAK9C,UAAL,CAAN,EAAwBb,WAAW,CAAEK,QAA+B,CAACY,KAAhC,CAAsC2C,IAAxC,CAAX,CAAyDC,MAAjF,CADF,CA/CJ,CAbF,CAPF,CAdF,EAwFGzC,UAAU,IAAIf,QAxFjB,CADF;AA4FD,CArHD;;AAuHA,OAAO,MAAMyD,wBAAwB,GAAGnE,KAAK,CAACoE,IAAN,CAAW7D,4BAAX,EAAyC,CAAC8D,SAAD,EAAYC,SAAZ,KAAyB;EACxG,IAAI,CAACA,SAAS,CAACjD,OAAf,EAAwB;IACtB,OAAO,KAAP;EACD;;EAED,IACEgD,SAAS,CAAC1D,SAAV,KAAwB2D,SAAS,CAAC3D,SAAlC,IACA0D,SAAS,CAACxD,IAAV,KAAmByD,SAAS,CAACzD,IAD7B,IAEAwD,SAAS,CAACzD,EAAV,KAAiB0D,SAAS,CAAC1D,EAF3B,IAGAyD,SAAS,CAACvD,eAAV,KAA8BwD,SAAS,CAACxD,eAHxC,IAIAuD,SAAS,CAACpD,UAAV,KAAyBqD,SAAS,CAACrD,UAJnC,IAKAoD,SAAS,CAACtD,QAAV,KAAuBuD,SAAS,CAACvD,QALjC,IAMAsD,SAAS,CAACnD,UAAV,KAAyBoD,SAAS,CAACpD,UANnC,IAOAmD,SAAS,CAACrD,SAAV,KAAwBsD,SAAS,CAACtD,SAPlC,IAQAqD,SAAS,CAAClD,QAAV,KAAuBmD,SAAS,CAACnD,QATnC,EAUE;IACA,OAAO,KAAP;EACD;;EAED,OAAO,IAAP;AACD,CApBuC,CAAjC;AAsBPgD,wBAAwB,CAACI,WAAzB,GAAuC,0BAAvC","names":["React","styles","css","Badge","AngleRightIcon","flattenTree","DualListSelectorListContext","DualListSelectorTreeItemBase","_a","onOptionCheck","children","className","id","text","defaultExpanded","hasBadge","isChecked","checkProps","badgeProps","itemData","isDisabled","useMemo","props","ref","useRef","isExpanded","setIsExpanded","useState","setFocusedOption","useContext","useEffect","dualListSelectorListItem","modifiers","expandable","expanded","disabled","role","dualListSelectorListItemRow","selected","check","dualListSelectorItem","tabIndex","onClick","undefined","evt","dualListSelectorItemMain","dualListSelectorItemToggle","e","stopPropagation","onKeyDown","key","document","activeElement","click","preventDefault","dualListSelectorItemToggleIcon","dualListSelectorItemCheck","type","onChange","elem","indeterminate","checked","dualListSelectorItemText","dualListSelectorItemCount","Object","data","length","DualListSelectorTreeItem","memo","prevProps","nextProps","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorTreeItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport { Badge } from '../Badge';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { flattenTree } from './treeUtils';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorTreeItemProps extends React.HTMLProps<HTMLLIElement> {\n  /** Content rendered inside the dual list selector. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating this option is expanded by default. */\n  defaultExpanded?: boolean;\n  /** Flag indicating this option has a badge */\n  hasBadge?: boolean;\n  /** Callback fired when an option is checked */\n  onOptionCheck?: (\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** ID of the option */\n  id: string;\n  /** Text of the option */\n  text: string;\n  /** Flag indicating if this open is checked. */\n  isChecked?: boolean;\n  /** Additional properties to pass to the option checkbox */\n  checkProps?: any;\n  /** Additional properties to pass to the option badge */\n  badgeProps?: any;\n  /** Raw data of the option */\n  itemData?: DualListSelectorTreeItemData;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n  /** Flag indicating the DualListSelector tree should utilize memoization to help render large data sets. */\n  useMemo?: boolean;\n}\n\nconst DualListSelectorTreeItemBase: React.FunctionComponent<DualListSelectorTreeItemProps> = ({\n  onOptionCheck,\n  children,\n  className,\n  id,\n  text,\n  defaultExpanded,\n  hasBadge,\n  isChecked,\n  checkProps,\n  badgeProps,\n  itemData,\n  isDisabled = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  useMemo,\n  ...props\n}: DualListSelectorTreeItemProps) => {\n  const ref = React.useRef(null);\n  const [isExpanded, setIsExpanded] = React.useState(defaultExpanded || false);\n  const { setFocusedOption } = React.useContext(DualListSelectorListContext);\n\n  React.useEffect(() => {\n    setIsExpanded(defaultExpanded);\n  }, [defaultExpanded]);\n\n  return (\n    <li\n      className={css(\n        styles.dualListSelectorListItem,\n        className,\n        children && styles.modifiers.expandable,\n        isExpanded && styles.modifiers.expanded,\n        isDisabled && styles.modifiers.disabled\n      )}\n      id={id}\n      {...props}\n      aria-selected={isChecked}\n      role=\"treeitem\"\n      {...(isExpanded && { 'aria-expanded': 'true' })}\n    >\n      <div\n        className={css(\n          styles.dualListSelectorListItemRow,\n          isChecked && styles.modifiers.selected,\n          styles.modifiers.check\n        )}\n      >\n        <div\n          className={css(styles.dualListSelectorItem)}\n          ref={ref}\n          tabIndex={-1}\n          onClick={\n            isDisabled\n              ? undefined\n              : evt => {\n                  onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                  setFocusedOption(id);\n                }\n          }\n        >\n          <span className={css(styles.dualListSelectorItemMain)}>\n            {children && (\n              <div\n                className={css(styles.dualListSelectorItemToggle)}\n                onClick={e => {\n                  if (children) {\n                    setIsExpanded(!isExpanded);\n                  }\n                  e.stopPropagation();\n                }}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                  if (e.key === ' ' || e.key === 'Enter') {\n                    (document.activeElement as HTMLElement).click();\n                    e.preventDefault();\n                  }\n                }}\n                tabIndex={-1}\n              >\n                <span className={css(styles.dualListSelectorItemToggleIcon)}>\n                  <AngleRightIcon aria-hidden />\n                </span>\n              </div>\n            )}\n            <span className={css(styles.dualListSelectorItemCheck)}>\n              <input\n                type=\"checkbox\"\n                onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n                  onOptionCheck && onOptionCheck(evt, !isChecked, itemData);\n                  setFocusedOption(id);\n                }}\n                onClick={(evt: React.MouseEvent) => evt.stopPropagation()}\n                onKeyDown={(e: React.KeyboardEvent) => {\n                  if (e.key === ' ' || e.key === 'Enter') {\n                    onOptionCheck && onOptionCheck(e, !isChecked, itemData);\n                    setFocusedOption(id);\n                    e.preventDefault();\n                  }\n                }}\n                ref={elem => elem && (elem.indeterminate = isChecked === null)}\n                checked={isChecked || false}\n                tabIndex={-1}\n                {...checkProps}\n              />\n            </span>\n\n            <span className={css(styles.dualListSelectorItemText)}>{text}</span>\n            {hasBadge && children && (\n              <span className={css(styles.dualListSelectorItemCount)}>\n                <Badge {...badgeProps}>{flattenTree((children as React.ReactElement).props.data).length}</Badge>\n              </span>\n            )}\n          </span>\n        </div>\n      </div>\n      {isExpanded && children}\n    </li>\n  );\n};\n\nexport const DualListSelectorTreeItem = React.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {\n  if (!nextProps.useMemo) {\n    return false;\n  }\n\n  if (\n    prevProps.className !== nextProps.className ||\n    prevProps.text !== nextProps.text ||\n    prevProps.id !== nextProps.id ||\n    prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n    prevProps.checkProps !== nextProps.checkProps ||\n    prevProps.hasBadge !== nextProps.hasBadge ||\n    prevProps.badgeProps !== nextProps.badgeProps ||\n    prevProps.isChecked !== nextProps.isChecked ||\n    prevProps.itemData !== nextProps.itemData\n  ) {\n    return false;\n  }\n\n  return true;\n});\n\nDualListSelectorTreeItem.displayName = 'DualListSelectorTreeItem';\n"]},"metadata":{},"sourceType":"module"}