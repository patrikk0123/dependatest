{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { useEffect } from 'react';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Button } from '../Button/Button';\nimport { Select, SelectOption } from '../Select';\nimport { InputGroup } from '../InputGroup';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CalendarMonth/calendar-month';\nimport { getUniqueId } from '../../helpers/util';\nexport var Weekday;\n\n(function (Weekday) {\n  Weekday[Weekday[\"Sunday\"] = 0] = \"Sunday\";\n  Weekday[Weekday[\"Monday\"] = 1] = \"Monday\";\n  Weekday[Weekday[\"Tuesday\"] = 2] = \"Tuesday\";\n  Weekday[Weekday[\"Wednesday\"] = 3] = \"Wednesday\";\n  Weekday[Weekday[\"Thursday\"] = 4] = \"Thursday\";\n  Weekday[Weekday[\"Friday\"] = 5] = \"Friday\";\n  Weekday[Weekday[\"Saturday\"] = 6] = \"Saturday\";\n})(Weekday || (Weekday = {})); // Must be numeric given current header design\n\n\nconst yearFormat = date => date.getFullYear();\n\nconst buildCalendar = (year, month, weekStart, validators) => {\n  const defaultDate = new Date(year, month);\n  const firstDayOfWeek = new Date(defaultDate);\n  firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart); // We will show a maximum of 6 weeks like Google calendar\n  // Assume we just want the numbers for now...\n\n  const calendarWeeks = [];\n\n  for (let i = 0; i < 6; i++) {\n    const week = [];\n\n    for (let j = 0; j < 7; j++) {\n      const date = new Date(firstDayOfWeek);\n      week.push({\n        date,\n        isValid: validators.every(validator => validator(date))\n      });\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    }\n\n    calendarWeeks.push(week);\n\n    if (firstDayOfWeek.getMonth() !== defaultDate.getMonth()) {\n      break;\n    }\n  }\n\n  return calendarWeeks;\n};\n\nconst isSameDate = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n\nexport const isValidDate = date => Boolean(date && !isNaN(date));\nconst today = new Date();\nexport const CalendarMonth = _a => {\n  var {\n    date: dateProp,\n    locale = undefined,\n    monthFormat = date => date.toLocaleDateString(locale, {\n      month: 'long'\n    }),\n    weekdayFormat = date => date.toLocaleDateString(locale, {\n      weekday: 'narrow'\n    }),\n    longWeekdayFormat = date => date.toLocaleDateString(locale, {\n      weekday: 'long'\n    }),\n    dayFormat = date => date.getDate(),\n    weekStart = 0,\n    // Use the American Sunday as a default\n    onChange = () => {},\n    validators = [() => true],\n    className,\n    onSelectToggle = () => {},\n    rangeStart,\n    prevMonthAriaLabel = 'Previous month',\n    nextMonthAriaLabel = 'Next month',\n    yearInputAriaLabel = 'Select year',\n    cellAriaLabel,\n    isDateFocused = false\n  } = _a,\n      props = __rest(_a, [\"date\", \"locale\", \"monthFormat\", \"weekdayFormat\", \"longWeekdayFormat\", \"dayFormat\", \"weekStart\", \"onChange\", \"validators\", \"className\", \"onSelectToggle\", \"rangeStart\", \"prevMonthAriaLabel\", \"nextMonthAriaLabel\", \"yearInputAriaLabel\", \"cellAriaLabel\", \"isDateFocused\"]);\n\n  const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(monthNum => new Date(1990, monthNum)).map(monthFormat);\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false); // eslint-disable-next-line prefer-const\n\n  const [focusedDate, setFocusedDate] = React.useState(() => {\n    const initDate = new Date(dateProp);\n\n    if (isValidDate(initDate)) {\n      return initDate;\n    } else {\n      if (isValidDate(rangeStart)) {\n        return rangeStart;\n      } else {\n        return today;\n      }\n    }\n  });\n  const [hoveredDate, setHoveredDate] = React.useState(new Date(focusedDate));\n  const focusRef = React.useRef();\n  const [hiddenMonthId] = React.useState(getUniqueId('hidden-month-span'));\n  const [shouldFocus, setShouldFocus] = React.useState(false);\n\n  const isValidated = date => validators.every(validator => validator(date));\n\n  const focusedDateValidated = isValidated(focusedDate);\n  useEffect(() => {\n    if (isValidDate(dateProp) && !isSameDate(focusedDate, dateProp)) {\n      setFocusedDate(dateProp);\n    } else if (!dateProp) {\n      setFocusedDate(today);\n    }\n  }, [dateProp]);\n  useEffect(() => {\n    // Calendar month should not be focused on page load\n    // Datepicker should place focus in calendar month when opened\n    if ((shouldFocus || isDateFocused) && focusedDateValidated && focusRef.current) {\n      focusRef.current.focus();\n    } else {\n      setShouldFocus(true);\n    }\n  }, [focusedDate, isDateFocused, focusedDateValidated, focusRef]);\n\n  const onMonthClick = newDate => {\n    setFocusedDate(newDate);\n    setHoveredDate(newDate);\n    setShouldFocus(false);\n  };\n\n  const onKeyDown = ev => {\n    const newDate = new Date(focusedDate);\n\n    if (ev.key === 'ArrowUp') {\n      newDate.setDate(newDate.getDate() - 7);\n    } else if (ev.key === 'ArrowRight') {\n      newDate.setDate(newDate.getDate() + 1);\n    } else if (ev.key === 'ArrowDown') {\n      newDate.setDate(newDate.getDate() + 7);\n    } else if (ev.key === 'ArrowLeft') {\n      newDate.setDate(newDate.getDate() - 1);\n    }\n\n    if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {\n      ev.preventDefault();\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(true);\n    }\n  };\n\n  const addMonth = toAdd => {\n    const newDate = new Date(focusedDate);\n    newDate.setMonth(newDate.getMonth() + toAdd);\n    return newDate;\n  };\n\n  const prevMonth = addMonth(-1);\n  const nextMonth = addMonth(1);\n  const focusedYear = focusedDate.getFullYear();\n  const focusedMonth = focusedDate.getMonth();\n  const calendar = React.useMemo(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [focusedYear, focusedMonth, weekStart, validators]);\n\n  if (!focusedDateValidated) {\n    const toFocus = calendar.reduce((acc, cur) => [...acc, ...cur], []).filter(_ref => {\n      let {\n        date,\n        isValid\n      } = _ref;\n      return isValid && date.getMonth() === focusedMonth;\n    }).map(_ref2 => {\n      let {\n        date\n      } = _ref2;\n      return {\n        date,\n        days: Math.abs(focusedDate.getTime() - date.getTime())\n      };\n    }).sort((o1, o2) => o1.days - o2.days).map(_ref3 => {\n      let {\n        date\n      } = _ref3;\n      return date;\n    })[0];\n\n    if (toFocus) {\n      setFocusedDate(toFocus);\n      setHoveredDate(toFocus);\n    }\n  }\n\n  const isHoveredDateValid = isValidated(hoveredDate);\n  const monthFormatted = monthFormat(focusedDate);\n  const yearFormatted = yearFormat(focusedDate);\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.calendarMonth, className)\n  }, props), React.createElement(\"div\", {\n    className: styles.calendarMonthHeader\n  }, React.createElement(\"div\", {\n    className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.prevMonth)\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": prevMonthAriaLabel,\n    onClick: () => onMonthClick(prevMonth)\n  }, React.createElement(AngleLeftIcon, {\n    \"aria-hidden\": true\n  }))), React.createElement(InputGroup, null, React.createElement(\"div\", {\n    className: styles.calendarMonthHeaderMonth\n  }, React.createElement(\"span\", {\n    id: hiddenMonthId,\n    hidden: true\n  }, \"Month\"), React.createElement(Select // Max width with \"September\"\n  , {\n    // Max width with \"September\"\n    width: \"140px\",\n    \"aria-labelledby\": hiddenMonthId,\n    isOpen: isSelectOpen,\n    onToggle: () => {\n      setIsSelectOpen(!isSelectOpen);\n      onSelectToggle(!isSelectOpen);\n    },\n    onSelect: (_ev, monthNum) => {\n      // When we put CalendarMonth in a Popover we want the Popover's onDocumentClick\n      // to see the SelectOption as a child so it doesn't close the Popover.\n      setTimeout(() => {\n        setIsSelectOpen(false);\n        onSelectToggle(false);\n        const newDate = new Date(focusedDate);\n        newDate.setMonth(Number(monthNum));\n        setFocusedDate(newDate);\n        setHoveredDate(newDate);\n        setShouldFocus(false);\n      }, 0);\n    },\n    variant: \"single\",\n    selections: monthFormatted\n  }, longMonths.map((longMonth, index) => React.createElement(SelectOption, {\n    key: index,\n    value: index,\n    isSelected: longMonth === monthFormatted\n  }, longMonth)))), React.createElement(\"div\", {\n    className: styles.calendarMonthHeaderYear\n  }, React.createElement(TextInput, {\n    \"aria-label\": yearInputAriaLabel,\n    type: \"number\",\n    value: yearFormatted,\n    onChange: year => {\n      const newDate = new Date(focusedDate);\n      newDate.setFullYear(+year);\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(false);\n    }\n  }))), React.createElement(\"div\", {\n    className: css(styles.calendarMonthHeaderNavControl, styles.modifiers.nextMonth)\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": nextMonthAriaLabel,\n    onClick: () => onMonthClick(nextMonth)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  })))), React.createElement(\"table\", {\n    className: styles.calendarMonthCalendar\n  }, React.createElement(\"thead\", {\n    className: styles.calendarMonthDays\n  }, React.createElement(\"tr\", null, calendar[0].map((_ref4, index) => {\n    let {\n      date\n    } = _ref4;\n    return React.createElement(\"th\", {\n      key: index,\n      className: styles.calendarMonthDay,\n      scope: \"col\"\n    }, React.createElement(\"span\", {\n      className: \"pf-screen-reader\"\n    }, longWeekdayFormat(date)), React.createElement(\"span\", {\n      \"aria-hidden\": true\n    }, weekdayFormat(date)));\n  }))), React.createElement(\"tbody\", {\n    onKeyDown: onKeyDown\n  }, calendar.map((week, index) => React.createElement(\"tr\", {\n    key: index,\n    className: styles.calendarMonthDatesRow\n  }, week.map((_ref5, index) => {\n    let {\n      date,\n      isValid\n    } = _ref5;\n    const dayFormatted = dayFormat(date);\n    const isToday = isSameDate(date, today);\n    const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);\n    const isFocused = isSameDate(date, focusedDate);\n    const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();\n    const isRangeStart = isValidDate(rangeStart) && isSameDate(date, rangeStart);\n    let isInRange = false;\n    let isRangeEnd = false;\n\n    if (isValidDate(rangeStart) && isValidDate(dateProp)) {\n      isInRange = date > rangeStart && date < dateProp;\n      isRangeEnd = isSameDate(date, dateProp);\n    } else if (isValidDate(rangeStart) && isHoveredDateValid) {\n      if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {\n        isInRange = date > rangeStart && date < hoveredDate;\n        isRangeEnd = isSameDate(date, hoveredDate);\n      } // Don't handle focused dates before start dates for now.\n      // Core would likely need new styles\n\n    }\n\n    return React.createElement(\"td\", {\n      key: index,\n      className: css(styles.calendarMonthDatesCell, isAdjacentMonth && styles.modifiers.adjacentMonth, isToday && styles.modifiers.current, (isSelected || isRangeStart) && styles.modifiers.selected, !isValid && styles.modifiers.disabled, (isInRange || isRangeStart || isRangeEnd) && styles.modifiers.inRange, isRangeStart && styles.modifiers.startRange, isRangeEnd && styles.modifiers.endRange)\n    }, React.createElement(\"button\", Object.assign({\n      className: css(styles.calendarMonthDate, isRangeEnd && styles.modifiers.hover, !isValid && styles.modifiers.disabled),\n      type: \"button\",\n      onClick: () => onChange(date),\n      onMouseOver: () => setHoveredDate(date),\n      tabIndex: isFocused ? 0 : -1,\n      disabled: !isValid,\n      \"aria-label\": cellAriaLabel ? cellAriaLabel(date) : `${dayFormatted} ${monthFormatted} ${yearFormatted}`\n    }, isFocused && {\n      ref: focusRef\n    }), dayFormatted));\n  }))))));\n};","map":{"version":3,"mappings":"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","names":["React","useEffect","TextInput","Button","Select","SelectOption","InputGroup","AngleLeftIcon","AngleRightIcon","css","styles","getUniqueId","Weekday","yearFormat","date","getFullYear","buildCalendar","year","month","weekStart","validators","defaultDate","Date","firstDayOfWeek","setDate","getDate","getDay","calendarWeeks","i","week","j","push","isValid","every","validator","getMonth","isSameDate","d1","d2","isValidDate","Boolean","isNaN","today","CalendarMonth","_a","dateProp","locale","undefined","monthFormat","toLocaleDateString","weekdayFormat","weekday","longWeekdayFormat","dayFormat","onChange","className","onSelectToggle","rangeStart","prevMonthAriaLabel","nextMonthAriaLabel","yearInputAriaLabel","cellAriaLabel","isDateFocused","props","longMonths","map","monthNum","isSelectOpen","setIsSelectOpen","useState","focusedDate","setFocusedDate","initDate","hoveredDate","setHoveredDate","focusRef","useRef","hiddenMonthId","shouldFocus","setShouldFocus","isValidated","focusedDateValidated","current","focus","onMonthClick","newDate","onKeyDown","ev","key","getTime","preventDefault","addMonth","toAdd","setMonth","prevMonth","nextMonth","focusedYear","focusedMonth","calendar","useMemo","toFocus","reduce","acc","cur","filter","days","Math","abs","sort","o1","o2","isHoveredDateValid","monthFormatted","yearFormatted","calendarMonth","calendarMonthHeader","calendarMonthHeaderNavControl","modifiers","variant","onClick","calendarMonthHeaderMonth","id","hidden","width","isOpen","onToggle","onSelect","_ev","setTimeout","Number","selections","longMonth","index","value","isSelected","calendarMonthHeaderYear","type","setFullYear","calendarMonthCalendar","calendarMonthDays","calendarMonthDay","scope","calendarMonthDatesRow","dayFormatted","isToday","isFocused","isAdjacentMonth","isRangeStart","isInRange","isRangeEnd","calendarMonthDatesCell","adjacentMonth","selected","disabled","inRange","startRange","endRange","calendarMonthDate","hover","onMouseOver","tabIndex","ref"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/CalendarMonth/CalendarMonth.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { TextInput } from '../TextInput/TextInput';\nimport { Button } from '../Button/Button';\nimport { Select, SelectOption } from '../Select';\nimport { InputGroup } from '../InputGroup';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CalendarMonth/calendar-month';\nimport { getUniqueId } from '../../helpers/util';\n\nexport enum Weekday {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\nexport interface CalendarFormat {\n  /** How to format months in Select */\n  monthFormat?: (date: Date) => React.ReactNode;\n  /** How to format week days in header */\n  weekdayFormat?: (date: Date) => React.ReactNode;\n  /** How to format days in header for screen readers */\n  longWeekdayFormat?: (date: Date) => React.ReactNode;\n  /** How to format days in buttons in table cells */\n  dayFormat?: (date: Date) => React.ReactNode;\n  /** If using the default formatters which locale to use. Undefined defaults to current locale. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation */\n  locale?: string;\n  /** Day of week that starts the week. 0 is Sunday, 6 is Saturday. */\n  weekStart?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday;\n  /** Which date to start range styles from */\n  rangeStart?: Date;\n  /** Aria-label for the previous month button */\n  prevMonthAriaLabel?: string;\n  /** Aria-label for the next month button */\n  nextMonthAriaLabel?: string;\n  /** Aria-label for the year input */\n  yearInputAriaLabel?: string;\n  /** Aria-label for the date cells */\n  cellAriaLabel?: (date: Date) => string;\n}\n\nexport interface CalendarProps extends CalendarFormat, Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Month/year to base other dates around */\n  date?: Date;\n  /** Callback when date is selected */\n  onChange?: (date: Date) => void;\n  /** Functions that returns if a date is valid and selectable */\n  validators?: ((date: Date) => boolean)[];\n  /** Classname to add to outer div */\n  className?: string;\n  /** @hide Internal prop to allow pressing escape in select menu to not close popover */\n  onSelectToggle?: (open: boolean) => void;\n  /** Flag to set browser focus on the passed date **/\n  isDateFocused?: boolean;\n}\n\n// Must be numeric given current header design\nconst yearFormat = (date: Date) => date.getFullYear();\n\nconst buildCalendar = (year: number, month: number, weekStart: number, validators: ((date: Date) => boolean)[]) => {\n  const defaultDate = new Date(year, month);\n  const firstDayOfWeek = new Date(defaultDate);\n  firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart);\n  // We will show a maximum of 6 weeks like Google calendar\n  // Assume we just want the numbers for now...\n  const calendarWeeks = [];\n  for (let i = 0; i < 6; i++) {\n    const week = [];\n    for (let j = 0; j < 7; j++) {\n      const date = new Date(firstDayOfWeek);\n      week.push({\n        date,\n        isValid: validators.every(validator => validator(date))\n      });\n      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);\n    }\n    calendarWeeks.push(week);\n    if (firstDayOfWeek.getMonth() !== defaultDate.getMonth()) {\n      break;\n    }\n  }\n\n  return calendarWeeks;\n};\n\nconst isSameDate = (d1: Date, d2: Date) =>\n  d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n\nexport const isValidDate = (date: Date) => Boolean(date && !isNaN(date as any));\n\nconst today = new Date();\n\nexport const CalendarMonth = ({\n  date: dateProp,\n  locale = undefined,\n  monthFormat = date => date.toLocaleDateString(locale, { month: 'long' }),\n  weekdayFormat = date => date.toLocaleDateString(locale, { weekday: 'narrow' }),\n  longWeekdayFormat = date => date.toLocaleDateString(locale, { weekday: 'long' }),\n  dayFormat = date => date.getDate(),\n  weekStart = 0, // Use the American Sunday as a default\n  onChange = () => {},\n  validators = [() => true],\n  className,\n  onSelectToggle = () => {},\n  rangeStart,\n  prevMonthAriaLabel = 'Previous month',\n  nextMonthAriaLabel = 'Next month',\n  yearInputAriaLabel = 'Select year',\n  cellAriaLabel,\n  isDateFocused = false,\n  ...props\n}: CalendarProps) => {\n  const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map(monthNum => new Date(1990, monthNum)).map(monthFormat);\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  // eslint-disable-next-line prefer-const\n  const [focusedDate, setFocusedDate] = React.useState(() => {\n    const initDate = new Date(dateProp);\n    if (isValidDate(initDate)) {\n      return initDate;\n    } else {\n      if (isValidDate(rangeStart)) {\n        return rangeStart;\n      } else {\n        return today;\n      }\n    }\n  });\n  const [hoveredDate, setHoveredDate] = React.useState(new Date(focusedDate));\n  const focusRef = React.useRef<HTMLButtonElement>();\n  const [hiddenMonthId] = React.useState(getUniqueId('hidden-month-span'));\n  const [shouldFocus, setShouldFocus] = React.useState(false);\n\n  const isValidated = (date: Date) => validators.every(validator => validator(date));\n  const focusedDateValidated = isValidated(focusedDate);\n  useEffect(() => {\n    if (isValidDate(dateProp) && !isSameDate(focusedDate, dateProp)) {\n      setFocusedDate(dateProp);\n    } else if (!dateProp) {\n      setFocusedDate(today);\n    }\n  }, [dateProp]);\n\n  useEffect(() => {\n    // Calendar month should not be focused on page load\n    // Datepicker should place focus in calendar month when opened\n    if ((shouldFocus || isDateFocused) && focusedDateValidated && focusRef.current) {\n      focusRef.current.focus();\n    } else {\n      setShouldFocus(true);\n    }\n  }, [focusedDate, isDateFocused, focusedDateValidated, focusRef]);\n\n  const onMonthClick = (newDate: Date) => {\n    setFocusedDate(newDate);\n    setHoveredDate(newDate);\n    setShouldFocus(false);\n  };\n\n  const onKeyDown = (ev: React.KeyboardEvent<HTMLTableSectionElement>) => {\n    const newDate = new Date(focusedDate);\n    if (ev.key === 'ArrowUp') {\n      newDate.setDate(newDate.getDate() - 7);\n    } else if (ev.key === 'ArrowRight') {\n      newDate.setDate(newDate.getDate() + 1);\n    } else if (ev.key === 'ArrowDown') {\n      newDate.setDate(newDate.getDate() + 7);\n    } else if (ev.key === 'ArrowLeft') {\n      newDate.setDate(newDate.getDate() - 1);\n    }\n    if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {\n      ev.preventDefault();\n      setFocusedDate(newDate);\n      setHoveredDate(newDate);\n      setShouldFocus(true);\n    }\n  };\n\n  const addMonth = (toAdd: -1 | 1) => {\n    const newDate = new Date(focusedDate);\n    newDate.setMonth(newDate.getMonth() + toAdd);\n    return newDate;\n  };\n\n  const prevMonth = addMonth(-1);\n  const nextMonth = addMonth(1);\n  const focusedYear = focusedDate.getFullYear();\n  const focusedMonth = focusedDate.getMonth();\n  const calendar = React.useMemo(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [\n    focusedYear,\n    focusedMonth,\n    weekStart,\n    validators\n  ]);\n  if (!focusedDateValidated) {\n    const toFocus = calendar\n      .reduce((acc, cur) => [...acc, ...cur], [])\n      .filter(({ date, isValid }) => isValid && date.getMonth() === focusedMonth)\n      .map(({ date }) => ({ date, days: Math.abs(focusedDate.getTime() - date.getTime()) }))\n      .sort((o1, o2) => o1.days - o2.days)\n      .map(({ date }) => date)[0];\n    if (toFocus) {\n      setFocusedDate(toFocus);\n      setHoveredDate(toFocus);\n    }\n  }\n  const isHoveredDateValid = isValidated(hoveredDate);\n  const monthFormatted = monthFormat(focusedDate);\n  const yearFormatted = yearFormat(focusedDate);\n  return (\n    <div className={css(styles.calendarMonth, className)} {...props}>\n      <div className={styles.calendarMonthHeader}>\n        <div className={css(styles.calendarMonthHeaderNavControl, styles.modifiers.prevMonth)}>\n          <Button variant=\"plain\" aria-label={prevMonthAriaLabel} onClick={() => onMonthClick(prevMonth)}>\n            <AngleLeftIcon aria-hidden={true} />\n          </Button>\n        </div>\n        <InputGroup>\n          <div className={styles.calendarMonthHeaderMonth}>\n            <span id={hiddenMonthId} hidden>\n              Month\n            </span>\n            <Select\n              // Max width with \"September\"\n              width=\"140px\"\n              aria-labelledby={hiddenMonthId}\n              isOpen={isSelectOpen}\n              onToggle={() => {\n                setIsSelectOpen(!isSelectOpen);\n                onSelectToggle(!isSelectOpen);\n              }}\n              onSelect={(_ev, monthNum) => {\n                // When we put CalendarMonth in a Popover we want the Popover's onDocumentClick\n                // to see the SelectOption as a child so it doesn't close the Popover.\n                setTimeout(() => {\n                  setIsSelectOpen(false);\n                  onSelectToggle(false);\n                  const newDate = new Date(focusedDate);\n                  newDate.setMonth(Number(monthNum as string));\n                  setFocusedDate(newDate);\n                  setHoveredDate(newDate);\n                  setShouldFocus(false);\n                }, 0);\n              }}\n              variant=\"single\"\n              selections={monthFormatted}\n            >\n              {longMonths.map((longMonth, index) => (\n                <SelectOption key={index} value={index} isSelected={longMonth === monthFormatted}>\n                  {longMonth}\n                </SelectOption>\n              ))}\n            </Select>\n          </div>\n          <div className={styles.calendarMonthHeaderYear}>\n            <TextInput\n              aria-label={yearInputAriaLabel}\n              type=\"number\"\n              value={yearFormatted}\n              onChange={year => {\n                const newDate = new Date(focusedDate);\n                newDate.setFullYear(+year);\n                setFocusedDate(newDate);\n                setHoveredDate(newDate);\n                setShouldFocus(false);\n              }}\n            />\n          </div>\n        </InputGroup>\n        <div className={css(styles.calendarMonthHeaderNavControl, styles.modifiers.nextMonth)}>\n          <Button variant=\"plain\" aria-label={nextMonthAriaLabel} onClick={() => onMonthClick(nextMonth)}>\n            <AngleRightIcon aria-hidden={true} />\n          </Button>\n        </div>\n      </div>\n      <table className={styles.calendarMonthCalendar}>\n        <thead className={styles.calendarMonthDays}>\n          <tr>\n            {calendar[0].map(({ date }, index) => (\n              <th key={index} className={styles.calendarMonthDay} scope=\"col\">\n                <span className=\"pf-screen-reader\">{longWeekdayFormat(date)}</span>\n                <span aria-hidden>{weekdayFormat(date)}</span>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody onKeyDown={onKeyDown}>\n          {calendar.map((week, index) => (\n            <tr key={index} className={styles.calendarMonthDatesRow}>\n              {week.map(({ date, isValid }, index) => {\n                const dayFormatted = dayFormat(date);\n                const isToday = isSameDate(date, today);\n                const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);\n                const isFocused = isSameDate(date, focusedDate);\n                const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();\n                const isRangeStart = isValidDate(rangeStart) && isSameDate(date, rangeStart);\n                let isInRange = false;\n                let isRangeEnd = false;\n                if (isValidDate(rangeStart) && isValidDate(dateProp)) {\n                  isInRange = date > rangeStart && date < dateProp;\n                  isRangeEnd = isSameDate(date, dateProp);\n                } else if (isValidDate(rangeStart) && isHoveredDateValid) {\n                  if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {\n                    isInRange = date > rangeStart && date < hoveredDate;\n                    isRangeEnd = isSameDate(date, hoveredDate);\n                  }\n                  // Don't handle focused dates before start dates for now.\n                  // Core would likely need new styles\n                }\n\n                return (\n                  <td\n                    key={index}\n                    className={css(\n                      styles.calendarMonthDatesCell,\n                      isAdjacentMonth && styles.modifiers.adjacentMonth,\n                      isToday && styles.modifiers.current,\n                      (isSelected || isRangeStart) && styles.modifiers.selected,\n                      !isValid && styles.modifiers.disabled,\n                      (isInRange || isRangeStart || isRangeEnd) && styles.modifiers.inRange,\n                      isRangeStart && styles.modifiers.startRange,\n                      isRangeEnd && styles.modifiers.endRange\n                    )}\n                  >\n                    <button\n                      className={css(\n                        styles.calendarMonthDate,\n                        isRangeEnd && styles.modifiers.hover,\n                        !isValid && styles.modifiers.disabled\n                      )}\n                      type=\"button\"\n                      onClick={() => onChange(date)}\n                      onMouseOver={() => setHoveredDate(date)}\n                      tabIndex={isFocused ? 0 : -1}\n                      disabled={!isValid}\n                      aria-label={\n                        cellAriaLabel ? cellAriaLabel(date) : `${dayFormatted} ${monthFormatted} ${yearFormatted}`\n                      }\n                      {...(isFocused && { ref: focusRef })}\n                    >\n                      {dayFormatted}\n                    </button>\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}