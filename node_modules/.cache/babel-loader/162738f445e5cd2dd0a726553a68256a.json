{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport globalBreakpointXl from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\nimport { Drawer, DrawerContent, DrawerContentBody, DrawerPanelContent } from '../Drawer';\nimport { PageGroup } from './PageGroup';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nimport { getBreakpoint } from '../../helpers/util';\nexport var PageLayouts;\n\n(function (PageLayouts) {\n  PageLayouts[\"vertical\"] = \"vertical\";\n  PageLayouts[\"horizontal\"] = \"horizontal\";\n})(PageLayouts || (PageLayouts = {}));\n\nexport var pageContextDefaults = {\n  isManagedSidebar: false,\n  isNavOpen: false,\n  onNavToggle: function onNavToggle() {\n    return null;\n  },\n  width: null,\n  getBreakpoint: getBreakpoint\n};\nexport var PageContext = React.createContext(pageContextDefaults);\nexport var PageContextProvider = PageContext.Provider;\nexport var PageContextConsumer = PageContext.Consumer;\nexport var Page = /*#__PURE__*/function (_React$Component) {\n  _inherits(Page, _React$Component);\n\n  var _super = _createSuper(Page);\n\n  function Page(props) {\n    var _this;\n\n    _classCallCheck(this, Page);\n\n    _this = _super.call(this, props);\n    _this.mainRef = React.createRef();\n    _this.pageRef = React.createRef();\n\n    _this.observer = function () {};\n\n    _this.getWindowWidth = function () {\n      if (canUseDOM) {\n        return _this.pageRef.current ? _this.pageRef.current.clientWidth : window.innerWidth;\n      } else {\n        return 1200;\n      }\n    };\n\n    _this.isMobile = function () {\n      return (// eslint-disable-next-line radix\n        _this.getWindowWidth() < Number.parseInt(globalBreakpointXl.value, 10)\n      );\n    };\n\n    _this.resize = function () {\n      var onPageResize = _this.props.onPageResize;\n\n      var mobileView = _this.isMobile();\n\n      if (onPageResize) {\n        onPageResize({\n          mobileView: mobileView,\n          windowSize: _this.getWindowWidth()\n        });\n      }\n\n      if (mobileView !== _this.state.mobileView) {\n        _this.setState({\n          mobileView: mobileView\n        });\n      }\n\n      _this.pageRef.current && _this.setState({\n        width: _this.pageRef.current.clientWidth\n      });\n    };\n\n    _this.handleResize = debounce(_this.resize, 250);\n\n    _this.handleMainClick = function () {\n      if (_this.isMobile() && _this.state.mobileIsNavOpen && _this.mainRef.current) {\n        _this.setState({\n          mobileIsNavOpen: false\n        });\n      }\n    };\n\n    _this.onNavToggleMobile = function () {\n      _this.setState(function (prevState) {\n        return {\n          mobileIsNavOpen: !prevState.mobileIsNavOpen\n        };\n      });\n    };\n\n    _this.onNavToggleDesktop = function () {\n      _this.setState(function (prevState) {\n        return {\n          desktopIsNavOpen: !prevState.desktopIsNavOpen\n        };\n      });\n    };\n\n    var isManagedSidebar = props.isManagedSidebar,\n        defaultManagedSidebarIsOpen = props.defaultManagedSidebarIsOpen;\n    var managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    _this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false,\n      width: null\n    };\n    return _this;\n  }\n\n  _createClass(Page, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          isManagedSidebar = _this$props.isManagedSidebar,\n          onPageResize = _this$props.onPageResize;\n\n      if (isManagedSidebar || onPageResize) {\n        this.observer = getResizeObserver(this.pageRef.current, this.handleResize);\n        var currentRef = this.mainRef.current;\n\n        if (currentRef) {\n          currentRef.addEventListener('mousedown', this.handleMainClick);\n          currentRef.addEventListener('touchstart', this.handleMainClick);\n        } // Initial check if should be shown\n\n\n        this.resize();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props2 = this.props,\n          isManagedSidebar = _this$props2.isManagedSidebar,\n          onPageResize = _this$props2.onPageResize;\n\n      if (isManagedSidebar || onPageResize) {\n        this.observer();\n        var currentRef = this.mainRef.current;\n\n        if (currentRef) {\n          currentRef.removeEventListener('mousedown', this.handleMainClick);\n          currentRef.removeEventListener('touchstart', this.handleMainClick);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          breadcrumb = _a.breadcrumb,\n          isBreadcrumbWidthLimited = _a.isBreadcrumbWidthLimited,\n          className = _a.className,\n          children = _a.children,\n          header = _a.header,\n          sidebar = _a.sidebar,\n          notificationDrawer = _a.notificationDrawer,\n          isNotificationDrawerExpanded = _a.isNotificationDrawerExpanded,\n          onNotificationDrawerExpand = _a.onNotificationDrawerExpand,\n          isTertiaryNavWidthLimited = _a.isTertiaryNavWidthLimited,\n          skipToContent = _a.skipToContent,\n          role = _a.role,\n          mainContainerId = _a.mainContainerId,\n          isManagedSidebar = _a.isManagedSidebar,\n          defaultManagedSidebarIsOpen = _a.defaultManagedSidebarIsOpen,\n          onPageResize = _a.onPageResize,\n          getBreakpoint = _a.getBreakpoint,\n          mainAriaLabel = _a.mainAriaLabel,\n          mainTabIndex = _a.mainTabIndex,\n          tertiaryNav = _a.tertiaryNav,\n          isTertiaryNavGrouped = _a.isTertiaryNavGrouped,\n          isBreadcrumbGrouped = _a.isBreadcrumbGrouped,\n          additionalGroupedContent = _a.additionalGroupedContent,\n          groupProps = _a.groupProps,\n          rest = __rest(_a, [\"breadcrumb\", \"isBreadcrumbWidthLimited\", \"className\", \"children\", \"header\", \"sidebar\", \"notificationDrawer\", \"isNotificationDrawerExpanded\", \"onNotificationDrawerExpand\", \"isTertiaryNavWidthLimited\", \"skipToContent\", \"role\", \"mainContainerId\", \"isManagedSidebar\", \"defaultManagedSidebarIsOpen\", \"onPageResize\", \"getBreakpoint\", \"mainAriaLabel\", \"mainTabIndex\", \"tertiaryNav\", \"isTertiaryNavGrouped\", \"isBreadcrumbGrouped\", \"additionalGroupedContent\", \"groupProps\"]);\n\n      var _this$state = this.state,\n          mobileView = _this$state.mobileView,\n          mobileIsNavOpen = _this$state.mobileIsNavOpen,\n          desktopIsNavOpen = _this$state.desktopIsNavOpen,\n          width = _this$state.width;\n      var context = {\n        isManagedSidebar: isManagedSidebar,\n        onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n        isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen,\n        width: width,\n        getBreakpoint: getBreakpoint\n      };\n      var nav = null;\n\n      if (tertiaryNav && isTertiaryNavWidthLimited) {\n        nav = React.createElement(\"div\", {\n          className: css(styles.pageMainNav, styles.modifiers.limitWidth)\n        }, React.createElement(\"div\", {\n          className: css(styles.pageMainBody)\n        }, tertiaryNav));\n      } else if (tertiaryNav) {\n        nav = React.createElement(\"div\", {\n          className: css(styles.pageMainNav)\n        }, tertiaryNav);\n      }\n\n      var crumb = null;\n\n      if (breadcrumb && isBreadcrumbWidthLimited) {\n        crumb = React.createElement(\"section\", {\n          className: css(styles.pageMainBreadcrumb, styles.modifiers.limitWidth)\n        }, React.createElement(\"div\", {\n          className: css(styles.pageMainBody)\n        }, breadcrumb));\n      } else if (breadcrumb) {\n        crumb = React.createElement(\"section\", {\n          className: css(styles.pageMainBreadcrumb)\n        }, breadcrumb);\n      }\n\n      var isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;\n      var group = isGrouped ? React.createElement(PageGroup, Object.assign({}, groupProps), isTertiaryNavGrouped && nav, isBreadcrumbGrouped && crumb, additionalGroupedContent) : null;\n      var main = React.createElement(\"main\", {\n        ref: this.mainRef,\n        role: role,\n        id: mainContainerId,\n        className: css(styles.pageMain),\n        tabIndex: mainTabIndex,\n        \"aria-label\": mainAriaLabel\n      }, group, !isTertiaryNavGrouped && nav, !isBreadcrumbGrouped && crumb, children);\n      var panelContent = React.createElement(DrawerPanelContent, null, notificationDrawer);\n      return React.createElement(PageContextProvider, {\n        value: context\n      }, React.createElement(\"div\", Object.assign({\n        ref: this.pageRef\n      }, rest, {\n        className: css(styles.page, width !== null && 'pf-m-resize-observer', width !== null && \"pf-m-breakpoint-\".concat(getBreakpoint(width)), className)\n      }), skipToContent, header, sidebar, notificationDrawer && React.createElement(\"div\", {\n        className: css(styles.pageDrawer)\n      }, React.createElement(Drawer, {\n        isExpanded: isNotificationDrawerExpanded,\n        onExpand: onNotificationDrawerExpand\n      }, React.createElement(DrawerContent, {\n        panelContent: panelContent\n      }, React.createElement(DrawerContentBody, null, main)))), !notificationDrawer && main));\n    }\n  }]);\n\n  return Page;\n}(React.Component);\nPage.displayName = 'Page';\nPage.defaultProps = {\n  isManagedSidebar: false,\n  isBreadcrumbWidthLimited: false,\n  defaultManagedSidebarIsOpen: true,\n  onPageResize: function onPageResize() {\n    return null;\n  },\n  mainTabIndex: -1,\n  isNotificationDrawerExpanded: false,\n  onNotificationDrawerExpand: function onNotificationDrawerExpand() {\n    return null;\n  },\n  getBreakpoint: getBreakpoint\n};","map":{"version":3,"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,mDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,kBAAP,MAA+B,wDAA/B;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,MAAT,EAAiBC,aAAjB,EAAgCC,iBAAhC,EAAmDC,kBAAnD,QAA6E,WAA7E;AACA,SAASC,SAAT,QAA0C,aAA1C;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,WAAYC,WAAZ;;AAAA,WAAYA,WAAZ,EAAuB;EACrBA;EACAA;AACD,CAHD,EAAYA,WAAW,KAAXA,WAAW,MAAvB;;AAYA,OAAO,IAAMC,mBAAmB,GAAqB;EACnDC,gBAAgB,EAAE,KADiC;EAEnDC,SAAS,EAAE,KAFwC;EAGnDC,WAAW,EAAE;IAAA,OAAM,IAAN;EAAA,CAHsC;EAInDC,KAAK,EAAE,IAJ4C;EAKnDN,aAAa,EAAbA;AALmD,CAA9C;AAOP,OAAO,IAAMO,WAAW,GAAGnB,KAAK,CAACoB,aAAN,CAAsCN,mBAAtC,CAApB;AAEP,OAAO,IAAMO,mBAAmB,GAAGF,WAAW,CAACG,QAAxC;AACP,OAAO,IAAMC,mBAAmB,GAAGJ,WAAW,CAACK,QAAxC;AAyEP,WAAaC,IAAb;EAAA;;EAAA;;EAgBE,cAAYC,KAAZ,EAA4B;IAAA;;IAAA;;IAC1B,0BAAMA,KAAN;IALF,gBAAU1B,KAAK,CAAC2B,SAAN,EAAV;IACA,gBAAU3B,KAAK,CAAC2B,SAAN,EAAV;;IACA,iBAAgB,YAAK,CAAG,CAAxB;;IAyCA,uBAAiB,YAAK;MACpB,IAAItB,SAAJ,EAAe;QACb,OAAO,MAAKuB,OAAL,CAAaC,OAAb,GAAuB,MAAKD,OAAL,CAAaC,OAAb,CAAqBC,WAA5C,GAA0DC,MAAM,CAACC,UAAxE;MACD,CAFD,MAEO;QACL,OAAO,IAAP;MACD;IACF,CAND;;IAQA,iBAAW;MAAA,OACT;QACA,MAAKC,cAAL,KAAwBC,MAAM,CAACC,QAAP,CAAgBhC,kBAAkB,CAACiC,KAAnC,EAA0C,EAA1C;MAFf;IAAA,CAAX;;IAIA,eAAS,YAAK;MACZ,IAAQC,YAAR,GAAyB,MAAKX,KAA9B,CAAQW,YAAR;;MACA,IAAMC,UAAU,GAAG,MAAKC,QAAL,EAAnB;;MACA,IAAIF,YAAJ,EAAkB;QAChBA,YAAY,CAAC;UAAEC,UAAU,EAAVA,UAAF;UAAcE,UAAU,EAAE,MAAKP,cAAL;QAA1B,CAAD,CAAZ;MACD;;MACD,IAAIK,UAAU,KAAK,MAAKG,KAAL,CAAWH,UAA9B,EAA0C;QACxC,MAAKI,QAAL,CAAc;UAAEJ,UAAU,EAAVA;QAAF,CAAd;MACD;;MACD,MAAKV,OAAL,CAAaC,OAAb,IAAwB,MAAKa,QAAL,CAAc;QAAExB,KAAK,EAAE,MAAKU,OAAL,CAAaC,OAAb,CAAqBC;MAA9B,CAAd,CAAxB;IACD,CAVD;;IAYA,qBAAe1B,QAAQ,CAAC,MAAKuC,MAAN,EAAc,GAAd,CAAvB;;IAEA,wBAAkB,YAAK;MACrB,IAAI,MAAKJ,QAAL,MAAmB,MAAKE,KAAL,CAAWG,eAA9B,IAAiD,MAAKC,OAAL,CAAahB,OAAlE,EAA2E;QACzE,MAAKa,QAAL,CAAc;UAAEE,eAAe,EAAE;QAAnB,CAAd;MACD;IACF,CAJD;;IAMA,0BAAoB,YAAK;MACvB,MAAKF,QAAL,CAAc,mBAAS;QAAA,OAAK;UAC1BE,eAAe,EAAE,CAACE,SAAS,CAACF;QADF,CAAL;MAAA,CAAvB;IAGD,CAJD;;IAMA,2BAAqB,YAAK;MACxB,MAAKF,QAAL,CAAc,mBAAS;QAAA,OAAK;UAC1BK,gBAAgB,EAAE,CAACD,SAAS,CAACC;QADH,CAAL;MAAA,CAAvB;IAGD,CAJD;;IA1EE,IAAQhC,gBAAR,GAA0DW,KAA1D,CAAQX,gBAAR;IAAA,IAA0BiC,2BAA1B,GAA0DtB,KAA1D,CAA0BsB,2BAA1B;IACA,IAAMC,kBAAkB,GAAG,CAAClC,gBAAD,GAAoB,IAApB,GAA2BiC,2BAAtD;IACA,MAAKP,KAAL,GAAa;MACXM,gBAAgB,EAAEE,kBADP;MAEXL,eAAe,EAAE,KAFN;MAGXN,UAAU,EAAE,KAHD;MAIXpB,KAAK,EAAE;IAJI,CAAb;IAL0B;EAW3B;;EA3BH;IAAA;IAAA,OA6BE,6BAAiB;MACf,kBAA2C,KAAKQ,KAAhD;MAAA,IAAQX,gBAAR,eAAQA,gBAAR;MAAA,IAA0BsB,YAA1B,eAA0BA,YAA1B;;MACA,IAAItB,gBAAgB,IAAIsB,YAAxB,EAAsC;QACpC,KAAKa,QAAL,GAAgBvC,iBAAiB,CAAC,KAAKiB,OAAL,CAAaC,OAAd,EAAuB,KAAKsB,YAA5B,CAAjC;QACA,IAAMC,UAAU,GAAG,KAAKP,OAAL,CAAahB,OAAhC;;QACA,IAAIuB,UAAJ,EAAgB;UACdA,UAAU,CAACC,gBAAX,CAA4B,WAA5B,EAAyC,KAAKC,eAA9C;UACAF,UAAU,CAACC,gBAAX,CAA4B,YAA5B,EAA0C,KAAKC,eAA/C;QACD,CANmC,CAOpC;;;QACA,KAAKX,MAAL;MACD;IACF;EAzCH;IAAA;IAAA,OA2CE,gCAAoB;MAClB,mBAA2C,KAAKjB,KAAhD;MAAA,IAAQX,gBAAR,gBAAQA,gBAAR;MAAA,IAA0BsB,YAA1B,gBAA0BA,YAA1B;;MACA,IAAItB,gBAAgB,IAAIsB,YAAxB,EAAsC;QACpC,KAAKa,QAAL;QACA,IAAME,UAAU,GAAG,KAAKP,OAAL,CAAahB,OAAhC;;QACA,IAAIuB,UAAJ,EAAgB;UACdA,UAAU,CAACG,mBAAX,CAA+B,WAA/B,EAA4C,KAAKD,eAAjD;UACAF,UAAU,CAACG,mBAAX,CAA+B,YAA/B,EAA6C,KAAKD,eAAlD;QACD;MACF;IACF;EArDH;IAAA;IAAA,OAmGE,kBAAM;MACE,SA4BF,KAAK5B,KA5BH;MAAA,IACJ8B,UADI,GA0BMC,EA1BN,CACJD,UADI;MAAA,IAEJE,wBAFI,GA0BMD,EA1BN,CAEJC,wBAFI;MAAA,IAGJC,SAHI,GA0BMF,EA1BN,CAGJE,SAHI;MAAA,IAIJC,QAJI,GA0BMH,EA1BN,CAIJG,QAJI;MAAA,IAKJC,MALI,GA0BMJ,EA1BN,CAKJI,MALI;MAAA,IAMJC,OANI,GA0BML,EA1BN,CAMJK,OANI;MAAA,IAOJC,kBAPI,GA0BMN,EA1BN,CAOJM,kBAPI;MAAA,IAQJC,4BARI,GA0BMP,EA1BN,CAQJO,4BARI;MAAA,IASJC,0BATI,GA0BMR,EA1BN,CASJQ,0BATI;MAAA,IAUJC,yBAVI,GA0BMT,EA1BN,CAUJS,yBAVI;MAAA,IAWJC,aAXI,GA0BMV,EA1BN,CAWJU,aAXI;MAAA,IAYJC,IAZI,GA0BMX,EA1BN,CAYJW,IAZI;MAAA,IAaJC,eAbI,GA0BMZ,EA1BN,CAaJY,eAbI;MAAA,IAcJtD,gBAdI,GA0BM0C,EA1BN,CAcJ1C,gBAdI;MAAA,IAgBJiC,2BAhBI,GA0BMS,EA1BN,CAgBJT,2BAhBI;MAAA,IAkBJX,YAlBI,GA0BMoB,EA1BN,CAkBJpB,YAlBI;MAAA,IAmBJzB,aAnBI,GA0BM6C,EA1BN,CAmBJ7C,aAnBI;MAAA,IAoBJ0D,aApBI,GA0BMb,EA1BN,CAoBJa,aApBI;MAAA,IAqBJC,YArBI,GA0BMd,EA1BN,CAqBJc,YArBI;MAAA,IAsBJC,WAtBI,GA0BMf,EA1BN,CAsBJe,WAtBI;MAAA,IAuBJC,oBAvBI,GA0BMhB,EA1BN,CAuBJgB,oBAvBI;MAAA,IAwBJC,mBAxBI,GA0BMjB,EA1BN,CAwBJiB,mBAxBI;MAAA,IAyBJC,wBAzBI,GA0BMlB,EA1BN,CAyBJkB,wBAzBI;MAAA,IA0BJC,UA1BI,GA0BMnB,EA1BN,CA0BJmB,UA1BI;MAAA,IA2BDC,IA3BC,GA2BGC,WA3BH,kdA2BG,CA3BH;;MA6BN,kBAAiE,KAAKrC,KAAtE;MAAA,IAAQH,UAAR,eAAQA,UAAR;MAAA,IAAoBM,eAApB,eAAoBA,eAApB;MAAA,IAAqCG,gBAArC,eAAqCA,gBAArC;MAAA,IAAuD7B,KAAvD,eAAuDA,KAAvD;MAEA,IAAM6D,OAAO,GAAG;QACdhE,gBAAgB,EAAhBA,gBADc;QAEdE,WAAW,EAAEqB,UAAU,GAAG,KAAK0C,iBAAR,GAA4B,KAAKC,kBAF1C;QAGdjE,SAAS,EAAEsB,UAAU,GAAGM,eAAH,GAAqBG,gBAH5B;QAId7B,KAAK,EAALA,KAJc;QAKdN,aAAa,EAAbA;MALc,CAAhB;MAQA,IAAIsE,GAAG,GAAG,IAAV;;MACA,IAAIV,WAAW,IAAIN,yBAAnB,EAA8C;QAC5CgB,GAAG,GACDlF;UAAK2D,SAAS,EAAEzD,GAAG,CAACD,MAAM,CAACkF,WAAR,EAAqBlF,MAAM,CAACmF,SAAP,CAAiBC,UAAtC;QAAnB,GACErF;UAAK2D,SAAS,EAAEzD,GAAG,CAACD,MAAM,CAACqF,YAAR;QAAnB,GAA2Cd,WAA3C,CADF,CADF;MAKD,CAND,MAMO,IAAIA,WAAJ,EAAiB;QACtBU,GAAG,GAAGlF;UAAK2D,SAAS,EAAEzD,GAAG,CAACD,MAAM,CAACkF,WAAR;QAAnB,GAA0CX,WAA1C,CAAN;MACD;;MAED,IAAIe,KAAK,GAAG,IAAZ;;MACA,IAAI/B,UAAU,IAAIE,wBAAlB,EAA4C;QAC1C6B,KAAK,GACHvF;UAAS2D,SAAS,EAAEzD,GAAG,CAACD,MAAM,CAACuF,kBAAR,EAA4BvF,MAAM,CAACmF,SAAP,CAAiBC,UAA7C;QAAvB,GACErF;UAAK2D,SAAS,EAAEzD,GAAG,CAACD,MAAM,CAACqF,YAAR;QAAnB,GAA2C9B,UAA3C,CADF,CADF;MAKD,CAND,MAMO,IAAIA,UAAJ,EAAgB;QACrB+B,KAAK,GAAGvF;UAAS2D,SAAS,EAAEzD,GAAG,CAACD,MAAM,CAACuF,kBAAR;QAAvB,GAAqDhC,UAArD,CAAR;MACD;;MAED,IAAMiC,SAAS,GAAGhB,oBAAoB,IAAIC,mBAAxB,IAA+CC,wBAAjE;MAEA,IAAMe,KAAK,GAAGD,SAAS,GACrBzF,oBAACU,SAAD,EAAUiF,kBAAKf,UAAL,CAAV,EACGH,oBAAoB,IAAIS,GAD3B,EAEGR,mBAAmB,IAAIa,KAF1B,EAGGZ,wBAHH,CADqB,GAMnB,IANJ;MAQA,IAAMiB,IAAI,GACR5F;QACE6F,GAAG,EAAE,KAAKhD,OADZ;QAEEuB,IAAI,EAAEA,IAFR;QAGE0B,EAAE,EAAEzB,eAHN;QAIEV,SAAS,EAAEzD,GAAG,CAACD,MAAM,CAAC8F,QAAR,CAJhB;QAKEC,QAAQ,EAAEzB,YALZ;QAKwB,cACVD;MANd,GAQGoB,KARH,EASG,CAACjB,oBAAD,IAAyBS,GAT5B,EAUG,CAACR,mBAAD,IAAwBa,KAV3B,EAWG3B,QAXH,CADF;MAgBA,IAAMqC,YAAY,GAAGjG,oBAACS,kBAAD,EAAmB,IAAnB,EAAqBsD,kBAArB,CAArB;MAEA,OACE/D,oBAACqB,mBAAD,EAAoB;QAACe,KAAK,EAAE2C;MAAR,CAApB,EACE/E;QACE6F,GAAG,EAAE,KAAKjE;MADZ,GAEMiD,IAFN,EAEU;QACRlB,SAAS,EAAEzD,GAAG,CACZD,MAAM,CAACiG,IADK,EAEZhF,KAAK,KAAK,IAAV,IAAkB,sBAFN,EAGZA,KAAK,KAAK,IAAV,8BAAqCN,aAAa,CAACM,KAAD,CAAlD,CAHY,EAIZyC,SAJY;MADN,CAFV,GAUGQ,aAVH,EAWGN,MAXH,EAYGC,OAZH,EAaGC,kBAAkB,IACjB/D;QAAK2D,SAAS,EAAEzD,GAAG,CAACD,MAAM,CAACkG,UAAR;MAAnB,GACEnG,oBAACM,MAAD,EAAO;QAAC8F,UAAU,EAAEpC,4BAAb;QAA2CqC,QAAQ,EAAEpC;MAArD,CAAP,EACEjE,oBAACO,aAAD,EAAc;QAAC0F,YAAY,EAAEA;MAAf,CAAd,EACEjG,oBAACQ,iBAAD,EAAkB,IAAlB,EAAoBoF,IAApB,CADF,CADF,CADF,CAdJ,EAsBG,CAAC7B,kBAAD,IAAuB6B,IAtB1B,CADF,CADF;IA4BD;EAzNH;;EAAA;AAAA,EAA0B5F,KAAK,CAACsG,SAAhC;AACS7E,mBAAc,MAAd;AACAA,oBAA0B;EAC/BV,gBAAgB,EAAE,KADa;EAE/B2C,wBAAwB,EAAE,KAFK;EAG/BV,2BAA2B,EAAE,IAHE;EAI/BX,YAAY,EAAE;IAAA,OAAY,IAAZ;EAAA,CAJiB;EAK/BkC,YAAY,EAAE,CAAC,CALgB;EAM/BP,4BAA4B,EAAE,KANC;EAO/BC,0BAA0B,EAAE;IAAA,OAAM,IAAN;EAAA,CAPG;EAQ/BrD,aAAa,EAAbA;AAR+B,CAA1B","names":["React","styles","css","globalBreakpointXl","debounce","canUseDOM","Drawer","DrawerContent","DrawerContentBody","DrawerPanelContent","PageGroup","getResizeObserver","getBreakpoint","PageLayouts","pageContextDefaults","isManagedSidebar","isNavOpen","onNavToggle","width","PageContext","createContext","PageContextProvider","Provider","PageContextConsumer","Consumer","Page","props","createRef","pageRef","current","clientWidth","window","innerWidth","getWindowWidth","Number","parseInt","value","onPageResize","mobileView","isMobile","windowSize","state","setState","resize","mobileIsNavOpen","mainRef","prevState","desktopIsNavOpen","defaultManagedSidebarIsOpen","managedSidebarOpen","observer","handleResize","currentRef","addEventListener","handleMainClick","removeEventListener","breadcrumb","_a","isBreadcrumbWidthLimited","className","children","header","sidebar","notificationDrawer","isNotificationDrawerExpanded","onNotificationDrawerExpand","isTertiaryNavWidthLimited","skipToContent","role","mainContainerId","mainAriaLabel","mainTabIndex","tertiaryNav","isTertiaryNavGrouped","isBreadcrumbGrouped","additionalGroupedContent","groupProps","rest","__rest","context","onNavToggleMobile","onNavToggleDesktop","nav","pageMainNav","modifiers","limitWidth","pageMainBody","crumb","pageMainBreadcrumb","isGrouped","group","Object","main","ref","id","pageMain","tabIndex","panelContent","page","pageDrawer","isExpanded","onExpand","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Page/Page.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Page/page';\nimport { css } from '@patternfly/react-styles';\nimport globalBreakpointXl from '@patternfly/react-tokens/dist/esm/global_breakpoint_xl';\nimport { debounce, canUseDOM } from '../../helpers/util';\nimport { Drawer, DrawerContent, DrawerContentBody, DrawerPanelContent } from '../Drawer';\nimport { PageGroup, PageGroupProps } from './PageGroup';\nimport { getResizeObserver } from '../../helpers/resizeObserver';\nimport { getBreakpoint } from '../../helpers/util';\n\nexport enum PageLayouts {\n  vertical = 'vertical',\n  horizontal = 'horizontal'\n}\n\nexport interface PageContextProps {\n  isManagedSidebar: boolean;\n  onNavToggle: () => void;\n  isNavOpen: boolean;\n  width: number;\n  getBreakpoint: (width: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n}\nexport const pageContextDefaults: PageContextProps = {\n  isManagedSidebar: false,\n  isNavOpen: false,\n  onNavToggle: () => null,\n  width: null,\n  getBreakpoint\n};\nexport const PageContext = React.createContext<PageContextProps>(pageContextDefaults);\n\nexport const PageContextProvider = PageContext.Provider;\nexport const PageContextConsumer = PageContext.Consumer;\n\nexport interface PageProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the main section of the page layout (e.g. <PageSection />) */\n  children?: React.ReactNode;\n  /** Additional classes added to the page layout */\n  className?: string;\n  /** Header component (e.g. <PageHeader />) */\n  header?: React.ReactNode;\n  /** Sidebar component for a side nav (e.g. <PageSidebar />) */\n  sidebar?: React.ReactNode;\n  /** Notification drawer component for an optional notification drawer (e.g. <NotificationDrawer />) */\n  notificationDrawer?: React.ReactNode;\n  /** Flag indicating Notification drawer in expanded */\n  isNotificationDrawerExpanded?: boolean;\n  /** Flag indicating if breadcrumb width should be limited */\n  isBreadcrumbWidthLimited?: boolean;\n  /** Callback when notification drawer panel is finished expanding. */\n  onNotificationDrawerExpand?: () => void;\n  /** Skip to content component for the page */\n  skipToContent?: React.ReactElement;\n  /** Sets the value for role on the <main> element */\n  role?: string;\n  /** an id to use for the [role=\"main\"] element */\n  mainContainerId?: string;\n  /** tabIndex to use for the [role=\"main\"] element, null to unset it */\n  mainTabIndex?: number | null;\n  /**\n   * If true, manages the sidebar open/close state and there is no need to pass the isNavOpen boolean into\n   * the sidebar component or add a callback onNavToggle function into the PageHeader component\n   */\n  isManagedSidebar?: boolean;\n  /** Flag indicating if tertiary nav width should be limited */\n  isTertiaryNavWidthLimited?: boolean;\n  /**\n   * If true, the managed sidebar is initially open for desktop view\n   */\n  defaultManagedSidebarIsOpen?: boolean;\n  /**\n   * Can add callback to be notified when resize occurs, for example to set the sidebar isNav prop to false for a width < 768px\n   * Returns object { mobileView: boolean, windowSize: number }\n   */\n  onPageResize?: (object: any) => void;\n  /**\n   * The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\n   * You can override the default getBreakpoint function to return breakpoints at different sizes than the default\n   * You can view the default getBreakpoint function here:\n   * https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts\n   */\n  getBreakpoint?: (width: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Breadcrumb component for the page */\n  breadcrumb?: React.ReactNode;\n  /** Tertiary nav component for the page */\n  tertiaryNav?: React.ReactNode;\n  /** Accessible label, can be used to name main section */\n  mainAriaLabel?: string;\n  /** Flag indicating if the tertiaryNav should be in a group */\n  isTertiaryNavGrouped?: boolean;\n  /** Flag indicating if the breadcrumb should be in a group */\n  isBreadcrumbGrouped?: boolean;\n  /** Additional content of the group */\n  additionalGroupedContent?: React.ReactNode;\n  /** Additional props of the group */\n  groupProps?: PageGroupProps;\n}\n\nexport interface PageState {\n  desktopIsNavOpen: boolean;\n  mobileIsNavOpen: boolean;\n  mobileView: boolean;\n  width: number;\n}\n\nexport class Page extends React.Component<PageProps, PageState> {\n  static displayName = 'Page';\n  static defaultProps: PageProps = {\n    isManagedSidebar: false,\n    isBreadcrumbWidthLimited: false,\n    defaultManagedSidebarIsOpen: true,\n    onPageResize: (): void => null,\n    mainTabIndex: -1,\n    isNotificationDrawerExpanded: false,\n    onNotificationDrawerExpand: () => null,\n    getBreakpoint\n  };\n  mainRef = React.createRef<HTMLDivElement>();\n  pageRef = React.createRef<HTMLDivElement>();\n  observer: any = () => {};\n\n  constructor(props: PageProps) {\n    super(props);\n\n    const { isManagedSidebar, defaultManagedSidebarIsOpen } = props;\n    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;\n    this.state = {\n      desktopIsNavOpen: managedSidebarOpen,\n      mobileIsNavOpen: false,\n      mobileView: false,\n      width: null\n    };\n  }\n\n  componentDidMount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer = getResizeObserver(this.pageRef.current, this.handleResize);\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.addEventListener('mousedown', this.handleMainClick);\n        currentRef.addEventListener('touchstart', this.handleMainClick);\n      }\n      // Initial check if should be shown\n      this.resize();\n    }\n  }\n\n  componentWillUnmount() {\n    const { isManagedSidebar, onPageResize } = this.props;\n    if (isManagedSidebar || onPageResize) {\n      this.observer();\n      const currentRef = this.mainRef.current;\n      if (currentRef) {\n        currentRef.removeEventListener('mousedown', this.handleMainClick);\n        currentRef.removeEventListener('touchstart', this.handleMainClick);\n      }\n    }\n  }\n\n  getWindowWidth = () => {\n    if (canUseDOM) {\n      return this.pageRef.current ? this.pageRef.current.clientWidth : window.innerWidth;\n    } else {\n      return 1200;\n    }\n  };\n\n  isMobile = () =>\n    // eslint-disable-next-line radix\n    this.getWindowWidth() < Number.parseInt(globalBreakpointXl.value, 10);\n\n  resize = () => {\n    const { onPageResize } = this.props;\n    const mobileView = this.isMobile();\n    if (onPageResize) {\n      onPageResize({ mobileView, windowSize: this.getWindowWidth() });\n    }\n    if (mobileView !== this.state.mobileView) {\n      this.setState({ mobileView });\n    }\n    this.pageRef.current && this.setState({ width: this.pageRef.current.clientWidth });\n  };\n\n  handleResize = debounce(this.resize, 250);\n\n  handleMainClick = () => {\n    if (this.isMobile() && this.state.mobileIsNavOpen && this.mainRef.current) {\n      this.setState({ mobileIsNavOpen: false });\n    }\n  };\n\n  onNavToggleMobile = () => {\n    this.setState(prevState => ({\n      mobileIsNavOpen: !prevState.mobileIsNavOpen\n    }));\n  };\n\n  onNavToggleDesktop = () => {\n    this.setState(prevState => ({\n      desktopIsNavOpen: !prevState.desktopIsNavOpen\n    }));\n  };\n\n  render() {\n    const {\n      breadcrumb,\n      isBreadcrumbWidthLimited,\n      className,\n      children,\n      header,\n      sidebar,\n      notificationDrawer,\n      isNotificationDrawerExpanded,\n      onNotificationDrawerExpand,\n      isTertiaryNavWidthLimited,\n      skipToContent,\n      role,\n      mainContainerId,\n      isManagedSidebar,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      defaultManagedSidebarIsOpen,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      onPageResize,\n      getBreakpoint,\n      mainAriaLabel,\n      mainTabIndex,\n      tertiaryNav,\n      isTertiaryNavGrouped,\n      isBreadcrumbGrouped,\n      additionalGroupedContent,\n      groupProps,\n      ...rest\n    } = this.props;\n    const { mobileView, mobileIsNavOpen, desktopIsNavOpen, width } = this.state;\n\n    const context = {\n      isManagedSidebar,\n      onNavToggle: mobileView ? this.onNavToggleMobile : this.onNavToggleDesktop,\n      isNavOpen: mobileView ? mobileIsNavOpen : desktopIsNavOpen,\n      width,\n      getBreakpoint\n    };\n\n    let nav = null;\n    if (tertiaryNav && isTertiaryNavWidthLimited) {\n      nav = (\n        <div className={css(styles.pageMainNav, styles.modifiers.limitWidth)}>\n          <div className={css(styles.pageMainBody)}>{tertiaryNav}</div>\n        </div>\n      );\n    } else if (tertiaryNav) {\n      nav = <div className={css(styles.pageMainNav)}>{tertiaryNav}</div>;\n    }\n\n    let crumb = null;\n    if (breadcrumb && isBreadcrumbWidthLimited) {\n      crumb = (\n        <section className={css(styles.pageMainBreadcrumb, styles.modifiers.limitWidth)}>\n          <div className={css(styles.pageMainBody)}>{breadcrumb}</div>\n        </section>\n      );\n    } else if (breadcrumb) {\n      crumb = <section className={css(styles.pageMainBreadcrumb)}>{breadcrumb}</section>;\n    }\n\n    const isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;\n\n    const group = isGrouped ? (\n      <PageGroup {...groupProps}>\n        {isTertiaryNavGrouped && nav}\n        {isBreadcrumbGrouped && crumb}\n        {additionalGroupedContent}\n      </PageGroup>\n    ) : null;\n\n    const main = (\n      <main\n        ref={this.mainRef}\n        role={role}\n        id={mainContainerId}\n        className={css(styles.pageMain)}\n        tabIndex={mainTabIndex}\n        aria-label={mainAriaLabel}\n      >\n        {group}\n        {!isTertiaryNavGrouped && nav}\n        {!isBreadcrumbGrouped && crumb}\n        {children}\n      </main>\n    );\n\n    const panelContent = <DrawerPanelContent>{notificationDrawer}</DrawerPanelContent>;\n\n    return (\n      <PageContextProvider value={context}>\n        <div\n          ref={this.pageRef}\n          {...rest}\n          className={css(\n            styles.page,\n            width !== null && 'pf-m-resize-observer',\n            width !== null && `pf-m-breakpoint-${getBreakpoint(width)}`,\n            className\n          )}\n        >\n          {skipToContent}\n          {header}\n          {sidebar}\n          {notificationDrawer && (\n            <div className={css(styles.pageDrawer)}>\n              <Drawer isExpanded={isNotificationDrawerExpanded} onExpand={onNotificationDrawerExpand}>\n                <DrawerContent panelContent={panelContent}>\n                  <DrawerContentBody>{main}</DrawerContentBody>\n                </DrawerContent>\n              </Drawer>\n            </div>\n          )}\n          {!notificationDrawer && main}\n        </div>\n      </PageContextProvider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}