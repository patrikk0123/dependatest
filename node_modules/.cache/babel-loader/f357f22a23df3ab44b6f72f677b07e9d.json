{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var WizardNavItem = function WizardNavItem(_a) {\n  var _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      _a$content = _a.content,\n      content = _a$content === void 0 ? '' : _a$content,\n      _a$isCurrent = _a.isCurrent,\n      isCurrent = _a$isCurrent === void 0 ? false : _a$isCurrent,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      step = _a.step,\n      _a$onNavItemClick = _a.onNavItemClick,\n      onNavItemClick = _a$onNavItemClick === void 0 ? function () {\n    return undefined;\n  } : _a$onNavItemClick,\n      _a$navItemComponent = _a.navItemComponent,\n      navItemComponent = _a$navItemComponent === void 0 ? 'button' : _a$navItemComponent,\n      _a$href = _a.href,\n      href = _a$href === void 0 ? null : _a$href,\n      _a$isExpandable = _a.isExpandable,\n      isExpandable = _a$isExpandable === void 0 ? false : _a$isExpandable,\n      id = _a.id,\n      rest = __rest(_a, [\"children\", \"content\", \"isCurrent\", \"isDisabled\", \"step\", \"onNavItemClick\", \"navItemComponent\", \"href\", \"isExpandable\", \"id\"]);\n\n  var NavItemComponent = navItemComponent;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isExpanded = _React$useState2[0],\n      setIsExpanded = _React$useState2[1];\n\n  React.useEffect(function () {\n    setIsExpanded(isCurrent);\n  }, [isCurrent]);\n\n  if (navItemComponent === 'a' && !href && process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error('WizardNavItem: When using an anchor, please provide an href');\n  }\n\n  var btnProps = {\n    disabled: isDisabled\n  };\n  var linkProps = {\n    tabIndex: isDisabled ? -1 : undefined,\n    href: href\n  };\n  return React.createElement(\"li\", {\n    className: css(styles.wizardNavItem, isExpandable && styles.modifiers.expandable, isExpandable && isExpanded && styles.modifiers.expanded)\n  }, React.createElement(NavItemComponent, Object.assign({}, rest, navItemComponent === 'a' ? Object.assign({}, linkProps) : Object.assign({}, btnProps), id && {\n    id: id.toString()\n  }, {\n    onClick: function onClick() {\n      return isExpandable ? setIsExpanded(!isExpanded || isCurrent) : onNavItemClick(step);\n    },\n    className: css(styles.wizardNavLink, isCurrent && styles.modifiers.current, isDisabled && styles.modifiers.disabled),\n    \"aria-disabled\": isDisabled ? true : null,\n    \"aria-current\": isCurrent && !children ? 'step' : false\n  }, isExpandable && {\n    'aria-expanded': isExpanded\n  }), isExpandable ? React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: css(styles.wizardNavLinkText)\n  }, content), React.createElement(\"span\", {\n    className: css(styles.wizardNavLinkToggle)\n  }, React.createElement(\"span\", {\n    className: css(styles.wizardNavLinkToggleIcon)\n  }, React.createElement(AngleRightIcon, null)))) : content), children);\n};\nWizardNavItem.displayName = 'WizardNavItem';","map":{"version":3,"mappings":"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","names":["React","css","styles","AngleRightIcon","WizardNavItem","_a","children","content","isCurrent","isDisabled","step","onNavItemClick","undefined","navItemComponent","href","isExpandable","id","rest","__rest","NavItemComponent","useState","isExpanded","setIsExpanded","useEffect","process","env","NODE_ENV","console","error","btnProps","disabled","linkProps","tabIndex","className","wizardNavItem","modifiers","expandable","expanded","Object","toString","onClick","wizardNavLink","current","wizardNavLinkText","wizardNavLinkToggle","wizardNavLinkToggleIcon","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Wizard/WizardNavItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Wizard/wizard';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\n\nexport interface WizardNavItemProps {\n  /** Can nest a WizardNav component for substeps */\n  children?: React.ReactNode;\n  /** The content to display in the nav item */\n  content?: React.ReactNode;\n  /** Whether the nav item is the currently active item */\n  isCurrent?: boolean;\n  /** Whether the nav item is disabled */\n  isDisabled?: boolean;\n  /** The step passed into the onNavItemClick callback */\n  step: number;\n  /** Callback for when the nav item is clicked */\n  onNavItemClick?: (step: number) => any;\n  /** Component used to render WizardNavItem */\n  navItemComponent?: 'button' | 'a';\n  /** An optional url to use for when using an anchor component */\n  href?: string;\n  /** Flag indicating that this NavItem has child steps and is expandable */\n  isExpandable?: boolean;\n  /** The id for the nav item */\n  id?: string | number;\n}\n\nexport const WizardNavItem: React.FunctionComponent<WizardNavItemProps> = ({\n  children = null,\n  content = '',\n  isCurrent = false,\n  isDisabled = false,\n  step,\n  onNavItemClick = () => undefined,\n  navItemComponent = 'button',\n  href = null,\n  isExpandable = false,\n  id,\n  ...rest\n}: WizardNavItemProps) => {\n  const NavItemComponent = navItemComponent;\n\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsExpanded(isCurrent);\n  }, [isCurrent]);\n\n  if (navItemComponent === 'a' && !href && process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error('WizardNavItem: When using an anchor, please provide an href');\n  }\n\n  const btnProps = {\n    disabled: isDisabled\n  };\n\n  const linkProps = {\n    tabIndex: isDisabled ? -1 : undefined,\n    href\n  };\n\n  return (\n    <li\n      className={css(\n        styles.wizardNavItem,\n        isExpandable && styles.modifiers.expandable,\n        isExpandable && isExpanded && styles.modifiers.expanded\n      )}\n    >\n      <NavItemComponent\n        {...rest}\n        {...(navItemComponent === 'a' ? { ...linkProps } : { ...btnProps })}\n        {...(id && { id: id.toString() })}\n        onClick={() => (isExpandable ? setIsExpanded(!isExpanded || isCurrent) : onNavItemClick(step))}\n        className={css(\n          styles.wizardNavLink,\n          isCurrent && styles.modifiers.current,\n          isDisabled && styles.modifiers.disabled\n        )}\n        aria-disabled={isDisabled ? true : null}\n        aria-current={isCurrent && !children ? 'step' : false}\n        {...(isExpandable && { 'aria-expanded': isExpanded })}\n      >\n        {isExpandable ? (\n          <>\n            <span className={css(styles.wizardNavLinkText)}>{content}</span>\n            <span className={css(styles.wizardNavLinkToggle)}>\n              <span className={css(styles.wizardNavLinkToggleIcon)}>\n                <AngleRightIcon />\n              </span>\n            </span>\n          </>\n        ) : (\n          content\n        )}\n      </NavItemComponent>\n      {children}\n    </li>\n  );\n};\nWizardNavItem.displayName = 'WizardNavItem';\n"]},"metadata":{},"sourceType":"module"}