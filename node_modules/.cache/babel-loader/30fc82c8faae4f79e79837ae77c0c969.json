{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { SelectColumn, RowSelectVariant } from '../../SelectColumn';\nimport checkStyles from '@patternfly/react-styles/css/components/Check/check';\nexport var selectable = function selectable(label, _ref) {\n  var rowIndex = _ref.rowIndex,\n      columnIndex = _ref.columnIndex,\n      rowData = _ref.rowData,\n      column = _ref.column,\n      property = _ref.property;\n  var _column$extraParams = column.extraParams,\n      onSelect = _column$extraParams.onSelect,\n      selectVariant = _column$extraParams.selectVariant,\n      allRowsSelected = _column$extraParams.allRowsSelected,\n      isHeaderSelectDisabled = _column$extraParams.isHeaderSelectDisabled;\n  var extraData = {\n    rowIndex: rowIndex,\n    columnIndex: columnIndex,\n    column: column,\n    property: property\n  };\n\n  if (rowData && rowData.hasOwnProperty('parent') && !rowData.showSelect && !rowData.fullWidth) {\n    return {\n      component: 'td',\n      isVisible: true\n    };\n  }\n\n  var rowId = rowIndex !== undefined ? rowIndex : -1;\n  /**\n   * @param {React.FormEvent} event - React form event\n   */\n\n  function selectClick(event) {\n    var selected = rowIndex === undefined ? event.currentTarget.checked : rowData && !rowData.selected; // tslint:disable-next-line:no-unused-expression\n\n    onSelect && onSelect(event, selected, rowId, rowData, extraData);\n  }\n\n  var customProps = Object.assign(Object.assign(Object.assign({}, rowId !== -1 ? {\n    checked: rowData && !!rowData.selected,\n    'aria-label': \"Select row \".concat(rowIndex)\n  } : {\n    checked: allRowsSelected,\n    'aria-label': 'Select all rows'\n  }), rowData && (rowData.disableCheckbox || rowData.disableSelection) && {\n    disabled: true,\n    className: checkStyles.checkInput\n  }), !rowData && isHeaderSelectDisabled && {\n    disabled: true\n  });\n  var selectName = 'check-all';\n\n  if (rowId !== -1 && selectVariant === RowSelectVariant.checkbox) {\n    selectName = \"checkrow\".concat(rowIndex);\n  } else if (rowId !== -1) {\n    selectName = 'radioGroup';\n  }\n\n  return {\n    className: css(styles.tableCheck),\n    component: 'td',\n    isVisible: !rowData || !rowData.fullWidth,\n    children: React.createElement(SelectColumn, Object.assign({}, customProps, {\n      selectVariant: selectVariant,\n      onSelect: selectClick,\n      name: selectName\n    }), label)\n  };\n};","map":{"version":3,"mappings":"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","names":["React","css","styles","SelectColumn","RowSelectVariant","checkStyles","selectable","label","rowIndex","columnIndex","rowData","column","property","extraParams","onSelect","selectVariant","allRowsSelected","isHeaderSelectDisabled","extraData","hasOwnProperty","showSelect","fullWidth","component","isVisible","rowId","undefined","selectClick","event","selected","currentTarget","checked","customProps","disableCheckbox","disableSelection","disabled","className","checkInput","selectName","checkbox","tableCheck","children","Object","name"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/selectable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { IExtra, IFormatterValueType, ITransform } from '../../TableTypes';\nimport { SelectColumn, RowSelectVariant } from '../../SelectColumn';\nimport checkStyles from '@patternfly/react-styles/css/components/Check/check';\n\nexport const selectable: ITransform = (\n  label: IFormatterValueType,\n  { rowIndex, columnIndex, rowData, column, property }: IExtra\n) => {\n  const {\n    extraParams: { onSelect, selectVariant, allRowsSelected, isHeaderSelectDisabled }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n\n  if (rowData && rowData.hasOwnProperty('parent') && !rowData.showSelect && !rowData.fullWidth) {\n    return {\n      component: 'td',\n      isVisible: true\n    };\n  }\n  const rowId = rowIndex !== undefined ? rowIndex : -1;\n\n  /**\n   * @param {React.FormEvent} event - React form event\n   */\n  function selectClick(event: React.FormEvent<HTMLInputElement>) {\n    const selected = rowIndex === undefined ? event.currentTarget.checked : rowData && !rowData.selected;\n    // tslint:disable-next-line:no-unused-expression\n    onSelect && onSelect(event, selected, rowId, rowData, extraData);\n  }\n  const customProps = {\n    ...(rowId !== -1\n      ? {\n          checked: rowData && !!rowData.selected,\n          'aria-label': `Select row ${rowIndex}`\n        }\n      : {\n          checked: allRowsSelected,\n          'aria-label': 'Select all rows'\n        }),\n    ...(rowData &&\n      (rowData.disableCheckbox || rowData.disableSelection) && {\n        disabled: true,\n        className: checkStyles.checkInput\n      }),\n    ...(!rowData && isHeaderSelectDisabled && { disabled: true })\n  };\n  let selectName = 'check-all';\n  if (rowId !== -1 && selectVariant === RowSelectVariant.checkbox) {\n    selectName = `checkrow${rowIndex}`;\n  } else if (rowId !== -1) {\n    selectName = 'radioGroup';\n  }\n\n  return {\n    className: css(styles.tableCheck),\n    component: 'td',\n    isVisible: !rowData || !rowData.fullWidth,\n    children: (\n      <SelectColumn\n        {...customProps}\n        selectVariant={selectVariant as RowSelectVariant}\n        onSelect={selectClick}\n        name={selectName}\n      >\n        {label}\n      </SelectColumn>\n    )\n  };\n};\n"]},"metadata":{},"sourceType":"module"}