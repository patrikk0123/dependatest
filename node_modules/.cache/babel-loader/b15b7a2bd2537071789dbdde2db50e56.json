{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownContext } from './dropdownConstants';\nimport { KEYHANDLER_DIRECTION } from '../../helpers/constants';\nimport { preventedEvents } from '../../helpers/util';\nimport { Tooltip } from '../Tooltip';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nexport class InternalDropdownItem extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.ref = React.createRef();\n    this.additionalRef = React.createRef();\n\n    this.getInnerNode = node => node && node.childNodes && node.childNodes.length ? node.childNodes[0] : node;\n\n    this.onKeyDown = event => {\n      // Detected key press on this item, notify the menu parent so that the appropriate item can be focused\n      const innerIndex = event.target === this.ref.current ? 0 : 1;\n\n      if (!this.props.customChild) {\n        event.preventDefault();\n      }\n\n      if (event.key === 'ArrowUp') {\n        this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.UP);\n        event.stopPropagation();\n      } else if (event.key === 'ArrowDown') {\n        this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.DOWN);\n        event.stopPropagation();\n      } else if (event.key === 'ArrowRight') {\n        this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.RIGHT);\n        event.stopPropagation();\n      } else if (event.key === 'ArrowLeft') {\n        this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.LEFT);\n        event.stopPropagation();\n      } else if (event.key === 'Enter' || event.key === ' ') {\n        event.target.click();\n        this.props.enterTriggersArrowDown && this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.DOWN);\n      }\n    };\n\n    this.componentRef = element => {\n      this.ref.current = element;\n      const {\n        component\n      } = this.props;\n      const ref = component.ref;\n\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(element);\n        } else {\n          ref.current = element;\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      context,\n      index,\n      isDisabled,\n      role,\n      customChild,\n      autoFocus\n    } = this.props;\n    const customRef = customChild ? this.getInnerNode(this.ref.current) : this.ref.current;\n    context.sendRef(index, [customRef, customChild ? customRef : this.additionalRef.current], isDisabled, role === 'separator');\n    autoFocus && setTimeout(() => customRef.focus());\n  }\n\n  componentDidUpdate() {\n    const {\n      context,\n      index,\n      isDisabled,\n      role,\n      customChild\n    } = this.props;\n    const customRef = customChild ? this.getInnerNode(this.ref.current) : this.ref.current;\n    context.sendRef(index, [customRef, customChild ? customRef : this.additionalRef.current], isDisabled, role === 'separator');\n  }\n\n  extendAdditionalChildRef() {\n    const {\n      additionalChild\n    } = this.props;\n    return React.cloneElement(additionalChild, {\n      ref: this.additionalRef\n    });\n  }\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const _a = this.props,\n          {\n      className,\n      children,\n      isHovered,\n      context,\n      onClick,\n      component,\n      role,\n      isDisabled,\n      isAriaDisabled,\n      isPlainText,\n      index,\n      href,\n      tooltip,\n      tooltipProps,\n      id,\n      componentID,\n      listItemClassName,\n      additionalChild,\n      customChild,\n      enterTriggersArrowDown,\n      icon,\n      autoFocus,\n      styleChildren,\n      description,\n      inoperableEvents\n    } = _a,\n          additionalProps = __rest(_a, [\"className\", \"children\", \"isHovered\", \"context\", \"onClick\", \"component\", \"role\", \"isDisabled\", \"isAriaDisabled\", \"isPlainText\", \"index\", \"href\", \"tooltip\", \"tooltipProps\", \"id\", \"componentID\", \"listItemClassName\", \"additionalChild\", \"customChild\", \"enterTriggersArrowDown\", \"icon\", \"autoFocus\", \"styleChildren\", \"description\", \"inoperableEvents\"]);\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n\n    let classes = css(icon && styles.modifiers.icon, isAriaDisabled && styles.modifiers.ariaDisabled, className);\n\n    if (component === 'a') {\n      additionalProps['aria-disabled'] = isDisabled || isAriaDisabled;\n    } else if (component === 'button') {\n      additionalProps['aria-disabled'] = isDisabled || isAriaDisabled;\n      additionalProps.type = additionalProps.type || 'button';\n    }\n\n    const renderWithTooltip = childNode => tooltip ? React.createElement(Tooltip, Object.assign({\n      content: tooltip\n    }, tooltipProps), childNode) : childNode;\n\n    const renderClonedComponent = element => React.cloneElement(element, Object.assign(Object.assign({}, styleChildren && {\n      className: css(element.props.className, classes)\n    }), this.props.role !== 'separator' && {\n      ref: this.componentRef\n    }));\n\n    const renderDefaultComponent = tag => {\n      const Component = tag;\n      const componentContent = description ? React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: styles.dropdownMenuItemMain\n      }, icon && React.createElement(\"span\", {\n        className: css(styles.dropdownMenuItemIcon)\n      }, icon), children), React.createElement(\"div\", {\n        className: styles.dropdownMenuItemDescription\n      }, description)) : React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n        className: css(styles.dropdownMenuItemIcon)\n      }, icon), children);\n      return React.createElement(Component, Object.assign({}, additionalProps, isDisabled || isAriaDisabled ? preventedEvents(inoperableEvents) : null, {\n        href: href,\n        ref: this.ref,\n        className: classes,\n        id: componentID\n      }), componentContent);\n    };\n\n    return React.createElement(DropdownContext.Consumer, null, _ref => {\n      let {\n        onSelect,\n        itemClass,\n        disabledClass,\n        plainTextClass\n      } = _ref;\n\n      if (this.props.role !== 'separator') {\n        classes = css(classes, isDisabled && disabledClass, isPlainText && plainTextClass, itemClass, description && styles.modifiers.description);\n      }\n\n      if (customChild) {\n        return React.cloneElement(customChild, {\n          ref: this.ref,\n          onKeyDown: this.onKeyDown\n        });\n      }\n\n      return React.createElement(\"li\", {\n        className: listItemClassName || null,\n        role: role,\n        onKeyDown: this.onKeyDown,\n        onClick: event => {\n          if (!isDisabled && !isAriaDisabled) {\n            onClick(event);\n            onSelect(event);\n          }\n        },\n        id: id\n      }, renderWithTooltip(React.isValidElement(component) ? renderClonedComponent(component) : renderDefaultComponent(component)), additionalChild && this.extendAdditionalChildRef());\n    });\n  }\n\n}\nInternalDropdownItem.displayName = 'InternalDropdownItem';\nInternalDropdownItem.defaultProps = {\n  className: '',\n  isHovered: false,\n  component: 'a',\n  role: 'none',\n  isDisabled: false,\n  isPlainText: false,\n  tooltipProps: {},\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: event => undefined,\n  index: -1,\n  context: {\n    keyHandler: () => {},\n    sendRef: () => {}\n  },\n  enterTriggersArrowDown: false,\n  icon: null,\n  styleChildren: true,\n  description: null,\n  inoperableEvents: ['onClick', 'onKeyPress']\n};","map":{"version":3,"mappings":"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","names":["React","css","DropdownContext","KEYHANDLER_DIRECTION","preventedEvents","Tooltip","styles","InternalDropdownItem","Component","constructor","createRef","node","childNodes","length","event","innerIndex","target","ref","current","props","customChild","preventDefault","key","context","keyHandler","index","UP","stopPropagation","DOWN","RIGHT","LEFT","click","enterTriggersArrowDown","element","component","componentDidMount","isDisabled","role","autoFocus","customRef","getInnerNode","sendRef","additionalRef","setTimeout","focus","componentDidUpdate","extendAdditionalChildRef","additionalChild","cloneElement","render","_a","className","children","isHovered","onClick","isAriaDisabled","isPlainText","href","tooltip","tooltipProps","id","componentID","listItemClassName","icon","styleChildren","description","inoperableEvents","additionalProps","classes","modifiers","ariaDisabled","type","renderWithTooltip","childNode","Object","content","renderClonedComponent","componentRef","renderDefaultComponent","tag","componentContent","dropdownMenuItemMain","dropdownMenuItemIcon","dropdownMenuItemDescription","Consumer","onSelect","itemClass","disabledClass","plainTextClass","onKeyDown","isValidElement","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/InternalDropdownItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { DropdownContext } from './dropdownConstants';\nimport { KEYHANDLER_DIRECTION } from '../../helpers/constants';\nimport { preventedEvents } from '../../helpers/util';\nimport { Tooltip } from '../Tooltip';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\n\nexport interface InternalDropdownItemProps extends React.HTMLProps<HTMLAnchorElement> {\n  /** Anything which can be rendered as dropdown item */\n  children?: React.ReactNode;\n  /** Whether to set className on component when React.isValidElement(component) */\n  styleChildren?: boolean;\n  /** Classes applied to root element of dropdown item */\n  className?: string;\n  /** Class applied to list element */\n  listItemClassName?: string;\n  /** Indicates which component will be used as dropdown item. Will have className injected if React.isValidElement(component) */\n  component?: React.ReactNode;\n  /** Role for the item */\n  role?: string;\n  /** Render dropdown item as disabled option */\n  isDisabled?: boolean;\n  /** Render dropdown item as aria disabled option */\n  isAriaDisabled?: boolean;\n  /** Render dropdown item as a non-interactive item */\n  isPlainText?: boolean;\n  /** Forces display of the hover state of the element */\n  isHovered?: boolean;\n  /** Default hyperlink location */\n  href?: string;\n  /** Tooltip to display when hovered over the item */\n  tooltip?: React.ReactNode;\n  /** Additional tooltip props forwarded to the Tooltip component */\n  tooltipProps?: any;\n  index?: number;\n  context?: {\n    keyHandler?: (index: number, innerIndex: number, direction: string) => void;\n    sendRef?: (index: number, ref: any, isDisabled: boolean, isSeparator: boolean) => void;\n  };\n  /** Callback for click event */\n  onClick?: (event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent) => void;\n  /** ID for the list element */\n  id?: string;\n  /** ID for the component element */\n  componentID?: string;\n  /** Additional content to include alongside item within the <li> */\n  additionalChild?: React.ReactNode;\n  /** Custom item rendering that receives the DropdownContext */\n  customChild?: React.ReactNode;\n  /** Flag indicating if hitting enter on an item also triggers an arrow down key press */\n  enterTriggersArrowDown?: boolean;\n  /** An image to display within the InternalDropdownItem, appearing before any component children */\n  icon?: React.ReactNode;\n  /** Initial focus on the item when the menu is opened (Note: Only applicable to one of the items) */\n  autoFocus?: boolean;\n  /** A short description of the dropdown item, displayed under the dropdown item content */\n  description?: React.ReactNode;\n  /** Events to prevent when the item is disabled */\n  inoperableEvents?: string[];\n}\n\nexport class InternalDropdownItem extends React.Component<InternalDropdownItemProps> {\n  static displayName = 'InternalDropdownItem';\n  ref = React.createRef<HTMLLIElement>();\n  additionalRef = React.createRef<any>();\n\n  static defaultProps: InternalDropdownItemProps = {\n    className: '',\n    isHovered: false,\n    component: 'a',\n    role: 'none',\n    isDisabled: false,\n    isPlainText: false,\n    tooltipProps: {},\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent) => undefined as any,\n    index: -1,\n    context: {\n      keyHandler: () => {},\n      sendRef: () => {}\n    },\n    enterTriggersArrowDown: false,\n    icon: null,\n    styleChildren: true,\n    description: null,\n    inoperableEvents: ['onClick', 'onKeyPress']\n  };\n\n  componentDidMount() {\n    const { context, index, isDisabled, role, customChild, autoFocus } = this.props;\n    const customRef = customChild ? this.getInnerNode(this.ref.current) : this.ref.current;\n    context.sendRef(\n      index,\n      [customRef, customChild ? customRef : this.additionalRef.current],\n      isDisabled,\n      role === 'separator'\n    );\n    autoFocus && setTimeout(() => customRef.focus());\n  }\n\n  componentDidUpdate() {\n    const { context, index, isDisabled, role, customChild } = this.props;\n    const customRef = customChild ? this.getInnerNode(this.ref.current) : this.ref.current;\n    context.sendRef(\n      index,\n      [customRef, customChild ? customRef : this.additionalRef.current],\n      isDisabled,\n      role === 'separator'\n    );\n  }\n\n  getInnerNode = (node: any) => (node && node.childNodes && node.childNodes.length ? node.childNodes[0] : node);\n\n  onKeyDown = (event: any) => {\n    // Detected key press on this item, notify the menu parent so that the appropriate item can be focused\n    const innerIndex = event.target === this.ref.current ? 0 : 1;\n    if (!this.props.customChild) {\n      event.preventDefault();\n    }\n    if (event.key === 'ArrowUp') {\n      this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.UP);\n      event.stopPropagation();\n    } else if (event.key === 'ArrowDown') {\n      this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.DOWN);\n      event.stopPropagation();\n    } else if (event.key === 'ArrowRight') {\n      this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.RIGHT);\n      event.stopPropagation();\n    } else if (event.key === 'ArrowLeft') {\n      this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.LEFT);\n      event.stopPropagation();\n    } else if (event.key === 'Enter' || event.key === ' ') {\n      event.target.click();\n      this.props.enterTriggersArrowDown &&\n        this.props.context.keyHandler(this.props.index, innerIndex, KEYHANDLER_DIRECTION.DOWN);\n    }\n  };\n\n  extendAdditionalChildRef() {\n    const { additionalChild } = this.props;\n\n    return React.cloneElement(additionalChild as React.ReactElement<any>, {\n      ref: this.additionalRef\n    });\n  }\n\n  componentRef = (element: HTMLLIElement) => {\n    (this.ref as React.MutableRefObject<any>).current = element;\n    const { component } = this.props;\n    const ref = (component as any).ref;\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(element);\n      } else {\n        (ref as React.MutableRefObject<any>).current = element;\n      }\n    }\n  };\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      className,\n      children,\n      isHovered,\n      context,\n      onClick,\n      component,\n      role,\n      isDisabled,\n      isAriaDisabled,\n      isPlainText,\n      index,\n      href,\n      tooltip,\n      tooltipProps,\n      id,\n      componentID,\n      listItemClassName,\n      additionalChild,\n      customChild,\n      enterTriggersArrowDown,\n      icon,\n      autoFocus,\n      styleChildren,\n      description,\n      inoperableEvents,\n      ...additionalProps\n    } = this.props;\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    let classes = css(icon && styles.modifiers.icon, isAriaDisabled && styles.modifiers.ariaDisabled, className);\n\n    if (component === 'a') {\n      additionalProps['aria-disabled'] = isDisabled || isAriaDisabled;\n    } else if (component === 'button') {\n      additionalProps['aria-disabled'] = isDisabled || isAriaDisabled;\n      additionalProps.type = additionalProps.type || 'button';\n    }\n    const renderWithTooltip = (childNode: React.ReactNode) =>\n      tooltip ? (\n        <Tooltip content={tooltip} {...tooltipProps}>\n          {childNode}\n        </Tooltip>\n      ) : (\n        childNode\n      );\n\n    const renderClonedComponent = (element: React.ReactElement<any>) =>\n      React.cloneElement(element, {\n        ...(styleChildren && {\n          className: css(element.props.className, classes)\n        }),\n        ...(this.props.role !== 'separator' && { ref: this.componentRef })\n      });\n\n    const renderDefaultComponent = (tag: string) => {\n      const Component = tag as any;\n\n      const componentContent = description ? (\n        <>\n          <div className={styles.dropdownMenuItemMain}>\n            {icon && <span className={css(styles.dropdownMenuItemIcon)}>{icon}</span>}\n            {children}\n          </div>\n          <div className={styles.dropdownMenuItemDescription}>{description}</div>\n        </>\n      ) : (\n        <>\n          {icon && <span className={css(styles.dropdownMenuItemIcon)}>{icon}</span>}\n          {children}\n        </>\n      );\n\n      return (\n        <Component\n          {...additionalProps}\n          {...(isDisabled || isAriaDisabled ? preventedEvents(inoperableEvents) : null)}\n          href={href}\n          ref={this.ref}\n          className={classes}\n          id={componentID}\n        >\n          {componentContent}\n        </Component>\n      );\n    };\n\n    return (\n      <DropdownContext.Consumer>\n        {({ onSelect, itemClass, disabledClass, plainTextClass }) => {\n          if (this.props.role !== 'separator') {\n            classes = css(\n              classes,\n              isDisabled && disabledClass,\n              isPlainText && plainTextClass,\n              itemClass,\n              description && styles.modifiers.description\n            );\n          }\n          if (customChild) {\n            return React.cloneElement(customChild as React.ReactElement<any>, {\n              ref: this.ref,\n              onKeyDown: this.onKeyDown\n            });\n          }\n\n          return (\n            <li\n              className={listItemClassName || null}\n              role={role}\n              onKeyDown={this.onKeyDown}\n              onClick={(event: any) => {\n                if (!isDisabled && !isAriaDisabled) {\n                  onClick(event);\n                  onSelect(event);\n                }\n              }}\n              id={id}\n            >\n              {renderWithTooltip(\n                React.isValidElement(component)\n                  ? renderClonedComponent(component)\n                  : renderDefaultComponent(component as string)\n              )}\n              {additionalChild && this.extendAdditionalChildRef()}\n            </li>\n          );\n        }}\n      </DropdownContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}