{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\nimport { Badge } from '../Badge';\nimport { Tooltip } from '../Tooltip';\nexport const NotificationDrawerGroup = _a => {\n  var {\n    children,\n    className = '',\n    count,\n    isExpanded,\n    isRead = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onExpand = (event, expanded) => undefined,\n    title,\n    truncateTitle = 0,\n    tooltipPosition\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"count\", \"isExpanded\", \"isRead\", \"onExpand\", \"title\", \"truncateTitle\", \"tooltipPosition\"]);\n\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n  const Title = React.createElement(\"div\", Object.assign({}, isTooltipVisible && {\n    tabIndex: 0\n  }, {\n    ref: titleRef,\n    className: css(styles.notificationDrawerGroupToggleTitle)\n  }), title);\n  return React.createElement(\"section\", Object.assign({}, props, {\n    className: css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)\n  }), React.createElement(\"h1\", null, React.createElement(\"button\", {\n    className: css(styles.notificationDrawerGroupToggle),\n    \"aria-expanded\": isExpanded,\n    onClick: e => onExpand(e, !isExpanded),\n    onKeyDown: e => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        onExpand(e, !isExpanded);\n      }\n    }\n  }, isTooltipVisible ? React.createElement(Tooltip, {\n    content: title,\n    position: tooltipPosition\n  }, Title) : Title, React.createElement(\"div\", {\n    className: css(styles.notificationDrawerGroupToggleCount)\n  }, React.createElement(Badge, {\n    isRead: isRead\n  }, count)), React.createElement(\"span\", {\n    className: \"pf-c-notification-drawer__group-toggle-icon\"\n  }, React.createElement(AngleRightIcon, null)))), children);\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';","map":{"version":3,"mappings":"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","names":["React","AngleRightIcon","css","styles","maxLines","Badge","Tooltip","NotificationDrawerGroup","_a","children","className","count","isExpanded","isRead","onExpand","event","expanded","undefined","title","truncateTitle","tooltipPosition","props","titleRef","useRef","isTooltipVisible","setIsTooltipVisible","useState","useEffect","showTooltip","current","offsetHeight","scrollHeight","style","setProperty","name","toString","Title","tabIndex","ref","notificationDrawerGroupToggleTitle","notificationDrawerGroup","modifiers","notificationDrawerGroupToggle","onClick","e","onKeyDown","key","preventDefault","content","position","notificationDrawerGroupToggleCount","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/NotificationDrawer/NotificationDrawerGroup.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer';\nimport maxLines from '@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines';\n\nimport { Badge } from '../Badge';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\n\nexport interface NotificationDrawerGroupProps extends Omit<React.HTMLProps<HTMLDivElement>, 'title'> {\n  /**  Content rendered inside the group */\n  children?: React.ReactNode;\n  /**  Additional classes added to the group */\n  className?: string;\n  /**  Notification drawer group count */\n  count: number;\n  /**  Adds styling to the group to indicate expanded state */\n  isExpanded: boolean;\n  /**  Adds styling to the group to indicate whether it has been read */\n  isRead?: boolean;\n  /**  Callback for when group button is clicked to expand */\n  onExpand?: (event: any, value: boolean) => void;\n  /**  Notification drawer group title */\n  title: string | React.ReactNode;\n  /** Truncate title to number of lines */\n  truncateTitle?: number;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n}\n\nexport const NotificationDrawerGroup: React.FunctionComponent<NotificationDrawerGroupProps> = ({\n  children,\n  className = '',\n  count,\n  isExpanded,\n  isRead = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onExpand = (event: any, expanded: boolean) => undefined as any,\n  title,\n  truncateTitle = 0,\n  tooltipPosition,\n  ...props\n}: NotificationDrawerGroupProps) => {\n  const titleRef = React.useRef(null);\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  React.useEffect(() => {\n    // Title will always truncate on overflow regardless of truncateTitle prop\n    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;\n    if (isTooltipVisible !== showTooltip) {\n      setIsTooltipVisible(showTooltip);\n    }\n    if (!titleRef.current || !truncateTitle) {\n      return;\n    }\n    titleRef.current.style.setProperty(maxLines.name, truncateTitle.toString());\n  }, [titleRef, truncateTitle, isTooltipVisible]);\n\n  const Title = (\n    <div\n      {...(isTooltipVisible && { tabIndex: 0 })}\n      ref={titleRef}\n      className={css(styles.notificationDrawerGroupToggleTitle)}\n    >\n      {title}\n    </div>\n  );\n\n  return (\n    <section\n      {...props}\n      className={css(styles.notificationDrawerGroup, isExpanded && styles.modifiers.expanded, className)}\n    >\n      <h1>\n        <button\n          className={css(styles.notificationDrawerGroupToggle)}\n          aria-expanded={isExpanded}\n          onClick={e => onExpand(e, !isExpanded)}\n          onKeyDown={e => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              e.preventDefault();\n              onExpand(e, !isExpanded);\n            }\n          }}\n        >\n          {isTooltipVisible ? (\n            <Tooltip content={title} position={tooltipPosition}>\n              {Title}\n            </Tooltip>\n          ) : (\n            Title\n          )}\n          <div className={css(styles.notificationDrawerGroupToggleCount)}>\n            <Badge isRead={isRead}>{count}</Badge>\n          </div>\n\n          <span className=\"pf-c-notification-drawer__group-toggle-icon\">\n            <AngleRightIcon />\n          </span>\n        </button>\n      </h1>\n      {children}\n    </section>\n  );\n};\nNotificationDrawerGroup.displayName = 'NotificationDrawerGroup';\n"]},"metadata":{},"sourceType":"module"}