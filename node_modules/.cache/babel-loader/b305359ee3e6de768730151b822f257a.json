{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nvar variantStyle = {\n  default: '',\n  indeterminate: styles.modifiers.indeterminate,\n  warning: styles.modifiers.warning,\n  success: styles.modifiers.success,\n  error: styles.modifiers.error\n};\nexport var HelperTextItem = function HelperTextItem(_a) {\n  var children = _a.children,\n      className = _a.className,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'div' : _a$component,\n      _a$variant = _a.variant,\n      variant = _a$variant === void 0 ? 'default' : _a$variant,\n      icon = _a.icon,\n      _a$isDynamic = _a.isDynamic,\n      isDynamic = _a$isDynamic === void 0 ? false : _a$isDynamic,\n      _a$hasIcon = _a.hasIcon,\n      hasIcon = _a$hasIcon === void 0 ? isDynamic : _a$hasIcon,\n      id = _a.id,\n      _a$screenReaderText = _a.screenReaderText,\n      screenReaderText = _a$screenReaderText === void 0 ? \"\".concat(variant, \" status\") : _a$screenReaderText,\n      props = __rest(_a, [\"children\", \"className\", \"component\", \"variant\", \"icon\", \"isDynamic\", \"hasIcon\", \"id\", \"screenReaderText\"]);\n\n  var Component = component;\n  return React.createElement(Component, Object.assign({\n    className: css(styles.helperTextItem, variantStyle[variant], isDynamic && styles.modifiers.dynamic, className),\n    id: id\n  }, props), icon && React.createElement(\"span\", {\n    className: css(styles.helperTextItemIcon),\n    \"aria-hidden\": true\n  }, icon), hasIcon && !icon && React.createElement(\"span\", {\n    className: css(styles.helperTextItemIcon),\n    \"aria-hidden\": true\n  }, (variant === 'default' || variant === 'indeterminate') && React.createElement(MinusIcon, null), variant === 'warning' && React.createElement(ExclamationTriangleIcon, null), variant === 'success' && React.createElement(CheckCircleIcon, null), variant === 'error' && React.createElement(ExclamationCircleIcon, null)), React.createElement(\"span\", {\n    className: css(styles.helperTextItemText)\n  }, children, isDynamic && React.createElement(\"span\", {\n    className: \"pf-u-screen-reader\"\n  }, \": \", screenReaderText, \";\")));\n};\nHelperTextItem.displayName = 'HelperTextItem';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,gEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,SAAP,MAAsB,mDAAtB;AACA,OAAOC,uBAAP,MAAoC,kEAApC;AACA,OAAOC,eAAP,MAA4B,0DAA5B;AACA,OAAOC,qBAAP,MAAkC,gEAAlC;AA+BA,IAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,EADU;EAEnBC,aAAa,EAAER,MAAM,CAACS,SAAP,CAAiBD,aAFb;EAGnBE,OAAO,EAAEV,MAAM,CAACS,SAAP,CAAiBC,OAHP;EAInBC,OAAO,EAAEX,MAAM,CAACS,SAAP,CAAiBE,OAJP;EAKnBC,KAAK,EAAEZ,MAAM,CAACS,SAAP,CAAiBG;AALL,CAArB;AAQA,OAAO,IAAMC,cAAc,GAAiD,SAA/DA,cAA+D,CAACC,EAAD,EAWlD;MAVxBC,WAQsCD,GARtCC;MACAC,YAOsCF,GAPtCE;qBAOsCF,GANtCG;MAAAA,sCAAY;mBAM0BH,GALtCI;MAAAA,kCAAU;MACVC,OAIsCL,GAJtCK;qBAIsCL,GAHtCM;MAAAA,sCAAY;mBAG0BN,GAFtCO;MAAAA,kCAAUD;MACVE,KACsCR,GADtCQ;4BACsCR,GAAtCS;MAAAA,8DAAsBL;MACnBM,QAAKC,WAVmE,2GAUnE;;EAER,IAAMC,SAAS,GAAGT,SAAlB;EACA,OACElB,oBAAC2B,SAAD,EAAUC;IACRX,SAAS,EAAEf,GAAG,CAACD,MAAM,CAAC4B,cAAR,EAAwBtB,YAAY,CAACY,OAAD,CAApC,EAA+CE,SAAS,IAAIpB,MAAM,CAACS,SAAP,CAAiBoB,OAA7E,EAAsFb,SAAtF,CADN;IAERM,EAAE,EAAEA;EAFI,GAGJE,KAHI,CAAV,EAKGL,IAAI,IACHpB;IAAMiB,SAAS,EAAEf,GAAG,CAACD,MAAM,CAAC8B,kBAAR,CAApB;IAA+C;EAA/C,GACGX,IADH,CANJ,EAUGE,OAAO,IAAI,CAACF,IAAZ,IACCpB;IAAMiB,SAAS,EAAEf,GAAG,CAACD,MAAM,CAAC8B,kBAAR,CAApB;IAA+C;EAA/C,GACG,CAACZ,OAAO,KAAK,SAAZ,IAAyBA,OAAO,KAAK,eAAtC,KAA0DnB,oBAACG,SAAD,EAAU,IAAV,CAD7D,EAEGgB,OAAO,KAAK,SAAZ,IAAyBnB,oBAACI,uBAAD,EAAwB,IAAxB,CAF5B,EAGGe,OAAO,KAAK,SAAZ,IAAyBnB,oBAACK,eAAD,EAAgB,IAAhB,CAH5B,EAIGc,OAAO,KAAK,OAAZ,IAAuBnB,oBAACM,qBAAD,EAAsB,IAAtB,CAJ1B,CAXJ,EAmBEN;IAAMiB,SAAS,EAAEf,GAAG,CAACD,MAAM,CAAC+B,kBAAR;EAApB,GACGhB,QADH,EAEGK,SAAS,IAAIrB;IAAMiB,SAAS,EAAC;EAAhB,SAAwCO,gBAAxC,MAFhB,CAnBF,CADF;AA0BD,CAvCM;AAwCPV,cAAc,CAACmB,WAAf,GAA6B,gBAA7B","names":["React","styles","css","MinusIcon","ExclamationTriangleIcon","CheckCircleIcon","ExclamationCircleIcon","variantStyle","default","indeterminate","modifiers","warning","success","error","HelperTextItem","_a","children","className","component","variant","icon","isDynamic","hasIcon","id","screenReaderText","props","__rest","Component","Object","helperTextItem","dynamic","helperTextItemIcon","helperTextItemText","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/HelperText/HelperTextItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\n\nexport interface HelperTextItemProps extends React.HTMLProps<HTMLDivElement | HTMLLIElement> {\n  /** Content rendered inside the helper text item. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the helper text item. */\n  className?: string;\n  /** Sets the component type of the helper text item. */\n  component?: 'div' | 'li';\n  /** Variant styling of the helper text item. */\n  variant?: 'default' | 'indeterminate' | 'warning' | 'success' | 'error';\n  /** Custom icon prefixing the helper text. This property will override the default icon paired with each helper text variant. */\n  icon?: React.ReactNode;\n  /** Flag indicating the helper text item is dynamic. This prop should be used when the\n   * text content of the helper text item will never change, but the icon and styling will\n   * be dynamically updated via the `variant` prop.\n   */\n  isDynamic?: boolean;\n  /** Flag indicating the helper text should have an icon. Dynamic helper texts include icons by default while static helper texts do not. */\n  hasIcon?: boolean;\n  /** ID for the helper text item. The value of this prop can be passed into a form component's\n   * aria-describedby prop when you intend for only specific helper text items to be announced to\n   * assistive technologies.\n   */\n  id?: string;\n  /** Text that is only accessible to screen readers in order to announce the status of a helper text item.\n   * This prop can only be used when the isDynamic prop is also passed in.\n   */\n  screenReaderText?: string;\n}\n\nconst variantStyle = {\n  default: '',\n  indeterminate: styles.modifiers.indeterminate,\n  warning: styles.modifiers.warning,\n  success: styles.modifiers.success,\n  error: styles.modifiers.error\n};\n\nexport const HelperTextItem: React.FunctionComponent<HelperTextItemProps> = ({\n  children,\n  className,\n  component = 'div',\n  variant = 'default',\n  icon,\n  isDynamic = false,\n  hasIcon = isDynamic,\n  id,\n  screenReaderText = `${variant} status`,\n  ...props\n}: HelperTextItemProps) => {\n  const Component = component as any;\n  return (\n    <Component\n      className={css(styles.helperTextItem, variantStyle[variant], isDynamic && styles.modifiers.dynamic, className)}\n      id={id}\n      {...props}\n    >\n      {icon && (\n        <span className={css(styles.helperTextItemIcon)} aria-hidden>\n          {icon}\n        </span>\n      )}\n      {hasIcon && !icon && (\n        <span className={css(styles.helperTextItemIcon)} aria-hidden>\n          {(variant === 'default' || variant === 'indeterminate') && <MinusIcon />}\n          {variant === 'warning' && <ExclamationTriangleIcon />}\n          {variant === 'success' && <CheckCircleIcon />}\n          {variant === 'error' && <ExclamationCircleIcon />}\n        </span>\n      )}\n\n      <span className={css(styles.helperTextItemText)}>\n        {children}\n        {isDynamic && <span className=\"pf-u-screen-reader\">: {screenReaderText};</span>}\n      </span>\n    </Component>\n  );\n};\nHelperTextItem.displayName = 'HelperTextItem';\n"]},"metadata":{},"sourceType":"module"}