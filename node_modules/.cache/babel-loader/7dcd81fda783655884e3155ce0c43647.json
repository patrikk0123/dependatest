{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Check/check';\nimport { css } from '@patternfly/react-styles';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers'; // tslint:disable-next-line:no-empty\n\nconst defaultOnChange = () => {};\n\nexport class Checkbox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.props.onChange(event.currentTarget.checked, event);\n    };\n\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(Checkbox.displayName)\n    };\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      'aria-label': ariaLabel,\n      className,\n      onChange,\n      isValid,\n      isDisabled,\n      isChecked,\n      label,\n      checked,\n      defaultChecked,\n      description,\n      body,\n      ouiaId,\n      ouiaSafe,\n      component: Component\n    } = _a,\n          props = __rest(_a, ['aria-label', \"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"label\", \"checked\", \"defaultChecked\", \"description\", \"body\", \"ouiaId\", \"ouiaSafe\", \"component\"]);\n\n    if (!props.id) {\n      // eslint-disable-next-line no-console\n      console.error('Checkbox:', 'id is required to make input accessible');\n    }\n\n    const checkedProps = {};\n\n    if ([true, false].includes(checked) || isChecked === true) {\n      checkedProps.checked = checked || isChecked;\n    }\n\n    if (onChange !== defaultOnChange) {\n      checkedProps.checked = isChecked;\n    }\n\n    if ([false, true].includes(defaultChecked)) {\n      checkedProps.defaultChecked = defaultChecked;\n    }\n\n    checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;\n    return React.createElement(Component, {\n      className: css(styles.check, !label && styles.modifiers.standalone, className)\n    }, React.createElement(\"input\", Object.assign({}, props, {\n      className: css(styles.checkInput),\n      type: \"checkbox\",\n      onChange: this.handleChange,\n      \"aria-invalid\": !isValid,\n      \"aria-label\": ariaLabel,\n      disabled: isDisabled,\n      ref: elem => elem && (elem.indeterminate = isChecked === null)\n    }, checkedProps, getOUIAProps(Checkbox.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe))), label && React.createElement(\"label\", {\n      className: css(styles.checkLabel, isDisabled && styles.modifiers.disabled),\n      htmlFor: props.id\n    }, label), description && React.createElement(\"span\", {\n      className: css(styles.checkDescription)\n    }, description), body && React.createElement(\"span\", {\n      className: css(styles.checkBody)\n    }, body));\n  }\n\n}\nCheckbox.displayName = 'Checkbox';\nCheckbox.defaultProps = {\n  className: '',\n  isValid: true,\n  isDisabled: false,\n  isChecked: false,\n  onChange: defaultOnChange,\n  ouiaSafe: true,\n  component: 'div'\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","getDefaultOUIAId","getOUIAProps","defaultOnChange","Checkbox","Component","constructor","props","event","onChange","currentTarget","checked","state","ouiaStateId","displayName","render","_a","ariaLabel","className","isValid","isDisabled","isChecked","label","defaultChecked","description","body","ouiaId","ouiaSafe","component","id","console","error","checkedProps","includes","check","modifiers","standalone","checkInput","type","handleChange","disabled","ref","elem","indeterminate","undefined","checkLabel","htmlFor","checkDescription","checkBody"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Checkbox/Checkbox.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Check/check';\nimport { css } from '@patternfly/react-styles';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { getDefaultOUIAId, getOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface CheckboxProps\n  extends Omit<React.HTMLProps<HTMLInputElement>, 'type' | 'onChange' | 'disabled' | 'label'>,\n    OUIAProps {\n  /** Additional classes added to the Checkbox. */\n  className?: string;\n  /** Flag to show if the Checkbox selection is valid or invalid. */\n  isValid?: boolean;\n  /** Flag to show if the Checkbox is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the Checkbox is checked. If null, the checkbox will be indeterminate (partially checked). */\n  isChecked?: boolean | null;\n  checked?: boolean;\n  /** A callback for when the Checkbox selection changes. */\n  onChange?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Label text of the checkbox. */\n  label?: React.ReactNode;\n  /** Id of the checkbox. */\n  id: string;\n  /** Aria-label of the checkbox. */\n  'aria-label'?: string;\n  /** Description text of the checkbox. */\n  description?: React.ReactNode;\n  /** Body text of the checkbox */\n  body?: React.ReactNode;\n  /** Sets the input wrapper component to render. Defaults to <div> */\n  component?: React.ElementType;\n}\n\n// tslint:disable-next-line:no-empty\nconst defaultOnChange = () => {};\n\ninterface CheckboxState {\n  ouiaStateId: string;\n}\n\nexport class Checkbox extends React.Component<CheckboxProps, CheckboxState> {\n  static displayName = 'Checkbox';\n  static defaultProps: PickOptional<CheckboxProps> = {\n    className: '',\n    isValid: true,\n    isDisabled: false,\n    isChecked: false,\n    onChange: defaultOnChange,\n    ouiaSafe: true,\n    component: 'div'\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(Checkbox.displayName)\n    };\n  }\n\n  private handleChange = (event: React.FormEvent<HTMLInputElement>): void => {\n    this.props.onChange(event.currentTarget.checked, event);\n  };\n\n  render() {\n    const {\n      'aria-label': ariaLabel,\n      className,\n      onChange,\n      isValid,\n      isDisabled,\n      isChecked,\n      label,\n      checked,\n      defaultChecked,\n      description,\n      body,\n      ouiaId,\n      ouiaSafe,\n      component: Component,\n      ...props\n    } = this.props;\n    if (!props.id) {\n      // eslint-disable-next-line no-console\n      console.error('Checkbox:', 'id is required to make input accessible');\n    }\n    const checkedProps: { checked?: boolean; defaultChecked?: boolean } = {};\n    if ([true, false].includes(checked) || isChecked === true) {\n      checkedProps.checked = checked || isChecked;\n    }\n    if (onChange !== defaultOnChange) {\n      checkedProps.checked = isChecked;\n    }\n    if ([false, true].includes(defaultChecked)) {\n      checkedProps.defaultChecked = defaultChecked;\n    }\n\n    checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;\n    return (\n      <Component className={css(styles.check, !label && styles.modifiers.standalone, className)}>\n        <input\n          {...props}\n          className={css(styles.checkInput)}\n          type=\"checkbox\"\n          onChange={this.handleChange}\n          aria-invalid={!isValid}\n          aria-label={ariaLabel}\n          disabled={isDisabled}\n          ref={elem => elem && (elem.indeterminate = isChecked === null)}\n          {...checkedProps}\n          {...getOUIAProps(Checkbox.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n        />\n        {label && (\n          <label className={css(styles.checkLabel, isDisabled && styles.modifiers.disabled)} htmlFor={props.id}>\n            {label}\n          </label>\n        )}\n        {description && <span className={css(styles.checkDescription)}>{description}</span>}\n        {body && <span className={css(styles.checkBody)}>{body}</span>}\n      </Component>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}