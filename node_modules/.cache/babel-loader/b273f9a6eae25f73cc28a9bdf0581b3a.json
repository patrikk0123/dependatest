{"ast":null,"code":"import * as React from 'react';\nimport { ApplicationLauncherSeparator } from '../components/ApplicationLauncher/ApplicationLauncherSeparator';\nimport { Divider } from '../components/Divider/Divider';\n/**\n * This function is a helper for creating an array of renderable favorite items for the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n * @param {boolean} isEnterTriggersArrowDown Flag indicating if we should add isEnterTriggersArrowDown to favorited item\n */\n\nexport const createRenderableFavorites = (items, isGrouped, favorites, isEnterTriggersArrowDown) => {\n  if (isGrouped) {\n    const favoriteItems = [];\n    items.forEach(group => {\n      if (favorites.length > 0) {\n        return group.props.children && group.props.children.filter(item => favorites.includes(item.props.id)).map(item => {\n          if (isEnterTriggersArrowDown) {\n            return favoriteItems.push(React.cloneElement(item, {\n              isFavorite: true,\n              enterTriggersArrowDown: isEnterTriggersArrowDown,\n              id: `favorite-${item.props.id}`\n            }));\n          } else {\n            return favoriteItems.push(React.cloneElement(item, {\n              isFavorite: true,\n              id: `favorite-${item.props.id}`\n            }));\n          }\n        });\n      }\n    });\n    return favoriteItems;\n  }\n\n  return items.filter(item => favorites.includes(item.props.id)).map(item => React.cloneElement(item, {\n    isFavorite: true,\n    enterTriggersArrowDown: isEnterTriggersArrowDown\n  }));\n};\n/**\n * This function is a helper for extending the array of renderable favorite with the select/application launcher items to  render in the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n */\n\nexport const extendItemsWithFavorite = (items, isGrouped, favorites) => {\n  if (isGrouped) {\n    return items.map(group => React.cloneElement(group, {\n      children: React.Children.map(group.props.children, item => {\n        if (item.type === ApplicationLauncherSeparator || item.type === Divider) {\n          return item;\n        }\n\n        return React.cloneElement(item, {\n          isFavorite: favorites.some(favoriteId => favoriteId === item.props.id || `favorite-${favoriteId}` === item.props.id)\n        });\n      })\n    }));\n  }\n\n  return items.map(item => React.cloneElement(item, {\n    isFavorite: favorites.some(favoriteId => favoriteId === item.props.id)\n  }));\n};","map":{"version":3,"mappings":"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","names":["React","ApplicationLauncherSeparator","Divider","createRenderableFavorites","items","isGrouped","favorites","isEnterTriggersArrowDown","favoriteItems","forEach","group","length","props","children","filter","item","includes","id","map","push","cloneElement","isFavorite","enterTriggersArrowDown","extendItemsWithFavorite","Children","type","some","favoriteId"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/favorites.ts"],"sourcesContent":["import * as React from 'react';\nimport { ApplicationLauncherSeparator } from '../components/ApplicationLauncher/ApplicationLauncherSeparator';\nimport { Divider } from '../components/Divider/Divider';\n\n/**\n * This function is a helper for creating an array of renderable favorite items for the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n * @param {boolean} isEnterTriggersArrowDown Flag indicating if we should add isEnterTriggersArrowDown to favorited item\n */\nexport const createRenderableFavorites = (\n  items: object,\n  isGrouped: boolean,\n  favorites: any[],\n  isEnterTriggersArrowDown?: boolean\n) => {\n  if (isGrouped) {\n    const favoriteItems: React.ReactNode[] = [];\n    (items as React.ReactElement[]).forEach(group => {\n      if (favorites.length > 0) {\n        return (\n          group.props.children &&\n          (group.props.children as React.ReactElement[])\n            .filter(item => favorites.includes(item.props.id))\n            .map(item => {\n              if (isEnterTriggersArrowDown) {\n                return favoriteItems.push(\n                  React.cloneElement(item, {\n                    isFavorite: true,\n                    enterTriggersArrowDown: isEnterTriggersArrowDown,\n                    id: `favorite-${item.props.id}`\n                  })\n                );\n              } else {\n                return favoriteItems.push(\n                  React.cloneElement(item, { isFavorite: true, id: `favorite-${item.props.id}` })\n                );\n              }\n            })\n        );\n      }\n    });\n    return favoriteItems;\n  }\n  return (items as React.ReactElement[])\n    .filter(item => favorites.includes(item.props.id))\n    .map(item => React.cloneElement(item, { isFavorite: true, enterTriggersArrowDown: isEnterTriggersArrowDown }));\n};\n\n/**\n * This function is a helper for extending the array of renderable favorite with the select/application launcher items to  render in the Application launcher or Select\n *\n * @param {object} items The items rendered in Select or Application aLauncher\n * @param {boolean} isGrouped Flag indicating if items are grouped\n * @param {any[]} favorites Array of ids of favorited items\n */\nexport const extendItemsWithFavorite = (items: object, isGrouped: boolean, favorites: any[]) => {\n  if (isGrouped) {\n    return (items as React.ReactElement[]).map(group =>\n      React.cloneElement(group, {\n        children: React.Children.map(group.props.children as React.ReactElement[], item => {\n          if (item.type === ApplicationLauncherSeparator || item.type === Divider) {\n            return item;\n          }\n          return React.cloneElement(item, {\n            isFavorite: favorites.some(\n              favoriteId => favoriteId === item.props.id || `favorite-${favoriteId}` === item.props.id\n            )\n          });\n        })\n      })\n    );\n  }\n  return (items as React.ReactElement[]).map(item =>\n    React.cloneElement(item, {\n      isFavorite: favorites.some(favoriteId => favoriteId === item.props.id)\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}