{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nexport var OptionsMenuToggleWithText = function OptionsMenuToggleWithText(_a) {\n  var _a$parentId = _a.parentId,\n      parentId = _a$parentId === void 0 ? '' : _a$parentId,\n      toggleText = _a.toggleText,\n      _a$toggleTextClassNam = _a.toggleTextClassName,\n      toggleTextClassName = _a$toggleTextClassNam === void 0 ? '' : _a$toggleTextClassNam,\n      toggleButtonContents = _a.toggleButtonContents,\n      _a$toggleButtonConten = _a.toggleButtonContentsClassName,\n      toggleButtonContentsClassName = _a$toggleButtonConten === void 0 ? '' : _a$toggleButtonConten,\n      _a$onToggle = _a.onToggle,\n      onToggle = _a$onToggle === void 0 ? function () {\n    return null;\n  } : _a$onToggle,\n      _a$isOpen = _a.isOpen,\n      isOpen = _a$isOpen === void 0 ? false : _a$isOpen,\n      _a$isPlain = _a.isPlain,\n      isPlain = _a$isPlain === void 0 ? false : _a$isPlain,\n      _a$isText = _a.isText,\n      isText = _a$isText === void 0 ? true : _a$isText,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      _a$isActive = _a.isActive,\n      isActive = _a$isActive === void 0 ? false : _a$isActive,\n      ariaHasPopup = _a['aria-haspopup'],\n      parentRef = _a.parentRef,\n      getMenuRef = _a.getMenuRef,\n      onEnter = _a.onEnter,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Options menu' : _a$ariaLabel,\n      props = __rest(_a, [\"parentId\", \"toggleText\", \"toggleTextClassName\", \"toggleButtonContents\", \"toggleButtonContentsClassName\", \"onToggle\", \"isOpen\", \"isPlain\", \"isText\", \"isDisabled\", \"isActive\", 'aria-haspopup', \"parentRef\", \"getMenuRef\", \"onEnter\", 'aria-label']);\n\n  var buttonRef = React.useRef();\n  React.useEffect(function () {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return function () {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  var onDocClick = function onDocClick(event) {\n    if (isOpen && parentRef && parentRef.current && !parentRef.current.contains(event.target)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    if (event.key === 'Tab' && !isOpen) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if ((event.key === 'Enter' || event.key === ' ') && isOpen) {\n      onToggle(!isOpen);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !isOpen) {\n      onToggle(!isOpen);\n      onEnter(event);\n    }\n  };\n\n  var onEscPress = function onEscPress(event) {\n    var keyCode = event.keyCode || event.which;\n\n    if (isOpen && (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') && parentRef && parentRef.current && parentRef.current.contains(event.target)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.optionsMenuToggle, styles.modifiers.text, isPlain && styles.modifiers.plain, isDisabled && styles.modifiers.disabled, isActive && styles.modifiers.active)\n  }, props), React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText, toggleTextClassName)\n  }, toggleText), React.createElement(\"button\", {\n    className: css(styles.optionsMenuToggleButton, toggleButtonContentsClassName),\n    id: \"\".concat(parentId, \"-toggle\"),\n    \"aria-haspopup\": \"listbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-expanded\": isOpen,\n    ref: buttonRef,\n    disabled: isDisabled,\n    onClick: function onClick() {\n      return onToggle(!isOpen);\n    },\n    onKeyDown: onKeyDown\n  }, React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleButtonIcon)\n  }, toggleButtonContents)));\n};\nOptionsMenuToggleWithText.displayName = 'OptionsMenuToggleWithText';","map":{"version":3,"mappings":"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","names":["React","css","KEY_CODES","styles","OptionsMenuToggleWithText","_a","parentId","toggleText","toggleTextClassName","toggleButtonContents","toggleButtonContentsClassName","onToggle","isOpen","isPlain","isText","isDisabled","isActive","ariaHasPopup","parentRef","getMenuRef","onEnter","ariaLabel","props","__rest","buttonRef","useRef","useEffect","document","addEventListener","onDocClick","onEscPress","removeEventListener","event","current","contains","target","focus","onKeyDown","key","preventDefault","keyCode","which","ESCAPE_KEY","className","optionsMenuToggle","modifiers","text","plain","disabled","active","optionsMenuToggleText","optionsMenuToggleButton","id","ref","onClick","optionsMenuToggleButtonIcon","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/OptionsMenu/OptionsMenuToggleWithText.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { KEY_CODES } from '../../helpers/constants';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\n\nexport interface OptionsMenuToggleWithTextProps extends React.HTMLProps<HTMLDivElement> {\n  /** Id of the parent options menu component */\n  parentId?: string;\n  /** Content to be rendered inside the options menu toggle as text or another non-interactive element */\n  toggleText: React.ReactNode;\n  /** classes to be added to the options menu toggle text */\n  toggleTextClassName?: string;\n  /** Content to be rendered inside the options menu toggle button */\n  toggleButtonContents?: React.ReactNode;\n  /** Classes to be added to the options menu toggle button */\n  toggleButtonContentsClassName?: string;\n  /** Callback for when this options menu is toggled */\n  onToggle?: (event: boolean) => void;\n  /** Inner function to indicate open on Enter */\n  onEnter?: (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<Element>) => void;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if the button is plain */\n  isPlain?: boolean;\n  /** Forces display of the active state of the options menu button */\n  isActive?: boolean;\n  /** Disables the options menu toggle */\n  isDisabled?: boolean;\n  /** @hide Internal parent reference */\n  parentRef?: React.RefObject<HTMLElement>;\n  /** Indicates that the element has a popup context menu or sub-level menu */\n  'aria-haspopup'?: boolean | 'dialog' | 'menu' | 'listbox' | 'tree' | 'grid';\n  /** Provides an accessible name for the button when an icon is used instead of text */\n  'aria-label'?: string;\n  /** @hide Display the toggle in text only mode. */\n  isText?: boolean;\n  /** @hide The menu element */\n  getMenuRef?: () => HTMLElement;\n}\n\nexport const OptionsMenuToggleWithText: React.FunctionComponent<OptionsMenuToggleWithTextProps> = ({\n  parentId = '',\n  toggleText,\n  toggleTextClassName = '',\n  toggleButtonContents,\n  toggleButtonContentsClassName = '',\n  onToggle = () => null as any,\n  isOpen = false,\n  isPlain = false,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  isText = true,\n  isDisabled = false,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  isActive = false,\n  'aria-haspopup': ariaHasPopup,\n  parentRef,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  getMenuRef,\n  onEnter,\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  'aria-label': ariaLabel = 'Options menu',\n  ...props\n}: OptionsMenuToggleWithTextProps) => {\n  const buttonRef = React.useRef<HTMLButtonElement>();\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocClick);\n    document.addEventListener('touchstart', onDocClick);\n    document.addEventListener('keydown', onEscPress);\n    return () => {\n      document.removeEventListener('mousedown', onDocClick);\n      document.removeEventListener('touchstart', onDocClick);\n      document.removeEventListener('keydown', onEscPress);\n    };\n  });\n\n  const onDocClick = (event: MouseEvent | TouchEvent) => {\n    if (isOpen && parentRef && parentRef.current && !parentRef.current.contains(event.target as Node)) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent<any>) => {\n    if (event.key === 'Tab' && !isOpen) {\n      return;\n    }\n    event.preventDefault();\n    if ((event.key === 'Enter' || event.key === ' ') && isOpen) {\n      onToggle(!isOpen);\n    } else if ((event.key === 'Enter' || event.key === ' ') && !isOpen) {\n      onToggle(!isOpen);\n      onEnter(event);\n    }\n  };\n\n  const onEscPress = (event: KeyboardEvent) => {\n    const keyCode = event.keyCode || event.which;\n    if (\n      isOpen &&\n      (keyCode === KEY_CODES.ESCAPE_KEY || event.key === 'Tab') &&\n      parentRef &&\n      parentRef.current &&\n      parentRef.current.contains(event.target as Node)\n    ) {\n      onToggle(false);\n      buttonRef.current.focus();\n    }\n  };\n\n  return (\n    <div\n      className={css(\n        styles.optionsMenuToggle,\n        styles.modifiers.text,\n        isPlain && styles.modifiers.plain,\n        isDisabled && styles.modifiers.disabled,\n        isActive && styles.modifiers.active\n      )}\n      {...props}\n    >\n      <span className={css(styles.optionsMenuToggleText, toggleTextClassName)}>{toggleText}</span>\n      <button\n        className={css(styles.optionsMenuToggleButton, toggleButtonContentsClassName)}\n        id={`${parentId}-toggle`}\n        aria-haspopup=\"listbox\"\n        aria-label={ariaLabel}\n        aria-expanded={isOpen}\n        ref={buttonRef}\n        disabled={isDisabled}\n        onClick={() => onToggle(!isOpen)}\n        onKeyDown={onKeyDown}\n      >\n        <span className={css(styles.optionsMenuToggleButtonIcon)}>{toggleButtonContents}</span>\n      </button>\n    </div>\n  );\n};\nOptionsMenuToggleWithText.displayName = 'OptionsMenuToggleWithText';\n"]},"metadata":{},"sourceType":"module"}