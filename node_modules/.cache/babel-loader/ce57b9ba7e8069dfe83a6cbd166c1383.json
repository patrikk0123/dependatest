{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nexport var DrawerColorVariant;\n\n(function (DrawerColorVariant) {\n  DrawerColorVariant[\"default\"] = \"default\";\n  DrawerColorVariant[\"light200\"] = \"light-200\";\n})(DrawerColorVariant || (DrawerColorVariant = {}));\n\nexport const DrawerContext = React.createContext({\n  isExpanded: false,\n  isStatic: false,\n  onExpand: () => {},\n  position: 'right',\n  drawerRef: null,\n  isInline: false\n});\nexport const Drawer = _a => {\n  var {\n    className = '',\n    children,\n    isExpanded = false,\n    isInline = false,\n    isStatic = false,\n    position = 'right',\n    onExpand = () => {}\n  } = _a,\n      props = __rest(_a, [\"className\", \"children\", \"isExpanded\", \"isInline\", \"isStatic\", \"position\", \"onExpand\"]);\n\n  const drawerRef = React.useRef();\n  return React.createElement(DrawerContext.Provider, {\n    value: {\n      isExpanded,\n      isStatic,\n      onExpand,\n      position,\n      drawerRef,\n      isInline\n    }\n  }, React.createElement(\"div\", Object.assign({\n    className: css(styles.drawer, isExpanded && styles.modifiers.expanded, isInline && styles.modifiers.inline, isStatic && styles.modifiers.static, position === 'left' && styles.modifiers.panelLeft, position === 'bottom' && styles.modifiers.panelBottom, className),\n    ref: drawerRef\n  }, props), children));\n};\nDrawer.displayName = 'Drawer';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,uDAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA,WAAYC,kBAAZ;;AAAA,WAAYA,kBAAZ,EAA8B;EAC5BA;EACAA;AACD,CAHD,EAAYA,kBAAkB,KAAlBA,kBAAkB,MAA9B;;AA+BA,OAAO,MAAMC,aAAa,GAAGJ,KAAK,CAACK,aAAN,CAAiD;EAC5EC,UAAU,EAAE,KADgE;EAE5EC,QAAQ,EAAE,KAFkE;EAG5EC,QAAQ,EAAE,MAAK,CAAG,CAH0D;EAI5EC,QAAQ,EAAE,OAJkE;EAK5EC,SAAS,EAAE,IALiE;EAM5EC,QAAQ,EAAE;AANkE,CAAjD,CAAtB;AASP,OAAO,MAAMC,MAAM,GAA0CC,EAAD,IAS1C;MAT2C;IAC3DC,SAAS,GAAG,EAD+C;IAE3DC,QAF2D;IAG3DT,UAAU,GAAG,KAH8C;IAI3DK,QAAQ,GAAG,KAJgD;IAK3DJ,QAAQ,GAAG,KALgD;IAM3DE,QAAQ,GAAG,OANgD;IAO3DD,QAAQ,GAAG,MAAK,CAAG;EAPwC,IAOxCK;MAChBG,KAAK,cARmD,uFAQnD;;EAER,MAAMN,SAAS,GAAGV,KAAK,CAACiB,MAAN,EAAlB;EACA,OACEjB,oBAACI,aAAa,CAACc,QAAf,EAAuB;IAACC,KAAK,EAAE;MAAEb,UAAF;MAAcC,QAAd;MAAwBC,QAAxB;MAAkCC,QAAlC;MAA4CC,SAA5C;MAAuDC;IAAvD;EAAR,CAAvB,EACEX;IACEc,SAAS,EAAEZ,GAAG,CACZD,MAAM,CAACmB,MADK,EAEZd,UAAU,IAAIL,MAAM,CAACoB,SAAP,CAAiBC,QAFnB,EAGZX,QAAQ,IAAIV,MAAM,CAACoB,SAAP,CAAiBE,MAHjB,EAIZhB,QAAQ,IAAIN,MAAM,CAACoB,SAAP,CAAiBG,MAJjB,EAKZf,QAAQ,KAAK,MAAb,IAAuBR,MAAM,CAACoB,SAAP,CAAiBI,SAL5B,EAMZhB,QAAQ,KAAK,QAAb,IAAyBR,MAAM,CAACoB,SAAP,CAAiBK,WAN9B,EAOZZ,SAPY,CADhB;IAUEa,GAAG,EAAEjB;EAVP,GAWMM,KAXN,GAaGD,QAbH,CADF,CADF;AAmBD,CA9BM;AA+BPH,MAAM,CAACgB,WAAP,GAAqB,QAArB","names":["React","styles","css","DrawerColorVariant","DrawerContext","createContext","isExpanded","isStatic","onExpand","position","drawerRef","isInline","Drawer","_a","className","children","props","useRef","Provider","value","drawer","modifiers","expanded","inline","static","panelLeft","panelBottom","ref","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Drawer/Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\n\nexport enum DrawerColorVariant {\n  default = 'default',\n  light200 = 'light-200'\n}\n\nexport interface DrawerProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the Drawer. */\n  className?: string;\n  /** Content rendered in the left hand panel */\n  children?: React.ReactNode;\n  /** Indicates if the drawer is expanded */\n  isExpanded?: boolean;\n  /** Indicates if the content element and panel element are displayed side by side. */\n  isInline?: boolean;\n  /** Indicates if the drawer will always show both content and panel. */\n  isStatic?: boolean;\n  /** Position of the drawer panel */\n  position?: 'left' | 'right' | 'bottom';\n  /** Callback when drawer panel is expanded after waiting 250ms for animation to complete. */\n  onExpand?: () => void;\n}\n\nexport interface DrawerContextProps {\n  isExpanded: boolean;\n  isStatic: boolean;\n  onExpand?: () => void;\n  position?: string;\n  drawerRef?: React.RefObject<HTMLDivElement>;\n  isInline: boolean;\n}\n\nexport const DrawerContext = React.createContext<Partial<DrawerContextProps>>({\n  isExpanded: false,\n  isStatic: false,\n  onExpand: () => {},\n  position: 'right',\n  drawerRef: null,\n  isInline: false\n});\n\nexport const Drawer: React.FunctionComponent<DrawerProps> = ({\n  className = '',\n  children,\n  isExpanded = false,\n  isInline = false,\n  isStatic = false,\n  position = 'right',\n  onExpand = () => {},\n  ...props\n}: DrawerProps) => {\n  const drawerRef = React.useRef<HTMLDivElement>();\n  return (\n    <DrawerContext.Provider value={{ isExpanded, isStatic, onExpand, position, drawerRef, isInline }}>\n      <div\n        className={css(\n          styles.drawer,\n          isExpanded && styles.modifiers.expanded,\n          isInline && styles.modifiers.inline,\n          isStatic && styles.modifiers.static,\n          position === 'left' && styles.modifiers.panelLeft,\n          position === 'bottom' && styles.modifiers.panelBottom,\n          className\n        )}\n        ref={drawerRef}\n        {...props}\n      >\n        {children}\n      </div>\n    </DrawerContext.Provider>\n  );\n};\nDrawer.displayName = 'Drawer';\n"]},"metadata":{},"sourceType":"module"}