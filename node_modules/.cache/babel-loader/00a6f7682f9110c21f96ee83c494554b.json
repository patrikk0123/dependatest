{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonVariant } from '../Button';\nexport var DataListToggle = function DataListToggle(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      _a$ariaControls = _a['aria-controls'],\n      ariaControls = _a$ariaControls === void 0 ? '' : _a$ariaControls,\n      _a$ariaLabel = _a['aria-label'],\n      ariaLabel = _a$ariaLabel === void 0 ? 'Details' : _a$ariaLabel,\n      _a$rowid = _a.rowid,\n      rowid = _a$rowid === void 0 ? '' : _a$rowid,\n      id = _a.id,\n      props = __rest(_a, [\"className\", \"isExpanded\", 'aria-controls', 'aria-label', \"rowid\", \"id\"]);\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dataListItemControl, className)\n  }, props), React.createElement(\"div\", {\n    className: css(styles.dataListToggle)\n  }, React.createElement(Button, {\n    id: id,\n    variant: ButtonVariant.plain,\n    \"aria-controls\": ariaControls !== '' && ariaControls,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabel !== 'Details' ? null : \"\".concat(rowid, \" \").concat(id),\n    \"aria-expanded\": isExpanded\n  }, React.createElement(\"div\", {\n    className: css(styles.dataListToggleIcon)\n  }, React.createElement(AngleRightIcon, null)))));\n};\nDataListToggle.displayName = 'DataListToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,OAAOC,MAAP,MAAmB,4DAAnB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,WAAtC;AAmBA,OAAO,IAAMC,cAAc,GAAiD,SAA/DA,cAA+D,CAACC,EAAD,EAQlD;qBAFtBA,GALFC;MAAAA,sCAAY;sBAKVD,GAJFE;MAAAA,wCAAa;wBAIXF,GAHF;MAAiBG,4CAAe;qBAG9BH,GAFF;MAAcI,sCAAY;iBAExBJ,GADFK;MAAAA,8BAAQ;MACRC,KAAEN,GAAFM;MACGC,QAAKC,WAPmE,yEAOnE;;EACiB,OACzBf;IAAKQ,SAAS,EAAEP,GAAG,CAACE,MAAM,CAACa,mBAAR,EAA6BR,SAA7B;EAAnB,GAAgEM,KAAhE,GACEd;IAAKQ,SAAS,EAAEP,GAAG,CAACE,MAAM,CAACc,cAAR;EAAnB,GACEjB,oBAACI,MAAD,EAAO;IACLS,EAAE,EAAEA,EADC;IAELK,OAAO,EAAEb,aAAa,CAACc,KAFlB;IAEuB,iBACbT,YAAY,KAAK,EAAjB,IAAuBA,YAHjC;IAG6C,cACtCC,SAJP;IAIgB,mBACJA,SAAS,KAAK,SAAd,GAA0B,IAA1B,aAAoCC,KAApC,cAA6CC,EAA7C,CALZ;IAK6D,iBACnDJ;EANV,CAAP,EAQET;IAAKQ,SAAS,EAAEP,GAAG,CAACE,MAAM,CAACiB,kBAAR;EAAnB,GACEpB,oBAACE,cAAD,EAAe,IAAf,CADF,CARF,CADF,CADF,CADyB;AAiB1B,CAzBM;AA0BPI,cAAc,CAACe,WAAf,GAA6B,gBAA7B","names":["React","css","AngleRightIcon","styles","Button","ButtonVariant","DataListToggle","_a","className","isExpanded","ariaControls","ariaLabel","rowid","id","props","__rest","dataListItemControl","dataListToggle","variant","plain","dataListToggleIcon","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DataList/DataListToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { Button, ButtonVariant } from '../Button';\n\nexport interface DataListToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** Additional classes added to the DataList cell */\n  className?: string;\n  /** Flag to show if the expanded content of the DataList item is visible */\n  isExpanded?: boolean;\n  /** Identify the DataList toggle number */\n  id: string;\n  /** Id for the row */\n  rowid?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-labelledby'?: string;\n  /** Adds accessible text to the DataList toggle */\n  'aria-label'?: string;\n  /** Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them. */\n  'aria-controls'?: string;\n}\n\nexport const DataListToggle: React.FunctionComponent<DataListToggleProps> = ({\n  className = '',\n  isExpanded = false,\n  'aria-controls': ariaControls = '',\n  'aria-label': ariaLabel = 'Details',\n  rowid = '',\n  id,\n  ...props\n}: DataListToggleProps) => (\n  <div className={css(styles.dataListItemControl, className)} {...props}>\n    <div className={css(styles.dataListToggle)}>\n      <Button\n        id={id}\n        variant={ButtonVariant.plain}\n        aria-controls={ariaControls !== '' && ariaControls}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabel !== 'Details' ? null : `${rowid} ${id}`}\n        aria-expanded={isExpanded}\n      >\n        <div className={css(styles.dataListToggleIcon)}>\n          <AngleRightIcon />\n        </div>\n      </Button>\n    </div>\n  </div>\n);\nDataListToggle.displayName = 'DataListToggle';\n"]},"metadata":{},"sourceType":"module"}