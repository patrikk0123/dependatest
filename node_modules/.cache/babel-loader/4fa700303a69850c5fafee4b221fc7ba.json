{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/Filtering/Filtering.tsx\";\nimport { Button, Chip, ChipGroup, InputGroup, Select, SelectOption, SelectVariant, TextInput } from '@patternfly/react-core';\nimport { SortAmountDownIcon } from '@patternfly/react-icons';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { constructCustomFilterParam } from '../../utils/customParamHelper';\nimport { addQParamItem, parseQParamDeep, removeQParamItem } from '../../utils/qParamHelper';\nimport { getComponentQueryParamValue, updateQueryParamsInURL } from '../../utils/queryParamsHelper';\nimport styles from './Filtering.module.css';\n/**\n * All Query params except:\n *  - pagination\n *  - sorting\n *\n * Typically Q params and other custom params.\n *\n * @example\n * {\n *   status: ['REJECTED', 'FAILED']\n *   buildConfigName: ['%customA%']\n * }\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\n * @example\n  const filterOptions: IFilterOptions = {\n    filterAttributes: {\n      name: {\n        id: 'name',\n        title: 'Name',\n        placeholder: 'string | !string | s?ring | st*ng',\n        operator: '=like=',\n      },\n      description: {\n        id: 'description',\n        title: 'Description',\n        operator: '=like=',\n      },\n      customb: {\n        id: 'customb',\n        title: 'Custom Param',\n        isCustomParam: true,\n        operator: '=like=',\n      },\n      status: {\n        id: 'status',\n        title: 'Status',\n        filterValues: ['SUCCESS', 'REJECTED', 'FAILED'],\n        operator: '==',\n      },\n    },\n  };\n */\nexport const Filtering = _ref => {\n  var _filterAttribute$filt;\n\n  let {\n    filterOptions,\n    componentId\n  } = _ref;\n  const location = useLocation();\n  const navigate = useNavigate();\n  /**\n   * FILTER ATTRIBUTE\n   */\n  // first key\n\n  const defaultAttributeKey = Object.keys(filterOptions.filterAttributes)[0];\n  const [filterAttribute, setFilterAttribute] = useState(filterOptions.filterAttributes[defaultAttributeKey]);\n  const [isFilterAttributeOpen, setIsFilterAttributeOpen] = useState(false);\n  /**\n   * FILTER VALUE\n   */\n\n  const [filterValue, setFilterValue] = useState('');\n  const [isFilterValueOpen, setIsFilterValueOpen] = useState(false);\n  /**\n   * APPLIED FILTERS\n   */\n\n  const [appliedFilters, setAppliedFilters] = useState();\n  /**\n   * Generate user friendly chip title representing applied filter (Q param or custom filter param).\n   */\n\n  const generateChipTitle = (filterAttribute, filterValue) => {\n    if (filterAttribute.operator === '=like=') {\n      let isNegated = false; // !\"%abc%\" -> \"%abc%\" when negated\n\n      if (filterValue.startsWith('!')) {\n        filterValue = filterValue.substring(1);\n        isNegated = true;\n      } // %abc% -> abc (custom param is not wrapped by \" characters)\n\n\n      if (filterAttribute.isCustomParam) {\n        filterValue = filterValue.substring(1, filterValue.length - 1);\n      } // \"%abc%\" -> abc\n      else {\n        filterValue = filterValue.substring(2, filterValue.length - 2);\n      } // abc -> !abc when negated\n\n\n      return (isNegated ? '!' : '') + filterValue;\n    }\n\n    return filterValue;\n  };\n  /**\n   * Add filter by updating URL.\n   */\n\n\n  const addFilter = (filterAttribute, filterValue) => {\n    // custom query param (not Q param)\n    if (filterAttribute.isCustomParam) {\n      const adjustedFilterValue = constructCustomFilterParam(filterAttribute, filterValue);\n      updateQueryParamsInURL({\n        [filterAttribute.id]: adjustedFilterValue\n      }, componentId, location, navigate);\n    } // Q param\n    else {\n      const currentQParam = getComponentQueryParamValue(location.search, 'q', componentId) || '';\n      const q = addQParamItem(filterAttribute.id, filterValue, filterAttribute.operator, currentQParam);\n      /**\n       * Update Query Params only if some new meaningful q param is returned.\n       */\n\n      if (q) {\n        // update Q param and reset pageIndex\n        updateQueryParamsInURL({\n          q,\n          pageIndex: 1\n        }, componentId, location, navigate);\n      }\n    }\n  };\n  /**\n   * Remove filter by updating URL.\n   */\n\n\n  const removeFilter = (filterAttributeKey, filterValue) => {\n    if (filterOptions.filterAttributes[filterAttributeKey].isCustomParam) {\n      updateQueryParamsInURL({\n        [filterAttributeKey]: ''\n      }, componentId, location, navigate);\n    } else {\n      const currentQParam = getComponentQueryParamValue(location.search, 'q', componentId) || '';\n      const q = removeQParamItem(filterAttributeKey, filterValue, filterOptions.filterAttributes[filterAttributeKey].operator, currentQParam);\n      updateQueryParamsInURL({\n        q\n      }, componentId, location, navigate);\n    }\n  };\n  /**\n   * Reset all filtering parameters to empty '' string and update Query Params in URL, they will be removed if empty.\n   *\n   * Non filtering parameters (like pagination and sorting) are untouched.\n   */\n\n\n  const removeAllFilters = () => {\n    // reset q parameter\n    const zeroedFilteringParameters = {\n      q: ''\n    }; // reset all custom filtering parameters\n\n    for (const [key, value] of Object.entries(filterOptions.filterAttributes)) {\n      if (value.isCustomParam) {\n        zeroedFilteringParameters[key] = '';\n      }\n    }\n\n    updateQueryParamsInURL(zeroedFilteringParameters, componentId, location, navigate);\n  };\n  /**\n   * Synchronize filters from URL to appliedFilters react hook.\n   */\n\n\n  useEffect(() => {\n    const currentQParam = getComponentQueryParamValue(location.search, 'q', componentId) || '';\n    const appliedFilters = parseQParamDeep(currentQParam);\n\n    for (const [key, value] of Object.entries(filterOptions.filterAttributes)) {\n      // check filter attributes validity\n      if (key !== value.id) {\n        console.error('filterAttributes: ', filterOptions.filterAttributes);\n        throw new Error(`filterAttributes have invalid format, object key (${key}) has to match id field (${value.id})!`);\n      }\n\n      if (value.isCustomParam) {\n        const customParamValue = getComponentQueryParamValue(location.search, key, componentId);\n\n        if (customParamValue) {\n          appliedFilters[key] = [customParamValue];\n        }\n      }\n    }\n\n    setAppliedFilters(appliedFilters);\n  }, [location.search, location, componentId, navigate, filterOptions.filterAttributes]); // primary: history.location.search\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        width: \"170px\",\n        variant: SelectVariant.single,\n        onToggle: isOpen => {\n          setIsFilterAttributeOpen(isOpen);\n        },\n        onSelect: (event, selection, isPlaceholder) => {\n          if (!isPlaceholder) {\n            setFilterAttribute(selection);\n            setIsFilterAttributeOpen(false);\n          }\n        },\n        selections: filterAttribute,\n        isOpen: isFilterAttributeOpen,\n        children: Object.keys(filterOptions.filterAttributes).map(filterAttributeKey => {\n          const filterAttribute = filterOptions.filterAttributes[filterAttributeKey]; // use 'title' attribute as default\n\n          filterAttribute.toString = () => {\n            return filterAttribute.title;\n          };\n\n          return /*#__PURE__*/_jsxDEV(SelectOption, {\n            value: filterAttribute\n          }, filterAttribute.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), (_filterAttribute$filt = filterAttribute.filterValues) !== null && _filterAttribute$filt !== void 0 && _filterAttribute$filt.length ? /*#__PURE__*/_jsxDEV(Select, {\n        className: styles['form-input'],\n        variant: SelectVariant.single,\n        onToggle: isOpen => {\n          setIsFilterValueOpen(isOpen);\n        },\n        onSelect: (event, selection, isPlaceholder) => {\n          addFilter(filterAttribute, selection);\n          setIsFilterValueOpen(false);\n        },\n        isOpen: isFilterValueOpen,\n        children: filterAttribute.filterValues.map(filterValue => {\n          return /*#__PURE__*/_jsxDEV(SelectOption, {\n            value: filterValue\n          }, filterValue, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(TextInput, {\n        className: styles['form-input'],\n        type: \"text\",\n        id: \"filter-text\",\n        placeholder: filterAttribute.placeholder || `Filter by ${filterAttribute}`,\n        onChange: value => {\n          setFilterValue(value);\n        },\n        onKeyPress: event => {\n          if (event.key === 'Enter' && filterValue && filterValue.trim().length > 0) {\n            addFilter(filterAttribute, filterValue);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        icon: /*#__PURE__*/_jsxDEV(SortAmountDownIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles['applied-filters'],\n      children: appliedFilters && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [Object.keys(appliedFilters).map(filterAttributeKey => /*#__PURE__*/_jsxDEV(ChipGroup, {\n          className: styles['chip-group'],\n          categoryName: filterOptions.filterAttributes[filterAttributeKey].title,\n          children: appliedFilters[filterAttributeKey].map(filterValueItem => /*#__PURE__*/_jsxDEV(Chip, {\n            onClick: () => {\n              removeFilter(filterAttributeKey, filterValueItem);\n            },\n            children: generateChipTitle(filterOptions.filterAttributes[filterAttributeKey], filterValueItem)\n          }, filterValueItem, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 19\n          }, this))\n        }, filterAttributeKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 15\n        }, this)), Object.keys(appliedFilters).length !== 0 && /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            removeAllFilters();\n          },\n          variant: \"link\",\n          children: \"Clear all filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};","map":{"version":3,"names":["Button","Chip","ChipGroup","InputGroup","Select","SelectOption","SelectVariant","TextInput","SortAmountDownIcon","useEffect","useState","useLocation","useNavigate","constructCustomFilterParam","addQParamItem","parseQParamDeep","removeQParamItem","getComponentQueryParamValue","updateQueryParamsInURL","styles","Filtering","filterOptions","componentId","location","navigate","defaultAttributeKey","Object","keys","filterAttributes","filterAttribute","setFilterAttribute","isFilterAttributeOpen","setIsFilterAttributeOpen","filterValue","setFilterValue","isFilterValueOpen","setIsFilterValueOpen","appliedFilters","setAppliedFilters","generateChipTitle","operator","isNegated","startsWith","substring","isCustomParam","length","addFilter","adjustedFilterValue","id","currentQParam","search","q","pageIndex","removeFilter","filterAttributeKey","removeAllFilters","zeroedFilteringParameters","key","value","entries","console","error","Error","customParamValue","single","isOpen","event","selection","isPlaceholder","map","toString","title","filterValues","placeholder","trim","filterValueItem"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/Filtering/Filtering.tsx"],"sourcesContent":["import { Button, Chip, ChipGroup, InputGroup, Select, SelectOption, SelectVariant, TextInput } from '@patternfly/react-core';\nimport { SortAmountDownAltIcon, SortAmountDownIcon } from '@patternfly/react-icons';\nimport { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { constructCustomFilterParam } from '../../utils/customParamHelper';\nimport { IQParamOperators, addQParamItem, parseQParamDeep, removeQParamItem } from '../../utils/qParamHelper';\nimport { getComponentQueryParamValue, updateQueryParamsInURL } from '../../utils/queryParamsHelper';\n\nimport styles from './Filtering.module.css';\n\n/**\n * All Query params except:\n *  - pagination\n *  - sorting\n *\n * Typically Q params and other custom params.\n *\n * @example\n * {\n *   status: ['REJECTED', 'FAILED']\n *   buildConfigName: ['%customA%']\n * }\n */\nexport interface IAppliedFilters {\n  [key: string]: string[];\n}\n\n/**\n * Not all possible combinations are valid.\n *\n * @example\n * {\n *   id: 'name',\n *   title: 'Name',\n *   placeholder: 'string | !string | s?ring | st*ng',\n *   operator: '=like='\n * }\n *\n * @example\n * {\n *   id: 'status',\n *   title: 'Status',\n *   filterValues: ['SUCCESS', 'REJECTED', 'FAILED'],\n *   operator: '=='\n * }\n *\n * @example\n * {\n *   id: 'customParam',\n *   title: 'Custom Param',\n *   isCustomParam: true,\n *   operator: '=like='\n * }\n */\nexport interface IFilterAttribute {\n  /**\n   * ID has to match object key {@link IFilterObject}, there is automatic checker throwing errors if they don't match.\n   */\n  id: string;\n  /**\n   * Title will be displayed to the user.\n   */\n  title: string;\n  /**\n   * Placeholder when text input is displayed.\n   */\n  placeholder?: string;\n  /**\n   * Select instead of text input will be displayed.\n   */\n  filterValues?: string[];\n  /**\n   * Additional operators (see IQParamOperators):\n   *  - '=like=' valid only when filterValues are not defined ('=notlike=' is determined automatically when filter value starts with ! character)\n   *  - '==' valid only when filterValues are defined\n   *  - '!=' valid only when filterValues are defined\n   */\n  operator: IQParamOperators;\n  /**\n   * When true, custom id based Query Param (not Q) will be used.\n   */\n  isCustomParam?: boolean;\n}\n\n/**\n * @example\n * {\n *   name: {IFilterAttribute},\n *   status: {IFilterAttribute},\n *   customParam: {IFilterAttribute}\n * }\n */\ninterface IFilterObject {\n  [key: string]: IFilterAttribute;\n}\n\nexport interface IFilterOptions {\n  filterAttributes: IFilterObject;\n}\n\ninterface IFilteringProps {\n  filterOptions: IFilterOptions;\n  componentId: string;\n}\n\n/**\n * @example\n  const filterOptions: IFilterOptions = {\n    filterAttributes: {\n      name: {\n        id: 'name',\n        title: 'Name',\n        placeholder: 'string | !string | s?ring | st*ng',\n        operator: '=like=',\n      },\n      description: {\n        id: 'description',\n        title: 'Description',\n        operator: '=like=',\n      },\n      customb: {\n        id: 'customb',\n        title: 'Custom Param',\n        isCustomParam: true,\n        operator: '=like=',\n      },\n      status: {\n        id: 'status',\n        title: 'Status',\n        filterValues: ['SUCCESS', 'REJECTED', 'FAILED'],\n        operator: '==',\n      },\n    },\n  };\n */\nexport const Filtering = ({ filterOptions, componentId }: IFilteringProps) => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  /**\n   * FILTER ATTRIBUTE\n   */\n\n  // first key\n  const defaultAttributeKey = Object.keys(filterOptions.filterAttributes)[0];\n\n  const [filterAttribute, setFilterAttribute] = useState<IFilterAttribute>(filterOptions.filterAttributes[defaultAttributeKey]);\n  const [isFilterAttributeOpen, setIsFilterAttributeOpen] = useState<boolean>(false);\n\n  /**\n   * FILTER VALUE\n   */\n  const [filterValue, setFilterValue] = useState<string>('');\n  const [isFilterValueOpen, setIsFilterValueOpen] = useState<boolean>(false);\n\n  /**\n   * APPLIED FILTERS\n   */\n  const [appliedFilters, setAppliedFilters] = useState<IAppliedFilters>();\n\n  /**\n   * Generate user friendly chip title representing applied filter (Q param or custom filter param).\n   */\n  const generateChipTitle = (filterAttribute: IFilterAttribute, filterValue: string): string => {\n    if (filterAttribute.operator === '=like=') {\n      let isNegated = false;\n\n      // !\"%abc%\" -> \"%abc%\" when negated\n      if (filterValue.startsWith('!')) {\n        filterValue = filterValue.substring(1);\n        isNegated = true;\n      }\n\n      // %abc% -> abc (custom param is not wrapped by \" characters)\n      if (filterAttribute.isCustomParam) {\n        filterValue = filterValue.substring(1, filterValue.length - 1);\n      }\n      // \"%abc%\" -> abc\n      else {\n        filterValue = filterValue.substring(2, filterValue.length - 2);\n      }\n\n      // abc -> !abc when negated\n      return (isNegated ? '!' : '') + filterValue;\n    }\n    return filterValue;\n  };\n\n  /**\n   * Add filter by updating URL.\n   */\n  const addFilter = (filterAttribute: IFilterAttribute, filterValue: string) => {\n    // custom query param (not Q param)\n    if (filterAttribute.isCustomParam) {\n      const adjustedFilterValue = constructCustomFilterParam(filterAttribute, filterValue);\n      updateQueryParamsInURL({ [filterAttribute.id]: adjustedFilterValue }, componentId, location, navigate);\n    }\n\n    // Q param\n    else {\n      const currentQParam = getComponentQueryParamValue(location.search, 'q', componentId) || '';\n      const q = addQParamItem(filterAttribute.id, filterValue, filterAttribute.operator, currentQParam);\n\n      /**\n       * Update Query Params only if some new meaningful q param is returned.\n       */\n      if (q) {\n        // update Q param and reset pageIndex\n        updateQueryParamsInURL({ q, pageIndex: 1 }, componentId, location, navigate);\n      }\n    }\n  };\n\n  /**\n   * Remove filter by updating URL.\n   */\n  const removeFilter = (filterAttributeKey: string, filterValue: string) => {\n    if (filterOptions.filterAttributes[filterAttributeKey].isCustomParam) {\n      updateQueryParamsInURL({ [filterAttributeKey]: '' }, componentId, location, navigate);\n    } else {\n      const currentQParam = getComponentQueryParamValue(location.search, 'q', componentId) || '';\n      const q = removeQParamItem(\n        filterAttributeKey,\n        filterValue,\n        filterOptions.filterAttributes[filterAttributeKey].operator,\n        currentQParam\n      );\n      updateQueryParamsInURL({ q }, componentId, location, navigate);\n    }\n  };\n\n  /**\n   * Reset all filtering parameters to empty '' string and update Query Params in URL, they will be removed if empty.\n   *\n   * Non filtering parameters (like pagination and sorting) are untouched.\n   */\n  const removeAllFilters = () => {\n    // reset q parameter\n    const zeroedFilteringParameters: { [key: string]: string } = { q: '' };\n\n    // reset all custom filtering parameters\n    for (const [key, value] of Object.entries(filterOptions.filterAttributes)) {\n      if (value.isCustomParam) {\n        zeroedFilteringParameters[key] = '';\n      }\n    }\n\n    updateQueryParamsInURL(zeroedFilteringParameters, componentId, location, navigate);\n  };\n\n  /**\n   * Synchronize filters from URL to appliedFilters react hook.\n   */\n  useEffect(() => {\n    const currentQParam = getComponentQueryParamValue(location.search, 'q', componentId) || '';\n    const appliedFilters: IAppliedFilters = parseQParamDeep(currentQParam);\n\n    for (const [key, value] of Object.entries(filterOptions.filterAttributes)) {\n      // check filter attributes validity\n      if (key !== value.id) {\n        console.error('filterAttributes: ', filterOptions.filterAttributes);\n        throw new Error(`filterAttributes have invalid format, object key (${key}) has to match id field (${value.id})!`);\n      }\n\n      if (value.isCustomParam) {\n        const customParamValue = getComponentQueryParamValue(location.search, key, componentId);\n        if (customParamValue) {\n          appliedFilters[key] = [customParamValue];\n        }\n      }\n    }\n\n    setAppliedFilters(appliedFilters);\n  }, [location.search, location, componentId, navigate, filterOptions.filterAttributes]); // primary: history.location.search\n\n  return (\n    <>\n      {/* FILTER INPUTS */}\n      <InputGroup>\n        {/* filter attribute */}\n        <Select\n          width=\"170px\"\n          variant={SelectVariant.single}\n          onToggle={(isOpen) => {\n            setIsFilterAttributeOpen(isOpen);\n          }}\n          onSelect={(event, selection, isPlaceholder) => {\n            if (!isPlaceholder) {\n              setFilterAttribute(selection as IFilterAttribute);\n              setIsFilterAttributeOpen(false);\n            }\n          }}\n          selections={filterAttribute}\n          isOpen={isFilterAttributeOpen}\n        >\n          {Object.keys(filterOptions.filterAttributes).map((filterAttributeKey: string) => {\n            const filterAttribute = filterOptions.filterAttributes[filterAttributeKey];\n            // use 'title' attribute as default\n            filterAttribute.toString = () => {\n              return filterAttribute.title;\n            };\n\n            return <SelectOption key={filterAttribute.id} value={filterAttribute} />;\n          })}\n        </Select>\n\n        {/* filter value */}\n        {filterAttribute.filterValues?.length ? (\n          <Select\n            className={styles['form-input']}\n            variant={SelectVariant.single}\n            onToggle={(isOpen) => {\n              setIsFilterValueOpen(isOpen);\n            }}\n            onSelect={(event, selection, isPlaceholder) => {\n              addFilter(filterAttribute, selection as string);\n              setIsFilterValueOpen(false);\n            }}\n            isOpen={isFilterValueOpen}\n          >\n            {filterAttribute.filterValues.map((filterValue: string) => {\n              return <SelectOption key={filterValue} value={filterValue} />;\n            })}\n          </Select>\n        ) : (\n          <TextInput\n            className={styles['form-input']}\n            type=\"text\"\n            id=\"filter-text\"\n            placeholder={filterAttribute.placeholder || `Filter by ${filterAttribute}`}\n            onChange={(value) => {\n              setFilterValue(value);\n            }}\n            onKeyPress={(event) => {\n              if (event.key === 'Enter' && filterValue && filterValue.trim().length > 0) {\n                addFilter(filterAttribute, filterValue);\n              }\n            }}\n          />\n        )}\n      </InputGroup>\n\n      <InputGroup>\n        <Button icon={<SortAmountDownIcon />}></Button>\n      </InputGroup>\n\n      {/* APPLIED FILTERS */}\n      <div className={styles['applied-filters']}>\n        {appliedFilters && (\n          <>\n            {/* FILTER CHIPS */}\n            {Object.keys(appliedFilters).map((filterAttributeKey) => (\n              <ChipGroup\n                className={styles['chip-group']}\n                key={filterAttributeKey}\n                categoryName={filterOptions.filterAttributes[filterAttributeKey].title}\n              >\n                {appliedFilters[filterAttributeKey].map((filterValueItem) => (\n                  <Chip\n                    key={filterValueItem}\n                    onClick={() => {\n                      removeFilter(filterAttributeKey, filterValueItem);\n                    }}\n                  >\n                    {generateChipTitle(filterOptions.filterAttributes[filterAttributeKey], filterValueItem)}\n                  </Chip>\n                ))}\n              </ChipGroup>\n            ))}\n\n            {/* CLEAR ALL */}\n            {Object.keys(appliedFilters).length !== 0 && (\n              <Button\n                onClick={() => {\n                  removeAllFilters();\n                }}\n                variant=\"link\"\n              >\n                Clear all filters\n              </Button>\n            )}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}