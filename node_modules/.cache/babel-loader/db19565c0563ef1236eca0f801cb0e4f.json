{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { keyHandler, formatBreakpointMods } from '../../helpers/util';\nimport { DropdownPosition, DropdownArrowContext, DropdownContext } from './dropdownConstants';\nexport class DropdownMenu extends React.Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n    this.refsCollection = [];\n\n    this.componentWillUnmount = () => {\n      document.removeEventListener('keydown', this.onKeyDown);\n    };\n\n    this.onKeyDown = event => {\n      if (!this.props.isOpen || !Array.from(document.activeElement.classList).find(className => DropdownMenu.validToggleClasses.concat(this.context.toggleClass).includes(className))) {\n        return;\n      }\n\n      const refs = this.refsCollection;\n\n      if (event.key === 'ArrowDown') {\n        const firstFocusTargetCollection = refs.find(ref => ref && ref[0] && !ref[0].hasAttribute('disabled'));\n        DropdownMenu.focusFirstRef(firstFocusTargetCollection);\n        event.stopPropagation();\n      } else if (event.key === 'ArrowUp') {\n        const collectionLength = refs.length;\n        const lastFocusTargetCollection = refs.slice(collectionLength - 1, collectionLength);\n        const lastFocusTarget = lastFocusTargetCollection && lastFocusTargetCollection[0];\n        DropdownMenu.focusFirstRef(lastFocusTarget);\n        event.stopPropagation();\n      }\n    };\n\n    this.childKeyHandler = function (index, innerIndex, position) {\n      let custom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      keyHandler(index, innerIndex, position, _this.refsCollection, _this.props.isGrouped ? _this.refsCollection : React.Children.toArray(_this.props.children), custom);\n    };\n\n    this.sendRef = (index, nodes, isDisabled, isSeparator) => {\n      this.refsCollection[index] = [];\n      nodes.map((node, innerIndex) => {\n        if (!node) {\n          this.refsCollection[index][innerIndex] = null;\n        } else if (!node.getAttribute) {\n          // eslint-disable-next-line react/no-find-dom-node\n          this.refsCollection[index][innerIndex] = ReactDOM.findDOMNode(node);\n        } else if (isSeparator) {\n          this.refsCollection[index][innerIndex] = null;\n        } else {\n          this.refsCollection[index][innerIndex] = node;\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDown);\n    const {\n      autoFocus\n    } = this.props;\n\n    if (autoFocus) {\n      // Focus first non-disabled element\n      const focusTargetCollection = this.refsCollection.find(ref => ref && ref[0] && !ref[0].hasAttribute('disabled'));\n      const focusTarget = focusTargetCollection && focusTargetCollection[0];\n\n      if (focusTarget && focusTarget.focus) {\n        setTimeout(() => focusTarget.focus());\n      }\n    }\n  }\n\n  shouldComponentUpdate() {\n    // reset refsCollection before updating to account for child removal between mounts\n    this.refsCollection = [];\n    return true;\n  }\n\n  extendChildren() {\n    const {\n      children,\n      isGrouped\n    } = this.props;\n\n    if (isGrouped) {\n      let index = 0;\n      return React.Children.map(children, groupedChildren => {\n        const group = groupedChildren;\n        const props = {};\n\n        if (group.props && group.props.children) {\n          if (Array.isArray(group.props.children)) {\n            props.children = React.Children.map(group.props.children, option => React.cloneElement(option, {\n              index: index++\n            }));\n          } else {\n            props.children = React.cloneElement(group.props.children, {\n              index: index++\n            });\n          }\n        }\n\n        return React.cloneElement(group, props);\n      });\n    }\n\n    return React.Children.map(children, (child, index) => React.cloneElement(child, {\n      index\n    }));\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      isOpen,\n      position,\n      children,\n      component,\n      isGrouped,\n      setMenuComponentRef,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      openedOnEnter,\n      alignments\n    } = _a,\n          props = __rest(_a, [\"className\", \"isOpen\", \"position\", \"children\", \"component\", \"isGrouped\", \"setMenuComponentRef\", \"openedOnEnter\", \"alignments\"]);\n\n    return React.createElement(DropdownArrowContext.Provider, {\n      value: {\n        keyHandler: this.childKeyHandler,\n        sendRef: this.sendRef\n      }\n    }, component === 'div' ? React.createElement(DropdownContext.Consumer, null, _ref => {\n      let {\n        onSelect,\n        menuClass\n      } = _ref;\n      return React.createElement(\"div\", {\n        className: css(menuClass, position === DropdownPosition.right && styles.modifiers.alignRight, formatBreakpointMods(alignments, styles, 'align-'), className),\n        hidden: !isOpen,\n        onClick: event => onSelect && onSelect(event),\n        ref: setMenuComponentRef\n      }, children);\n    }) : isGrouped && React.createElement(DropdownContext.Consumer, null, _ref2 => {\n      let {\n        menuClass,\n        menuComponent\n      } = _ref2;\n      const MenuComponent = menuComponent || 'div';\n      return React.createElement(MenuComponent, Object.assign({}, props, {\n        className: css(menuClass, position === DropdownPosition.right && styles.modifiers.alignRight, formatBreakpointMods(alignments, styles, 'align-'), className),\n        hidden: !isOpen,\n        role: \"menu\",\n        ref: setMenuComponentRef\n      }), this.extendChildren());\n    }) || React.createElement(DropdownContext.Consumer, null, _ref3 => {\n      let {\n        menuClass,\n        menuComponent\n      } = _ref3;\n      const MenuComponent = menuComponent || component;\n      return React.createElement(MenuComponent, Object.assign({}, props, {\n        className: css(menuClass, position === DropdownPosition.right && styles.modifiers.alignRight, formatBreakpointMods(alignments, styles, 'align-'), className),\n        hidden: !isOpen,\n        role: \"menu\",\n        ref: setMenuComponentRef\n      }), this.extendChildren());\n    }));\n  }\n\n}\nDropdownMenu.displayName = 'DropdownMenu';\nDropdownMenu.defaultProps = {\n  className: '',\n  isOpen: true,\n  openedOnEnter: false,\n  autoFocus: true,\n  position: DropdownPosition.left,\n  component: 'ul',\n  isGrouped: false,\n  setMenuComponentRef: null\n};\nDropdownMenu.validToggleClasses = [styles.dropdownToggle, styles.dropdownToggleButton];\n\nDropdownMenu.focusFirstRef = refCollection => {\n  if (refCollection && refCollection[0] && refCollection[0].focus) {\n    setTimeout(() => refCollection[0].focus());\n  }\n};\n\nDropdownMenu.contextType = DropdownContext;","map":{"version":3,"mappings":"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","names":["React","ReactDOM","styles","css","keyHandler","formatBreakpointMods","DropdownPosition","DropdownArrowContext","DropdownContext","DropdownMenu","Component","constructor","document","removeEventListener","onKeyDown","event","props","isOpen","Array","from","activeElement","classList","find","className","validToggleClasses","concat","context","toggleClass","includes","refs","refsCollection","key","firstFocusTargetCollection","ref","hasAttribute","focusFirstRef","stopPropagation","collectionLength","length","lastFocusTargetCollection","slice","lastFocusTarget","index","innerIndex","position","custom","isGrouped","Children","toArray","children","nodes","isDisabled","isSeparator","map","node","getAttribute","findDOMNode","componentDidMount","addEventListener","autoFocus","focusTargetCollection","focusTarget","focus","setTimeout","shouldComponentUpdate","extendChildren","groupedChildren","group","isArray","option","cloneElement","child","render","_a","component","setMenuComponentRef","openedOnEnter","alignments","Provider","value","childKeyHandler","sendRef","Consumer","onSelect","menuClass","right","modifiers","alignRight","hidden","onClick","menuComponent","MenuComponent","Object","role","left","dropdownToggle","dropdownToggleButton","refCollection","contextType"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/DropdownMenu.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { css } from '@patternfly/react-styles';\nimport { keyHandler, formatBreakpointMods } from '../../helpers/util';\nimport { DropdownPosition, DropdownArrowContext, DropdownContext } from './dropdownConstants';\n\nexport interface DropdownMenuProps {\n  /** Anything which can be rendered as dropdown items */\n  children?: React.ReactNode;\n  /** Classess applied to root element of dropdown menu */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** @deprecated - no longer used */\n  openedOnEnter?: boolean;\n  /** Flag to indicate if the first dropdown item should gain initial focus, set false when adding\n   * a specific auto-focus item (like a current selection) otherwise leave as true\n   */\n  autoFocus?: boolean;\n  /** Indicates which component will be used as dropdown menu */\n  component?: React.ReactNode;\n  /** Indicates where menu will be alligned horizontally */\n  position?: DropdownPosition | 'right' | 'left';\n  /** Indicates how the menu will align at screen size breakpoints */\n  alignments?: {\n    sm?: 'right' | 'left';\n    md?: 'right' | 'left';\n    lg?: 'right' | 'left';\n    xl?: 'right' | 'left';\n    '2xl'?: 'right' | 'left';\n  };\n  /** Flag to indicate if menu is grouped */\n  isGrouped?: boolean;\n  // Function to call on component mount\n  setMenuComponentRef?: any;\n}\n\nexport interface DropdownMenuItem extends React.HTMLAttributes<any> {\n  isDisabled: boolean;\n  disabled: boolean;\n  isHovered: boolean;\n  ref: HTMLElement;\n}\n\nexport class DropdownMenu extends React.Component<DropdownMenuProps> {\n  static displayName = 'DropdownMenu';\n  context!: React.ContextType<typeof DropdownContext>;\n  refsCollection = [] as HTMLElement[][];\n\n  static defaultProps: DropdownMenuProps = {\n    className: '',\n    isOpen: true,\n    openedOnEnter: false,\n    autoFocus: true,\n    position: DropdownPosition.left,\n    component: 'ul',\n    isGrouped: false,\n    setMenuComponentRef: null\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDown);\n    const { autoFocus } = this.props;\n\n    if (autoFocus) {\n      // Focus first non-disabled element\n      const focusTargetCollection = this.refsCollection.find(ref => ref && ref[0] && !ref[0].hasAttribute('disabled'));\n      const focusTarget = focusTargetCollection && focusTargetCollection[0];\n      if (focusTarget && focusTarget.focus) {\n        setTimeout(() => focusTarget.focus());\n      }\n    }\n  }\n\n  componentWillUnmount = () => {\n    document.removeEventListener('keydown', this.onKeyDown);\n  };\n\n  static validToggleClasses = [styles.dropdownToggle, styles.dropdownToggleButton] as string[];\n  static focusFirstRef = (refCollection: HTMLElement[]) => {\n    if (refCollection && refCollection[0] && refCollection[0].focus) {\n      setTimeout(() => refCollection[0].focus());\n    }\n  };\n\n  onKeyDown = (event: any) => {\n    if (\n      !this.props.isOpen ||\n      !Array.from(document.activeElement.classList).find(className =>\n        DropdownMenu.validToggleClasses.concat(this.context.toggleClass).includes(className)\n      )\n    ) {\n      return;\n    }\n    const refs = this.refsCollection;\n    if (event.key === 'ArrowDown') {\n      const firstFocusTargetCollection = refs.find(ref => ref && ref[0] && !ref[0].hasAttribute('disabled'));\n      DropdownMenu.focusFirstRef(firstFocusTargetCollection);\n      event.stopPropagation();\n    } else if (event.key === 'ArrowUp') {\n      const collectionLength = refs.length;\n      const lastFocusTargetCollection = refs.slice(collectionLength - 1, collectionLength);\n      const lastFocusTarget = lastFocusTargetCollection && lastFocusTargetCollection[0];\n      DropdownMenu.focusFirstRef(lastFocusTarget);\n      event.stopPropagation();\n    }\n  };\n\n  shouldComponentUpdate() {\n    // reset refsCollection before updating to account for child removal between mounts\n    this.refsCollection = [] as HTMLElement[][];\n    return true;\n  }\n\n  childKeyHandler = (index: number, innerIndex: number, position: string, custom = false) => {\n    keyHandler(\n      index,\n      innerIndex,\n      position,\n      this.refsCollection,\n      this.props.isGrouped ? this.refsCollection : React.Children.toArray(this.props.children),\n      custom\n    );\n  };\n\n  sendRef = (index: number, nodes: any[], isDisabled: boolean, isSeparator: boolean) => {\n    this.refsCollection[index] = [];\n    nodes.map((node, innerIndex) => {\n      if (!node) {\n        this.refsCollection[index][innerIndex] = null;\n      } else if (!node.getAttribute) {\n        // eslint-disable-next-line react/no-find-dom-node\n        this.refsCollection[index][innerIndex] = ReactDOM.findDOMNode(node) as HTMLElement;\n      } else if (isSeparator) {\n        this.refsCollection[index][innerIndex] = null;\n      } else {\n        this.refsCollection[index][innerIndex] = node;\n      }\n    });\n  };\n\n  extendChildren() {\n    const { children, isGrouped } = this.props;\n    if (isGrouped) {\n      let index = 0;\n      return React.Children.map(children, groupedChildren => {\n        const group = groupedChildren as React.ReactElement;\n        const props: { children?: React.ReactNode } = {};\n        if (group.props && group.props.children) {\n          if (Array.isArray(group.props.children)) {\n            props.children = React.Children.map(group.props.children, option =>\n              React.cloneElement(option as React.ReactElement, {\n                index: index++\n              })\n            );\n          } else {\n            props.children = React.cloneElement(group.props.children as React.ReactElement, {\n              index: index++\n            });\n          }\n        }\n        return React.cloneElement(group, props);\n      });\n    }\n    return React.Children.map(children, (child, index) =>\n      React.cloneElement(child as React.ReactElement, {\n        index\n      })\n    );\n  }\n\n  render() {\n    const {\n      className,\n      isOpen,\n      position,\n      children,\n      component,\n      isGrouped,\n      setMenuComponentRef,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      openedOnEnter,\n      alignments,\n      ...props\n    } = this.props;\n    return (\n      <DropdownArrowContext.Provider\n        value={{\n          keyHandler: this.childKeyHandler,\n          sendRef: this.sendRef\n        }}\n      >\n        {component === 'div' ? (\n          <DropdownContext.Consumer>\n            {({ onSelect, menuClass }) => (\n              <div\n                className={css(\n                  menuClass,\n                  position === DropdownPosition.right && styles.modifiers.alignRight,\n                  formatBreakpointMods(alignments, styles, 'align-'),\n                  className\n                )}\n                hidden={!isOpen}\n                onClick={event => onSelect && onSelect(event)}\n                ref={setMenuComponentRef}\n              >\n                {children}\n              </div>\n            )}\n          </DropdownContext.Consumer>\n        ) : (\n          (isGrouped && (\n            <DropdownContext.Consumer>\n              {({ menuClass, menuComponent }) => {\n                const MenuComponent = (menuComponent || 'div') as any;\n                return (\n                  <MenuComponent\n                    {...props}\n                    className={css(\n                      menuClass,\n                      position === DropdownPosition.right && styles.modifiers.alignRight,\n                      formatBreakpointMods(alignments, styles, 'align-'),\n                      className\n                    )}\n                    hidden={!isOpen}\n                    role=\"menu\"\n                    ref={setMenuComponentRef}\n                  >\n                    {this.extendChildren()}\n                  </MenuComponent>\n                );\n              }}\n            </DropdownContext.Consumer>\n          )) || (\n            <DropdownContext.Consumer>\n              {({ menuClass, menuComponent }) => {\n                const MenuComponent = (menuComponent || component) as any;\n                return (\n                  <MenuComponent\n                    {...props}\n                    className={css(\n                      menuClass,\n                      position === DropdownPosition.right && styles.modifiers.alignRight,\n                      formatBreakpointMods(alignments, styles, 'align-'),\n                      className\n                    )}\n                    hidden={!isOpen}\n                    role=\"menu\"\n                    ref={setMenuComponentRef}\n                  >\n                    {this.extendChildren()}\n                  </MenuComponent>\n                );\n              }}\n            </DropdownContext.Consumer>\n          )\n        )}\n      </DropdownArrowContext.Provider>\n    );\n  }\n}\n\nDropdownMenu.contextType = DropdownContext;\n"]},"metadata":{},"sourceType":"module"}