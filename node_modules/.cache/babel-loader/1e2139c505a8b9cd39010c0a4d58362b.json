{"ast":null,"code":"import _slicedToArray from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useCallback,useRef,useState}from'react';import ReactDOM from'react-dom';/**\n * React hook to manage data, loading and error states when data is being loaded. See also {@link DataContainer}.\n *\n * @param service - Service to be executed to load data\n * @param config - Config object, initLoadingState (provides init values for loading state)\n * @returns Object with data, loading and error property\n */export var useDataContainer=function useDataContainer(service){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},_ref$initLoadingState=_ref.initLoadingState,initLoadingState=_ref$initLoadingState===void 0?true:_ref$initLoadingState;var ERROR_INIT='';// initial states when component is loaded for the first time\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState(initLoadingState),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];var _useState5=useState(ERROR_INIT),_useState6=_slicedToArray(_useState5,2),error=_useState6[0],setError=_useState6[1];var loadingCount=useRef(0);var lastAbortController=useRef();var invokeService=function invokeService(_ref2){var _lastAbortController$;var _ref2$serviceData=_ref2.serviceData,serviceData=_ref2$serviceData===void 0?null:_ref2$serviceData,_ref2$requestConfig=_ref2.requestConfig,requestConfig=_ref2$requestConfig===void 0?{}:_ref2$requestConfig;loadingCount.current++;// set delayed (delayed to prevent flashing experience and unnecessary renders) loading state\nsetTimeout(function(){if(loadingCount.current){setLoading(true);}},200);// abort previous request\n(_lastAbortController$=lastAbortController.current)===null||_lastAbortController$===void 0?void 0:_lastAbortController$.abort();// create abort signal for new request\nlastAbortController.current=new AbortController();requestConfig.signal=lastAbortController.current.signal;return service({serviceData:serviceData,requestConfig:requestConfig}).then(function(response){// In a future React version (potentially in React 17) this could be removed as it will be default behavior\n// https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973\nReactDOM.unstable_batchedUpdates(function(){setLoading(false);setData(response.data);setError(ERROR_INIT);});return response;}).catch(function(error){// execute only for last request\nif(loadingCount.current<=1){// In a future React version (potentially in React 17) this could be removed as it will be default behavior\n// https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973\nReactDOM.unstable_batchedUpdates(function(){var _error$response,_error$response$data;setLoading(false);// prefer errorMessage if exists\nvar errorMessage=(_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.errorMessage;if(errorMessage){setError(errorMessage);}else{setError(error.toString());}});}throw error;}).finally(function(){loadingCount.current--;});};return{data:data,loading:loading,error:error,refresh:useCallback(invokeService,[service])};};","map":{"version":3,"names":["useCallback","useRef","useState","ReactDOM","useDataContainer","service","initLoadingState","ERROR_INIT","data","setData","loading","setLoading","error","setError","loadingCount","lastAbortController","invokeService","serviceData","requestConfig","current","setTimeout","abort","AbortController","signal","then","response","unstable_batchedUpdates","catch","errorMessage","toString","finally","refresh"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/DataContainer/useDataContainer.ts"],"sourcesContent":["import { AxiosRequestConfig } from 'axios';\nimport { useCallback, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nexport interface IService<T = {}> {\n  /**\n   * Service data, eg { id: '2' }\n   */\n  serviceData?: T;\n\n  /**\n   * Axios based request config, eg { signal: <abortingSignal> }\n   */\n  requestConfig?: AxiosRequestConfig;\n}\n\n/**\n * React hook to manage data, loading and error states when data is being loaded. See also {@link DataContainer}.\n *\n * @param service - Service to be executed to load data\n * @param config - Config object, initLoadingState (provides init values for loading state)\n * @returns Object with data, loading and error property\n */\nexport const useDataContainer = (service: Function, { initLoadingState = true }: { initLoadingState?: boolean } = {}) => {\n  const ERROR_INIT: string = '';\n\n  // initial states when component is loaded for the first time\n  const [data, setData] = useState<any>();\n  const [loading, setLoading] = useState<boolean>(initLoadingState);\n  const [error, setError] = useState<string>(ERROR_INIT);\n\n  const loadingCount = useRef<number>(0);\n  const lastAbortController = useRef<AbortController>();\n\n  const invokeService = ({ serviceData = null, requestConfig = {} }: IService<any>) => {\n    loadingCount.current++;\n\n    // set delayed (delayed to prevent flashing experience and unnecessary renders) loading state\n    setTimeout(() => {\n      if (loadingCount.current) {\n        setLoading(true);\n      }\n    }, 200);\n\n    // abort previous request\n    lastAbortController.current?.abort();\n\n    // create abort signal for new request\n    lastAbortController.current = new AbortController();\n    requestConfig.signal = lastAbortController.current.signal;\n\n    return service({ serviceData, requestConfig })\n      .then((response: any) => {\n        // In a future React version (potentially in React 17) this could be removed as it will be default behavior\n        // https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973\n        ReactDOM.unstable_batchedUpdates(() => {\n          setLoading(false);\n          setData(response.data);\n          setError(ERROR_INIT);\n        });\n        return response;\n      })\n      .catch((error: any) => {\n        // execute only for last request\n        if (loadingCount.current <= 1) {\n          // In a future React version (potentially in React 17) this could be removed as it will be default behavior\n          // https://stackoverflow.com/questions/48563650/does-react-keep-the-order-for-state-updates/48610973#48610973\n          ReactDOM.unstable_batchedUpdates(() => {\n            setLoading(false);\n\n            // prefer errorMessage if exists\n            const errorMessage = error.response?.data?.errorMessage;\n            if (errorMessage) {\n              setError(errorMessage);\n            } else {\n              setError(error.toString());\n            }\n          });\n        }\n        throw error;\n      })\n      .finally(() => {\n        loadingCount.current--;\n      });\n  };\n\n  return {\n    data: data,\n    loading: loading,\n    error: error,\n    refresh: useCallback(invokeService, [service]),\n  };\n};\n"],"mappings":"qIACA,OAASA,WAAT,CAAsBC,MAAtB,CAA8BC,QAA9B,KAA8C,OAA9C,CACA,MAAOC,SAAP,KAAqB,WAArB,CAcA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,iBAAgB,CAAG,QAAnBA,iBAAmB,CAACC,OAAD,CAAyF,oEAAP,EAAO,4BAAnEC,gBAAmE,CAAnEA,gBAAmE,gCAAhD,IAAgD,uBACvH,GAAMC,WAAkB,CAAG,EAA3B,CAEA;AACA,cAAwBL,QAAQ,EAAhC,wCAAOM,IAAP,eAAaC,OAAb,eACA,eAA8BP,QAAQ,CAAUI,gBAAV,CAAtC,yCAAOI,OAAP,eAAgBC,UAAhB,eACA,eAA0BT,QAAQ,CAASK,UAAT,CAAlC,yCAAOK,KAAP,eAAcC,QAAd,eAEA,GAAMC,aAAY,CAAGb,MAAM,CAAS,CAAT,CAA3B,CACA,GAAMc,oBAAmB,CAAGd,MAAM,EAAlC,CAEA,GAAMe,cAAa,CAAG,QAAhBA,cAAgB,OAA+D,uDAA5DC,WAA4D,CAA5DA,WAA4D,4BAA9C,IAA8C,6CAAxCC,aAAwC,CAAxCA,aAAwC,8BAAxB,EAAwB,qBACnFJ,YAAY,CAACK,OAAb,GAEA;AACAC,UAAU,CAAC,UAAM,CACf,GAAIN,YAAY,CAACK,OAAjB,CAA0B,CACxBR,UAAU,CAAC,IAAD,CAAV,CACD,CACF,CAJS,CAIP,GAJO,CAAV,CAMA;AACA,uBAAAI,mBAAmB,CAACI,OAApB,sEAA6BE,KAA7B,GAEA;AACAN,mBAAmB,CAACI,OAApB,CAA8B,GAAIG,gBAAJ,EAA9B,CACAJ,aAAa,CAACK,MAAd,CAAuBR,mBAAmB,CAACI,OAApB,CAA4BI,MAAnD,CAEA,MAAOlB,QAAO,CAAC,CAAEY,WAAW,CAAXA,WAAF,CAAeC,aAAa,CAAbA,aAAf,CAAD,CAAP,CACJM,IADI,CACC,SAACC,QAAD,CAAmB,CACvB;AACA;AACAtB,QAAQ,CAACuB,uBAAT,CAAiC,UAAM,CACrCf,UAAU,CAAC,KAAD,CAAV,CACAF,OAAO,CAACgB,QAAQ,CAACjB,IAAV,CAAP,CACAK,QAAQ,CAACN,UAAD,CAAR,CACD,CAJD,EAKA,MAAOkB,SAAP,CACD,CAVI,EAWJE,KAXI,CAWE,SAACf,KAAD,CAAgB,CACrB;AACA,GAAIE,YAAY,CAACK,OAAb,EAAwB,CAA5B,CAA+B,CAC7B;AACA;AACAhB,QAAQ,CAACuB,uBAAT,CAAiC,UAAM,0CACrCf,UAAU,CAAC,KAAD,CAAV,CAEA;AACA,GAAMiB,aAAY,kBAAGhB,KAAK,CAACa,QAAT,gEAAG,gBAAgBjB,IAAnB,+CAAG,qBAAsBoB,YAA3C,CACA,GAAIA,YAAJ,CAAkB,CAChBf,QAAQ,CAACe,YAAD,CAAR,CACD,CAFD,IAEO,CACLf,QAAQ,CAACD,KAAK,CAACiB,QAAN,EAAD,CAAR,CACD,CACF,CAVD,EAWD,CACD,KAAMjB,MAAN,CACD,CA7BI,EA8BJkB,OA9BI,CA8BI,UAAM,CACbhB,YAAY,CAACK,OAAb,GACD,CAhCI,CAAP,CAiCD,CAlDD,CAoDA,MAAO,CACLX,IAAI,CAAEA,IADD,CAELE,OAAO,CAAEA,OAFJ,CAGLE,KAAK,CAAEA,KAHF,CAILmB,OAAO,CAAE/B,WAAW,CAACgB,aAAD,CAAgB,CAACX,OAAD,CAAhB,CAJf,CAAP,CAMD,CArEM"},"metadata":{},"sourceType":"module"}