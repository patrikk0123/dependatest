{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Button, Checkbox } from '@patternfly/react-core';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport EllipsisHIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-h-icon';\nexport const treeRow = (onCollapse, onCheckChange, onToggleRowDetails) => (value, _ref) => {\n  let {\n    rowIndex,\n    rowData\n  } = _ref;\n  const {\n    isExpanded,\n    isDetailsExpanded,\n    'aria-level': level,\n    'aria-setsize': setsize,\n    toggleAriaLabel,\n    checkAriaLabel,\n    showDetailsAriaLabel,\n    isChecked,\n    checkboxId,\n    icon\n  } = rowData.props;\n  const content = value.title || value;\n  const text = React.createElement(\"div\", {\n    className: css(stylesTreeView.tableTreeViewText),\n    key: \"tree-view-text\"\n  }, icon && React.createElement(\"span\", {\n    className: css(stylesTreeView.tableTreeViewIcon),\n    key: \"tree-view-text-icon\"\n  }, icon), React.createElement(\"span\", {\n    className: \"pf-c-table__text\",\n    key: \"table-text\"\n  }, content));\n\n  const onChange = (isChecked, event) => {\n    onCheckChange(event, isChecked, rowIndex, content, rowData);\n  };\n\n  return {\n    component: 'th',\n    className: 'pf-c-table__tree-view-title-cell',\n    children: level !== undefined ? React.createElement(\"div\", {\n      className: css(stylesTreeView.tableTreeViewMain)\n    }, setsize > 0 && React.createElement(\"span\", {\n      className: css(stylesTreeView.tableToggle),\n      key: \"table-toggle\"\n    }, React.createElement(Button, {\n      variant: \"plain\",\n      onClick: event => onCollapse && onCollapse(event, rowIndex, content, rowData),\n      className: css(isExpanded && styles.modifiers.expanded),\n      \"aria-expanded\": isExpanded,\n      \"aria-label\": toggleAriaLabel || `${isExpanded ? 'Collapse' : 'Expand'} row ${rowIndex}`\n    }, React.createElement(\"div\", {\n      className: css(stylesTreeView.tableToggleIcon)\n    }, React.createElement(AngleDownIcon, {\n      \"aria-hidden\": \"true\"\n    })))), !!onCheckChange && React.createElement(\"span\", {\n      className: css(stylesTreeView.tableCheck),\n      key: \"table-check\"\n    }, React.createElement(\"label\", {\n      htmlFor: checkboxId || `checkbox_${rowIndex}`\n    }, React.createElement(Checkbox, {\n      id: checkboxId || `checkbox_${rowIndex}`,\n      \"aria-label\": checkAriaLabel || `Row ${rowIndex} checkbox`,\n      isChecked: isChecked,\n      onChange: onChange\n    }))), text, !!onToggleRowDetails && React.createElement(\"span\", {\n      className: css(stylesTreeView.tableTreeViewDetailsToggle),\n      key: \"view-details-toggle\"\n    }, React.createElement(Button, {\n      variant: \"plain\",\n      \"aria-expanded\": isDetailsExpanded,\n      \"aria-label\": showDetailsAriaLabel || 'Show row details',\n      onClick: event => onToggleRowDetails && onToggleRowDetails(event, rowIndex, content, rowData)\n    }, React.createElement(\"span\", {\n      className: \"pf-c-table__details-toggle-icon\"\n    }, React.createElement(EllipsisHIcon, {\n      \"aria-hidden\": true\n    }))))) : text\n  };\n};","map":{"version":3,"mappings":"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","names":["React","css","styles","stylesTreeView","Button","Checkbox","AngleDownIcon","EllipsisHIcon","treeRow","onCollapse","onCheckChange","onToggleRowDetails","value","rowIndex","rowData","isExpanded","isDetailsExpanded","level","setsize","toggleAriaLabel","checkAriaLabel","showDetailsAriaLabel","isChecked","checkboxId","icon","props","content","title","text","className","tableTreeViewText","key","tableTreeViewIcon","onChange","event","component","children","undefined","tableTreeViewMain","tableToggle","variant","onClick","modifiers","expanded","tableToggleIcon","tableCheck","htmlFor","id","tableTreeViewDetailsToggle"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/treeRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IExtra, IFormatterValueType, OnCheckChange, OnTreeRowCollapse, OnToggleRowDetails } from '../../TableTypes';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport stylesTreeView from '@patternfly/react-styles/css/components/Table/table-tree-view';\nimport { Button, Checkbox } from '@patternfly/react-core';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport EllipsisHIcon from '@patternfly/react-icons/dist/esm/icons/ellipsis-h-icon';\n\nexport const treeRow = (\n  onCollapse: OnTreeRowCollapse,\n  onCheckChange?: OnCheckChange,\n  onToggleRowDetails?: OnToggleRowDetails\n) => (value: IFormatterValueType, { rowIndex, rowData }: IExtra) => {\n  const {\n    isExpanded,\n    isDetailsExpanded,\n    'aria-level': level,\n    'aria-setsize': setsize,\n    toggleAriaLabel,\n    checkAriaLabel,\n    showDetailsAriaLabel,\n    isChecked,\n    checkboxId,\n    icon\n  } = rowData.props;\n  const content = value.title || value;\n  const text = (\n    <div className={css(stylesTreeView.tableTreeViewText)} key=\"tree-view-text\">\n      {icon && (\n        <span className={css(stylesTreeView.tableTreeViewIcon)} key=\"tree-view-text-icon\">\n          {icon}\n        </span>\n      )}\n      <span className=\"pf-c-table__text\" key=\"table-text\">\n        {content}\n      </span>\n    </div>\n  );\n  const onChange = (isChecked: boolean, event: React.FormEvent<HTMLInputElement>) => {\n    onCheckChange(event, isChecked, rowIndex, content, rowData);\n  };\n  return {\n    component: 'th',\n    className: 'pf-c-table__tree-view-title-cell',\n    children:\n      level !== undefined ? (\n        <div className={css(stylesTreeView.tableTreeViewMain)}>\n          {setsize > 0 && (\n            <span className={css(stylesTreeView.tableToggle)} key=\"table-toggle\">\n              <Button\n                variant=\"plain\"\n                onClick={event => onCollapse && onCollapse(event, rowIndex, content, rowData)}\n                className={css(isExpanded && styles.modifiers.expanded)}\n                aria-expanded={isExpanded}\n                aria-label={toggleAriaLabel || `${isExpanded ? 'Collapse' : 'Expand'} row ${rowIndex}`}\n              >\n                <div className={css(stylesTreeView.tableToggleIcon)}>\n                  <AngleDownIcon aria-hidden=\"true\" />\n                </div>\n              </Button>\n            </span>\n          )}\n          {!!onCheckChange && (\n            <span className={css(stylesTreeView.tableCheck)} key=\"table-check\">\n              <label htmlFor={checkboxId || `checkbox_${rowIndex}`}>\n                <Checkbox\n                  id={checkboxId || `checkbox_${rowIndex}`}\n                  aria-label={checkAriaLabel || `Row ${rowIndex} checkbox`}\n                  isChecked={isChecked}\n                  onChange={onChange}\n                />\n              </label>\n            </span>\n          )}\n          {text}\n          {!!onToggleRowDetails && (\n            <span className={css(stylesTreeView.tableTreeViewDetailsToggle)} key=\"view-details-toggle\">\n              <Button\n                variant=\"plain\"\n                aria-expanded={isDetailsExpanded}\n                aria-label={showDetailsAriaLabel || 'Show row details'}\n                onClick={event => onToggleRowDetails && onToggleRowDetails(event, rowIndex, content, rowData)}\n              >\n                <span className=\"pf-c-table__details-toggle-icon\">\n                  <EllipsisHIcon aria-hidden />\n                </span>\n              </Button>\n            </span>\n          )}\n        </div>\n      ) : (\n        text\n      )\n  };\n};\n"]},"metadata":{},"sourceType":"module"}