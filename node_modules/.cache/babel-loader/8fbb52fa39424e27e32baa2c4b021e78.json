{"ast":null,"code":"import { modifierPhases } from '../enums'; // source: https://stackoverflow.com/questions/49875255\n\n/**\n * @param modifiers\n */\n\nfunction order(modifiers) {\n  const map = new Map();\n  const visited = new Set();\n  const result = [];\n  modifiers.forEach(modifier => {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  /**\n   * @param modifier\n   */\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    const requires = [...(modifier.requires || []), ...(modifier.requiresIfExists || [])];\n    requires.forEach(dep => {\n      if (!visited.has(dep)) {\n        const depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(modifier => {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n/**\n * @param modifiers\n */\n\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  const orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce((acc, phase) => acc.concat(orderedModifiers.filter(modifier => modifier.phase === phase)), []);\n}","map":{"version":3,"mappings":"AAEA,SAASA,cAAT,QAA+B,UAA/B,C,CAEA;;AACA;;;;AAGA,SAASC,KAAT,CAAeC,SAAf,EAAwB;EACtB,MAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;EACA,MAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;EACA,MAAMC,MAAM,GAAG,EAAf;EAEAL,SAAS,CAACM,OAAV,CAAkBC,QAAQ,IAAG;IAC3BN,GAAG,CAACO,GAAJ,CAAQD,QAAQ,CAACE,IAAjB,EAAuBF,QAAvB;EACD,CAFD,EALsB,CAStB;;EACA;;;;EAGA,SAASG,IAAT,CAAcH,QAAd,EAA0C;IACxCJ,OAAO,CAACQ,GAAR,CAAYJ,QAAQ,CAACE,IAArB;IAEA,MAAMG,QAAQ,GAAG,CAAC,IAAIL,QAAQ,CAACK,QAAT,IAAqB,EAAzB,CAAD,EAA+B,IAAIL,QAAQ,CAACM,gBAAT,IAA6B,EAAjC,CAA/B,CAAjB;IAEAD,QAAQ,CAACN,OAAT,CAAiBQ,GAAG,IAAG;MACrB,IAAI,CAACX,OAAO,CAACY,GAAR,CAAYD,GAAZ,CAAL,EAAuB;QACrB,MAAME,WAAW,GAAGf,GAAG,CAACgB,GAAJ,CAAQH,GAAR,CAApB;;QAEA,IAAIE,WAAJ,EAAiB;UACfN,IAAI,CAACM,WAAD,CAAJ;QACD;MACF;IACF,CARD;IAUAX,MAAM,CAACa,IAAP,CAAYX,QAAZ;EACD;;EAEDP,SAAS,CAACM,OAAV,CAAkBC,QAAQ,IAAG;IAC3B,IAAI,CAACJ,OAAO,CAACY,GAAR,CAAYR,QAAQ,CAACE,IAArB,CAAL,EAAiC;MAC/B;MACAC,IAAI,CAACH,QAAD,CAAJ;IACD;EACF,CALD;EAOA,OAAOF,MAAP;AACD;AAED;;;;;AAGA,eAAc,SAAUc,cAAV,CAAyBnB,SAAzB,EAAwD;EACpE;EACA,MAAMoB,gBAAgB,GAAGrB,KAAK,CAACC,SAAD,CAA9B,CAFoE,CAIpE;;EACA,OAAOF,cAAc,CAACuB,MAAf,CACL,CAACC,GAAD,EAAMC,KAAN,KAAgBD,GAAG,CAACE,MAAJ,CAAWJ,gBAAgB,CAACK,MAAjB,CAAwBlB,QAAQ,IAAIA,QAAQ,CAACgB,KAAT,KAAmBA,KAAvD,CAAX,CADX,EAEL,EAFK,CAAP;AAID","names":["modifierPhases","order","modifiers","map","Map","visited","Set","result","forEach","modifier","set","name","sort","add","requires","requiresIfExists","dep","has","depModifier","get","push","orderModifiers","orderedModifiers","reduce","acc","phase","concat","filter"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.ts"],"sourcesContent":["// @ts-nocheck\nimport { Modifier } from '../types';\nimport { modifierPhases } from '../enums';\n\n// source: https://stackoverflow.com/questions/49875255\n/**\n * @param modifiers\n */\nfunction order(modifiers) {\n  const map = new Map();\n  const visited = new Set();\n  const result = [];\n\n  modifiers.forEach(modifier => {\n    map.set(modifier.name, modifier);\n  });\n\n  // On visiting object, check for its dependencies and visit them recursively\n  /**\n   * @param modifier\n   */\n  function sort(modifier: Modifier<any, any>) {\n    visited.add(modifier.name);\n\n    const requires = [...(modifier.requires || []), ...(modifier.requiresIfExists || [])];\n\n    requires.forEach(dep => {\n      if (!visited.has(dep)) {\n        const depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n\n    result.push(modifier);\n  }\n\n  modifiers.forEach(modifier => {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n\n  return result;\n}\n\n/**\n * @param modifiers\n */\nexport default function orderModifiers(modifiers: Modifier<any, any>[]): Modifier<any, any>[] {\n  // order based on dependencies\n  const orderedModifiers = order(modifiers);\n\n  // order based on phase\n  return modifierPhases.reduce(\n    (acc, phase) => acc.concat(orderedModifiers.filter(modifier => modifier.phase === phase)),\n    []\n  );\n}\n"]},"metadata":{},"sourceType":"module"}