{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/DependencyTree/DependencyTree.tsx\";\nimport { Button, Divider } from '@patternfly/react-core';\nimport { TreeView } from '@patternfly/react-core';\nimport { useCallback, useEffect, useState } from 'react';\nimport { DataContainer } from '../../containers/DataContainer/DataContainer';\nimport { useDataContainer } from '../../containers/DataContainer/useDataContainer';\nimport { buildService } from '../../services/buildService';\nimport { groupBuildService } from '../../services/groupBuildService';\nimport { isBuild } from '../../utils/entityRecognition';\nimport { BuildStatus } from '../BuildStatus/BuildStatus';\nimport styles from './DependencyTree.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\n * Display a dependency tree for builds or group builds.\n *\n * @param build - The current build of the dependency tree\n * @param groupBuild - The current group build of the dependency tree\n *\n * @example\n * ```tsx\n * <DependencyTree build={buildObject}></DependencyTree>\n * `\n *\n */\nexport const DependencyTree = _ref => {\n  let {\n    build,\n    groupBuild\n  } = _ref;\n  const [display, setDisplay] = useState(true);\n  const [dependentStructure, setDependentStructure] = useState();\n  const [dependencyStructure, setDependencyStructure] = useState();\n  const [buildItem, setBuildItem] = useState();\n  const [allExpanded, setAllExpanded] = useState(undefined);\n  const dataContainer = useDataContainer(useCallback(_ref2 => {\n    let {\n      serviceData,\n      requestConfig\n    } = _ref2;\n\n    if (serviceData.build) {\n      return buildService.getDependencyGraph({\n        id: serviceData.build.id\n      }, requestConfig);\n    } else {\n      return groupBuildService.getDependencyGraph({\n        id: serviceData.groupBuild.id\n      }, requestConfig);\n    }\n  }, []));\n  const refreshDataContainer = dataContainer.refresh;\n\n  const refreshComponent = () => {\n    setDisplay(false);\n    setTimeout(() => {\n      setDisplay(true);\n    }, 0);\n  };\n\n  const onClickExpandLevel1 = () => {\n    setAllExpanded(undefined);\n    setDefaultExpandByLevel(1, dependencyStructure);\n  };\n\n  const onClickExpandLevel2 = () => {\n    setAllExpanded(undefined);\n    setDefaultExpandByLevel(2, dependencyStructure);\n  };\n\n  const onClickExpandAll = () => {\n    setAllExpanded(allExpanded !== undefined ? !allExpanded : true);\n  };\n\n  const onClickExpandAllFailed = () => {\n    setAllExpanded(undefined);\n    setExpandFailed(dependencyStructure);\n  };\n\n  const setExpandFailed = dependStructure => {\n    var _dependStructure$chil;\n\n    dependStructure.defaultExpanded = ['FAILED', 'CANCELLED', 'REJECTED', 'REJECTED_FAILED_DEPENDENCIES', 'SYSTEM_ERROR', 'ENQUEUED', 'WAITING_FOR_DEPENDENCIES', 'BUILDING'].includes(dependStructure.data.status);\n    (_dependStructure$chil = dependStructure.children) === null || _dependStructure$chil === void 0 ? void 0 : _dependStructure$chil.forEach(child => setExpandFailed(child));\n    dependStructure.level === 0 && refreshComponent();\n  };\n\n  const setDefaultExpandByLevel = (level, dependStructure) => {\n    var _dependStructure$chil2;\n\n    dependStructure.defaultExpanded = dependStructure.level < level;\n    (_dependStructure$chil2 = dependStructure.children) === null || _dependStructure$chil2 === void 0 ? void 0 : _dependStructure$chil2.forEach(child => setDefaultExpandByLevel(level, child));\n    dependStructure.level === 0 && refreshComponent();\n  };\n\n  const generateTreeItem = build => build && /*#__PURE__*/_jsxDEV(\"span\", {\n    className: styles['tree-item'],\n    children: /*#__PURE__*/_jsxDEV(BuildStatus, {\n      build: build,\n      includeBuildLink: true,\n      includeConfigLink: true,\n      long: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 7\n  }, this);\n\n  useEffect(() => {\n    setBuildItem(build ? build : groupBuild);\n    refreshDataContainer({\n      serviceData: {\n        build: build,\n        groupBuild: groupBuild\n      }\n    });\n  }, [build, groupBuild, refreshDataContainer]);\n  useEffect(() => {\n    const getRootNodes = (edgesData, nodesData) => {\n      const rootNodes = [];\n      nodesData.forEach(node => {\n        !edgesData.map(edge => edge.target).includes(node.id) && rootNodes.push(node.id);\n      });\n      return rootNodes;\n    };\n\n    const addSuffixToDependencyId = dependencyDataStructure => {\n      var _dependencyDataStruct;\n\n      dependencyDataStructure.id = dependencyDataStructure.id + '-' + Math.floor(Math.random() * 1000);\n      (_dependencyDataStruct = dependencyDataStructure.children) === null || _dependencyDataStruct === void 0 ? void 0 : _dependencyDataStruct.map(child => addSuffixToDependencyId(child));\n      return dependencyDataStructure;\n    };\n\n    const addSuffixToDependentId = dependentDataStructure => {\n      return dependentDataStructure.map(dependentData => {\n        dependentData.id = dependentData.id + '-' + Math.floor(Math.random() * 1000);\n        return dependentData;\n      });\n    };\n\n    const attachChildFromEdges = function (currentNode, edgesData, nodesData) {\n      var _currentNode$children;\n\n      let level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n      if (level === 1 && !isBuild(buildItem)) {\n        const rootNodes = getRootNodes(edgesData, nodesData);\n        const targetChildren = rootNodes.map(rootNode => ({\n          id: rootNode,\n          name: generateTreeItem(nodesData === null || nodesData === void 0 ? void 0 : nodesData.get(rootNode)),\n          data: nodesData === null || nodesData === void 0 ? void 0 : nodesData.get(rootNode),\n          defaultExpanded: false,\n          level: level\n        }));\n\n        if (currentNode.children) {\n          currentNode.children.concat(targetChildren);\n        } else {\n          currentNode.children = targetChildren;\n        }\n      } else {\n        edgesData.filter(edge => edge.source === currentNode.id).forEach(edge => {\n          const targetChild = {\n            id: edge.target,\n            name: generateTreeItem(nodesData === null || nodesData === void 0 ? void 0 : nodesData.get(edge.target)),\n            data: nodesData === null || nodesData === void 0 ? void 0 : nodesData.get(edge.target),\n            defaultExpanded: false,\n            level: level\n          };\n\n          if (currentNode.children) {\n            currentNode.children.push(targetChild);\n          } else {\n            currentNode.children = [targetChild];\n          }\n        });\n      }\n\n      (_currentNode$children = currentNode.children) === null || _currentNode$children === void 0 ? void 0 : _currentNode$children.forEach(child => attachChildFromEdges(child, edgesData, nodesData, level + 1));\n      return currentNode;\n    };\n\n    if (!dataContainer.data) {\n      return;\n    }\n\n    const nodesData = new Map();\n    const verticesData = new Map(Object.entries(dataContainer.data.vertices));\n    verticesData.forEach(vertex => {\n      nodesData.set(vertex.name, vertex.data);\n    });\n    const _dependencyStructure = {\n      id: buildItem === null || buildItem === void 0 ? void 0 : buildItem.id,\n      name: generateTreeItem(buildItem),\n      data: buildItem,\n      defaultExpanded: true,\n      level: 0\n    };\n    const _dependentStructure = [];\n    const edgesData = [];\n    Object.assign(edgesData, dataContainer.data.edges); // Generate parent dependents\n\n    edgesData.filter(edge => edge.target === buildItem.id).forEach(edge => {\n      _dependentStructure.push({\n        data: nodesData.get(edge.source),\n        id: edge.target,\n        name: generateTreeItem(nodesData.get(edge.source)),\n        defaultExpanded: false,\n        level: 0\n      });\n    });\n    setDependentStructure(addSuffixToDependentId(_dependentStructure)); // Generate children dependency\n\n    setDependencyStructure(addSuffixToDependencyId(attachChildFromEdges(_dependencyStructure, edgesData, nodesData, 1)));\n  }, [dataContainer.data, buildItem]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DataContainer, { ...dataContainer,\n      title: \"Dependency Tree\",\n      children: [buildItem && isBuild(buildItem) && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles['build-tree-component'],\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles['sub-title-bar'],\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Direct Parents\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this), dependentStructure !== null && dependentStructure !== void 0 && dependentStructure.length ? /*#__PURE__*/_jsxDEV(TreeView, {\n            data: dependentStructure,\n            allExpanded: allExpanded,\n            hasGuides: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles['no-data-text'],\n            children: \"No direct parent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles['build-tree-component'],\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles['sub-title-bar'],\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Dependencies\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"tertiary\",\n            onClick: onClickExpandLevel1,\n            isSmall: true,\n            children: \"Expand 1 Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"tertiary\",\n            onClick: onClickExpandLevel2,\n            isSmall: true,\n            children: \"Expand 2 Levels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"tertiary\",\n            onClick: onClickExpandAll,\n            isSmall: true,\n            children: allExpanded ? 'Collapse All' : 'Expand All'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"tertiary\",\n            onClick: onClickExpandAllFailed,\n            isSmall: true,\n            children: \"Expand All Failed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), display && dependencyStructure && /*#__PURE__*/_jsxDEV(TreeView, {\n          data: [dependencyStructure],\n          allExpanded: allExpanded,\n          hasGuides: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};","map":{"version":3,"names":["Button","Divider","TreeView","useCallback","useEffect","useState","DataContainer","useDataContainer","buildService","groupBuildService","isBuild","BuildStatus","styles","DependencyTree","build","groupBuild","display","setDisplay","dependentStructure","setDependentStructure","dependencyStructure","setDependencyStructure","buildItem","setBuildItem","allExpanded","setAllExpanded","undefined","dataContainer","serviceData","requestConfig","getDependencyGraph","id","refreshDataContainer","refresh","refreshComponent","setTimeout","onClickExpandLevel1","setDefaultExpandByLevel","onClickExpandLevel2","onClickExpandAll","onClickExpandAllFailed","setExpandFailed","dependStructure","defaultExpanded","includes","data","status","children","forEach","child","level","generateTreeItem","getRootNodes","edgesData","nodesData","rootNodes","node","map","edge","target","push","addSuffixToDependencyId","dependencyDataStructure","Math","floor","random","addSuffixToDependentId","dependentDataStructure","dependentData","attachChildFromEdges","currentNode","targetChildren","rootNode","name","get","concat","filter","source","targetChild","Map","verticesData","Object","entries","vertices","vertex","set","_dependencyStructure","_dependentStructure","assign","edges","length"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/DependencyTree/DependencyTree.tsx"],"sourcesContent":["import { Button, Divider, TreeViewDataItem } from '@patternfly/react-core';\nimport { TreeView } from '@patternfly/react-core';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { Build, GroupBuild } from 'pnc-api-types-ts';\n\nimport { DataContainer } from '../../containers/DataContainer/DataContainer';\nimport { IService, useDataContainer } from '../../containers/DataContainer/useDataContainer';\n\nimport { buildService } from '../../services/buildService';\nimport { groupBuildService } from '../../services/groupBuildService';\n\nimport { isBuild } from '../../utils/entityRecognition';\n\nimport { BuildStatus } from '../BuildStatus/BuildStatus';\nimport styles from './DependencyTree.module.css';\n\ninterface IGraphEdge {\n  source: string;\n  target: string;\n}\n\ninterface IGraphVertex {\n  name: string;\n  dataType: string;\n  data: Build | GroupBuild;\n  _dependencyBuildIds: Array<string>;\n  _dependentBuildIds: Array<string>;\n}\n\ninterface IDependencyTreeProps {\n  build?: Build;\n  groupBuild?: GroupBuild;\n}\n\ninterface IServiceDataProps {\n  build?: Build;\n  groupBuild?: GroupBuild;\n}\n\ninterface IDependencyBuild extends Build, GroupBuild {\n  _buildIds?: Array<string>;\n  _dependencyBuildIds?: Array<string>;\n  _dependentBuildIds?: Array<string>;\n}\n\ninterface IDependencyDataItem extends TreeViewDataItem {\n  data: IDependencyBuild;\n  children?: IDependencyDataItem[];\n  level: number;\n}\n\n/**\n * Display a dependency tree for builds or group builds.\n *\n * @param build - The current build of the dependency tree\n * @param groupBuild - The current group build of the dependency tree\n *\n * @example\n * ```tsx\n * <DependencyTree build={buildObject}></DependencyTree>\n * `\n *\n */\nexport const DependencyTree = ({ build, groupBuild }: IDependencyTreeProps) => {\n  const [display, setDisplay] = useState<boolean>(true);\n  const [dependentStructure, setDependentStructure] = useState<Array<IDependencyDataItem>>();\n  const [dependencyStructure, setDependencyStructure] = useState<IDependencyDataItem>();\n  const [buildItem, setBuildItem] = useState<IDependencyBuild>();\n  const [allExpanded, setAllExpanded] = useState<boolean | undefined>(undefined);\n  const dataContainer = useDataContainer(\n    useCallback(({ serviceData, requestConfig }: IService<IServiceDataProps>) => {\n      if (serviceData!.build) {\n        return buildService.getDependencyGraph({ id: serviceData!.build!.id }, requestConfig);\n      } else {\n        return groupBuildService.getDependencyGraph({ id: serviceData!.groupBuild!.id }, requestConfig);\n      }\n    }, [])\n  );\n\n  const refreshDataContainer = dataContainer.refresh;\n\n  const refreshComponent = () => {\n    setDisplay(false);\n    setTimeout(() => {\n      setDisplay(true);\n    }, 0);\n  };\n\n  const onClickExpandLevel1 = () => {\n    setAllExpanded(undefined);\n    setDefaultExpandByLevel(1, dependencyStructure!);\n  };\n  const onClickExpandLevel2 = () => {\n    setAllExpanded(undefined);\n    setDefaultExpandByLevel(2, dependencyStructure!);\n  };\n  const onClickExpandAll = () => {\n    setAllExpanded(allExpanded !== undefined ? !allExpanded : true);\n  };\n\n  const onClickExpandAllFailed = () => {\n    setAllExpanded(undefined);\n    setExpandFailed(dependencyStructure!);\n  };\n\n  const setExpandFailed = (dependStructure: IDependencyDataItem) => {\n    dependStructure.defaultExpanded = [\n      'FAILED',\n      'CANCELLED',\n      'REJECTED',\n      'REJECTED_FAILED_DEPENDENCIES',\n      'SYSTEM_ERROR',\n      'ENQUEUED',\n      'WAITING_FOR_DEPENDENCIES',\n      'BUILDING',\n    ].includes(dependStructure.data.status!);\n    dependStructure.children?.forEach((child) => setExpandFailed(child));\n    dependStructure.level === 0 && refreshComponent();\n  };\n\n  const setDefaultExpandByLevel = (level: number, dependStructure: IDependencyDataItem) => {\n    dependStructure.defaultExpanded = dependStructure.level < level;\n    dependStructure.children?.forEach((child) => setDefaultExpandByLevel(level, child));\n    dependStructure.level === 0 && refreshComponent();\n  };\n\n  const generateTreeItem = (build: IDependencyBuild) =>\n    build && (\n      <span className={styles['tree-item']}>\n        <BuildStatus build={build} includeBuildLink includeConfigLink long />\n      </span>\n    );\n\n  useEffect(() => {\n    setBuildItem(build ? build : groupBuild);\n    refreshDataContainer({ serviceData: { build: build, groupBuild: groupBuild } });\n  }, [build, groupBuild, refreshDataContainer]);\n\n  useEffect(() => {\n    const getRootNodes = (edgesData: Array<IGraphEdge>, nodesData: Map<string, IDependencyBuild>) => {\n      const rootNodes: Array<string> = [];\n      nodesData.forEach((node) => {\n        !edgesData.map((edge) => edge.target).includes(node.id) && rootNodes.push(node.id);\n      });\n      return rootNodes;\n    };\n\n    const addSuffixToDependencyId = (dependencyDataStructure: IDependencyDataItem) => {\n      dependencyDataStructure.id = dependencyDataStructure.id! + '-' + Math.floor(Math.random() * 1000);\n      dependencyDataStructure.children?.map((child) => addSuffixToDependencyId(child));\n      return dependencyDataStructure;\n    };\n    const addSuffixToDependentId = (dependentDataStructure: IDependencyDataItem[]) => {\n      return dependentDataStructure.map((dependentData) => {\n        dependentData.id = dependentData.id + '-' + Math.floor(Math.random() * 1000);\n        return dependentData;\n      });\n    };\n    const attachChildFromEdges = (\n      currentNode: IDependencyDataItem,\n      edgesData: Array<IGraphEdge>,\n      nodesData: Map<string, IDependencyBuild>,\n      level: number = 1\n    ) => {\n      if (level === 1 && !isBuild(buildItem)) {\n        const rootNodes: Array<string> = getRootNodes(edgesData, nodesData);\n        const targetChildren = rootNodes.map((rootNode) => ({\n          id: rootNode,\n          name: generateTreeItem(nodesData?.get(rootNode)!),\n          data: nodesData?.get(rootNode)!,\n          defaultExpanded: false,\n          level: level,\n        }));\n        if (currentNode.children) {\n          currentNode.children.concat(targetChildren);\n        } else {\n          currentNode.children = targetChildren;\n        }\n      } else {\n        edgesData!\n          .filter((edge) => edge.source === currentNode.id)\n          .forEach((edge) => {\n            const targetChild = {\n              id: edge.target,\n              name: generateTreeItem(nodesData?.get(edge.target)!),\n              data: nodesData?.get(edge.target)!,\n              defaultExpanded: false,\n              level: level,\n            };\n            if (currentNode.children) {\n              currentNode.children.push(targetChild);\n            } else {\n              currentNode.children = [targetChild];\n            }\n          });\n      }\n      currentNode.children?.forEach((child) => attachChildFromEdges(child, edgesData, nodesData, level + 1));\n      return currentNode;\n    };\n    if (!dataContainer.data) {\n      return;\n    }\n    const nodesData: Map<string, IDependencyBuild> = new Map();\n    const verticesData = new Map<string, IGraphVertex>(Object.entries(dataContainer.data.vertices));\n    verticesData.forEach((vertex: IGraphVertex) => {\n      nodesData.set(vertex.name, vertex.data);\n    });\n\n    const _dependencyStructure: IDependencyDataItem = {\n      id: buildItem?.id,\n      name: generateTreeItem(buildItem!),\n      data: buildItem!,\n      defaultExpanded: true,\n      level: 0,\n    };\n    const _dependentStructure: Array<IDependencyDataItem> = [];\n\n    const edgesData: Array<IGraphEdge> = [];\n    Object.assign(edgesData, dataContainer.data.edges);\n\n    // Generate parent dependents\n    edgesData\n      .filter((edge) => edge.target === buildItem!.id)\n      .forEach((edge) => {\n        _dependentStructure.push({\n          data: nodesData.get(edge.source)!,\n          id: edge.target,\n          name: generateTreeItem(nodesData.get(edge.source)!),\n          defaultExpanded: false,\n          level: 0,\n        });\n      });\n    setDependentStructure(addSuffixToDependentId(_dependentStructure));\n\n    // Generate children dependency\n    setDependencyStructure(addSuffixToDependencyId(attachChildFromEdges(_dependencyStructure, edgesData, nodesData, 1)));\n  }, [dataContainer.data, buildItem]);\n\n  return (\n    <>\n      <DataContainer {...dataContainer} title=\"Dependency Tree\">\n        {buildItem && isBuild(buildItem) && (\n          <>\n            <div className={styles['build-tree-component']}>\n              <div className={styles['sub-title-bar']}>\n                <strong>Direct Parents</strong>\n              </div>\n              {dependentStructure?.length ? (\n                <TreeView data={dependentStructure} allExpanded={allExpanded} hasGuides={true} />\n              ) : (\n                <div className={styles['no-data-text']}>No direct parent</div>\n              )}\n            </div>\n            <Divider />\n          </>\n        )}\n        <div className={styles['build-tree-component']}>\n          <div className={styles['sub-title-bar']}>\n            <strong>Dependencies</strong>\n            <Button variant=\"tertiary\" onClick={onClickExpandLevel1} isSmall>\n              Expand 1 Level\n            </Button>\n            <Button variant=\"tertiary\" onClick={onClickExpandLevel2} isSmall>\n              Expand 2 Levels\n            </Button>\n            <Button variant=\"tertiary\" onClick={onClickExpandAll} isSmall>\n              {allExpanded ? 'Collapse All' : 'Expand All'}\n            </Button>\n            <Button variant=\"tertiary\" onClick={onClickExpandAllFailed} isSmall>\n              Expand All Failed\n            </Button>\n          </div>\n          {display && dependencyStructure && <TreeView data={[dependencyStructure]} allExpanded={allExpanded} hasGuides={true} />}\n        </div>\n      </DataContainer>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}