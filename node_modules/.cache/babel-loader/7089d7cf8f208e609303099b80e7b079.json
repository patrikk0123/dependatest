{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initForm - Init form state (just values and validators)\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> form             - whole form state\n *  -> applyValues      - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - submit disabled or not\n *\n * initForm and form objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessage -- error message (in case of a error)\n *    -> state  -- state of a field ('default', 'success', 'error')\n *    -> validator:   -- means of validation\n *      -> isRequired -- is field required?\n *      -> check      -- function to check format of an input\n */\nexport const useForm = (initForm, callback) => {\n  const defaultForm = { ...initForm\n  };\n\n  for (const key in defaultForm) {\n    defaultForm[key].state = 'default';\n  }\n\n  const [form, setForm] = useState(defaultForm); // is submit button disabled?\n\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true); // has any field been changed?\n  // important for edit page (do not submit until any new content)\n\n  const [hasChanged, setHasChanged] = useState(false); // are all validated inputs valid?\n\n  const isFormValid = useCallback(() => {\n    for (const key in form) {\n      if (form[key].errorMessage) return false;\n    }\n\n    return true;\n  }, [form]); // are all required inputs filled?\n\n  const areRequiredFilled = useCallback(() => {\n    for (const key in form) {\n      const validator = form[key].validator;\n\n      if (validator) {\n        if (validator.isRequired && !form[key].value) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }, [form]); // callback (on change of input)\n\n  const onChange = event => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n    const newField = { ...form[fieldName],\n      value: fieldValue\n    };\n    const validatedField = validate(newField);\n    setForm({ ...form,\n      [fieldName]: validatedField\n    });\n    setHasChanged(true);\n  }; // validate field state and return new with errors / new state\n\n\n  const validate = fieldState => {\n    const validator = fieldState.validator;\n\n    if (validator) {\n      if (validator.isRequired) {\n        const error = fieldState.value ? '' : 'Field must be filled!';\n        return setError(fieldState, error);\n      } else if (validator.check) {\n        const error = validator.check(fieldState.value);\n        return setError(fieldState, error);\n      }\n    }\n\n    return { ...fieldState\n    };\n  }; // create new field state and apply errors / state and return it\n\n\n  const setError = (fieldState, error) => {\n    if (error) {\n      return { ...fieldState,\n        errorMessage: error,\n        state: 'error'\n      };\n    } else {\n      // display success state only if not empty\n      if (fieldState.value) {\n        return { ...fieldState,\n          errorMessage: error,\n          state: 'success'\n        };\n      } else {\n        return { ...fieldState,\n          errorMessage: error,\n          state: 'default'\n        };\n      }\n    }\n  };\n\n  const generateSubmitData = form => {\n    const formData = {};\n\n    for (const key in form) {\n      formData[key] = form[key].value;\n    }\n\n    return formData;\n  }; // callback (on submit of form)\n\n\n  const onSubmit = () => {\n    callback(generateSubmitData(form)).catch(error => {\n      // backend error, just log it at the moment\n      console.error(error); // FUTURE IMPLEMENTATION:\n      // const formCopy = { ...form };\n      // for (const key in error.details.validation) {\n      //   const newField = { ...form[key], error: error.details.validation[key].errorMessage, state: 'error' };\n      //   formCopy[key] = newField;\n      // }\n      // setForm(formCopy);\n    }); // reset state to 'default' (valid inputs wont be highlighted)\n\n    const formCopy = { ...form\n    };\n\n    for (const key in formCopy) {\n      formCopy[key].state = 'default';\n    }\n\n    setForm(formCopy);\n    setIsSubmitDisabled(true);\n  };\n\n  const applyValues = useCallback(fieldValues => {\n    const newForm = { ...form\n    };\n\n    for (const key in fieldValues) {\n      newForm[key].value = fieldValues[key];\n    }\n\n    setForm(newForm);\n  }, [form]);\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [form, hasChanged, isFormValid, areRequiredFilled]);\n  return {\n    form,\n    applyValues,\n    onChange,\n    onSubmit,\n    isSubmitDisabled\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useState","useForm","initForm","callback","defaultForm","key","state","form","setForm","isSubmitDisabled","setIsSubmitDisabled","hasChanged","setHasChanged","isFormValid","errorMessage","areRequiredFilled","validator","isRequired","value","onChange","event","fieldName","currentTarget","name","fieldValue","newField","validatedField","validate","fieldState","error","setError","check","generateSubmitData","formData","onSubmit","catch","console","formCopy","applyValues","fieldValues","newForm"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\n\nexport interface IFieldValues {\n  [key: string]: string;\n}\n\ninterface IValidator {\n  isRequired?: boolean;\n  check?: Function;\n}\n\ninterface IFieldState {\n  value: string;\n  errorMessage?: string;\n  state?: any;\n  validator?: IValidator;\n}\n\ninterface IFormState {\n  [key: string]: IFieldState;\n}\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done (not possible to submit unchanged edit form)\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initForm - Init form state (just values and validators)\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> form             - whole form state\n *  -> applyValues      - set all field values\n *  -> onChange         - callback for input fields on change\n *  -> onSubmit         - callback for submit button\n *  -> isSubmitDisabled - submit disabled or not\n *\n * initForm and form objects hold whole state of a form.\n * their structure:\n *  -> [key]:   -- input field ID\n *    -> value  -- field value\n *    -> errorMessage -- error message (in case of a error)\n *    -> state  -- state of a field ('default', 'success', 'error')\n *    -> validator:   -- means of validation\n *      -> isRequired -- is field required?\n *      -> check      -- function to check format of an input\n */\nexport const useForm = (initForm: Omit<Omit<IFormState, 'errorMessage'>, 'state'>, callback: Function) => {\n  const defaultForm = { ...initForm };\n  for (const key in defaultForm) {\n    defaultForm[key].state = 'default';\n  }\n  const [form, setForm] = useState<IFormState>(defaultForm);\n\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  // has any field been changed?\n  // important for edit page (do not submit until any new content)\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // are all validated inputs valid?\n  const isFormValid = useCallback(() => {\n    for (const key in form) {\n      if (form[key].errorMessage) return false;\n    }\n\n    return true;\n  }, [form]);\n\n  // are all required inputs filled?\n  const areRequiredFilled = useCallback(() => {\n    for (const key in form) {\n      const validator = form[key].validator;\n      if (validator) {\n        if (validator.isRequired && !form[key].value) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }, [form]);\n\n  // callback (on change of input)\n  const onChange = (event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n\n    const newField = { ...form[fieldName], value: fieldValue };\n    const validatedField = validate(newField);\n    setForm({ ...form, [fieldName]: validatedField });\n\n    setHasChanged(true);\n  };\n\n  // validate field state and return new with errors / new state\n  const validate = (fieldState: IFieldState): IFieldState => {\n    const validator = fieldState.validator;\n    if (validator) {\n      if (validator.isRequired) {\n        const error = fieldState.value ? '' : 'Field must be filled!';\n        return setError(fieldState, error);\n      } else if (validator.check) {\n        const error = validator.check(fieldState.value);\n        return setError(fieldState, error);\n      }\n    }\n\n    return { ...fieldState };\n  };\n\n  // create new field state and apply errors / state and return it\n  const setError = (fieldState: IFieldState, error: string): IFieldState => {\n    if (error) {\n      return { ...fieldState, errorMessage: error, state: 'error' };\n    } else {\n      // display success state only if not empty\n      if (fieldState.value) {\n        return { ...fieldState, errorMessage: error, state: 'success' };\n      } else {\n        return { ...fieldState, errorMessage: error, state: 'default' };\n      }\n    }\n  };\n\n  const generateSubmitData = (form: IFormState) => {\n    const formData: IFieldValues = {};\n\n    for (const key in form) {\n      formData[key] = form[key].value;\n    }\n\n    return formData;\n  };\n\n  // callback (on submit of form)\n  const onSubmit = () => {\n    callback(generateSubmitData(form)).catch((error: any) => {\n      // backend error, just log it at the moment\n      console.error(error);\n\n      // FUTURE IMPLEMENTATION:\n      // const formCopy = { ...form };\n      // for (const key in error.details.validation) {\n      //   const newField = { ...form[key], error: error.details.validation[key].errorMessage, state: 'error' };\n      //   formCopy[key] = newField;\n      // }\n      // setForm(formCopy);\n    });\n\n    // reset state to 'default' (valid inputs wont be highlighted)\n    const formCopy = { ...form };\n    for (const key in formCopy) {\n      formCopy[key].state = 'default';\n    }\n    setForm(formCopy);\n    setIsSubmitDisabled(true);\n  };\n\n  const applyValues = useCallback(\n    (fieldValues: IFieldValues) => {\n      const newForm = { ...form };\n      for (const key in fieldValues) {\n        newForm[key].value = fieldValues[key];\n      }\n\n      setForm(newForm);\n    },\n    [form]\n  );\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [form, hasChanged, isFormValid, areRequiredFilled]);\n\n  return { form, applyValues, onChange, onSubmit, isSubmitDisabled };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}