{"ast":null,"code":"import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { DropdownToggle } from '../Dropdown';\nlet toggleId = 0;\nexport const OptionsToggle = _ref => {\n  let {\n    itemsTitle = 'items',\n    optionsToggle,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    itemsPerPageTitle = 'Items per page',\n    ofWord = 'of',\n    firstIndex = 0,\n    lastIndex = 0,\n    itemCount,\n    widgetId = '',\n    showToggle = true,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle = _isOpen => undefined,\n    isOpen = false,\n    isDisabled = false,\n    parentRef = null,\n    toggleTemplate: ToggleTemplate,\n    onEnter = null,\n    perPageComponent = 'div'\n  } = _ref;\n  const isDiv = perPageComponent === 'div';\n  const toggleClasses = css(styles.optionsMenuToggle, isDisabled && styles.modifiers.disabled, styles.modifiers.plain, styles.modifiers.text);\n  const template = typeof ToggleTemplate === 'string' ? fillTemplate(ToggleTemplate, {\n    firstIndex,\n    lastIndex,\n    ofWord,\n    itemCount,\n    itemsTitle\n  }) : React.createElement(ToggleTemplate, {\n    firstIndex: firstIndex,\n    lastIndex: lastIndex,\n    ofWord: ofWord,\n    itemCount: itemCount,\n    itemsTitle: itemsTitle\n  });\n  const dropdown = showToggle && React.createElement(React.Fragment, null, isDiv && React.createElement(\"span\", {\n    className: css(styles.optionsMenuToggleText)\n  }, template), React.createElement(DropdownToggle, {\n    onEnter: onEnter,\n    \"aria-label\": isDiv ? optionsToggle || 'Items per page' : optionsToggle,\n    onToggle: onToggle,\n    isDisabled: isDisabled || itemCount && itemCount <= 0,\n    isOpen: isOpen,\n    id: `${widgetId}-toggle-${toggleId++}`,\n    className: isDiv ? styles.optionsMenuToggleButton : toggleClasses,\n    parentRef: parentRef,\n    \"aria-haspopup\": \"listbox\"\n  }, !isDiv && template));\n  return isDiv ? React.createElement(\"div\", {\n    className: toggleClasses\n  }, dropdown) : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,kEAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AAEA,SAASC,YAAT,QAA6B,eAA7B;AAEA,SAASC,cAAT,QAA+B,aAA/B;AAuCA,IAAIC,QAAQ,GAAG,CAAf;AACA,OAAO,MAAMC,aAAa,GAAgD,QAmBjD;EAAA,IAnBkD;IACzEC,UAAU,GAAG,OAD4D;IAEzEC,aAFyE;IAGzE;IACAC,iBAAiB,GAAG,gBAJqD;IAKzEC,MAAM,GAAG,IALgE;IAMzEC,UAAU,GAAG,CAN4D;IAOzEC,SAAS,GAAG,CAP6D;IAQzEC,SARyE;IASzEC,QAAQ,GAAG,EAT8D;IAUzEC,UAAU,GAAG,IAV4D;IAWzE;IACAC,QAAQ,GAAIC,OAAD,IAAsBC,SAZwC;IAazEC,MAAM,GAAG,KAbgE;IAczEC,UAAU,GAAG,KAd4D;IAezEC,SAAS,GAAG,IAf6D;IAgBzEC,cAAc,EAAEC,cAhByD;IAiBzEC,OAAO,GAAG,IAjB+D;IAkBzEC,gBAAgB,GAAG;EAlBsD,CAmBlD;EACvB,MAAMC,KAAK,GAAGD,gBAAgB,KAAK,KAAnC;EACA,MAAME,aAAa,GAAGzB,GAAG,CACvBD,MAAM,CAAC2B,iBADgB,EAEvBR,UAAU,IAAInB,MAAM,CAAC4B,SAAP,CAAiBC,QAFR,EAGvB7B,MAAM,CAAC4B,SAAP,CAAiBE,KAHM,EAIvB9B,MAAM,CAAC4B,SAAP,CAAiBG,IAJM,CAAzB;EAOA,MAAMC,QAAQ,GACZ,OAAOV,cAAP,KAA0B,QAA1B,GACEpB,YAAY,CAACoB,cAAD,EAAiB;IAAEZ,UAAF;IAAcC,SAAd;IAAyBF,MAAzB;IAAiCG,SAAjC;IAA4CN;EAA5C,CAAjB,CADd,GAGEP,oBAACuB,cAAD,EAAe;IACbZ,UAAU,EAAEA,UADC;IAEbC,SAAS,EAAEA,SAFE;IAGbF,MAAM,EAAEA,MAHK;IAIbG,SAAS,EAAEA,SAJE;IAKbN,UAAU,EAAEA;EALC,CAAf,CAJJ;EAaA,MAAM2B,QAAQ,GAAGnB,UAAU,IACzBf,oBAACA,KAAK,CAACmC,QAAP,EAAe,IAAf,EACGT,KAAK,IAAI1B;IAAMoC,SAAS,EAAElC,GAAG,CAACD,MAAM,CAACoC,qBAAR;EAApB,GAAqDJ,QAArD,CADZ,EAEEjC,oBAACI,cAAD,EAAe;IACboB,OAAO,EAAEA,OADI;IACG,cACJE,KAAK,GAAGlB,aAAa,IAAI,gBAApB,GAAuCA,aAF3C;IAGbQ,QAAQ,EAAEA,QAHG;IAIbI,UAAU,EAAEA,UAAU,IAAKP,SAAS,IAAIA,SAAS,IAAI,CAJxC;IAKbM,MAAM,EAAEA,MALK;IAMbmB,EAAE,EAAE,GAAGxB,QAAQ,WAAWT,QAAQ,EAAE,EANvB;IAOb+B,SAAS,EAAEV,KAAK,GAAGzB,MAAM,CAACsC,uBAAV,GAAoCZ,aAPvC;IAQbN,SAAS,EAAEA,SARE;IAQO,iBACN;EATD,CAAf,EAWG,CAACK,KAAD,IAAUO,QAXb,CAFF,CADF;EAmBA,OAAOP,KAAK,GAAG1B;IAAKoC,SAAS,EAAET;EAAhB,GAAgCO,QAAhC,CAAH,GAAqDA,QAAjE;AACD,CA7DM;AA8DP5B,aAAa,CAACkC,WAAd,GAA4B,eAA5B","names":["React","styles","css","fillTemplate","DropdownToggle","toggleId","OptionsToggle","itemsTitle","optionsToggle","itemsPerPageTitle","ofWord","firstIndex","lastIndex","itemCount","widgetId","showToggle","onToggle","_isOpen","undefined","isOpen","isDisabled","parentRef","toggleTemplate","ToggleTemplate","onEnter","perPageComponent","isDiv","toggleClasses","optionsMenuToggle","modifiers","disabled","plain","text","template","dropdown","Fragment","className","optionsMenuToggleText","id","optionsMenuToggleButton","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Pagination/OptionsToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/OptionsMenu/options-menu';\nimport { css } from '@patternfly/react-styles';\n\nimport { fillTemplate } from '../../helpers';\nimport { ToggleTemplateProps } from './ToggleTemplate';\nimport { DropdownToggle } from '../Dropdown';\n\nexport interface OptionsToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** The type or title of the items being paginated */\n  itemsTitle?: string;\n  /** Accessible label for the options toggle */\n  optionsToggle?: string;\n  /** The title of the pagination options menu */\n  itemsPerPageTitle?: string;\n  /** The first index of the items being paginated */\n  firstIndex?: number;\n  /** The last index of the items being paginated */\n  lastIndex?: number;\n  /** The total number of items being paginated */\n  itemCount?: number;\n  /** Id added to the title of the pagination options menu */\n  widgetId?: string;\n  /** showToggle */\n  showToggle?: boolean;\n  /** Event function that fires when user clicks the options menu toggle */\n  onToggle?: (isOpen: boolean) => void;\n  /** Flag indicating if the options menu dropdown is open or not */\n  isOpen?: boolean;\n  /** Flag indicating if the options menu is disabled */\n  isDisabled?: boolean;\n  /** */\n  parentRef?: HTMLElement;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Callback for toggle open on keyboard entry */\n  onEnter?: () => void;\n  /** Label for the English word \"of\" */\n  ofWord?: string;\n  /** Component to be used for wrapping the toggle contents. Use 'button' when you want\n   * all of the toggle text to be clickable.\n   */\n  perPageComponent?: 'div' | 'button';\n}\n\nlet toggleId = 0;\nexport const OptionsToggle: React.FunctionComponent<OptionsToggleProps> = ({\n  itemsTitle = 'items',\n  optionsToggle,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  itemsPerPageTitle = 'Items per page',\n  ofWord = 'of',\n  firstIndex = 0,\n  lastIndex = 0,\n  itemCount,\n  widgetId = '',\n  showToggle = true,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle = (_isOpen: boolean) => undefined as any,\n  isOpen = false,\n  isDisabled = false,\n  parentRef = null,\n  toggleTemplate: ToggleTemplate,\n  onEnter = null,\n  perPageComponent = 'div'\n}: OptionsToggleProps) => {\n  const isDiv = perPageComponent === 'div';\n  const toggleClasses = css(\n    styles.optionsMenuToggle,\n    isDisabled && styles.modifiers.disabled,\n    styles.modifiers.plain,\n    styles.modifiers.text\n  );\n\n  const template =\n    typeof ToggleTemplate === 'string' ? (\n      fillTemplate(ToggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle })\n    ) : (\n      <ToggleTemplate\n        firstIndex={firstIndex}\n        lastIndex={lastIndex}\n        ofWord={ofWord}\n        itemCount={itemCount}\n        itemsTitle={itemsTitle}\n      />\n    );\n\n  const dropdown = showToggle && (\n    <React.Fragment>\n      {isDiv && <span className={css(styles.optionsMenuToggleText)}>{template}</span>}\n      <DropdownToggle\n        onEnter={onEnter}\n        aria-label={isDiv ? optionsToggle || 'Items per page' : optionsToggle}\n        onToggle={onToggle}\n        isDisabled={isDisabled || (itemCount && itemCount <= 0)}\n        isOpen={isOpen}\n        id={`${widgetId}-toggle-${toggleId++}`}\n        className={isDiv ? styles.optionsMenuToggleButton : toggleClasses}\n        parentRef={parentRef}\n        aria-haspopup=\"listbox\"\n      >\n        {!isDiv && template}\n      </DropdownToggle>\n    </React.Fragment>\n  );\n\n  return isDiv ? <div className={toggleClasses}>{dropdown}</div> : dropdown;\n};\nOptionsToggle.displayName = 'OptionsToggle';\n"]},"metadata":{},"sourceType":"module"}