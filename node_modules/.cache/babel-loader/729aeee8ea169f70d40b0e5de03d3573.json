{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { mapOpenedRows } from './utils/headerUtils';\nimport { Tbody } from '../TableComposable/Tbody';\nexport const BodyWrapper = _a => {\n  var {\n    mappedRows,\n    tbodyRef,\n\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    rows = [],\n    onCollapse,\n    headerRows\n  } = _a,\n\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  props = __rest(_a, [\"mappedRows\", \"tbodyRef\", \"rows\", \"onCollapse\", \"headerRows\"]);\n\n  if (mappedRows && mappedRows.some(row => row.hasOwnProperty('parent'))) {\n    return React.createElement(React.Fragment, null, mapOpenedRows(mappedRows, props.children).map((oneRow, key) => React.createElement(Tbody, Object.assign({}, props, {\n      isExpanded: oneRow.isOpen,\n      key: `tbody-${key}`,\n      ref: tbodyRef\n    }), oneRow.rows)));\n  }\n\n  return React.createElement(Tbody, Object.assign({}, props, {\n    ref: tbodyRef\n  }));\n};\nBodyWrapper.displayName = 'BodyWrapper';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,KAAT,QAAsB,0BAAtB;AAiBA,OAAO,MAAMC,WAAW,GAA+CC,EAAD,IAS/C;MATgD;IACrEC,UADqE;IAErEC,QAFqE;;IAGrE;IACAC,IAAI,GAAG,EAJ8D;IAKrEC,UALqE;IAMrEC;EANqE,IAM3DL;;EACV;EACGM,KAAK,cAR6D,8DAQ7D;;EAER,IAAIL,UAAU,IAAIA,UAAU,CAACM,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,cAAJ,CAAmB,QAAnB,CAAvB,CAAlB,EAAwE;IACtE,OACEb,oBAACA,KAAK,CAACc,QAAP,EAAe,IAAf,EACGb,aAAa,CAACI,UAAD,EAAaK,KAAK,CAACK,QAAnB,CAAb,CAA0CC,GAA1C,CAA8C,CAACC,MAAD,EAASC,GAAT,KAC7ClB,oBAACE,KAAD,EAAMiB,kBAAKT,KAAL,EAAU;MAAEU,UAAU,EAAEH,MAAM,CAACI,MAArB;MAA6BH,GAAG,EAAE,SAASA,GAAG,EAA9C;MAAkDI,GAAG,EAAEhB;IAAvD,CAAV,CAAN,EACGW,MAAM,CAACV,IADV,CADD,CADH,CADF;EASD;;EACD,OAAOP,oBAACE,KAAD,EAAMiB,kBAAKT,KAAL,EAAU;IAAEY,GAAG,EAAEhB;EAAP,CAAV,CAAN,CAAP;AACD,CAtBM;AAuBPH,WAAW,CAACoB,WAAZ,GAA0B,aAA1B","names":["React","mapOpenedRows","Tbody","BodyWrapper","_a","mappedRows","tbodyRef","rows","onCollapse","headerRows","props","some","row","hasOwnProperty","Fragment","children","map","oneRow","key","Object","isExpanded","isOpen","ref","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/BodyWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IRow, IRowData, IExtraData, IHeaderRow } from './TableTypes';\nimport { mapOpenedRows } from './utils/headerUtils';\nimport { Tbody } from '../TableComposable/Tbody';\n\nexport interface BodyWrapperProps {\n  children?: React.ReactNode;\n  mappedRows?: IRow[];\n  rows?: IRow[];\n  onCollapse?: (\n    event: React.MouseEvent,\n    rowIndex: number,\n    isOpen: boolean,\n    rowData: IRowData,\n    extraData: IExtraData\n  ) => undefined;\n  tbodyRef?: React.Ref<any> | Function;\n  headerRows?: IHeaderRow[];\n}\n\nexport const BodyWrapper: React.FunctionComponent<BodyWrapperProps> = ({\n  mappedRows,\n  tbodyRef,\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  rows = [] as IRow[],\n  onCollapse,\n  headerRows,\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  ...props\n}: BodyWrapperProps) => {\n  if (mappedRows && mappedRows.some(row => row.hasOwnProperty('parent'))) {\n    return (\n      <React.Fragment>\n        {mapOpenedRows(mappedRows, props.children).map((oneRow, key) => (\n          <Tbody {...props} isExpanded={oneRow.isOpen} key={`tbody-${key}`} ref={tbodyRef as React.Ref<any>}>\n            {oneRow.rows}\n          </Tbody>\n        ))}\n      </React.Fragment>\n    );\n  }\n  return <Tbody {...props} ref={tbodyRef as React.Ref<any>} />;\n};\nBodyWrapper.displayName = 'BodyWrapper';\n"]},"metadata":{},"sourceType":"module"}