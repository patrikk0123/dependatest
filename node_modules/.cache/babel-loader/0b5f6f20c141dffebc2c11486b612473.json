{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nexport class Chip extends React.Component {\n  constructor(props) {\n    super(props);\n    this.span = React.createRef();\n\n    this.setChipStyle = () => ({\n      '--pf-c-chip__text--MaxWidth': this.props.textMaxWidth\n    });\n\n    this.renderOverflowChip = () => {\n      const {\n        children,\n        className,\n        onClick,\n        ouiaId\n      } = this.props;\n      const Component = this.props.component;\n      return React.createElement(Component, Object.assign({\n        onClick: onClick\n      }, this.props.textMaxWidth && Object.assign({\n        style: this.setChipStyle()\n      }, this.props.style), {\n        className: css(styles.chip, styles.modifiers.overflow, className)\n      }, this.props.component === 'button' ? {\n        type: 'button'\n      } : {}, getOUIAProps('OverflowChip', ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)), React.createElement(\"span\", {\n        className: css(styles.chipText)\n      }, children));\n    };\n\n    this.renderChip = randomId => {\n      const {\n        children,\n        tooltipPosition\n      } = this.props;\n\n      if (this.state.isTooltipVisible) {\n        return React.createElement(Tooltip, {\n          position: tooltipPosition,\n          content: children\n        }, this.renderInnerChip(randomId));\n      }\n\n      return this.renderInnerChip(randomId);\n    };\n\n    this.state = {\n      isTooltipVisible: false,\n      ouiaStateId: getDefaultOUIAId(Chip.displayName)\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)\n    });\n  }\n\n  renderInnerChip(id) {\n    const {\n      children,\n      className,\n      onClick,\n      closeBtnAriaLabel,\n      isReadOnly,\n      component,\n      ouiaId\n    } = this.props;\n    const Component = component;\n    return React.createElement(Component, Object.assign({}, this.props.textMaxWidth && {\n      style: this.setChipStyle()\n    }, {\n      className: css(styles.chip, className)\n    }, this.state.isTooltipVisible && {\n      tabIndex: 0\n    }, getOUIAProps(Chip.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)), React.createElement(\"span\", {\n      ref: this.span,\n      className: css(styles.chipText),\n      id: id\n    }, children), !isReadOnly && React.createElement(Button, {\n      onClick: onClick,\n      variant: \"plain\",\n      \"aria-label\": closeBtnAriaLabel,\n      id: `remove_${id}`,\n      \"aria-labelledby\": `remove_${id} ${id}`,\n      ouiaId: ouiaId || closeBtnAriaLabel\n    }, React.createElement(TimesIcon, {\n      \"aria-hidden\": \"true\"\n    })));\n  }\n\n  render() {\n    const {\n      isOverflowChip\n    } = this.props;\n    return React.createElement(GenerateId, null, randomId => isOverflowChip ? this.renderOverflowChip() : this.renderChip(this.props.id || randomId));\n  }\n\n}\nChip.displayName = 'Chip';\nChip.defaultProps = {\n  closeBtnAriaLabel: 'close',\n  className: '',\n  isOverflowChip: false,\n  isReadOnly: false,\n  tooltipPosition: 'top',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onClick: _e => undefined,\n  component: 'div'\n};","map":{"version":3,"mappings":"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","names":["React","css","Button","Tooltip","TimesIcon","styles","GenerateId","getOUIAProps","getDefaultOUIAId","Chip","Component","constructor","props","createRef","textMaxWidth","children","className","onClick","ouiaId","component","Object","style","setChipStyle","chip","modifiers","overflow","type","undefined","state","ouiaStateId","chipText","randomId","tooltipPosition","isTooltipVisible","position","content","renderInnerChip","displayName","componentDidMount","setState","Boolean","span","current","offsetWidth","scrollWidth","id","closeBtnAriaLabel","isReadOnly","tabIndex","ref","variant","render","isOverflowChip","renderOverflowChip","renderChip","_e"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Chip/Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button } from '../Button';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport styles from '@patternfly/react-styles/css/components/Chip/chip';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\nexport interface ChipProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** Content rendered inside the chip text */\n  children?: React.ReactNode;\n  /** Aria Label for close button */\n  closeBtnAriaLabel?: string;\n  /** Additional classes added to the chip item */\n  className?: string;\n  /** Flag indicating if the chip is an overflow chip */\n  isOverflowChip?: boolean;\n  /** Flag indicating if chip is read only */\n  isReadOnly?: boolean;\n  /** Function that is called when clicking on the chip close button */\n  onClick?: (event: React.MouseEvent) => void;\n  /** Component that will be used for chip. It is recommended that <button> or <li>  are used when the chip is an overflow chip. */\n  component?: React.ReactNode;\n  /** Position of the tooltip which is displayed if text is longer */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n\n  /** Css property expressed in percentage or any css unit that overrides the default value of the max-width of the chip's text */\n  textMaxWidth?: string;\n}\n\ninterface ChipState {\n  isTooltipVisible: boolean;\n  ouiaStateId: string;\n}\n\nexport class Chip extends React.Component<ChipProps, ChipState> {\n  static displayName = 'Chip';\n  constructor(props: ChipProps) {\n    super(props);\n    this.state = {\n      isTooltipVisible: false,\n      ouiaStateId: getDefaultOUIAId(Chip.displayName)\n    };\n  }\n  span = React.createRef<HTMLSpanElement>();\n\n  static defaultProps: ChipProps = {\n    closeBtnAriaLabel: 'close',\n    className: '',\n    isOverflowChip: false,\n    isReadOnly: false,\n    tooltipPosition: 'top' as 'auto' | 'top' | 'bottom' | 'left' | 'right',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onClick: (_e: React.MouseEvent) => undefined as any,\n    component: 'div' as React.ReactNode\n  };\n\n  componentDidMount() {\n    this.setState({\n      isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)\n    });\n  }\n\n  setChipStyle = () => ({\n    '--pf-c-chip__text--MaxWidth': this.props.textMaxWidth\n  });\n\n  renderOverflowChip = () => {\n    const { children, className, onClick, ouiaId } = this.props;\n    const Component = this.props.component as any;\n    return (\n      <Component\n        onClick={onClick}\n        {...(this.props.textMaxWidth && {\n          style: this.setChipStyle(),\n          ...this.props.style\n        })}\n        className={css(styles.chip, styles.modifiers.overflow, className)}\n        {...(this.props.component === 'button' ? { type: 'button' } : {})}\n        {...getOUIAProps('OverflowChip', ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n      >\n        <span className={css(styles.chipText)}>{children}</span>\n      </Component>\n    );\n  };\n\n  renderInnerChip(id: string) {\n    const { children, className, onClick, closeBtnAriaLabel, isReadOnly, component, ouiaId } = this.props;\n    const Component = component as any;\n    return (\n      <Component\n        {...(this.props.textMaxWidth && {\n          style: this.setChipStyle()\n        })}\n        className={css(styles.chip, className)}\n        {...(this.state.isTooltipVisible && { tabIndex: 0 })}\n        {...getOUIAProps(Chip.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n      >\n        <span ref={this.span} className={css(styles.chipText)} id={id}>\n          {children}\n        </span>\n        {!isReadOnly && (\n          <Button\n            onClick={onClick}\n            variant=\"plain\"\n            aria-label={closeBtnAriaLabel}\n            id={`remove_${id}`}\n            aria-labelledby={`remove_${id} ${id}`}\n            ouiaId={ouiaId || closeBtnAriaLabel}\n          >\n            <TimesIcon aria-hidden=\"true\" />\n          </Button>\n        )}\n      </Component>\n    );\n  }\n\n  renderChip = (randomId: string) => {\n    const { children, tooltipPosition } = this.props;\n    if (this.state.isTooltipVisible) {\n      return (\n        <Tooltip position={tooltipPosition} content={children}>\n          {this.renderInnerChip(randomId)}\n        </Tooltip>\n      );\n    }\n    return this.renderInnerChip(randomId);\n  };\n\n  render() {\n    const { isOverflowChip } = this.props;\n    return (\n      <GenerateId>\n        {randomId => (isOverflowChip ? this.renderOverflowChip() : this.renderChip(this.props.id || randomId))}\n      </GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}