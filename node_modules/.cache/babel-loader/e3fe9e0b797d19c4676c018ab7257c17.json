{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { ContextSelectorToggle } from './ContextSelectorToggle';\nimport { ContextSelectorMenuList } from './ContextSelectorMenuList';\nimport { ContextSelectorContext } from './contextSelectorConstants';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextInput } from '../TextInput';\nimport { InputGroup } from '../InputGroup';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { FocusTrap } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers'; // seed for the aria-labelledby ID\n\nlet currentId = 0;\nconst newId = currentId++;\nexport class ContextSelector extends React.Component {\n  constructor(props) {\n    super(props);\n    this.parentRef = React.createRef();\n    this.popperRef = React.createRef();\n\n    this.onEnterPressed = event => {\n      if (event.charCode === KEY_CODES.ENTER) {\n        this.props.onSearchButtonClick();\n      }\n    };\n\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(ContextSelector.displayName)\n    };\n  }\n\n  render() {\n    const toggleId = `pf-context-selector-toggle-id-${newId}`;\n    const screenReaderLabelId = `pf-context-selector-label-id-${newId}`;\n    const searchButtonId = `pf-context-selector-search-button-id-${newId}`;\n\n    const _a = this.props,\n          {\n      children,\n      className,\n      isOpen,\n      isFullHeight,\n      onToggle,\n      onSelect,\n      screenReaderLabel,\n      toggleText,\n      searchButtonAriaLabel,\n      searchInputValue,\n      onSearchInputChange,\n      searchInputPlaceholder,\n      onSearchButtonClick,\n      menuAppendTo,\n      ouiaId,\n      ouiaSafe,\n      isPlain,\n      isText,\n      footer,\n      disableFocusTrap,\n      isFlipEnabled\n    } = _a,\n          props = __rest(_a, [\"children\", \"className\", \"isOpen\", \"isFullHeight\", \"onToggle\", \"onSelect\", \"screenReaderLabel\", \"toggleText\", \"searchButtonAriaLabel\", \"searchInputValue\", \"onSearchInputChange\", \"searchInputPlaceholder\", \"onSearchButtonClick\", \"menuAppendTo\", \"ouiaId\", \"ouiaSafe\", \"isPlain\", \"isText\", \"footer\", \"disableFocusTrap\", \"isFlipEnabled\"]);\n\n    const menuContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.contextSelectorMenu)\n    }, isFlipEnabled && {\n      style: {\n        position: 'revert'\n      }\n    }), isOpen && React.createElement(FocusTrap, {\n      active: !disableFocusTrap,\n      focusTrapOptions: {\n        clickOutsideDeactivates: true,\n        tabbableOptions: {\n          displayCheck: 'none'\n        }\n      }\n    }, React.createElement(\"div\", {\n      className: css(styles.contextSelectorMenuSearch)\n    }, React.createElement(InputGroup, null, React.createElement(TextInput, {\n      value: searchInputValue,\n      type: \"search\",\n      placeholder: searchInputPlaceholder,\n      onChange: onSearchInputChange,\n      onKeyPress: this.onEnterPressed,\n      \"aria-labelledby\": searchButtonId\n    }), React.createElement(Button, {\n      variant: ButtonVariant.control,\n      \"aria-label\": searchButtonAriaLabel,\n      id: searchButtonId,\n      onClick: onSearchButtonClick\n    }, React.createElement(SearchIcon, {\n      \"aria-hidden\": \"true\"\n    })))), React.createElement(ContextSelectorContext.Provider, {\n      value: {\n        onSelect\n      }\n    }, React.createElement(ContextSelectorMenuList, {\n      isOpen: isOpen\n    }, children)), footer));\n    const popperContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.contextSelector, isOpen && styles.modifiers.expanded, className),\n      ref: this.popperRef\n    }, props), isOpen && menuContainer);\n    const mainContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.contextSelector, isOpen && styles.modifiers.expanded, isFullHeight && styles.modifiers.fullHeight, className),\n      ref: this.parentRef\n    }, getOUIAProps(ContextSelector.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), screenReaderLabel && React.createElement(\"span\", {\n      id: screenReaderLabelId,\n      hidden: true\n    }, screenReaderLabel), React.createElement(ContextSelectorToggle, {\n      onToggle: onToggle,\n      isOpen: isOpen,\n      toggleText: toggleText,\n      id: toggleId,\n      parentRef: menuAppendTo === 'inline' ? this.parentRef : this.popperRef,\n      \"aria-labelledby\": `${screenReaderLabelId} ${toggleId}`,\n      isPlain: isPlain,\n      isText: isText\n    }), isOpen && menuAppendTo === 'inline' && menuContainer);\n\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n\n      return null;\n    };\n\n    return menuAppendTo === 'inline' ? mainContainer : React.createElement(Popper, {\n      trigger: mainContainer,\n      popper: popperContainer,\n      appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo,\n      isVisible: isOpen\n    });\n  }\n\n}\nContextSelector.displayName = 'ContextSelector';\nContextSelector.defaultProps = {\n  children: null,\n  className: '',\n  isOpen: false,\n  onToggle: () => undefined,\n  onSelect: () => undefined,\n  screenReaderLabel: '',\n  toggleText: '',\n  searchButtonAriaLabel: 'Search menu items',\n  searchInputValue: '',\n  onSearchInputChange: () => undefined,\n  searchInputPlaceholder: 'Search',\n  onSearchButtonClick: () => undefined,\n  menuAppendTo: 'inline',\n  ouiaSafe: true,\n  disableFocusTrap: false,\n  footer: null,\n  isPlain: false,\n  isText: false,\n  isFlipEnabled: false\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","SearchIcon","ContextSelectorToggle","ContextSelectorMenuList","ContextSelectorContext","Button","ButtonVariant","TextInput","InputGroup","KEY_CODES","FocusTrap","Popper","getOUIAProps","getDefaultOUIAId","currentId","newId","ContextSelector","Component","constructor","props","createRef","event","charCode","ENTER","onSearchButtonClick","state","ouiaStateId","displayName","render","toggleId","screenReaderLabelId","searchButtonId","_a","children","className","isOpen","isFullHeight","onToggle","onSelect","screenReaderLabel","toggleText","searchButtonAriaLabel","searchInputValue","onSearchInputChange","searchInputPlaceholder","menuAppendTo","ouiaId","ouiaSafe","isPlain","isText","footer","disableFocusTrap","isFlipEnabled","menuContainer","contextSelectorMenu","style","position","active","focusTrapOptions","clickOutsideDeactivates","tabbableOptions","displayCheck","contextSelectorMenuSearch","value","type","placeholder","onChange","onKeyPress","onEnterPressed","variant","control","id","onClick","Provider","popperContainer","contextSelector","modifiers","expanded","ref","popperRef","mainContainer","fullHeight","parentRef","undefined","hidden","getParentElement","current","parentElement","trigger","popper","appendTo","isVisible"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ContextSelector/ContextSelector.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { ContextSelectorToggle } from './ContextSelectorToggle';\nimport { ContextSelectorMenuList } from './ContextSelectorMenuList';\nimport { ContextSelectorContext } from './contextSelectorConstants';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextInput } from '../TextInput';\nimport { InputGroup } from '../InputGroup';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { FocusTrap } from '../../helpers';\nimport { ToggleMenuBaseProps } from '../../helpers/Popper/Popper';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\n// seed for the aria-labelledby ID\nlet currentId = 0;\nconst newId = currentId++;\n\nexport interface ContextSelectorProps extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>, OUIAProps {\n  /** content rendered inside the Context Selector */\n  children?: React.ReactNode;\n  /** Classes applied to root element of Context Selector */\n  className?: string;\n  /** Flag to indicate if Context Selector is opened */\n  isOpen?: boolean;\n  /** Function callback called when user clicks toggle button */\n  onToggle?: (event: any, value: boolean) => void;\n  /** Function callback called when user selects item */\n  onSelect?: (event: any, value: React.ReactNode) => void;\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n  /** Flag indicating that the context selector should expand to full height */\n  isFullHeight?: boolean;\n  /** Labels the Context Selector for Screen Readers */\n  screenReaderLabel?: string;\n  /** Text that appears in the Context Selector Toggle */\n  toggleText?: string;\n  /** Aria-label for the Context Selector Search Button */\n  searchButtonAriaLabel?: string;\n  /** Value in the Search field */\n  searchInputValue?: string;\n  /** Function callback called when user changes the Search Input */\n  onSearchInputChange?: (value: string) => void;\n  /** Search Input placeholder */\n  searchInputPlaceholder?: string;\n  /** Function callback for when Search Button is clicked */\n  onSearchButtonClick?: (event?: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Footer of the context selector */\n  footer?: React.ReactNode;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n  /** Flag to disable focus trap */\n  disableFocusTrap?: boolean;\n  /** Flag for indicating that the context selector menu should automatically flip vertically when\n   * it reaches the boundary. This prop can only be used when the context selector component is not\n   * appended inline, e.g. `menuAppendTo=\"parent\"`\n   */\n  isFlipEnabled?: boolean;\n}\n\nexport class ContextSelector extends React.Component<ContextSelectorProps, { ouiaStateId: string }> {\n  static displayName = 'ContextSelector';\n  static defaultProps: ContextSelectorProps = {\n    children: null as React.ReactNode,\n    className: '',\n    isOpen: false,\n    onToggle: () => undefined as any,\n    onSelect: () => undefined as any,\n    screenReaderLabel: '',\n    toggleText: '',\n    searchButtonAriaLabel: 'Search menu items',\n    searchInputValue: '',\n    onSearchInputChange: () => undefined as any,\n    searchInputPlaceholder: 'Search',\n    onSearchButtonClick: () => undefined as any,\n    menuAppendTo: 'inline',\n    ouiaSafe: true,\n    disableFocusTrap: false,\n    footer: null as React.ReactNode,\n    isPlain: false,\n    isText: false,\n    isFlipEnabled: false\n  };\n  constructor(props: ContextSelectorProps) {\n    super(props);\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(ContextSelector.displayName)\n    };\n  }\n\n  parentRef: React.RefObject<HTMLDivElement> = React.createRef();\n  popperRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  onEnterPressed = (event: any) => {\n    if (event.charCode === KEY_CODES.ENTER) {\n      this.props.onSearchButtonClick();\n    }\n  };\n\n  render() {\n    const toggleId = `pf-context-selector-toggle-id-${newId}`;\n    const screenReaderLabelId = `pf-context-selector-label-id-${newId}`;\n    const searchButtonId = `pf-context-selector-search-button-id-${newId}`;\n    const {\n      children,\n      className,\n      isOpen,\n      isFullHeight,\n      onToggle,\n      onSelect,\n      screenReaderLabel,\n      toggleText,\n      searchButtonAriaLabel,\n      searchInputValue,\n      onSearchInputChange,\n      searchInputPlaceholder,\n      onSearchButtonClick,\n      menuAppendTo,\n      ouiaId,\n      ouiaSafe,\n      isPlain,\n      isText,\n      footer,\n      disableFocusTrap,\n      isFlipEnabled,\n      ...props\n    } = this.props;\n    const menuContainer = (\n      <div\n        className={css(styles.contextSelectorMenu)}\n        // This removes the `position: absolute`styling from the `.pf-c-context-selector__menu`\n        // allowing the menu to flip correctly\n        {...(isFlipEnabled && { style: { position: 'revert' } })}\n      >\n        {isOpen && (\n          <FocusTrap\n            active={!disableFocusTrap}\n            focusTrapOptions={{ clickOutsideDeactivates: true, tabbableOptions: { displayCheck: 'none' } }}\n          >\n            <div className={css(styles.contextSelectorMenuSearch)}>\n              <InputGroup>\n                <TextInput\n                  value={searchInputValue}\n                  type=\"search\"\n                  placeholder={searchInputPlaceholder}\n                  onChange={onSearchInputChange}\n                  onKeyPress={this.onEnterPressed}\n                  aria-labelledby={searchButtonId}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  aria-label={searchButtonAriaLabel}\n                  id={searchButtonId}\n                  onClick={onSearchButtonClick}\n                >\n                  <SearchIcon aria-hidden=\"true\" />\n                </Button>\n              </InputGroup>\n            </div>\n            <ContextSelectorContext.Provider value={{ onSelect }}>\n              <ContextSelectorMenuList isOpen={isOpen}>{children}</ContextSelectorMenuList>\n            </ContextSelectorContext.Provider>\n            {footer}\n          </FocusTrap>\n        )}\n      </div>\n    );\n    const popperContainer = (\n      <div\n        className={css(styles.contextSelector, isOpen && styles.modifiers.expanded, className)}\n        ref={this.popperRef}\n        {...props}\n      >\n        {isOpen && menuContainer}\n      </div>\n    );\n    const mainContainer = (\n      <div\n        className={css(\n          styles.contextSelector,\n          isOpen && styles.modifiers.expanded,\n          isFullHeight && styles.modifiers.fullHeight,\n          className\n        )}\n        ref={this.parentRef}\n        {...getOUIAProps(ContextSelector.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n        {...props}\n      >\n        {screenReaderLabel && (\n          <span id={screenReaderLabelId} hidden>\n            {screenReaderLabel}\n          </span>\n        )}\n        <ContextSelectorToggle\n          onToggle={onToggle}\n          isOpen={isOpen}\n          toggleText={toggleText}\n          id={toggleId}\n          parentRef={menuAppendTo === 'inline' ? this.parentRef : this.popperRef}\n          aria-labelledby={`${screenReaderLabelId} ${toggleId}`}\n          isPlain={isPlain}\n          isText={isText}\n        />\n        {isOpen && menuAppendTo === 'inline' && menuContainer}\n      </div>\n    );\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n      return null;\n    };\n    return menuAppendTo === 'inline' ? (\n      mainContainer\n    ) : (\n      <Popper\n        trigger={mainContainer}\n        popper={popperContainer}\n        appendTo={menuAppendTo === 'parent' ? getParentElement() : menuAppendTo}\n        isVisible={isOpen}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}