{"ast":null,"code":"import getVariation from './getVariation';\nimport { variationPlacements, basePlacements, placements as allPlacements } from '../enums';\nimport detectOverflow from './detectOverflow';\nimport getBasePlacement from './getBasePlacement';\n/* :: type OverflowsMap = { [ComputedPlacement]: number }; */\n\n/* ;; type OverflowsMap = { [key in ComputedPlacement]: number }; */\n\n/**\n * @param state\n * @param options\n */\n\nexport default function computeAutoPlacement(state) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    placement,\n    boundary,\n    rootBoundary,\n    padding,\n    flipVariations,\n    allowedAutoPlacements = allPlacements\n  } = options;\n  const variation = getVariation(placement);\n  const placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(placement => getVariation(placement) === variation) : basePlacements; // $FlowFixMe\n\n  let allowedPlacements = placements.filter(placement => allowedAutoPlacements.indexOf(placement) >= 0);\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n\n    if (false\n    /* __DEV__*/\n    ) {\n      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' '));\n    }\n  } // $FlowFixMe: Flow seems to have problems with two array unions...\n\n\n  const overflows = allowedPlacements.reduce((acc, placement) => {\n    acc[placement] = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort((a, b) => overflows[a] - overflows[b]);\n}","map":{"version":3,"mappings":"AAGA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,SAASC,mBAAT,EAA8BC,cAA9B,EAA8CC,UAAU,IAAIC,aAA5D,QAAiF,UAAjF;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAWA;;AAEA;;AAEA;;;;;AAIA,eAAc,SAAUC,oBAAV,CAA+BC,KAA/B,EAA2E;EAAA,IAArBC,OAAqB,uEAAF,EAAE;EACvF,MAAM;IAAEC,SAAF;IAAaC,QAAb;IAAuBC,YAAvB;IAAqCC,OAArC;IAA8CC,cAA9C;IAA8DC,qBAAqB,GAAGX;EAAtF,IAAwGK,OAA9G;EAEA,MAAMO,SAAS,GAAGhB,YAAY,CAACU,SAAD,CAA9B;EAEA,MAAMP,UAAU,GAAGa,SAAS,GACxBF,cAAc,GACZb,mBADY,GAEZA,mBAAmB,CAACgB,MAApB,CAA2BP,SAAS,IAAIV,YAAY,CAACU,SAAD,CAAZ,KAA4BM,SAApE,CAHsB,GAIxBd,cAJJ,CALuF,CAWvF;;EACA,IAAIgB,iBAAiB,GAAGf,UAAU,CAACc,MAAX,CAAkBP,SAAS,IAAIK,qBAAqB,CAACI,OAAtB,CAA8BT,SAA9B,KAA4C,CAA3E,CAAxB;;EAEA,IAAIQ,iBAAiB,CAACE,MAAlB,KAA6B,CAAjC,EAAoC;IAClCF,iBAAiB,GAAGf,UAApB;;IAEA,IAAI;IAAM;IAAV,EAAwB;MACtBkB,OAAO,CAACC,KAAR,CACE,CACE,8DADF,EAEE,iEAFF,EAGE,4BAHF,EAIE,6DAJF,EAKE,2BALF,EAMEC,IANF,CAMO,GANP,CADF;IASD;EACF,CA5BsF,CA8BvF;;;EACA,MAAMC,SAAS,GAAiBN,iBAAiB,CAACO,MAAlB,CAAyB,CAACC,GAAD,EAAMhB,SAAN,KAAmB;IAC1EgB,GAAG,CAAChB,SAAD,CAAH,GAAiBL,cAAc,CAACG,KAAD,EAAQ;MACrCE,SADqC;MAErCC,QAFqC;MAGrCC,YAHqC;MAIrCC;IAJqC,CAAR,CAAd,CAKdP,gBAAgB,CAACI,SAAD,CALF,CAAjB;IAOA,OAAOgB,GAAP;EACD,CAT+B,EAS7B,EAT6B,CAAhC;EAWA,OAAOC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,EAAuBK,IAAvB,CAA4B,CAACC,CAAD,EAAIC,CAAJ,KAAUP,SAAS,CAACM,CAAD,CAAT,GAAeN,SAAS,CAACO,CAAD,CAA9D,CAAP;AACD","names":["getVariation","variationPlacements","basePlacements","placements","allPlacements","detectOverflow","getBasePlacement","computeAutoPlacement","state","options","placement","boundary","rootBoundary","padding","flipVariations","allowedAutoPlacements","variation","filter","allowedPlacements","indexOf","length","console","error","join","overflows","reduce","acc","Object","keys","sort","a","b"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/utils/computeAutoPlacement.ts"],"sourcesContent":["// @ts-nocheck\nimport { State, Padding } from '../types';\nimport { Placement, ComputedPlacement, Boundary, RootBoundary } from '../enums';\nimport getVariation from './getVariation';\nimport { variationPlacements, basePlacements, placements as allPlacements } from '../enums';\nimport detectOverflow from './detectOverflow';\nimport getBasePlacement from './getBasePlacement';\n\ninterface Options {\n  placement: Placement;\n  padding: Padding;\n  boundary: Boundary;\n  rootBoundary: RootBoundary;\n  flipVariations: boolean;\n  allowedAutoPlacements?: Placement[];\n}\n\n/* :: type OverflowsMap = { [ComputedPlacement]: number }; */\n\n/* ;; type OverflowsMap = { [key in ComputedPlacement]: number }; */\n\n/**\n * @param state\n * @param options\n */\nexport default function computeAutoPlacement(state: Partial<State>, options: Options = {}): ComputedPlacement[] {\n  const { placement, boundary, rootBoundary, padding, flipVariations, allowedAutoPlacements = allPlacements } = options;\n\n  const variation = getVariation(placement);\n\n  const placements = variation\n    ? flipVariations\n      ? variationPlacements\n      : variationPlacements.filter(placement => getVariation(placement) === variation)\n    : basePlacements;\n\n  // $FlowFixMe\n  let allowedPlacements = placements.filter(placement => allowedAutoPlacements.indexOf(placement) >= 0);\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n\n    if (false /* __DEV__*/) {\n      console.error(\n        [\n          'Popper: The `allowedAutoPlacements` option did not allow any',\n          'placements. Ensure the `placement` option matches the variation',\n          'of the allowed placements.',\n          'For example, \"auto\" cannot be used to allow \"bottom-start\".',\n          'Use \"auto-start\" instead.'\n        ].join(' ')\n      );\n    }\n  }\n\n  // $FlowFixMe: Flow seems to have problems with two array unions...\n  const overflows: OverflowsMap = allowedPlacements.reduce((acc, placement) => {\n    acc[placement] = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      padding\n    })[getBasePlacement(placement)];\n\n    return acc;\n  }, {});\n\n  return Object.keys(overflows).sort((a, b) => overflows[a] - overflows[b]);\n}\n"]},"metadata":{},"sourceType":"module"}