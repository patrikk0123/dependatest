{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport { Badge } from '../Badge';\nexport const BadgeToggle = _a => {\n  var {\n    id = '',\n    children = null,\n    badgeProps = {\n      isRead: true\n    },\n    className = '',\n    isOpen = false,\n    'aria-label': ariaLabel = 'Actions',\n    parentRef = null,\n    getMenuRef = null,\n    isActive = false,\n    isPlain = null,\n    isDisabled = false,\n    bubbleEvent = false,\n    onToggle = () => undefined,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref\n  } = _a,\n      // Types of Ref are different for React.FunctionComponent vs React.Component\n  props = __rest(_a, [\"id\", \"children\", \"badgeProps\", \"className\", \"isOpen\", 'aria-label', \"parentRef\", \"getMenuRef\", \"isActive\", \"isPlain\", \"isDisabled\", \"bubbleEvent\", \"onToggle\", \"ref\"]);\n\n  return React.createElement(Toggle, Object.assign({\n    id: id,\n    className: className,\n    isOpen: isOpen,\n    \"aria-label\": ariaLabel,\n    parentRef: parentRef,\n    getMenuRef: getMenuRef,\n    isActive: isActive,\n    isPlain: isPlain || true,\n    isDisabled: isDisabled,\n    onToggle: onToggle,\n    bubbleEvent: bubbleEvent\n  }, props), React.createElement(Badge, Object.assign({}, badgeProps), children, React.createElement(\"span\", {\n    className: css(styles.dropdownToggleIcon)\n  }, React.createElement(CaretDownIcon, null))));\n};\nBadgeToggle.displayName = 'BadgeToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,2DAAnB;AAEA,OAAOC,aAAP,MAA0B,wDAA1B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,KAAT,QAAkC,UAAlC;AAiCA,OAAO,MAAMC,WAAW,GAA+CC,EAAD,IAiB/C;MAjBgD;IACrEC,EAAE,GAAG,EADgE;IAErEC,QAAQ,GAAG,IAF0D;IAGrEC,UAAU,GAAG;MAAEC,MAAM,EAAE;IAAV,CAHwD;IAIrEC,SAAS,GAAG,EAJyD;IAKrEC,MAAM,GAAG,KAL4D;IAMrE,cAAcC,SAAS,GAAG,SAN2C;IAOrEC,SAAS,GAAG,IAPyD;IAQrEC,UAAU,GAAG,IARwD;IASrEC,QAAQ,GAAG,KAT0D;IAUrEC,OAAO,GAAG,IAV2D;IAWrEC,UAAU,GAAG,KAXwD;IAYrEC,WAAW,GAAG,KAZuD;IAarEC,QAAQ,GAAG,MAAMC,SAboD;IAcrE;IACAC;EAfqE,IAelEhB;MAAE;EACFiB,KAAK,cAhB6D,uKAgB7D;;EACc,OACtBxB,oBAACI,MAAD,EAAOqB;IACLjB,EAAE,EAAEA,EADC;IAELI,SAAS,EAAEA,SAFN;IAGLC,MAAM,EAAEA,MAHH;IAGS,cACFC,SAJP;IAKLC,SAAS,EAAEA,SALN;IAMLC,UAAU,EAAEA,UANP;IAOLC,QAAQ,EAAEA,QAPL;IAQLC,OAAO,EAAEA,OAAO,IAAI,IARf;IASLC,UAAU,EAAEA,UATP;IAULE,QAAQ,EAAEA,QAVL;IAWLD,WAAW,EAAEA;EAXR,GAYDI,KAZC,CAAP,EAcExB,oBAACK,KAAD,EAAMoB,kBAAKf,UAAL,CAAN,EACGD,QADH,EAEET;IAAMY,SAAS,EAAEX,GAAG,CAACC,MAAM,CAACwB,kBAAR;EAApB,GACE1B,oBAACG,aAAD,EAAc,IAAd,CADF,CAFF,CAdF,CADsB;AAsBvB,CAvCM;AAwCPG,WAAW,CAACqB,WAAZ,GAA0B,aAA1B","names":["React","css","styles","CaretDownIcon","Toggle","Badge","BadgeToggle","_a","id","children","badgeProps","isRead","className","isOpen","ariaLabel","parentRef","getMenuRef","isActive","isPlain","isDisabled","bubbleEvent","onToggle","undefined","ref","props","Object","dropdownToggleIcon","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Dropdown/BadgeToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Dropdown/dropdown';\nimport { DropdownToggleProps } from './DropdownToggle';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { Toggle } from './Toggle';\nimport { Badge, BadgeProps } from '../Badge';\n\nexport interface BadgeToggleProps extends DropdownToggleProps {\n  /** HTML ID of dropdown toggle */\n  id?: string;\n  /** Anything which can be rendered as dropdown toggle */\n  children?: React.ReactNode;\n  /** Badge specific properties */\n  badgeProps?: BadgeProps;\n  /** Classess applied to root element of dropdown toggle */\n  className?: string;\n  /** Flag to indicate if menu is opened */\n  isOpen?: boolean;\n  /** Label Toggle button */\n  'aria-label'?: string;\n  /** Callback called when toggle is clicked */\n  onToggle?: (isOpen: boolean) => void;\n  /** Element which wraps toggle */\n  parentRef?: any;\n  /** The menu element */\n  getMenuRef?: () => HTMLElement;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Disables the dropdown toggle */\n  isDisabled?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Type to put on the button */\n  type?: 'button' | 'submit' | 'reset';\n  /** Allows selecting toggle to select parent */\n  bubbleEvent?: boolean;\n}\n\nexport const BadgeToggle: React.FunctionComponent<BadgeToggleProps> = ({\n  id = '',\n  children = null,\n  badgeProps = { isRead: true },\n  className = '',\n  isOpen = false,\n  'aria-label': ariaLabel = 'Actions',\n  parentRef = null,\n  getMenuRef = null,\n  isActive = false,\n  isPlain = null,\n  isDisabled = false,\n  bubbleEvent = false,\n  onToggle = () => undefined as void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  ref, // Types of Ref are different for React.FunctionComponent vs React.Component\n  ...props\n}: BadgeToggleProps) => (\n  <Toggle\n    id={id}\n    className={className}\n    isOpen={isOpen}\n    aria-label={ariaLabel}\n    parentRef={parentRef}\n    getMenuRef={getMenuRef}\n    isActive={isActive}\n    isPlain={isPlain || true}\n    isDisabled={isDisabled}\n    onToggle={onToggle}\n    bubbleEvent={bubbleEvent}\n    {...props}\n  >\n    <Badge {...badgeProps}>\n      {children}\n      <span className={css(styles.dropdownToggleIcon)}>\n        <CaretDownIcon />\n      </span>\n    </Badge>\n  </Toggle>\n);\nBadgeToggle.displayName = 'BadgeToggle';\n"]},"metadata":{},"sourceType":"module"}