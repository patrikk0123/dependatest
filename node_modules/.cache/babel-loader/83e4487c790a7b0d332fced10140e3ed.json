{"ast":null,"code":"import _toConsumableArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { scopeColTransformer, emptyCol, mapProps, emptyTD, parentId } from './transformers';\nimport { selectable, cellActions, collapsible, expandedRow, editable, favoritable, sortableFavorites } from './decorators';\nimport { defaultTitle } from './formatters';\n/**\n * Generate header with transforms and formatters from custom header object.\n *\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @returns {*} header, label, transforms: Array, formatters: Array.\n */\n\nvar generateHeader = function generateHeader(_ref, title) {\n  var origTransforms = _ref.transforms,\n      origFormatters = _ref.formatters,\n      columnTransforms = _ref.columnTransforms,\n      header = _ref.header;\n  return Object.assign(Object.assign({}, header), {\n    label: title,\n    transforms: [scopeColTransformer, emptyCol].concat(_toConsumableArray(origTransforms || []), _toConsumableArray(columnTransforms || []), _toConsumableArray(header && header.hasOwnProperty('transforms') ? header.transforms : [])),\n    formatters: [].concat(_toConsumableArray(origFormatters || []), _toConsumableArray(header && header.hasOwnProperty('formatters') ? header.formatters : []))\n  });\n};\n/**\n * Function to generate cell for header config to change look of each cell.\n *\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @param {*} extra - extra\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\n\n\nvar generateCell = function generateCell(_ref2, // eslint-disable-next-line @typescript-eslint/no-unused-vars\nextra) {\n  var cellFormatters = _ref2.cellFormatters,\n      cellTransforms = _ref2.cellTransforms,\n      columnTransforms = _ref2.columnTransforms,\n      cell = _ref2.cell;\n  return Object.assign(Object.assign({}, cell), {\n    transforms: [].concat(_toConsumableArray(cellTransforms || []), _toConsumableArray(columnTransforms || []), _toConsumableArray(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []), [mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n    ]),\n    formatters: [defaultTitle].concat(_toConsumableArray(cellFormatters || []), _toConsumableArray(cell && cell.hasOwnProperty('formatters') ? cell.formatters : []))\n  });\n};\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n *\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cells as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\n\n\nvar mapHeader = function mapHeader(column, extra, key) {\n  var title = column.hasOwnProperty('title') ? column.title : column;\n  var dataLabel = \"column-\".concat(key);\n\n  if (column.hasOwnProperty('dataLabel')) {\n    dataLabel = column.dataLabel;\n  } else if (typeof title === 'string') {\n    dataLabel = title;\n  }\n\n  for (var _len = arguments.length, props = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    props[_key - 3] = arguments[_key];\n  }\n\n  return {\n    property: typeof title === 'string' && title.toLowerCase().trim().replace(/\\s/g, '-') || \"column-\".concat(key),\n    extraParams: extra,\n    data: column.data,\n    header: generateHeader(column, title),\n    cell: generateCell(column, extra),\n    props: Object.assign(Object.assign({\n      'data-label': dataLabel,\n      'data-key': key\n    }, column.hasOwnProperty('props') ? column.props : {}), props)\n  };\n};\n/**\n * Function to define select cell in first column.\n *\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nvar selectableTransforms = function selectableTransforms(_ref3) {\n  var onSelect = _ref3.onSelect,\n      canSelectAll = _ref3.canSelectAll;\n  return _toConsumableArray(onSelect ? [{\n    title: '',\n    transforms: canSelectAll && [selectable] || null,\n    cellTransforms: [selectable]\n  }] : []);\n};\n/**\n * Function to define favorites cell in first column (or second column if rows are also selectable).\n *\n * @param {*} extraObject with onFavorite callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nvar favoritesTransforms = function favoritesTransforms(_ref4) {\n  var onFavorite = _ref4.onFavorite,\n      onSort = _ref4.onSort,\n      sortBy = _ref4.sortBy,\n      canSortFavorites = _ref4.canSortFavorites,\n      firstUserColumnIndex = _ref4.firstUserColumnIndex;\n  return _toConsumableArray(onFavorite ? [{\n    title: '',\n    transforms: onSort && canSortFavorites ? [sortableFavorites({\n      onSort: onSort,\n      // favorites should be just before the first user-defined column\n      columnIndex: firstUserColumnIndex - 1,\n      sortBy: sortBy\n    })] : [emptyTD],\n    cellTransforms: [favoritable]\n  }] : []);\n};\n/**\n * Function to define actions in last column.\n *\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nvar actionsTransforms = function actionsTransforms(_ref5) {\n  var actions = _ref5.actions,\n      actionResolver = _ref5.actionResolver,\n      areActionsDisabled = _ref5.areActionsDisabled;\n  return _toConsumableArray(actionResolver || actions ? [{\n    title: '',\n    transforms: [emptyTD],\n    cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n  }] : []);\n};\n/**\n * Function to define collapsible in first column.\n *\n * @param {*} header info with cellTransforms.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\n\n\nvar collapsibleTransforms = function collapsibleTransforms(header, _ref6) {\n  var onCollapse = _ref6.onCollapse,\n      canCollapseAll = _ref6.canCollapseAll;\n  return _toConsumableArray(onCollapse ? [{\n    title: '',\n    transforms: canCollapseAll && [collapsible] || null,\n    cellTransforms: [collapsible, expandedRow(header.length)]\n  }] : []);\n};\n/**\n * Function to add additional cell transforms to object.\n *\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\n\n\nvar addAdditionalCellTranforms = function addAdditionalCellTranforms(cell, additional) {\n  return Object.assign(Object.assign({}, cell.hasOwnProperty('title') ? cell : {\n    title: cell\n  }), {\n    cellTransforms: [].concat(_toConsumableArray(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), [additional])\n  });\n};\n/**\n * Function to change expanded row with additional transforms.\n *\n * @param {*} header info with cellTransforms.\n * @param {*} extra object with onCollapse/onExpand function.\n */\n\n\nvar expandContent = function expandContent(header, extra) {\n  if (!extra.onCollapse && !extra.onExpand) {\n    return header;\n  }\n\n  return header.map(function (cell) {\n    var parentIdCell = addAdditionalCellTranforms(cell, parentId);\n    return addAdditionalCellTranforms(parentIdCell, expandedRow(header.length));\n  });\n};\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n *\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\n\n\nexport var mapOpenedRows = function mapOpenedRows(rows, children) {\n  return rows.reduce(function (acc, curr, key) {\n    if (curr.hasOwnProperty('parent')) {\n      var parent = acc.length > 0 && acc[acc.length - 1];\n\n      if (parent) {\n        acc[acc.length - 1].rows = [].concat(_toConsumableArray(acc[acc.length - 1].rows), [children[key]]);\n\n        if (curr.hasOwnProperty('compoundParent')) {\n          // if this is compound expand, check for any open child cell\n          acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some(function (oneRow) {\n            return oneRow.props.rowData.cells.some(function (oneCell) {\n              return oneCell.props && oneCell.props.isOpen;\n            });\n          });\n        }\n      }\n    } else {\n      acc = [].concat(_toConsumableArray(acc), [Object.assign(Object.assign({}, curr), {\n        rows: [children[key]]\n      })]);\n    }\n\n    return acc;\n  }, []);\n};\n\nvar rowEditTransforms = function rowEditTransforms(_ref7) {\n  var onRowEdit = _ref7.onRowEdit;\n  return _toConsumableArray(onRowEdit ? [{\n    title: '',\n    cellTransforms: [editable]\n  }] : []);\n};\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n *\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @returns {*} expected object for react tabular table.\n */\n\n\nexport var calculateColumns = function calculateColumns(headerRows, extra) {\n  return headerRows && [].concat(_toConsumableArray(collapsibleTransforms(headerRows, extra)), _toConsumableArray(selectableTransforms(extra)), _toConsumableArray(favoritesTransforms(extra)), _toConsumableArray(expandContent(headerRows, extra)), _toConsumableArray(rowEditTransforms(extra)), _toConsumableArray(actionsTransforms(extra))).map(function (oneCol, key) {\n    return Object.assign({}, mapHeader(oneCol, extra, key));\n  });\n};","map":{"version":3,"mappings":"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","names":["scopeColTransformer","emptyCol","mapProps","emptyTD","parentId","selectable","cellActions","collapsible","expandedRow","editable","favoritable","sortableFavorites","defaultTitle","generateHeader","title","origTransforms","transforms","origFormatters","formatters","columnTransforms","header","Object","label","hasOwnProperty","generateCell","extra","cellFormatters","cellTransforms","cell","mapHeader","column","key","dataLabel","props","property","toLowerCase","trim","replace","extraParams","data","selectableTransforms","onSelect","canSelectAll","favoritesTransforms","onFavorite","onSort","sortBy","canSortFavorites","firstUserColumnIndex","columnIndex","actionsTransforms","actions","actionResolver","areActionsDisabled","collapsibleTransforms","onCollapse","canCollapseAll","length","addAdditionalCellTranforms","additional","expandContent","onExpand","map","parentIdCell","mapOpenedRows","rows","children","reduce","acc","curr","parent","isOpen","some","oneRow","rowData","cells","oneCell","rowEditTransforms","onRowEdit","calculateColumns","headerRows","oneCol"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/utils/headerUtils.tsx"],"sourcesContent":["import { scopeColTransformer, emptyCol, mapProps, emptyTD, parentId } from './transformers';\nimport {\n  selectable,\n  cellActions,\n  collapsible,\n  expandedRow,\n  editable,\n  favoritable,\n  sortableFavorites\n} from './decorators';\nimport { defaultTitle } from './formatters';\nimport {\n  ICell,\n  IRow,\n  IActions,\n  IActionsResolver,\n  IAreActionsDisabled,\n  OnSelect,\n  OnCollapse,\n  OnRowEdit,\n  OnFavorite,\n  OnSort,\n  ISortBy\n} from '../TableTypes';\n\n/**\n * Generate header with transforms and formatters from custom header object.\n *\n * @param {*} header with transforms, formatters, columnTransforms, and rest of header object.\n * @param {*} title to be used as label in header config.\n * @returns {*} header, label, transforms: Array, formatters: Array.\n */\nconst generateHeader = (\n  { transforms: origTransforms, formatters: origFormatters, columnTransforms, header }: ICell,\n  title?: string | ICell\n) => ({\n  ...header,\n  label: title,\n  transforms: [\n    scopeColTransformer,\n    emptyCol,\n    ...(origTransforms || []),\n    ...(columnTransforms || []),\n    ...(header && header.hasOwnProperty('transforms') ? header.transforms : [])\n  ],\n  formatters: [...(origFormatters || []), ...(header && header.hasOwnProperty('formatters') ? header.formatters : [])]\n});\n\ninterface ICustomCell {\n  cellFormatters?: ICell['cellFormatters'];\n  cellTransforms?: ICell['cellTransforms'];\n  columnTransforms?: ICell['columnTransforms'];\n  cell?: ICell;\n}\n\n/**\n * Function to generate cell for header config to change look of each cell.\n *\n * @param {*} customCell config with cellFormatters, cellTransforms, columnTransforms and rest of cell config.\n * @param {*} extra - extra\n * @returns {*} cell, transforms: Array, formatters: Array.\n */\nconst generateCell = (\n  { cellFormatters, cellTransforms, columnTransforms, cell }: ICustomCell,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  extra: any\n) => ({\n  ...cell,\n  transforms: [\n    ...(cellTransforms || []),\n    ...(columnTransforms || []),\n    ...(cell && cell.hasOwnProperty('transforms') ? cell.transforms : []),\n    mapProps // This transform should be applied last so that props that are manually defined at the cell level will override all other transforms.\n  ],\n  formatters: [\n    defaultTitle,\n    ...(cellFormatters || []),\n    ...(cell && cell.hasOwnProperty('formatters') ? cell.formatters : [])\n  ]\n});\n\n/**\n * Function to map custom simple object properties to expected format with property, header, cell, extra params\n * and props.\n *\n * @param {*} column to be shown in header - either string or object with title, transformers and formatters (for cells as well).\n * @param {*} extra additional object with callbacks for specific formatters.\n * @param {*} key cell key to be shown in data-key.\n * @param {*} props additional props for each cell.\n * @returns {*} object with property, extraParams, header, cell and props.\n */\nconst mapHeader = (column: ICell, extra: any, key: number, ...props: any) => {\n  const title = (column.hasOwnProperty('title') ? column.title : column) as string | ICell;\n  let dataLabel: string | ICell = `column-${key}`;\n  if (column.hasOwnProperty('dataLabel')) {\n    dataLabel = column.dataLabel;\n  } else if (typeof title === 'string') {\n    dataLabel = title;\n  }\n\n  return {\n    property:\n      (typeof title === 'string' &&\n        title\n          .toLowerCase()\n          .trim()\n          .replace(/\\s/g, '-')) ||\n      `column-${key}`,\n    extraParams: extra,\n    data: column.data,\n    header: generateHeader(column, title),\n    cell: generateCell(column, extra),\n    props: {\n      'data-label': dataLabel,\n      'data-key': key,\n      ...(column.hasOwnProperty('props') ? column.props : {}),\n      ...props\n    }\n  };\n};\n\nexport interface ISelectTransform {\n  onSelect: OnSelect;\n  canSelectAll: boolean;\n}\n\n/**\n * Function to define select cell in first column.\n *\n * @param {*} extraObject with onSelect callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst selectableTransforms = ({ onSelect, canSelectAll }: ISelectTransform) => [\n  ...(onSelect\n    ? [\n        {\n          title: '',\n          transforms: (canSelectAll && [selectable]) || null,\n          cellTransforms: [selectable]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to define favorites cell in first column (or second column if rows are also selectable).\n *\n * @param {*} extraObject with onFavorite callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst favoritesTransforms = ({\n  onFavorite,\n  onSort,\n  sortBy,\n  canSortFavorites,\n  firstUserColumnIndex\n}: {\n  onFavorite: OnFavorite;\n  onSort: OnSort;\n  sortBy: ISortBy;\n  canSortFavorites: boolean;\n  firstUserColumnIndex: number;\n}): any => [\n  ...(onFavorite\n    ? [\n        {\n          title: '',\n          transforms:\n            onSort && canSortFavorites\n              ? [\n                  sortableFavorites({\n                    onSort,\n                    // favorites should be just before the first user-defined column\n                    columnIndex: firstUserColumnIndex - 1,\n                    sortBy\n                  })\n                ]\n              : [emptyTD],\n          cellTransforms: [favoritable]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to define actions in last column.\n *\n * @param {*} extraObject with actions array.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst actionsTransforms = ({\n  actions,\n  actionResolver,\n  areActionsDisabled\n}: {\n  actions: IActions;\n  actionResolver: IActionsResolver;\n  areActionsDisabled: IAreActionsDisabled;\n}) => [\n  ...(actionResolver || actions\n    ? [\n        {\n          title: '',\n          transforms: [emptyTD],\n          cellTransforms: [cellActions(actions, actionResolver, areActionsDisabled)]\n        }\n      ]\n    : [])\n];\n\nexport interface ICollapseTranform {\n  onCollapse: OnCollapse;\n  canCollapseAll: boolean;\n}\n\n/**\n * Function to define collapsible in first column.\n *\n * @param {*} header info with cellTransforms.\n * @param {*}  extraObject with onCollapse callback.\n * @returns {*} object with empty title, tranforms - Array, cellTransforms - Array.\n */\nconst collapsibleTransforms = (header: (ICell | string)[], { onCollapse, canCollapseAll }: ICollapseTranform) => [\n  ...(onCollapse\n    ? [\n        {\n          title: '',\n          transforms: (canCollapseAll && [collapsible]) || null,\n          cellTransforms: [collapsible, expandedRow(header.length)]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to add additional cell transforms to object.\n *\n * @param {*} cell to be expanded.\n * @param {*} additional thing to be added to cellTransforms.\n * @returns {*} object with title from cell and cellTransforms with additional in.\n */\nconst addAdditionalCellTranforms = (cell: ICell, additional: any) => ({\n  ...(cell.hasOwnProperty('title') ? cell : { title: cell }),\n  cellTransforms: [...(cell.hasOwnProperty('cellTransforms') ? cell.cellTransforms : []), additional]\n});\n\n/**\n * Function to change expanded row with additional transforms.\n *\n * @param {*} header info with cellTransforms.\n * @param {*} extra object with onCollapse/onExpand function.\n */\nconst expandContent = (header: (ICell | string)[], extra: any) => {\n  if (!extra.onCollapse && !extra.onExpand) {\n    return header;\n  }\n  return header.map((cell: ICell | string) => {\n    const parentIdCell = addAdditionalCellTranforms(cell as ICell, parentId);\n    return addAdditionalCellTranforms(parentIdCell as ICell, expandedRow(header.length));\n  });\n};\n\n/**\n * Function to join parent and their children so they can be rendered in tbody.\n *\n * @param {*} rows raw data to find out if it's child or parent.\n * @param {*} children data to render (array of react children).\n */\nexport const mapOpenedRows = (rows: IRow[], children: any) =>\n  rows.reduce((acc: any, curr, key) => {\n    if (curr.hasOwnProperty('parent')) {\n      const parent = acc.length > 0 && acc[acc.length - 1];\n      if (parent) {\n        acc[acc.length - 1].rows = [...acc[acc.length - 1].rows, children[key]];\n        if (curr.hasOwnProperty('compoundParent')) {\n          // if this is compound expand, check for any open child cell\n          acc[acc.length - 1].isOpen = acc[acc.length - 1].rows.some((oneRow: IRow) =>\n            oneRow.props.rowData.cells.some((oneCell: ICell) => oneCell.props && oneCell.props.isOpen)\n          );\n        }\n      }\n    } else {\n      acc = [...acc, { ...curr, rows: [children[key]] }];\n    }\n    return acc;\n  }, []) as IRow[];\n\nconst rowEditTransforms = ({ onRowEdit }: { onRowEdit: OnRowEdit }) => [\n  ...(onRowEdit\n    ? [\n        {\n          title: '',\n          cellTransforms: [editable]\n        }\n      ]\n    : [])\n];\n\n/**\n * Function to calculate columns based on custom config.\n * It adds some custom cells for collapse, select, if expanded row and actions.\n *\n * @param {*} headerRows custom object with described table header cells.\n * @param {*} extra object with custom callbacks.\n * @returns {*} expected object for react tabular table.\n */\nexport const calculateColumns = (headerRows: (ICell | string)[], extra: any) =>\n  headerRows &&\n  [\n    ...collapsibleTransforms(headerRows, extra),\n    ...selectableTransforms(extra),\n    ...favoritesTransforms(extra),\n    ...expandContent(headerRows, extra),\n    ...rowEditTransforms(extra),\n    ...actionsTransforms(extra)\n  ].map((oneCol, key) => ({\n    ...mapHeader(oneCol as ICell, extra, key)\n  }));\n"]},"metadata":{},"sourceType":"module"}