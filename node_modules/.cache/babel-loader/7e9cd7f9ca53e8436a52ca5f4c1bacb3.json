{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId } from '../../helpers';\nimport GripVerticalIcon from '@patternfly/react-icons/dist/esm/icons/grip-vertical-icon';\nimport { Button, ButtonVariant } from '../Button';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nexport var DualListSelectorListItemBase = function DualListSelectorListItemBase(_a) {\n  var onOptionSelect = _a.onOptionSelect,\n      orderIndex = _a.orderIndex,\n      children = _a.children,\n      className = _a.className,\n      _a$id = _a.id,\n      id = _a$id === void 0 ? getUniqueId('dual-list-selector-list-item') : _a$id,\n      isSelected = _a.isSelected,\n      innerRef = _a.innerRef,\n      _a$isDraggable = _a.isDraggable,\n      isDraggable = _a$isDraggable === void 0 ? false : _a$isDraggable,\n      isDisabled = _a.isDisabled,\n      _a$draggableButtonAri = _a.draggableButtonAriaLabel,\n      draggableButtonAriaLabel = _a$draggableButtonAri === void 0 ? 'Reorder option' : _a$draggableButtonAri,\n      props = __rest(_a, [\"onOptionSelect\", \"orderIndex\", \"children\", \"className\", \"id\", \"isSelected\", \"innerRef\", \"isDraggable\", \"isDisabled\", \"draggableButtonAriaLabel\"]);\n\n  var ref = innerRef || React.useRef(null);\n\n  var _React$useContext = React.useContext(DualListSelectorListContext),\n      setFocusedOption = _React$useContext.setFocusedOption;\n\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.dualListSelectorListItem, className, isDisabled && styles.modifiers.disabled),\n    key: orderIndex,\n    onClick: isDisabled ? undefined : function (e) {\n      setFocusedOption(id);\n      onOptionSelect(e, id);\n    },\n    onKeyDown: function onKeyDown(e) {\n      if (e.key === ' ' || e.key === 'Enter') {\n        document.activeElement.click();\n        e.preventDefault();\n      }\n    },\n    \"aria-selected\": isSelected,\n    id: id,\n    ref: ref,\n    role: \"option\",\n    tabIndex: -1\n  }, props), React.createElement(\"div\", {\n    className: css(styles.dualListSelectorListItemRow, isSelected && styles.modifiers.selected)\n  }, isDraggable && !isDisabled && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorDraggable)\n  }, React.createElement(Button, {\n    variant: ButtonVariant.plain,\n    component: \"span\"\n  }, React.createElement(GripVerticalIcon, {\n    style: {\n      verticalAlign: '-0.3em'\n    }\n  }))), React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItem)\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemMain)\n  }, React.createElement(\"span\", {\n    className: css(styles.dualListSelectorItemText)\n  }, children)))));\n};\nDualListSelectorListItemBase.displayName = 'DualListSelectorListItemBase';\nexport var DualListSelectorListItem = React.forwardRef(function (props, ref) {\n  return React.createElement(DualListSelectorListItemBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nDualListSelectorListItem.displayName = 'DualListSelectorListItem';","map":{"version":3,"mappings":"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","names":["React","styles","css","getUniqueId","GripVerticalIcon","Button","ButtonVariant","DualListSelectorListContext","DualListSelectorListItemBase","_a","onOptionSelect","orderIndex","children","className","id","isSelected","innerRef","isDraggable","isDisabled","draggableButtonAriaLabel","props","__rest","ref","useRef","useContext","setFocusedOption","dualListSelectorListItem","modifiers","disabled","key","onClick","undefined","e","onKeyDown","document","activeElement","click","preventDefault","role","tabIndex","dualListSelectorListItemRow","selected","dualListSelectorDraggable","variant","plain","component","style","verticalAlign","dualListSelectorItem","dualListSelectorItemMain","dualListSelectorItemText","displayName","DualListSelectorListItem","forwardRef","Object"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport { getUniqueId } from '../../helpers';\nimport GripVerticalIcon from '@patternfly/react-icons/dist/esm/icons/grip-vertical-icon';\nimport { Button, ButtonVariant } from '../Button';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorListItemProps extends React.HTMLProps<HTMLLIElement> {\n  /** Content rendered inside the dual list selector. */\n  children?: React.ReactNode;\n  /** Additional classes applied to the dual list selector. */\n  className?: string;\n  /** Flag indicating the list item is currently selected. */\n  isSelected?: boolean;\n  /** Callback fired when an option is selected.  */\n  onOptionSelect?: (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, id?: string) => void;\n  /** ID of the option. */\n  id?: string;\n  /** @hide Internal field used to keep track of order of unfiltered options. */\n  orderIndex?: number;\n  /** @hide Forwarded ref */\n  innerRef?: React.RefObject<HTMLLIElement>;\n  /** Flag indicating this item is draggable for reordring */\n  isDraggable?: boolean;\n  /** Accessible label for the draggable button on draggable list items */\n  draggableButtonAriaLabel?: string;\n  /** Flag indicating if the dual list selector is in a disabled state */\n  isDisabled?: boolean;\n}\n\nexport const DualListSelectorListItemBase: React.FunctionComponent<DualListSelectorListItemProps> = ({\n  onOptionSelect,\n  orderIndex,\n  children,\n  className,\n  id = getUniqueId('dual-list-selector-list-item'),\n  isSelected,\n  innerRef,\n  isDraggable = false,\n  isDisabled,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  draggableButtonAriaLabel = 'Reorder option',\n  ...props\n}: DualListSelectorListItemProps) => {\n  const ref = innerRef || React.useRef<HTMLLIElement>(null);\n  const { setFocusedOption } = React.useContext(DualListSelectorListContext);\n\n  return (\n    <li\n      className={css(styles.dualListSelectorListItem, className, isDisabled && styles.modifiers.disabled)}\n      key={orderIndex}\n      onClick={\n        isDisabled\n          ? undefined\n          : (e: React.MouseEvent) => {\n              setFocusedOption(id);\n              onOptionSelect(e, id);\n            }\n      }\n      onKeyDown={(e: React.KeyboardEvent) => {\n        if (e.key === ' ' || e.key === 'Enter') {\n          (document.activeElement as HTMLElement).click();\n          e.preventDefault();\n        }\n      }}\n      aria-selected={isSelected}\n      id={id}\n      ref={ref}\n      role=\"option\"\n      tabIndex={-1}\n      {...props}\n    >\n      <div className={css(styles.dualListSelectorListItemRow, isSelected && styles.modifiers.selected)}>\n        {isDraggable && !isDisabled && (\n          <div className={css(styles.dualListSelectorDraggable)}>\n            {/** TODO once keyboard accessibility is enabled, remove `component=span`\n             and add `aria-label={draggableButtonAriaLabel}` */}\n            <Button variant={ButtonVariant.plain} component=\"span\">\n              <GripVerticalIcon style={{ verticalAlign: '-0.3em' }} />\n            </Button>\n          </div>\n        )}\n        <span className={css(styles.dualListSelectorItem)}>\n          <span className={css(styles.dualListSelectorItemMain)}>\n            <span className={css(styles.dualListSelectorItemText)}>{children}</span>\n          </span>\n        </span>\n      </div>\n    </li>\n  );\n};\nDualListSelectorListItemBase.displayName = 'DualListSelectorListItemBase';\n\nexport const DualListSelectorListItem = React.forwardRef(\n  (props: DualListSelectorListItemProps, ref: React.Ref<HTMLLIElement>) => (\n    <DualListSelectorListItemBase innerRef={ref as React.MutableRefObject<any>} {...props} />\n  )\n);\nDualListSelectorListItem.displayName = 'DualListSelectorListItem';\n"]},"metadata":{},"sourceType":"module"}