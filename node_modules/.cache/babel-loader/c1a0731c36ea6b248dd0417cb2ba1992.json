{"ast":null,"code":"import _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PopoverPosition } from '../Popover';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nexport var clipboardCopyFunc = function clipboardCopyFunc(event, text) {\n  var clipboard = event.currentTarget.parentElement;\n  var el = document.createElement('textarea');\n  el.value = text.toString();\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n};\nexport var ClipboardCopyVariant;\n\n(function (ClipboardCopyVariant) {\n  ClipboardCopyVariant[\"inline\"] = \"inline\";\n  ClipboardCopyVariant[\"expansion\"] = \"expansion\";\n  ClipboardCopyVariant[\"inlineCompact\"] = \"inline-compact\";\n})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));\n\nexport var ClipboardCopy = /*#__PURE__*/function (_React$Component) {\n  _inherits(ClipboardCopy, _React$Component);\n\n  var _super = _createSuper(ClipboardCopy);\n\n  function ClipboardCopy(props) {\n    var _this;\n\n    _classCallCheck(this, ClipboardCopy);\n\n    _this = _super.call(this, props);\n    _this.timer = null; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    _this.componentDidUpdate = function (prevProps, prevState) {\n      if (prevProps.children !== _this.props.children) {\n        _this.updateText(_this.props.children);\n      }\n    };\n\n    _this.componentWillUnmount = function () {\n      if (_this.timer) {\n        window.clearTimeout(_this.timer);\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    _this.expandContent = function (_event) {\n      _this.setState(function (prevState) {\n        return {\n          expanded: !prevState.expanded\n        };\n      });\n    };\n\n    _this.updateText = function (text) {\n      _this.setState({\n        text: text\n      });\n\n      _this.props.onChange(text);\n    };\n\n    _this.render = function () {\n      var _a = _this.props,\n          isExpanded = _a.isExpanded,\n          onChange = _a.onChange,\n          isReadOnly = _a.isReadOnly,\n          isCode = _a.isCode,\n          isBlock = _a.isBlock,\n          exitDelay = _a.exitDelay,\n          maxWidth = _a.maxWidth,\n          entryDelay = _a.entryDelay,\n          switchDelay = _a.switchDelay,\n          onCopy = _a.onCopy,\n          hoverTip = _a.hoverTip,\n          clickTip = _a.clickTip,\n          textAriaLabel = _a.textAriaLabel,\n          toggleAriaLabel = _a.toggleAriaLabel,\n          variant = _a.variant,\n          position = _a.position,\n          className = _a.className,\n          additionalActions = _a.additionalActions,\n          divProps = __rest(_a, [\"isExpanded\", \"onChange\", \"isReadOnly\", \"isCode\", \"isBlock\", \"exitDelay\", \"maxWidth\", \"entryDelay\", \"switchDelay\", \"onCopy\", \"hoverTip\", \"clickTip\", \"textAriaLabel\", \"toggleAriaLabel\", \"variant\", \"position\", \"className\", \"additionalActions\"]);\n\n      var textIdPrefix = 'text-input-';\n      var toggleIdPrefix = 'toggle-';\n      var contentIdPrefix = 'content-';\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.clipboardCopy, variant === 'inline-compact' && styles.modifiers.inline, isBlock && styles.modifiers.block, _this.state.expanded && styles.modifiers.expanded, className)\n      }, divProps), variant === 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, function (id) {\n        return React.createElement(React.Fragment, null, !isCode && React.createElement(\"span\", {\n          className: css(styles.clipboardCopyText),\n          id: \"\".concat(textIdPrefix).concat(id)\n        }, _this.state.text), isCode && React.createElement(\"code\", {\n          className: css(styles.clipboardCopyText, styles.modifiers.code),\n          id: \"\".concat(textIdPrefix).concat(id)\n        }, _this.state.text), React.createElement(\"span\", {\n          className: css(styles.clipboardCopyActions)\n        }, React.createElement(\"span\", {\n          className: css(styles.clipboardCopyActionsItem)\n        }, React.createElement(ClipboardCopyButton, {\n          variant: \"plain\",\n          exitDelay: exitDelay,\n          entryDelay: entryDelay,\n          maxWidth: maxWidth,\n          position: position,\n          id: \"copy-button-\".concat(id),\n          textId: \"text-input-\".concat(id),\n          \"aria-label\": hoverTip,\n          onClick: function onClick(event) {\n            if (_this.timer) {\n              window.clearTimeout(_this.timer);\n\n              _this.setState({\n                copied: false\n              });\n            }\n\n            onCopy(event, _this.state.text);\n\n            _this.setState({\n              copied: true\n            }, function () {\n              _this.timer = window.setTimeout(function () {\n                _this.setState({\n                  copied: false\n                });\n\n                _this.timer = null;\n              }, switchDelay);\n            });\n          }\n        }, _this.state.copied ? clickTip : hoverTip)), additionalActions && additionalActions));\n      }), variant !== 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, function (id) {\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          className: css(styles.clipboardCopyGroup)\n        }, variant === 'expansion' && React.createElement(ClipboardCopyToggle, {\n          isExpanded: _this.state.expanded,\n          onClick: _this.expandContent,\n          id: \"\".concat(toggleIdPrefix).concat(id),\n          textId: \"\".concat(textIdPrefix).concat(id),\n          contentId: \"\".concat(contentIdPrefix).concat(id),\n          \"aria-label\": toggleAriaLabel\n        }), React.createElement(TextInput, {\n          isReadOnly: isReadOnly || _this.state.expanded,\n          onChange: _this.updateText,\n          value: _this.state.text,\n          id: \"text-input-\".concat(id),\n          \"aria-label\": textAriaLabel\n        }), React.createElement(ClipboardCopyButton, {\n          exitDelay: exitDelay,\n          entryDelay: entryDelay,\n          maxWidth: maxWidth,\n          position: position,\n          id: \"copy-button-\".concat(id),\n          textId: \"text-input-\".concat(id),\n          \"aria-label\": hoverTip,\n          onClick: function onClick(event) {\n            if (_this.timer) {\n              window.clearTimeout(_this.timer);\n\n              _this.setState({\n                copied: false\n              });\n            }\n\n            onCopy(event, _this.state.text);\n\n            _this.setState({\n              copied: true\n            }, function () {\n              _this.timer = window.setTimeout(function () {\n                _this.setState({\n                  copied: false\n                });\n\n                _this.timer = null;\n              }, switchDelay);\n            });\n          }\n        }, _this.state.copied ? clickTip : hoverTip)), _this.state.expanded && React.createElement(ClipboardCopyExpanded, {\n          isReadOnly: isReadOnly,\n          isCode: isCode,\n          id: \"content-\".concat(id),\n          onChange: _this.updateText\n        }, _this.state.text));\n      }));\n    };\n\n    _this.state = {\n      text: Array.isArray(_this.props.children) ? _this.props.children.join('') : _this.props.children,\n      expanded: _this.props.isExpanded,\n      copied: false\n    };\n    return _this;\n  }\n\n  return _createClass(ClipboardCopy);\n}(React.Component);\nClipboardCopy.displayName = 'ClipboardCopy';\nClipboardCopy.defaultProps = {\n  hoverTip: 'Copy to clipboard',\n  clickTip: 'Successfully copied to clipboard!',\n  isReadOnly: false,\n  isExpanded: false,\n  isCode: false,\n  variant: 'inline',\n  position: PopoverPosition.top,\n  maxWidth: '150px',\n  exitDelay: 1600,\n  entryDelay: 300,\n  switchDelay: 2000,\n  onCopy: clipboardCopyFunc,\n  onChange: function onChange() {\n    return undefined;\n  },\n  textAriaLabel: 'Copyable input',\n  toggleAriaLabel: 'Show content',\n  additionalActions: null\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","PopoverPosition","TextInput","GenerateId","ClipboardCopyButton","ClipboardCopyToggle","ClipboardCopyExpanded","clipboardCopyFunc","event","text","clipboard","currentTarget","parentElement","el","document","createElement","value","toString","appendChild","select","execCommand","removeChild","ClipboardCopyVariant","ClipboardCopy","props","prevProps","prevState","children","updateText","timer","window","clearTimeout","_event","setState","expanded","onChange","isExpanded","_a","isReadOnly","isCode","isBlock","exitDelay","maxWidth","entryDelay","switchDelay","onCopy","hoverTip","clickTip","textAriaLabel","toggleAriaLabel","variant","position","className","additionalActions","divProps","__rest","textIdPrefix","toggleIdPrefix","contentIdPrefix","clipboardCopy","modifiers","inline","block","state","prefix","Fragment","clipboardCopyText","id","code","clipboardCopyActions","clipboardCopyActionsItem","textId","onClick","copied","setTimeout","clipboardCopyGroup","expandContent","contentId","Array","isArray","join","Component","top","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopy.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { PopoverPosition } from '../Popover';\nimport { TooltipPosition } from '../Tooltip';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\n\nexport const clipboardCopyFunc = (event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('textarea');\n  el.value = text.toString();\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n};\n\nexport enum ClipboardCopyVariant {\n  inline = 'inline',\n  expansion = 'expansion',\n  inlineCompact = 'inline-compact'\n}\n\nexport interface ClipboardCopyState {\n  text: string | number;\n  expanded: boolean;\n  copied: boolean;\n}\n\nexport interface ClipboardCopyProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Additional classes added to the clipboard copy container. */\n  className?: string;\n  /** Tooltip message to display when hover the copy button */\n  hoverTip?: string;\n  /** Tooltip message to display when clicking the copy button */\n  clickTip?: string;\n  /** Aria-label to use on the TextInput. */\n  textAriaLabel?: string;\n  /** Aria-label to use on the ClipboardCopyToggle. */\n  toggleAriaLabel?: string;\n  /** Flag to show if the input is read only. */\n  isReadOnly?: boolean;\n  /** Flag to determine if clipboard copy is in the expanded state initially */\n  isExpanded?: boolean;\n  /** Flag to determine if clipboard copy content includes code */\n  isCode?: boolean;\n  /** Flag to determine if inline clipboard copy should be block styling */\n  isBlock?: boolean;\n  /** Adds Clipboard Copy variant styles. */\n  variant?: typeof ClipboardCopyVariant | 'inline' | 'expansion' | 'inline-compact';\n  /** Copy button popover position. */\n  position?:\n    | PopoverPosition\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Maximum width of the tooltip (default 150px). */\n  maxWidth?: string;\n  /** Delay in ms before the tooltip disappears. */\n  exitDelay?: number;\n  /** Delay in ms before the tooltip appears. */\n  entryDelay?: number;\n  /** Delay in ms before the tooltip message switch to hover tip. */\n  switchDelay?: number;\n  /** A function that is triggered on clicking the copy button. */\n  onCopy?: (event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => void;\n  /** A function that is triggered on changing the text. */\n  onChange?: (text?: string | number) => void;\n  /** The text which is copied. */\n  children: React.ReactNode;\n  /** Additional actions for inline clipboard copy. Should be wrapped with ClipboardCopyAction. */\n  additionalActions?: React.ReactNode;\n}\n\nexport class ClipboardCopy extends React.Component<ClipboardCopyProps, ClipboardCopyState> {\n  static displayName = 'ClipboardCopy';\n  timer = null as number;\n  constructor(props: ClipboardCopyProps) {\n    super(props);\n    this.state = {\n      text: Array.isArray(this.props.children)\n        ? this.props.children.join('')\n        : (this.props.children as string | number),\n      expanded: this.props.isExpanded,\n      copied: false\n    };\n  }\n\n  static defaultProps: PickOptional<ClipboardCopyProps> = {\n    hoverTip: 'Copy to clipboard',\n    clickTip: 'Successfully copied to clipboard!',\n    isReadOnly: false,\n    isExpanded: false,\n    isCode: false,\n    variant: 'inline',\n    position: PopoverPosition.top,\n    maxWidth: '150px',\n    exitDelay: 1600,\n    entryDelay: 300,\n    switchDelay: 2000,\n    onCopy: clipboardCopyFunc,\n    onChange: (): any => undefined,\n    textAriaLabel: 'Copyable input',\n    toggleAriaLabel: 'Show content',\n    additionalActions: null\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  componentDidUpdate = (prevProps: ClipboardCopyProps, prevState: ClipboardCopyState) => {\n    if (prevProps.children !== this.props.children) {\n      this.updateText(this.props.children as string | number);\n    }\n  };\n\n  componentWillUnmount = () => {\n    if (this.timer) {\n      window.clearTimeout(this.timer);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  expandContent = (_event: React.MouseEvent<Element, MouseEvent>) => {\n    this.setState(prevState => ({\n      expanded: !prevState.expanded\n    }));\n  };\n\n  updateText = (text: string | number) => {\n    this.setState({ text });\n    this.props.onChange(text);\n  };\n\n  render = () => {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isExpanded,\n      onChange, // Don't pass to <div>\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      isReadOnly,\n      isCode,\n      isBlock,\n      exitDelay,\n      maxWidth,\n      entryDelay,\n      switchDelay,\n      onCopy,\n      hoverTip,\n      clickTip,\n      textAriaLabel,\n      toggleAriaLabel,\n      variant,\n      position,\n      className,\n      additionalActions,\n      ...divProps\n    } = this.props;\n    const textIdPrefix = 'text-input-';\n    const toggleIdPrefix = 'toggle-';\n    const contentIdPrefix = 'content-';\n    return (\n      <div\n        className={css(\n          styles.clipboardCopy,\n          variant === 'inline-compact' && styles.modifiers.inline,\n          isBlock && styles.modifiers.block,\n          this.state.expanded && styles.modifiers.expanded,\n          className\n        )}\n        {...divProps}\n      >\n        {variant === 'inline-compact' && (\n          <GenerateId prefix=\"\">\n            {id => (\n              <React.Fragment>\n                {!isCode && (\n                  <span className={css(styles.clipboardCopyText)} id={`${textIdPrefix}${id}`}>\n                    {this.state.text}\n                  </span>\n                )}\n                {isCode && (\n                  <code className={css(styles.clipboardCopyText, styles.modifiers.code)} id={`${textIdPrefix}${id}`}>\n                    {this.state.text}\n                  </code>\n                )}\n                <span className={css(styles.clipboardCopyActions)}>\n                  <span className={css(styles.clipboardCopyActionsItem)}>\n                    <ClipboardCopyButton\n                      variant=\"plain\"\n                      exitDelay={exitDelay}\n                      entryDelay={entryDelay}\n                      maxWidth={maxWidth}\n                      position={position}\n                      id={`copy-button-${id}`}\n                      textId={`text-input-${id}`}\n                      aria-label={hoverTip}\n                      onClick={(event: any) => {\n                        if (this.timer) {\n                          window.clearTimeout(this.timer);\n                          this.setState({ copied: false });\n                        }\n                        onCopy(event, this.state.text);\n                        this.setState({ copied: true }, () => {\n                          this.timer = window.setTimeout(() => {\n                            this.setState({ copied: false });\n                            this.timer = null;\n                          }, switchDelay);\n                        });\n                      }}\n                    >\n                      {this.state.copied ? clickTip : hoverTip}\n                    </ClipboardCopyButton>\n                  </span>\n                  {additionalActions && additionalActions}\n                </span>\n              </React.Fragment>\n            )}\n          </GenerateId>\n        )}\n        {variant !== 'inline-compact' && (\n          <GenerateId prefix=\"\">\n            {id => (\n              <React.Fragment>\n                <div className={css(styles.clipboardCopyGroup)}>\n                  {variant === 'expansion' && (\n                    <ClipboardCopyToggle\n                      isExpanded={this.state.expanded}\n                      onClick={this.expandContent}\n                      id={`${toggleIdPrefix}${id}`}\n                      textId={`${textIdPrefix}${id}`}\n                      contentId={`${contentIdPrefix}${id}`}\n                      aria-label={toggleAriaLabel}\n                    />\n                  )}\n                  <TextInput\n                    isReadOnly={isReadOnly || this.state.expanded}\n                    onChange={this.updateText}\n                    value={this.state.text as string | number}\n                    id={`text-input-${id}`}\n                    aria-label={textAriaLabel}\n                  />\n                  <ClipboardCopyButton\n                    exitDelay={exitDelay}\n                    entryDelay={entryDelay}\n                    maxWidth={maxWidth}\n                    position={position}\n                    id={`copy-button-${id}`}\n                    textId={`text-input-${id}`}\n                    aria-label={hoverTip}\n                    onClick={(event: any) => {\n                      if (this.timer) {\n                        window.clearTimeout(this.timer);\n                        this.setState({ copied: false });\n                      }\n                      onCopy(event, this.state.text);\n                      this.setState({ copied: true }, () => {\n                        this.timer = window.setTimeout(() => {\n                          this.setState({ copied: false });\n                          this.timer = null;\n                        }, switchDelay);\n                      });\n                    }}\n                  >\n                    {this.state.copied ? clickTip : hoverTip}\n                  </ClipboardCopyButton>\n                </div>\n                {this.state.expanded && (\n                  <ClipboardCopyExpanded\n                    isReadOnly={isReadOnly}\n                    isCode={isCode}\n                    id={`content-${id}`}\n                    onChange={this.updateText}\n                  >\n                    {this.state.text}\n                  </ClipboardCopyExpanded>\n                )}\n              </React.Fragment>\n            )}\n          </GenerateId>\n        )}\n      </div>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}