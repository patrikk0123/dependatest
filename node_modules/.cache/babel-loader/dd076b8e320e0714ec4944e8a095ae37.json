{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { DualListSelectorTree } from './DualListSelectorTree';\nimport { getUniqueId } from '../../helpers';\nimport { DualListSelectorListWrapper } from './DualListSelectorListWrapper';\nimport { DualListSelectorContext, DualListSelectorPaneContext } from './DualListSelectorContext';\nimport { DualListSelectorList } from './DualListSelectorList';\nexport var DualListSelectorPane = function DualListSelectorPane(_a) {\n  var _a$isChosen = _a.isChosen,\n      isChosen = _a$isChosen === void 0 ? false : _a$isChosen,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$status = _a.status,\n      status = _a$status === void 0 ? '' : _a$status,\n      actions = _a.actions,\n      searchInput = _a.searchInput,\n      children = _a.children,\n      _onOptionSelect = _a.onOptionSelect,\n      onOptionCheck = _a.onOptionCheck,\n      _a$title = _a.title,\n      title = _a$title === void 0 ? '' : _a$title,\n      _a$options = _a.options,\n      options = _a$options === void 0 ? [] : _a$options,\n      _a$selectedOptions = _a.selectedOptions,\n      selectedOptions = _a$selectedOptions === void 0 ? [] : _a$selectedOptions,\n      _a$isSearchable = _a.isSearchable,\n      isSearchable = _a$isSearchable === void 0 ? false : _a$isSearchable,\n      _a$searchInputAriaLab = _a.searchInputAriaLabel,\n      searchInputAriaLabel = _a$searchInputAriaLab === void 0 ? '' : _a$searchInputAriaLab,\n      onFilterUpdate = _a.onFilterUpdate,\n      onSearchInputChanged = _a.onSearchInputChanged,\n      filterOption = _a.filterOption,\n      _a$id = _a.id,\n      id = _a$id === void 0 ? getUniqueId('dual-list-selector-pane') : _a$id,\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? false : _a$isDisabled,\n      props = __rest(_a, [\"isChosen\", \"className\", \"status\", \"actions\", \"searchInput\", \"children\", \"onOptionSelect\", \"onOptionCheck\", \"title\", \"options\", \"selectedOptions\", \"isSearchable\", \"searchInputAriaLabel\", \"onFilterUpdate\", \"onSearchInputChanged\", \"filterOption\", \"id\", \"isDisabled\"]);\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      input = _React$useState2[0],\n      setInput = _React$useState2[1];\n\n  var _React$useContext = React.useContext(DualListSelectorContext),\n      isTree = _React$useContext.isTree; // only called when search input is dynamically built\n\n\n  var onChange = function onChange(e) {\n    var newValue = e.target.value;\n    var filtered;\n\n    if (isTree) {\n      filtered = options.map(function (opt) {\n        return Object.assign({}, opt);\n      }).filter(function (item) {\n        return filterInput(item, newValue);\n      });\n    } else {\n      filtered = options.filter(function (option) {\n        if (displayOption(option)) {\n          return option;\n        }\n      });\n    }\n\n    onFilterUpdate(filtered, isChosen ? 'chosen' : 'available', newValue === '');\n\n    if (onSearchInputChanged) {\n      onSearchInputChanged(newValue, e);\n    }\n\n    setInput(newValue);\n  }; // only called when options are passed via options prop and isTree === true\n\n\n  var filterInput = function filterInput(item, input) {\n    if (filterOption) {\n      return filterOption(item, input);\n    } else {\n      if (item.text.toLowerCase().includes(input.toLowerCase()) || input === '') {\n        return true;\n      }\n    }\n\n    if (item.children) {\n      return (item.children = item.children.map(function (opt) {\n        return Object.assign({}, opt);\n      }).filter(function (child) {\n        return filterInput(child, input);\n      })).length > 0;\n    }\n  }; // only called when options are passed via options prop and isTree === false\n\n\n  var displayOption = function displayOption(option) {\n    if (filterOption) {\n      return filterOption(option, input);\n    } else {\n      return option.toString().toLowerCase().includes(input.toLowerCase());\n    }\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className)\n  }, props), title && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorHeader)\n  }, React.createElement(\"div\", {\n    className: \"pf-c-dual-list-selector__title\"\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorTitleText)\n  }, title))), (actions || searchInput || isSearchable) && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorTools)\n  }, (isSearchable || searchInput) && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorToolsFilter)\n  }, searchInput ? searchInput : React.createElement(\"input\", {\n    className: css(formStyles.formControl, formStyles.modifiers.search),\n    type: \"search\",\n    onChange: isDisabled ? undefined : onChange,\n    \"aria-label\": searchInputAriaLabel,\n    disabled: isDisabled\n  })), actions && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorToolsActions)\n  }, actions)), status && React.createElement(\"div\", {\n    className: css(styles.dualListSelectorStatus)\n  }, React.createElement(\"div\", {\n    className: css(styles.dualListSelectorStatusText),\n    id: \"\".concat(id, \"-status\")\n  }, status)), React.createElement(DualListSelectorPaneContext.Provider, {\n    value: {\n      isChosen: isChosen\n    }\n  }, !isTree && React.createElement(DualListSelectorListWrapper, {\n    \"aria-labelledby\": \"\".concat(id, \"-status\"),\n    options: options,\n    selectedOptions: selectedOptions,\n    onOptionSelect: function onOptionSelect(e, index, id) {\n      return _onOptionSelect(e, index, isChosen, id);\n    },\n    displayOption: displayOption,\n    id: \"\".concat(id, \"-list\"),\n    isDisabled: isDisabled\n  }, children), isTree && React.createElement(DualListSelectorListWrapper, {\n    \"aria-labelledby\": \"\".concat(id, \"-status\"),\n    id: \"\".concat(id, \"-list\")\n  }, options.length > 0 ? React.createElement(DualListSelectorList, null, React.createElement(DualListSelectorTree, {\n    data: isSearchable ? options.map(function (opt) {\n      return Object.assign({}, opt);\n    }).filter(function (item) {\n      return filterInput(item, input);\n    }) : options,\n    onOptionCheck: onOptionCheck,\n    id: \"\".concat(id, \"-tree\"),\n    isDisabled: isDisabled\n  })) : children)));\n};\nDualListSelectorPane.displayName = 'DualListSelectorPane';","map":{"version":3,"mappings":"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","names":["React","styles","css","formStyles","DualListSelectorTree","getUniqueId","DualListSelectorListWrapper","DualListSelectorContext","DualListSelectorPaneContext","DualListSelectorList","DualListSelectorPane","_a","isChosen","className","status","actions","searchInput","children","onOptionSelect","onOptionCheck","title","options","selectedOptions","isSearchable","searchInputAriaLabel","onFilterUpdate","onSearchInputChanged","filterOption","id","isDisabled","props","__rest","useState","input","setInput","useContext","isTree","onChange","e","newValue","target","value","filtered","map","Object","assign","opt","filter","filterInput","item","displayOption","option","text","toLowerCase","includes","child","length","toString","dualListSelectorPane","modifiers","chosen","dualListSelectorHeader","dualListSelectorTitleText","dualListSelectorTools","dualListSelectorToolsFilter","formControl","search","type","undefined","disabled","dualListSelectorToolsActions","dualListSelectorStatus","dualListSelectorStatusText","Provider","index","data","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorPane.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { css } from '@patternfly/react-styles';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { DualListSelectorTree, DualListSelectorTreeItemData } from './DualListSelectorTree';\nimport { getUniqueId } from '../../helpers';\nimport { DualListSelectorListWrapper } from './DualListSelectorListWrapper';\nimport { DualListSelectorContext, DualListSelectorPaneContext } from './DualListSelectorContext';\nimport { DualListSelectorList } from './DualListSelectorList';\n\nexport interface DualListSelectorPaneProps {\n  /** Additional classes applied to the dual list selector pane. */\n  className?: string;\n  /** A dual list selector list or dual list selector tree to be rendered in the pane. */\n  children?: React.ReactNode;\n  /** Flag indicating if this pane is the chosen pane. */\n  isChosen?: boolean;\n  /** Status to display above the pane. */\n  status?: string;\n  /** Title of the pane. */\n  title?: React.ReactNode;\n  /** A search input placed above the list at the top of the pane, before actions. */\n  searchInput?: React.ReactNode;\n  /** Actions to place above the pane. */\n  actions?: React.ReactNode[];\n  /** Id of the pane. */\n  id?: string;\n  /** @hide Options to list in the pane. */\n  options?: React.ReactNode[];\n  /** @hide Options currently selected in the pane. */\n  selectedOptions?: string[] | number[];\n  /** @hide Callback for when an option is selected. Optionally used only when options prop is provided. */\n  onOptionSelect?: (\n    e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n    index: number,\n    isChosen: boolean,\n    id?: string,\n    itemData?: any,\n    parentData?: any\n  ) => void;\n  /** @hide Callback for when a tree option is checked. Optionally used only when options prop is provided. */\n  onOptionCheck?: (\n    evt: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void;\n  /** @hide Flag indicating a dynamically built search bar should be included above the pane. */\n  isSearchable?: boolean;\n  /** Flag indicating whether the component is disabled. */\n  isDisabled?: boolean;\n  /** Callback for search input. To be used when isSearchable is true. */\n  onSearch?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  /** @hide A callback for when the search input value for changes.  To be used when isSearchable is true. */\n  onSearchInputChanged?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** @hide Filter function for custom filtering based on search string. To be used when isSearchable is true. */\n  filterOption?: (option: React.ReactNode, input: string) => boolean;\n  /** @hide Accessible label for the search input. To be used when isSearchable is true. */\n  searchInputAriaLabel?: string;\n  /** @hide Callback for updating the filtered options in DualListSelector. To be used when isSearchable is true. */\n  onFilterUpdate?: (newFilteredOptions: React.ReactNode[], paneType: string, isSearchReset: boolean) => void;\n}\n\nexport const DualListSelectorPane: React.FunctionComponent<DualListSelectorPaneProps> = ({\n  isChosen = false,\n  className = '',\n  status = '',\n  actions,\n  searchInput,\n  children,\n  onOptionSelect,\n  onOptionCheck,\n  title = '',\n  options = [] as React.ReactNode[],\n  selectedOptions = [],\n  isSearchable = false,\n  searchInputAriaLabel = '',\n  onFilterUpdate,\n  onSearchInputChanged,\n  filterOption,\n  id = getUniqueId('dual-list-selector-pane'),\n  isDisabled = false,\n  ...props\n}: DualListSelectorPaneProps) => {\n  const [input, setInput] = React.useState('');\n  const { isTree } = React.useContext(DualListSelectorContext);\n\n  // only called when search input is dynamically built\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n    let filtered;\n    if (isTree) {\n      filtered = (options as DualListSelectorTreeItemData[])\n        .map(opt => Object.assign({}, opt))\n        .filter(item => filterInput(item as DualListSelectorTreeItemData, newValue));\n    } else {\n      filtered = options.filter(option => {\n        if (displayOption(option)) {\n          return option;\n        }\n      });\n    }\n    onFilterUpdate(filtered, isChosen ? 'chosen' : 'available', newValue === '');\n\n    if (onSearchInputChanged) {\n      onSearchInputChanged(newValue, e);\n    }\n    setInput(newValue);\n  };\n\n  // only called when options are passed via options prop and isTree === true\n  const filterInput = (item: DualListSelectorTreeItemData, input: string): boolean => {\n    if (filterOption) {\n      return filterOption(item, input);\n    } else {\n      if (item.text.toLowerCase().includes(input.toLowerCase()) || input === '') {\n        return true;\n      }\n    }\n    if (item.children) {\n      return (\n        (item.children = item.children.map(opt => Object.assign({}, opt)).filter(child => filterInput(child, input)))\n          .length > 0\n      );\n    }\n  };\n\n  // only called when options are passed via options prop and isTree === false\n  const displayOption = (option: React.ReactNode) => {\n    if (filterOption) {\n      return filterOption(option, input);\n    } else {\n      return option\n        .toString()\n        .toLowerCase()\n        .includes(input.toLowerCase());\n    }\n  };\n\n  return (\n    <div\n      className={css(styles.dualListSelectorPane, isChosen ? styles.modifiers.chosen : 'pf-m-available', className)}\n      {...props}\n    >\n      {title && (\n        <div className={css(styles.dualListSelectorHeader)}>\n          <div className=\"pf-c-dual-list-selector__title\">\n            <div className={css(styles.dualListSelectorTitleText)}>{title}</div>\n          </div>\n        </div>\n      )}\n      {(actions || searchInput || isSearchable) && (\n        <div className={css(styles.dualListSelectorTools)}>\n          {(isSearchable || searchInput) && (\n            <div className={css(styles.dualListSelectorToolsFilter)}>\n              {searchInput ? (\n                searchInput\n              ) : (\n                <input\n                  className={css(formStyles.formControl, formStyles.modifiers.search)}\n                  type=\"search\"\n                  onChange={isDisabled ? undefined : onChange}\n                  aria-label={searchInputAriaLabel}\n                  disabled={isDisabled}\n                />\n              )}\n            </div>\n          )}\n          {actions && <div className={css(styles.dualListSelectorToolsActions)}>{actions}</div>}\n        </div>\n      )}\n      {status && (\n        <div className={css(styles.dualListSelectorStatus)}>\n          <div className={css(styles.dualListSelectorStatusText)} id={`${id}-status`}>\n            {status}\n          </div>\n        </div>\n      )}\n      <DualListSelectorPaneContext.Provider value={{ isChosen }}>\n        {!isTree && (\n          <DualListSelectorListWrapper\n            aria-labelledby={`${id}-status`}\n            options={options}\n            selectedOptions={selectedOptions}\n            onOptionSelect={(\n              e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n              index: number,\n              id: string\n            ) => onOptionSelect(e, index, isChosen, id)}\n            displayOption={displayOption}\n            id={`${id}-list`}\n            isDisabled={isDisabled}\n          >\n            {children}\n          </DualListSelectorListWrapper>\n        )}\n        {isTree && (\n          <DualListSelectorListWrapper aria-labelledby={`${id}-status`} id={`${id}-list`}>\n            {options.length > 0 ? (\n              <DualListSelectorList>\n                <DualListSelectorTree\n                  data={\n                    isSearchable\n                      ? (options as DualListSelectorTreeItemData[])\n                          .map(opt => Object.assign({}, opt))\n                          .filter(item => filterInput(item as DualListSelectorTreeItemData, input))\n                      : (options as DualListSelectorTreeItemData[])\n                  }\n                  onOptionCheck={onOptionCheck}\n                  id={`${id}-tree`}\n                  isDisabled={isDisabled}\n                />\n              </DualListSelectorList>\n            ) : (\n              children\n            )}\n          </DualListSelectorListWrapper>\n        )}\n      </DualListSelectorPaneContext.Provider>\n    </div>\n  );\n};\nDualListSelectorPane.displayName = 'DualListSelectorPane';\n"]},"metadata":{},"sourceType":"module"}