{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/DataContainer/DataContainer.tsx\";\nimport { EmptyStateCard } from 'components/EmptyStates/EmptyStateCard';\nimport { ErrorStateCard } from 'components/EmptyStates/ErrorStateCard';\nimport { LoadingStateCard } from 'components/EmptyStates/LoadingStateCard';\nimport { RefreshStateCard } from 'components/EmptyStates/RefreshStateCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n/**\n * Container component handling loading, error and empty data states. If one of those states\n * is valid then proper state component is displayed instead of the (children) component displaying\n * real data. See also {@link useDataContainer}.\n *\n * @example\n * ```ts\n * // DataContainer component can be typically used together with useDataContainer hook:\n * const dataContainer = useDataContainer(() => projectService.getProjects());\n * <DataContainer {...dataContainer} title=\"Projects List\">\n *   <ProjectsList projects={dataContainer.data} />\n * </DataContainer>\n * ```\n *\n * @param data - Real data to be displayed when its fully loaded\n * @param loading - True if a request is pending, false when a request is successfully finished or when a request resulted in error\n * @param error - Error description when data loading was not successful\n * @param children - React children property\n */\nexport const DataContainer = _ref => {\n  let {\n    data,\n    loading,\n    error,\n    title,\n    children\n  } = _ref;\n  // Initial loading: display Loading card when loading and no previous data is available (the component is rendered for the first time)\n  if (loading && !data) return /*#__PURE__*/_jsxDEV(LoadingStateCard, {\n    title: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 32\n  }, this); // Refresh loading: keep previous real data with loading indicator when loading new data and previous real data is available\n  // (the component was rendered at some point before)\n  //  - for example: when page index is changed from page 1 to page 2\n  //  - this will make UI more smooth and it prevents flickering user experience\n\n  if (loading && data) return /*#__PURE__*/_jsxDEV(RefreshStateCard, {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 31\n  }, this); // Error state: display Error card when error\n\n  if (error) return /*#__PURE__*/_jsxDEV(ErrorStateCard, {\n    title: title,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 21\n  }, this); // Invalid state, Error state should be triggered before this\n\n  if (!data) throw new Error('DataContainer invalid state: when no data are available, error state should be returned'); // Empty state: display Empty card when\n  //  - request was successfully finished,\n  //  - content property is available (= content property means table data with pagination are expected),\n  //  - but no items are available\n\n  if (data.content && !data.content.length) return /*#__PURE__*/_jsxDEV(EmptyStateCard, {\n    title: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 52\n  }, this); // Empty state: display Empty card when\n  //  - request was successfully finished,\n  //  - data is array\n  //  - but no items are available\n  //\n  // Used for example for kafka service.\n\n  if (Array.isArray(data) && !data.length) return /*#__PURE__*/_jsxDEV(EmptyStateCard, {\n    title: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 51\n  }, this); // Real data: display real data when it's loaded successfully and it's not empty\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};","map":{"version":3,"names":["EmptyStateCard","ErrorStateCard","LoadingStateCard","RefreshStateCard","DataContainer","data","loading","error","title","children","Error","content","length","Array","isArray"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/DataContainer/DataContainer.tsx"],"sourcesContent":["import { EmptyStateCard } from 'components/EmptyStates/EmptyStateCard';\nimport { ErrorStateCard } from 'components/EmptyStates/ErrorStateCard';\nimport { LoadingStateCard } from 'components/EmptyStates/LoadingStateCard';\nimport { RefreshStateCard } from 'components/EmptyStates/RefreshStateCard';\n\nexport interface IDataContainer {\n  data: any;\n  loading: boolean;\n  error?: string;\n  title: string;\n}\n\n/**\n * Container component handling loading, error and empty data states. If one of those states\n * is valid then proper state component is displayed instead of the (children) component displaying\n * real data. See also {@link useDataContainer}.\n *\n * @example\n * ```ts\n * // DataContainer component can be typically used together with useDataContainer hook:\n * const dataContainer = useDataContainer(() => projectService.getProjects());\n * <DataContainer {...dataContainer} title=\"Projects List\">\n *   <ProjectsList projects={dataContainer.data} />\n * </DataContainer>\n * ```\n *\n * @param data - Real data to be displayed when its fully loaded\n * @param loading - True if a request is pending, false when a request is successfully finished or when a request resulted in error\n * @param error - Error description when data loading was not successful\n * @param children - React children property\n */\nexport const DataContainer = ({ data, loading, error, title, children }: React.PropsWithChildren<IDataContainer>) => {\n  // Initial loading: display Loading card when loading and no previous data is available (the component is rendered for the first time)\n  if (loading && !data) return <LoadingStateCard title={title} />;\n\n  // Refresh loading: keep previous real data with loading indicator when loading new data and previous real data is available\n  // (the component was rendered at some point before)\n  //  - for example: when page index is changed from page 1 to page 2\n  //  - this will make UI more smooth and it prevents flickering user experience\n  if (loading && data) return <RefreshStateCard>{children}</RefreshStateCard>;\n\n  // Error state: display Error card when error\n  if (error) return <ErrorStateCard title={title} error={error} />;\n\n  // Invalid state, Error state should be triggered before this\n  if (!data) throw new Error('DataContainer invalid state: when no data are available, error state should be returned');\n\n  // Empty state: display Empty card when\n  //  - request was successfully finished,\n  //  - content property is available (= content property means table data with pagination are expected),\n  //  - but no items are available\n  if (data.content && !data.content.length) return <EmptyStateCard title={title} />;\n\n  // Empty state: display Empty card when\n  //  - request was successfully finished,\n  //  - data is array\n  //  - but no items are available\n  //\n  // Used for example for kafka service.\n  if (Array.isArray(data) && !data.length) return <EmptyStateCard title={title} />;\n\n  // Real data: display real data when it's loaded successfully and it's not empty\n  return <>{children}</>;\n};\n"],"mappings":";AAAA,SAASA,cAAT,QAA+B,uCAA/B;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,gBAAT,QAAiC,yCAAjC;AACA,SAASC,gBAAT,QAAiC,yCAAjC;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,QAAwF;EAAA,IAAvF;IAAEC,IAAF;IAAQC,OAAR;IAAiBC,KAAjB;IAAwBC,KAAxB;IAA+BC;EAA/B,CAAuF;EACnH;EACA,IAAIH,OAAO,IAAI,CAACD,IAAhB,EAAsB,oBAAO,QAAC,gBAAD;IAAkB,KAAK,EAAEG;EAAzB;IAAA;IAAA;IAAA;EAAA,QAAP,CAF6F,CAInH;EACA;EACA;EACA;;EACA,IAAIF,OAAO,IAAID,IAAf,EAAqB,oBAAO,QAAC,gBAAD;IAAA,UAAmBI;EAAnB;IAAA;IAAA;IAAA;EAAA,QAAP,CAR8F,CAUnH;;EACA,IAAIF,KAAJ,EAAW,oBAAO,QAAC,cAAD;IAAgB,KAAK,EAAEC,KAAvB;IAA8B,KAAK,EAAED;EAArC;IAAA;IAAA;IAAA;EAAA,QAAP,CAXwG,CAanH;;EACA,IAAI,CAACF,IAAL,EAAW,MAAM,IAAIK,KAAJ,CAAU,yFAAV,CAAN,CAdwG,CAgBnH;EACA;EACA;EACA;;EACA,IAAIL,IAAI,CAACM,OAAL,IAAgB,CAACN,IAAI,CAACM,OAAL,CAAaC,MAAlC,EAA0C,oBAAO,QAAC,cAAD;IAAgB,KAAK,EAAEJ;EAAvB;IAAA;IAAA;IAAA;EAAA,QAAP,CApByE,CAsBnH;EACA;EACA;EACA;EACA;EACA;;EACA,IAAIK,KAAK,CAACC,OAAN,CAAcT,IAAd,KAAuB,CAACA,IAAI,CAACO,MAAjC,EAAyC,oBAAO,QAAC,cAAD;IAAgB,KAAK,EAAEJ;EAAvB;IAAA;IAAA;IAAA;EAAA,QAAP,CA5B0E,CA8BnH;;EACA,oBAAO;IAAA,UAAGC;EAAH,iBAAP;AACD,CAhCM"},"metadata":{},"sourceType":"module"}