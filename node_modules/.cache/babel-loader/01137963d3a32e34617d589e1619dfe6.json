{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nexport var ToolbarFilter = /*#__PURE__*/function (_React$Component) {\n  _inherits(ToolbarFilter, _React$Component);\n\n  var _super = _createSuper(ToolbarFilter);\n\n  function ToolbarFilter(props) {\n    var _this;\n\n    _classCallCheck(this, ToolbarFilter);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isMounted: false\n    };\n    return _this;\n  }\n\n  _createClass(ToolbarFilter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          categoryName = _this$props.categoryName,\n          chips = _this$props.chips;\n      this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n      this.setState({\n        isMounted: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props2 = this.props,\n          categoryName = _this$props2.categoryName,\n          chips = _this$props2.chips;\n      this.context.updateNumberFilters(typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString(), chips.length);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          chips = _a.chips,\n          deleteChipGroup = _a.deleteChipGroup,\n          deleteChip = _a.deleteChip,\n          chipGroupExpandedText = _a.chipGroupExpandedText,\n          chipGroupCollapsedText = _a.chipGroupCollapsedText,\n          categoryName = _a.categoryName,\n          showToolbarItem = _a.showToolbarItem,\n          props = __rest(_a, [\"children\", \"chips\", \"deleteChipGroup\", \"deleteChip\", \"chipGroupExpandedText\", \"chipGroupCollapsedText\", \"categoryName\", \"showToolbarItem\"]);\n\n      var _this$context = this.context,\n          isExpanded = _this$context.isExpanded,\n          chipGroupContentRef = _this$context.chipGroupContentRef;\n      var categoryKey = typeof categoryName !== 'string' && categoryName.hasOwnProperty('key') ? categoryName.key : categoryName.toString();\n      var chipGroup = chips.length ? React.createElement(ToolbarItem, {\n        variant: \"chip-group\"\n      }, React.createElement(ChipGroup, {\n        key: categoryKey,\n        categoryName: typeof categoryName === 'string' ? categoryName : categoryName.name,\n        isClosable: deleteChipGroup !== undefined,\n        onClick: function onClick() {\n          return deleteChipGroup(categoryName);\n        },\n        collapsedText: chipGroupCollapsedText,\n        expandedText: chipGroupExpandedText\n      }, chips.map(function (chip) {\n        return typeof chip === 'string' ? React.createElement(Chip, {\n          key: chip,\n          onClick: function onClick() {\n            return deleteChip(categoryKey, chip);\n          }\n        }, chip) : React.createElement(Chip, {\n          key: chip.key,\n          onClick: function onClick() {\n            return deleteChip(categoryKey, chip);\n          }\n        }, chip.node);\n      }))) : null;\n\n      if (!isExpanded && this.state.isMounted) {\n        return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild));\n      }\n\n      return React.createElement(ToolbarContentContext.Consumer, null, function (_ref) {\n        var chipContainerRef = _ref.chipContainerRef;\n        return React.createElement(React.Fragment, null, showToolbarItem && React.createElement(ToolbarItem, Object.assign({}, props), children), chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current));\n      });\n    }\n  }]);\n\n  return ToolbarFilter;\n}(React.Component);\nToolbarFilter.displayName = 'ToolbarFilter';\nToolbarFilter.contextType = ToolbarContext;\nToolbarFilter.defaultProps = {\n  chips: [],\n  showToolbarItem: true\n};","map":{"version":3,"mappings":"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","names":["React","ReactDOM","ToolbarItem","ChipGroup","Chip","ToolbarContentContext","ToolbarContext","ToolbarFilter","props","state","isMounted","categoryName","chips","context","updateNumberFilters","hasOwnProperty","key","toString","length","setState","children","_a","deleteChipGroup","deleteChip","chipGroupExpandedText","chipGroupCollapsedText","showToolbarItem","__rest","isExpanded","chipGroupContentRef","categoryKey","chipGroup","variant","name","isClosable","undefined","onClick","collapsedText","expandedText","map","chip","node","Fragment","Object","createPortal","current","firstElementChild","Consumer","chipContainerRef","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/ToolbarFilter.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { ToolbarItem, ToolbarItemProps } from './ToolbarItem';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { ToolbarContentContext, ToolbarContext } from './ToolbarUtils';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ToolbarChipGroup {\n  /** A unique key to identify this chip group category */\n  key: string;\n  /** The category name to display for the chip group */\n  name: string;\n}\n\nexport interface ToolbarChip {\n  /** A unique key to identify this chip */\n  key: string;\n  /** The ReactNode to display in the chip */\n  node: React.ReactNode;\n}\n\nexport interface ToolbarFilterProps extends ToolbarItemProps {\n  /** An array of strings to be displayed as chips in the expandable content */\n  chips?: (string | ToolbarChip)[];\n  /** Callback passed by consumer used to close the entire chip group */\n  deleteChipGroup?: (category: string | ToolbarChipGroup) => void;\n  /** Callback passed by consumer used to delete a chip from the chips[] */\n  deleteChip?: (category: string | ToolbarChipGroup, chip: ToolbarChip | string) => void;\n  /** Customizable \"Show Less\" text string for the chip group */\n  chipGroupExpandedText?: string;\n  /** Customizeable template string for the chip group. Use variable \"${remaining}\" for the overflow chip count. */\n  chipGroupCollapsedText?: string;\n  /** Content to be rendered inside the data toolbar item associated with the chip group */\n  children: React.ReactNode;\n  /** Unique category name to be used as a label for the chip group */\n  categoryName: string | ToolbarChipGroup;\n  /** Flag to show the toolbar item */\n  showToolbarItem?: boolean;\n}\n\ninterface ToolbarFilterState {\n  isMounted: boolean;\n}\n\nexport class ToolbarFilter extends React.Component<ToolbarFilterProps, ToolbarFilterState> {\n  static displayName = 'ToolbarFilter';\n  static contextType = ToolbarContext;\n  context!: React.ContextType<typeof ToolbarContext>;\n  static defaultProps: PickOptional<ToolbarFilterProps> = {\n    chips: [] as (string | ToolbarChip)[],\n    showToolbarItem: true\n  };\n\n  constructor(props: ToolbarFilterProps) {\n    super(props);\n    this.state = {\n      isMounted: false\n    };\n  }\n\n  componentDidMount() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n    this.setState({ isMounted: true });\n  }\n\n  componentDidUpdate() {\n    const { categoryName, chips } = this.props;\n    this.context.updateNumberFilters(\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString(),\n      chips.length\n    );\n  }\n\n  render() {\n    const {\n      children,\n      chips,\n      deleteChipGroup,\n      deleteChip,\n      chipGroupExpandedText,\n      chipGroupCollapsedText,\n      categoryName,\n      showToolbarItem,\n      ...props\n    } = this.props;\n    const { isExpanded, chipGroupContentRef } = this.context;\n    const categoryKey =\n      typeof categoryName !== 'string' && categoryName.hasOwnProperty('key')\n        ? categoryName.key\n        : categoryName.toString();\n\n    const chipGroup = chips.length ? (\n      <ToolbarItem variant=\"chip-group\">\n        <ChipGroup\n          key={categoryKey}\n          categoryName={typeof categoryName === 'string' ? categoryName : categoryName.name}\n          isClosable={deleteChipGroup !== undefined}\n          onClick={() => deleteChipGroup(categoryName)}\n          collapsedText={chipGroupCollapsedText}\n          expandedText={chipGroupExpandedText}\n        >\n          {chips.map(chip =>\n            typeof chip === 'string' ? (\n              <Chip key={chip} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip}\n              </Chip>\n            ) : (\n              <Chip key={chip.key} onClick={() => deleteChip(categoryKey, chip)}>\n                {chip.node}\n              </Chip>\n            )\n          )}\n        </ChipGroup>\n      </ToolbarItem>\n    ) : null;\n\n    if (!isExpanded && this.state.isMounted) {\n      return (\n        <React.Fragment>\n          {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n          {ReactDOM.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)}\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <ToolbarContentContext.Consumer>\n        {({ chipContainerRef }) => (\n          <React.Fragment>\n            {showToolbarItem && <ToolbarItem {...props}>{children}</ToolbarItem>}\n            {chipContainerRef.current && ReactDOM.createPortal(chipGroup, chipContainerRef.current)}\n          </React.Fragment>\n        )}\n      </ToolbarContentContext.Consumer>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}