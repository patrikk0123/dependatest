{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { ContextSelectorToggle } from './ContextSelectorToggle';\nimport { ContextSelectorMenuList } from './ContextSelectorMenuList';\nimport { ContextSelectorContext } from './contextSelectorConstants';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextInput } from '../TextInput';\nimport { InputGroup } from '../InputGroup';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { FocusTrap } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers'; // seed for the aria-labelledby ID\n\nvar currentId = 0;\nvar newId = currentId++;\nexport var ContextSelector = /*#__PURE__*/function (_React$Component) {\n  _inherits(ContextSelector, _React$Component);\n\n  var _super = _createSuper(ContextSelector);\n\n  function ContextSelector(props) {\n    var _this;\n\n    _classCallCheck(this, ContextSelector);\n\n    _this = _super.call(this, props);\n    _this.parentRef = React.createRef();\n    _this.popperRef = React.createRef();\n\n    _this.onEnterPressed = function (event) {\n      if (event.charCode === KEY_CODES.ENTER) {\n        _this.props.onSearchButtonClick();\n      }\n    };\n\n    _this.state = {\n      ouiaStateId: getDefaultOUIAId(ContextSelector.displayName)\n    };\n    return _this;\n  }\n\n  _createClass(ContextSelector, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var toggleId = \"pf-context-selector-toggle-id-\".concat(newId);\n      var screenReaderLabelId = \"pf-context-selector-label-id-\".concat(newId);\n      var searchButtonId = \"pf-context-selector-search-button-id-\".concat(newId);\n\n      var _a = this.props,\n          children = _a.children,\n          className = _a.className,\n          isOpen = _a.isOpen,\n          isFullHeight = _a.isFullHeight,\n          onToggle = _a.onToggle,\n          onSelect = _a.onSelect,\n          screenReaderLabel = _a.screenReaderLabel,\n          toggleText = _a.toggleText,\n          searchButtonAriaLabel = _a.searchButtonAriaLabel,\n          searchInputValue = _a.searchInputValue,\n          onSearchInputChange = _a.onSearchInputChange,\n          searchInputPlaceholder = _a.searchInputPlaceholder,\n          onSearchButtonClick = _a.onSearchButtonClick,\n          menuAppendTo = _a.menuAppendTo,\n          ouiaId = _a.ouiaId,\n          ouiaSafe = _a.ouiaSafe,\n          isPlain = _a.isPlain,\n          isText = _a.isText,\n          footer = _a.footer,\n          disableFocusTrap = _a.disableFocusTrap,\n          isFlipEnabled = _a.isFlipEnabled,\n          props = __rest(_a, [\"children\", \"className\", \"isOpen\", \"isFullHeight\", \"onToggle\", \"onSelect\", \"screenReaderLabel\", \"toggleText\", \"searchButtonAriaLabel\", \"searchInputValue\", \"onSearchInputChange\", \"searchInputPlaceholder\", \"onSearchButtonClick\", \"menuAppendTo\", \"ouiaId\", \"ouiaSafe\", \"isPlain\", \"isText\", \"footer\", \"disableFocusTrap\", \"isFlipEnabled\"]);\n\n      var menuContainer = React.createElement(\"div\", Object.assign({\n        className: css(styles.contextSelectorMenu)\n      }, isFlipEnabled && {\n        style: {\n          position: 'revert'\n        }\n      }), isOpen && React.createElement(FocusTrap, {\n        active: !disableFocusTrap,\n        focusTrapOptions: {\n          clickOutsideDeactivates: true,\n          tabbableOptions: {\n            displayCheck: 'none'\n          }\n        }\n      }, React.createElement(\"div\", {\n        className: css(styles.contextSelectorMenuSearch)\n      }, React.createElement(InputGroup, null, React.createElement(TextInput, {\n        value: searchInputValue,\n        type: \"search\",\n        placeholder: searchInputPlaceholder,\n        onChange: onSearchInputChange,\n        onKeyPress: this.onEnterPressed,\n        \"aria-labelledby\": searchButtonId\n      }), React.createElement(Button, {\n        variant: ButtonVariant.control,\n        \"aria-label\": searchButtonAriaLabel,\n        id: searchButtonId,\n        onClick: onSearchButtonClick\n      }, React.createElement(SearchIcon, {\n        \"aria-hidden\": \"true\"\n      })))), React.createElement(ContextSelectorContext.Provider, {\n        value: {\n          onSelect: onSelect\n        }\n      }, React.createElement(ContextSelectorMenuList, {\n        isOpen: isOpen\n      }, children)), footer));\n      var popperContainer = React.createElement(\"div\", Object.assign({\n        className: css(styles.contextSelector, isOpen && styles.modifiers.expanded, className),\n        ref: this.popperRef\n      }, props), isOpen && menuContainer);\n      var mainContainer = React.createElement(\"div\", Object.assign({\n        className: css(styles.contextSelector, isOpen && styles.modifiers.expanded, isFullHeight && styles.modifiers.fullHeight, className),\n        ref: this.parentRef\n      }, getOUIAProps(ContextSelector.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), screenReaderLabel && React.createElement(\"span\", {\n        id: screenReaderLabelId,\n        hidden: true\n      }, screenReaderLabel), React.createElement(ContextSelectorToggle, {\n        onToggle: onToggle,\n        isOpen: isOpen,\n        toggleText: toggleText,\n        id: toggleId,\n        parentRef: menuAppendTo === 'inline' ? this.parentRef : this.popperRef,\n        \"aria-labelledby\": \"\".concat(screenReaderLabelId, \" \").concat(toggleId),\n        isPlain: isPlain,\n        isText: isText\n      }), isOpen && menuAppendTo === 'inline' && menuContainer);\n\n      var getParentElement = function getParentElement() {\n        if (_this2.parentRef && _this2.parentRef.current) {\n          return _this2.parentRef.current.parentElement;\n        }\n\n        return null;\n      };\n\n      return menuAppendTo === 'inline' ? mainContainer : React.createElement(Popper, {\n        trigger: mainContainer,\n        popper: popperContainer,\n        appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo,\n        isVisible: isOpen\n      });\n    }\n  }]);\n\n  return ContextSelector;\n}(React.Component);\nContextSelector.displayName = 'ContextSelector';\nContextSelector.defaultProps = {\n  children: null,\n  className: '',\n  isOpen: false,\n  onToggle: function onToggle() {\n    return undefined;\n  },\n  onSelect: function onSelect() {\n    return undefined;\n  },\n  screenReaderLabel: '',\n  toggleText: '',\n  searchButtonAriaLabel: 'Search menu items',\n  searchInputValue: '',\n  onSearchInputChange: function onSearchInputChange() {\n    return undefined;\n  },\n  searchInputPlaceholder: 'Search',\n  onSearchButtonClick: function onSearchButtonClick() {\n    return undefined;\n  },\n  menuAppendTo: 'inline',\n  ouiaSafe: true,\n  disableFocusTrap: false,\n  footer: null,\n  isPlain: false,\n  isText: false,\n  isFlipEnabled: false\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","SearchIcon","ContextSelectorToggle","ContextSelectorMenuList","ContextSelectorContext","Button","ButtonVariant","TextInput","InputGroup","KEY_CODES","FocusTrap","Popper","getOUIAProps","getDefaultOUIAId","currentId","newId","ContextSelector","props","createRef","event","charCode","ENTER","onSearchButtonClick","state","ouiaStateId","displayName","toggleId","screenReaderLabelId","searchButtonId","children","_a","className","isOpen","isFullHeight","onToggle","onSelect","screenReaderLabel","toggleText","searchButtonAriaLabel","searchInputValue","onSearchInputChange","searchInputPlaceholder","menuAppendTo","ouiaId","ouiaSafe","isPlain","isText","footer","disableFocusTrap","isFlipEnabled","__rest","menuContainer","contextSelectorMenu","style","position","active","focusTrapOptions","clickOutsideDeactivates","tabbableOptions","displayCheck","contextSelectorMenuSearch","value","type","placeholder","onChange","onKeyPress","onEnterPressed","variant","control","id","onClick","Provider","popperContainer","contextSelector","modifiers","expanded","ref","popperRef","mainContainer","fullHeight","parentRef","undefined","hidden","getParentElement","current","parentElement","trigger","popper","appendTo","isVisible","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ContextSelector/ContextSelector.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ContextSelector/context-selector';\nimport { css } from '@patternfly/react-styles';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { ContextSelectorToggle } from './ContextSelectorToggle';\nimport { ContextSelectorMenuList } from './ContextSelectorMenuList';\nimport { ContextSelectorContext } from './contextSelectorConstants';\nimport { Button, ButtonVariant } from '../Button';\nimport { TextInput } from '../TextInput';\nimport { InputGroup } from '../InputGroup';\nimport { KEY_CODES } from '../../helpers/constants';\nimport { FocusTrap } from '../../helpers';\nimport { ToggleMenuBaseProps } from '../../helpers/Popper/Popper';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\n\n// seed for the aria-labelledby ID\nlet currentId = 0;\nconst newId = currentId++;\n\nexport interface ContextSelectorProps extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>, OUIAProps {\n  /** content rendered inside the Context Selector */\n  children?: React.ReactNode;\n  /** Classes applied to root element of Context Selector */\n  className?: string;\n  /** Flag to indicate if Context Selector is opened */\n  isOpen?: boolean;\n  /** Function callback called when user clicks toggle button */\n  onToggle?: (event: any, value: boolean) => void;\n  /** Function callback called when user selects item */\n  onSelect?: (event: any, value: React.ReactNode) => void;\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n  /** Flag indicating that the context selector should expand to full height */\n  isFullHeight?: boolean;\n  /** Labels the Context Selector for Screen Readers */\n  screenReaderLabel?: string;\n  /** Text that appears in the Context Selector Toggle */\n  toggleText?: string;\n  /** Aria-label for the Context Selector Search Button */\n  searchButtonAriaLabel?: string;\n  /** Value in the Search field */\n  searchInputValue?: string;\n  /** Function callback called when user changes the Search Input */\n  onSearchInputChange?: (value: string) => void;\n  /** Search Input placeholder */\n  searchInputPlaceholder?: string;\n  /** Function callback for when Search Button is clicked */\n  onSearchButtonClick?: (event?: React.SyntheticEvent<HTMLButtonElement>) => void;\n  /** Footer of the context selector */\n  footer?: React.ReactNode;\n  /** Flag to indicate the toggle has no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if toggle is textual toggle */\n  isText?: boolean;\n  /** Flag to disable focus trap */\n  disableFocusTrap?: boolean;\n  /** Flag for indicating that the context selector menu should automatically flip vertically when\n   * it reaches the boundary. This prop can only be used when the context selector component is not\n   * appended inline, e.g. `menuAppendTo=\"parent\"`\n   */\n  isFlipEnabled?: boolean;\n}\n\nexport class ContextSelector extends React.Component<ContextSelectorProps, { ouiaStateId: string }> {\n  static displayName = 'ContextSelector';\n  static defaultProps: ContextSelectorProps = {\n    children: null as React.ReactNode,\n    className: '',\n    isOpen: false,\n    onToggle: () => undefined as any,\n    onSelect: () => undefined as any,\n    screenReaderLabel: '',\n    toggleText: '',\n    searchButtonAriaLabel: 'Search menu items',\n    searchInputValue: '',\n    onSearchInputChange: () => undefined as any,\n    searchInputPlaceholder: 'Search',\n    onSearchButtonClick: () => undefined as any,\n    menuAppendTo: 'inline',\n    ouiaSafe: true,\n    disableFocusTrap: false,\n    footer: null as React.ReactNode,\n    isPlain: false,\n    isText: false,\n    isFlipEnabled: false\n  };\n  constructor(props: ContextSelectorProps) {\n    super(props);\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(ContextSelector.displayName)\n    };\n  }\n\n  parentRef: React.RefObject<HTMLDivElement> = React.createRef();\n  popperRef: React.RefObject<HTMLDivElement> = React.createRef();\n\n  onEnterPressed = (event: any) => {\n    if (event.charCode === KEY_CODES.ENTER) {\n      this.props.onSearchButtonClick();\n    }\n  };\n\n  render() {\n    const toggleId = `pf-context-selector-toggle-id-${newId}`;\n    const screenReaderLabelId = `pf-context-selector-label-id-${newId}`;\n    const searchButtonId = `pf-context-selector-search-button-id-${newId}`;\n    const {\n      children,\n      className,\n      isOpen,\n      isFullHeight,\n      onToggle,\n      onSelect,\n      screenReaderLabel,\n      toggleText,\n      searchButtonAriaLabel,\n      searchInputValue,\n      onSearchInputChange,\n      searchInputPlaceholder,\n      onSearchButtonClick,\n      menuAppendTo,\n      ouiaId,\n      ouiaSafe,\n      isPlain,\n      isText,\n      footer,\n      disableFocusTrap,\n      isFlipEnabled,\n      ...props\n    } = this.props;\n    const menuContainer = (\n      <div\n        className={css(styles.contextSelectorMenu)}\n        // This removes the `position: absolute`styling from the `.pf-c-context-selector__menu`\n        // allowing the menu to flip correctly\n        {...(isFlipEnabled && { style: { position: 'revert' } })}\n      >\n        {isOpen && (\n          <FocusTrap\n            active={!disableFocusTrap}\n            focusTrapOptions={{ clickOutsideDeactivates: true, tabbableOptions: { displayCheck: 'none' } }}\n          >\n            <div className={css(styles.contextSelectorMenuSearch)}>\n              <InputGroup>\n                <TextInput\n                  value={searchInputValue}\n                  type=\"search\"\n                  placeholder={searchInputPlaceholder}\n                  onChange={onSearchInputChange}\n                  onKeyPress={this.onEnterPressed}\n                  aria-labelledby={searchButtonId}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  aria-label={searchButtonAriaLabel}\n                  id={searchButtonId}\n                  onClick={onSearchButtonClick}\n                >\n                  <SearchIcon aria-hidden=\"true\" />\n                </Button>\n              </InputGroup>\n            </div>\n            <ContextSelectorContext.Provider value={{ onSelect }}>\n              <ContextSelectorMenuList isOpen={isOpen}>{children}</ContextSelectorMenuList>\n            </ContextSelectorContext.Provider>\n            {footer}\n          </FocusTrap>\n        )}\n      </div>\n    );\n    const popperContainer = (\n      <div\n        className={css(styles.contextSelector, isOpen && styles.modifiers.expanded, className)}\n        ref={this.popperRef}\n        {...props}\n      >\n        {isOpen && menuContainer}\n      </div>\n    );\n    const mainContainer = (\n      <div\n        className={css(\n          styles.contextSelector,\n          isOpen && styles.modifiers.expanded,\n          isFullHeight && styles.modifiers.fullHeight,\n          className\n        )}\n        ref={this.parentRef}\n        {...getOUIAProps(ContextSelector.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n        {...props}\n      >\n        {screenReaderLabel && (\n          <span id={screenReaderLabelId} hidden>\n            {screenReaderLabel}\n          </span>\n        )}\n        <ContextSelectorToggle\n          onToggle={onToggle}\n          isOpen={isOpen}\n          toggleText={toggleText}\n          id={toggleId}\n          parentRef={menuAppendTo === 'inline' ? this.parentRef : this.popperRef}\n          aria-labelledby={`${screenReaderLabelId} ${toggleId}`}\n          isPlain={isPlain}\n          isText={isText}\n        />\n        {isOpen && menuAppendTo === 'inline' && menuContainer}\n      </div>\n    );\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n      return null;\n    };\n    return menuAppendTo === 'inline' ? (\n      mainContainer\n    ) : (\n      <Popper\n        trigger={mainContainer}\n        popper={popperContainer}\n        appendTo={menuAppendTo === 'parent' ? getParentElement() : menuAppendTo}\n        isVisible={isOpen}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}