{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { Progress } from '../Progress';\nimport { Button } from '../Button';\nimport FileIcon from '@patternfly/react-icons/dist/esm/icons/file-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nexport const MultipleFileUploadStatusItem = _a => {\n  var {\n    className,\n    file,\n    fileIcon,\n    onReadStarted = () => {},\n    onReadFinished = () => {},\n    onReadSuccess = () => {},\n    onReadFail = () => {},\n    onClearClick = () => {},\n    customFileHandler,\n    fileName,\n    fileSize,\n    progressValue,\n    progressVariant,\n    progressAriaLabel,\n    progressAriaLabelledBy,\n    progressId,\n    buttonAriaLabel = 'Remove from list'\n  } = _a,\n      props = __rest(_a, [\"className\", \"file\", \"fileIcon\", \"onReadStarted\", \"onReadFinished\", \"onReadSuccess\", \"onReadFail\", \"onClearClick\", \"customFileHandler\", \"fileName\", \"fileSize\", \"progressValue\", \"progressVariant\", \"progressAriaLabel\", \"progressAriaLabelledBy\", \"progressId\", \"buttonAriaLabel\"]);\n\n  const [loadPercentage, setLoadPercentage] = React.useState(0);\n  const [loadResult, setLoadResult] = React.useState();\n\n  function readFile(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = () => reject(reader.error);\n\n      reader.onprogress = data => {\n        if (data.lengthComputable) {\n          setLoadPercentage(data.loaded / data.total * 100);\n        }\n      };\n\n      reader.readAsDataURL(file);\n    });\n  }\n\n  React.useEffect(() => {\n    if (customFileHandler) {\n      customFileHandler(file);\n    } else {\n      onReadStarted(file);\n      readFile(file).then(data => {\n        setLoadResult('success');\n        setLoadPercentage(100);\n        onReadFinished(file);\n        onReadSuccess(data, file);\n      }).catch(error => {\n        onReadFinished(file);\n        onReadFail(error, file);\n        setLoadResult('danger');\n      });\n    }\n  }, []);\n\n  const getHumanReadableFileSize = size => {\n    const prefixes = ['', 'K', 'M', 'G', 'T'];\n    let prefixUnit = 0;\n\n    while (size >= 1000) {\n      prefixUnit += 1;\n      size = size / 1000;\n    }\n\n    if (prefixUnit >= prefixes.length) {\n      return 'File size too large';\n    }\n\n    return `${Math.round(size)}${prefixes[prefixUnit]}B`;\n  };\n\n  const title = React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgress\n  }, React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgressText\n  }, fileName || (file === null || file === void 0 ? void 0 : file.name) || ''), React.createElement(\"span\", {\n    className: styles.multipleFileUploadStatusItemProgressSize\n  }, fileSize || getHumanReadableFileSize((file === null || file === void 0 ? void 0 : file.size) || 0)));\n  return React.createElement(\"li\", Object.assign({\n    className: css(styles.multipleFileUploadStatusItem, className)\n  }, props), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemIcon\n  }, fileIcon || React.createElement(FileIcon, null)), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemMain\n  }, React.createElement(Progress, {\n    title: title,\n    value: progressValue || loadPercentage,\n    variant: progressVariant || loadResult,\n    \"aria-label\": progressAriaLabel,\n    \"aria-labelledby\": progressAriaLabelledBy,\n    id: progressId\n  })), React.createElement(\"div\", {\n    className: styles.multipleFileUploadStatusItemClose\n  }, React.createElement(Button, {\n    variant: \"plain\",\n    \"aria-label\": buttonAriaLabel,\n    onClick: onClearClick\n  }, React.createElement(TimesCircleIcon, null))));\n};\nMultipleFileUploadStatusItem.displayName = 'MultipleFileUploadStatusItem';","map":{"version":3,"mappings":"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","names":["React","styles","css","Progress","Button","FileIcon","TimesCircleIcon","MultipleFileUploadStatusItem","_a","className","file","fileIcon","onReadStarted","onReadFinished","onReadSuccess","onReadFail","onClearClick","customFileHandler","fileName","fileSize","progressValue","progressVariant","progressAriaLabel","progressAriaLabelledBy","progressId","buttonAriaLabel","props","loadPercentage","setLoadPercentage","useState","loadResult","setLoadResult","readFile","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","onprogress","data","lengthComputable","loaded","total","readAsDataURL","useEffect","then","catch","getHumanReadableFileSize","size","prefixes","prefixUnit","length","Math","round","title","multipleFileUploadStatusItemProgress","multipleFileUploadStatusItemProgressText","name","multipleFileUploadStatusItemProgressSize","multipleFileUploadStatusItem","multipleFileUploadStatusItemIcon","multipleFileUploadStatusItemMain","value","variant","id","multipleFileUploadStatusItemClose","onClick","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/MultipleFileUpload/MultipleFileUploadStatusItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload';\nimport { css } from '@patternfly/react-styles';\nimport { Progress } from '../Progress';\nimport { Button } from '../Button';\nimport FileIcon from '@patternfly/react-icons/dist/esm/icons/file-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\n\nexport interface MultipleFileUploadStatusItemProps extends React.HTMLProps<HTMLLIElement> {\n  /** Class to add to outer div */\n  className?: string;\n  /** Adds accessibility text to the status item deletion button */\n  buttonAriaLabel?: string;\n  /** The file object being represented by the status item */\n  file?: File;\n  /** A callback for when a selected file starts loading */\n  onReadStarted?: (fileHandle: File) => void;\n  /** A callback for when a selected file finishes loading */\n  onReadFinished?: (fileHandle: File) => void;\n  /** A callback for when the FileReader successfully reads the file */\n  onReadSuccess?: (data: string, file: File) => void;\n  /** A callback for when the FileReader API fails */\n  onReadFail?: (error: DOMException, onReadFail: File) => void;\n  /** Clear button was clicked */\n  onClearClick?: React.MouseEventHandler<HTMLButtonElement>;\n\n  // Props to bypass built in behavior\n\n  /** A callback to process file reading in a custom way */\n  customFileHandler?: (file: File) => void;\n  /** A custom icon to show in place of the generic file icon */\n  fileIcon?: React.ReactNode;\n  /** A custom name to display for the file rather than using built in functionality to auto-fill it */\n  fileName?: string;\n  /** A custom file size to display for the file rather than using built in functionality to auto-fill it */\n  fileSize?: number;\n  /** A custom value to display for the progress component rather than using built in functionality to auto-fill it */\n  progressValue?: number;\n  /** A custom variant to apply to the progress component rather than using built in functionality to auto-fill it */\n  progressVariant?: 'danger' | 'success' | 'warning';\n\n  // Props passed through to the progress component\n\n  /** Adds accessible text to the progress bar. Required when title not used and there is not any label associated with the progress bar */\n  progressAriaLabel?: string;\n  /** Associates the progress bar with it's label for accessibility purposes. Required when title not used */\n  progressAriaLabelledBy?: string;\n  /** Unique identifier for progress. Generated if not specified. */\n  progressId?: string;\n}\n\nexport const MultipleFileUploadStatusItem: React.FunctionComponent<MultipleFileUploadStatusItemProps> = ({\n  className,\n  file,\n  fileIcon,\n  onReadStarted = () => {},\n  onReadFinished = () => {},\n  onReadSuccess = () => {},\n  onReadFail = () => {},\n  onClearClick = () => {},\n  customFileHandler,\n  fileName,\n  fileSize,\n  progressValue,\n  progressVariant,\n  progressAriaLabel,\n  progressAriaLabelledBy,\n  progressId,\n  buttonAriaLabel = 'Remove from list',\n  ...props\n}: MultipleFileUploadStatusItemProps) => {\n  const [loadPercentage, setLoadPercentage] = React.useState(0);\n  const [loadResult, setLoadResult] = React.useState<undefined | 'danger' | 'success'>();\n\n  function readFile(file: File) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(reader.error);\n      reader.onprogress = data => {\n        if (data.lengthComputable) {\n          setLoadPercentage((data.loaded / data.total) * 100);\n        }\n      };\n      reader.readAsDataURL(file);\n    });\n  }\n\n  React.useEffect(() => {\n    if (customFileHandler) {\n      customFileHandler(file);\n    } else {\n      onReadStarted(file);\n      readFile(file)\n        .then(data => {\n          setLoadResult('success');\n          setLoadPercentage(100);\n          onReadFinished(file);\n          onReadSuccess(data as string, file);\n        })\n        .catch((error: DOMException) => {\n          onReadFinished(file);\n          onReadFail(error, file);\n          setLoadResult('danger');\n        });\n    }\n  }, []);\n\n  const getHumanReadableFileSize = (size: number) => {\n    const prefixes = ['', 'K', 'M', 'G', 'T'];\n    let prefixUnit = 0;\n    while (size >= 1000) {\n      prefixUnit += 1;\n      size = size / 1000;\n    }\n\n    if (prefixUnit >= prefixes.length) {\n      return 'File size too large';\n    }\n\n    return `${Math.round(size)}${prefixes[prefixUnit]}B`;\n  };\n\n  const title = (\n    <span className={styles.multipleFileUploadStatusItemProgress}>\n      <span className={styles.multipleFileUploadStatusItemProgressText}>{fileName || file?.name || ''}</span>\n      <span className={styles.multipleFileUploadStatusItemProgressSize}>\n        {fileSize || getHumanReadableFileSize(file?.size || 0)}\n      </span>\n    </span>\n  );\n\n  return (\n    <li className={css(styles.multipleFileUploadStatusItem, className)} {...props}>\n      <div className={styles.multipleFileUploadStatusItemIcon}>{fileIcon || <FileIcon />}</div>\n      <div className={styles.multipleFileUploadStatusItemMain}>\n        <Progress\n          title={title}\n          value={progressValue || loadPercentage}\n          variant={progressVariant || loadResult}\n          aria-label={progressAriaLabel}\n          aria-labelledby={progressAriaLabelledBy}\n          id={progressId}\n        />\n      </div>\n      <div className={styles.multipleFileUploadStatusItemClose}>\n        <Button variant=\"plain\" aria-label={buttonAriaLabel} onClick={onClearClick}>\n          <TimesCircleIcon />\n        </Button>\n      </div>\n    </li>\n  );\n};\n\nMultipleFileUploadStatusItem.displayName = 'MultipleFileUploadStatusItem';\n"]},"metadata":{},"sourceType":"module"}