{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/LogViewer/LogViewer.tsx\";\nimport { Button, Switch, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { LongArrowAltDownIcon, LongArrowAltUpIcon, OutlinedPlayCircleIcon } from '@patternfly/react-icons';\nimport { LogViewer as LogViewerPF } from '@patternfly/react-log-viewer';\nimport { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Log viewer component to display logs.\n * Log viewer is considered to be paused when it is not scrolled to the bottom.\n * Whe log viewer is paused, data are not rendered (but still stored). When paused, 'resume' button will appear so user can scroll to the bottom.\n * Resume button also displays number of lines not rendered (if any).\n * After scrolling to the bottom, all data not rendered yet will be rendered.\n *\n * User can use 'Top' button to scroll to the top and 'Bottom' button to scroll to the bottom.\n * There is also a switch, which can be used to change default 'follow' value.\n * When log viewer is following and new data are inputted, log viewer will automatically scroll to the bottom.\n *\n * See an example use {@link DemoPage}\n *\n * @example\n * ```tsx\n * <LogViewer data={logData} follow={false} />\n * ```\n *\n * @param data - data log viewer will render\n */\nexport const LogViewer = _ref => {\n  let {\n    data\n  } = _ref;\n  const logViewerRef = useRef(); // data that are actually rendered\n\n  const [renderedData, setRenderedData] = useState(data); // is log viewer currently following new data input?\n\n  const [isFollowing, setIsFollowing] = useState(); // are lines wrapped?\n\n  const [areLinesWrapped, setAreLinesWrapped] = useState(); // is log viewer paused? (data are still stored, but not rendered)\n\n  const [isPaused, setIsPaused] = useState(true); // count of rendered lines\n  // is assigned to 'scrolToRow' only if log viewer is paused (so no automatic scrolling happens when paused)\n\n  const [lineCount, setLineCount] = useState(0); // if paused, how many lines were not rendered?\n\n  const [linesBehind, setLinesBehind] = useState(0);\n  useEffect(() => {\n    const shouldFollow = window.localStorage.getItem('log-viewer-following') === 'true';\n    const shouldWrap = window.localStorage.getItem('log-viewer-wrapping') === 'true';\n    setIsFollowing(shouldFollow);\n    setAreLinesWrapped(shouldWrap);\n  }, []);\n  useEffect(() => {\n    if (!isPaused && data.length > 0) {\n      var _logViewerRef$current;\n\n      setLineCount(data.length);\n      setRenderedData(data);\n      logViewerRef === null || logViewerRef === void 0 ? void 0 : (_logViewerRef$current = logViewerRef.current) === null || _logViewerRef$current === void 0 ? void 0 : _logViewerRef$current.scrollToBottom();\n    }\n  }, [isPaused, data]);\n  useEffect(() => {\n    setLinesBehind(data.length - lineCount);\n  }, [data.length, lineCount]);\n  useEffect(() => {\n    if (isFollowing) {\n      setIsPaused(false);\n    }\n  }, [isFollowing, data]);\n\n  const onScroll = _ref2 => {\n    let {\n      scrollOffsetToBottom,\n      scrollUpdateWasRequested\n    } = _ref2;\n\n    if (!scrollUpdateWasRequested) {\n      if (scrollOffsetToBottom > 0) {\n        setIsPaused(true);\n      } else {\n        setIsPaused(false);\n      }\n    }\n  };\n\n  const HeaderToolbar = () => /*#__PURE__*/_jsxDEV(Toolbar, {\n    children: /*#__PURE__*/_jsxDEV(ToolbarContent, {\n      children: [/*#__PURE__*/_jsxDEV(ToolbarItem, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            if (logViewerRef !== null && logViewerRef !== void 0 && logViewerRef.current.state.scrollOffset) {\n              var _logViewerRef$current2;\n\n              setIsPaused(true);\n              logViewerRef === null || logViewerRef === void 0 ? void 0 : (_logViewerRef$current2 = logViewerRef.current) === null || _logViewerRef$current2 === void 0 ? void 0 : _logViewerRef$current2.scrollTo(0, 0);\n            }\n          },\n          variant: \"control\",\n          icon: /*#__PURE__*/_jsxDEV(LongArrowAltUpIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 19\n          }, this),\n          children: \"Top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToolbarItem, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            setIsPaused(false);\n          },\n          variant: \"control\",\n          icon: /*#__PURE__*/_jsxDEV(LongArrowAltDownIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 19\n          }, this),\n          children: \"Bottom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToolbarItem, {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          label: \"Force Following\",\n          labelOff: \"Force Following\",\n          isChecked: isFollowing,\n          onChange: checked => {\n            setIsFollowing(checked);\n            window.localStorage.setItem('log-viewer-following', `${checked}`);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToolbarItem, {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          label: \"Wrap Lines\",\n          labelOff: \"Wrap Lines\",\n          isChecked: areLinesWrapped,\n          onChange: checked => {\n            setIsPaused(true);\n            setAreLinesWrapped(checked);\n            window.localStorage.setItem('log-viewer-wrapping', `${checked}`);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n\n  const FooterButton = () => /*#__PURE__*/_jsxDEV(Button, {\n    onClick: () => setIsPaused(false),\n    isBlock: true,\n    icon: /*#__PURE__*/_jsxDEV(OutlinedPlayCircleIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 62\n    }, this),\n    children: [\"resume \", linesBehind === 0 ? null : `and show ${linesBehind} lines`]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(LogViewerPF, {\n    innerRef: logViewerRef,\n    data: renderedData,\n    scrollToRow: !isPaused || isFollowing ? lineCount : 0,\n    onScroll: onScroll,\n    toolbar: /*#__PURE__*/_jsxDEV(HeaderToolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 16\n    }, this),\n    footer: isPaused && /*#__PURE__*/_jsxDEV(FooterButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 27\n    }, this),\n    isTextWrapped: areLinesWrapped\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Button","Switch","Toolbar","ToolbarContent","ToolbarItem","LongArrowAltDownIcon","LongArrowAltUpIcon","OutlinedPlayCircleIcon","LogViewer","LogViewerPF","useEffect","useRef","useState","data","logViewerRef","renderedData","setRenderedData","isFollowing","setIsFollowing","areLinesWrapped","setAreLinesWrapped","isPaused","setIsPaused","lineCount","setLineCount","linesBehind","setLinesBehind","shouldFollow","window","localStorage","getItem","shouldWrap","length","current","scrollToBottom","onScroll","scrollOffsetToBottom","scrollUpdateWasRequested","HeaderToolbar","state","scrollOffset","scrollTo","checked","setItem","FooterButton"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/LogViewer/LogViewer.tsx"],"sourcesContent":["import { Button, Switch, Toolbar, ToolbarContent, ToolbarItem } from '@patternfly/react-core';\nimport { LongArrowAltDownIcon, LongArrowAltUpIcon, OutlinedPlayCircleIcon } from '@patternfly/react-icons';\nimport { LogViewer as LogViewerPF } from '@patternfly/react-log-viewer';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface ILogViewerProps {\n  data: string | string[];\n}\n\ninterface IOnScrollProps {\n  scrollOffsetToBottom: number;\n  scrollUpdateWasRequested: boolean;\n}\n\n/**\n * Log viewer component to display logs.\n * Log viewer is considered to be paused when it is not scrolled to the bottom.\n * Whe log viewer is paused, data are not rendered (but still stored). When paused, 'resume' button will appear so user can scroll to the bottom.\n * Resume button also displays number of lines not rendered (if any).\n * After scrolling to the bottom, all data not rendered yet will be rendered.\n *\n * User can use 'Top' button to scroll to the top and 'Bottom' button to scroll to the bottom.\n * There is also a switch, which can be used to change default 'follow' value.\n * When log viewer is following and new data are inputted, log viewer will automatically scroll to the bottom.\n *\n * See an example use {@link DemoPage}\n *\n * @example\n * ```tsx\n * <LogViewer data={logData} follow={false} />\n * ```\n *\n * @param data - data log viewer will render\n */\nexport const LogViewer = ({ data }: ILogViewerProps) => {\n  const logViewerRef = useRef<any>();\n\n  // data that are actually rendered\n  const [renderedData, setRenderedData] = useState(data);\n  // is log viewer currently following new data input?\n  const [isFollowing, setIsFollowing] = useState<boolean>();\n  // are lines wrapped?\n  const [areLinesWrapped, setAreLinesWrapped] = useState<boolean>();\n  // is log viewer paused? (data are still stored, but not rendered)\n  const [isPaused, setIsPaused] = useState(true);\n  // count of rendered lines\n  // is assigned to 'scrolToRow' only if log viewer is paused (so no automatic scrolling happens when paused)\n  const [lineCount, setLineCount] = useState(0);\n  // if paused, how many lines were not rendered?\n  const [linesBehind, setLinesBehind] = useState(0);\n\n  useEffect(() => {\n    const shouldFollow = window.localStorage.getItem('log-viewer-following') === 'true';\n    const shouldWrap = window.localStorage.getItem('log-viewer-wrapping') === 'true';\n    setIsFollowing(shouldFollow);\n    setAreLinesWrapped(shouldWrap);\n  }, []);\n\n  useEffect(() => {\n    if (!isPaused && data.length > 0) {\n      setLineCount(data.length);\n      setRenderedData(data);\n      logViewerRef?.current?.scrollToBottom();\n    }\n  }, [isPaused, data]);\n\n  useEffect(() => {\n    setLinesBehind(data.length - lineCount);\n  }, [data.length, lineCount]);\n\n  useEffect(() => {\n    if (isFollowing) {\n      setIsPaused(false);\n    }\n  }, [isFollowing, data]);\n\n  const onScroll = ({ scrollOffsetToBottom, scrollUpdateWasRequested }: IOnScrollProps) => {\n    if (!scrollUpdateWasRequested) {\n      if (scrollOffsetToBottom > 0) {\n        setIsPaused(true);\n      } else {\n        setIsPaused(false);\n      }\n    }\n  };\n\n  const HeaderToolbar = () => (\n    <Toolbar>\n      <ToolbarContent>\n        <ToolbarItem>\n          <Button\n            onClick={() => {\n              if (logViewerRef?.current.state.scrollOffset) {\n                setIsPaused(true);\n                logViewerRef?.current?.scrollTo(0, 0);\n              }\n            }}\n            variant=\"control\"\n            icon={<LongArrowAltUpIcon />}\n          >\n            Top\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem>\n          <Button\n            onClick={() => {\n              setIsPaused(false);\n            }}\n            variant=\"control\"\n            icon={<LongArrowAltDownIcon />}\n          >\n            Bottom\n          </Button>\n        </ToolbarItem>\n        <ToolbarItem>\n          <Switch\n            label=\"Force Following\"\n            labelOff=\"Force Following\"\n            isChecked={isFollowing}\n            onChange={(checked) => {\n              setIsFollowing(checked);\n              window.localStorage.setItem('log-viewer-following', `${checked}`);\n            }}\n          />\n        </ToolbarItem>\n        <ToolbarItem>\n          <Switch\n            label=\"Wrap Lines\"\n            labelOff=\"Wrap Lines\"\n            isChecked={areLinesWrapped}\n            onChange={(checked) => {\n              setIsPaused(true);\n              setAreLinesWrapped(checked);\n              window.localStorage.setItem('log-viewer-wrapping', `${checked}`);\n            }}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n\n  const FooterButton = () => (\n    <Button onClick={() => setIsPaused(false)} isBlock icon={<OutlinedPlayCircleIcon />}>\n      resume {linesBehind === 0 ? null : `and show ${linesBehind} lines`}\n    </Button>\n  );\n\n  return (\n    <LogViewerPF\n      innerRef={logViewerRef}\n      data={renderedData}\n      scrollToRow={!isPaused || isFollowing ? lineCount : 0}\n      onScroll={onScroll}\n      toolbar={<HeaderToolbar />}\n      footer={isPaused && <FooterButton />}\n      isTextWrapped={areLinesWrapped}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}