{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { NUMBER_INDEX_DELTA, DEFAULT_FOCUS, DEFAULT_INDEX, DEFAULT_SEARCH_INDEX, DEFAULT_MATCH } from './utils/constants';\nimport { SearchInput } from '@patternfly/react-core';\nimport { LogViewerToolbarContext, LogViewerContext } from './LogViewerContext';\nimport { escapeString, searchForKeyword } from './utils/utils';\nexport const LogViewerSearch = _a => {\n  var _b;\n\n  var {\n    placeholder = 'Search',\n    minSearchChars = 1\n  } = _a,\n      props = __rest(_a, [\"placeholder\", \"minSearchChars\"]);\n\n  const [indexAdjuster, setIndexAdjuster] = useState(0);\n  const {\n    searchedWordIndexes,\n    scrollToRow,\n    setSearchedInput,\n    setCurrentSearchedItemCount,\n    setRowInFocus,\n    setSearchedWordIndexes,\n    currentSearchedItemCount,\n    searchedInput,\n    itemCount\n  } = useContext(LogViewerToolbarContext);\n  const {\n    parsedData\n  } = useContext(LogViewerContext);\n  const defaultRowInFocus = {\n    rowIndex: DEFAULT_FOCUS,\n    matchIndex: DEFAULT_MATCH\n  };\n  /* Defaulting the first focused row that contain searched keywords */\n\n  useEffect(() => {\n    if (hasFoundResults) {\n      setIndexAdjuster(1);\n    } else {\n      setIndexAdjuster(0);\n    }\n  }, [searchedWordIndexes]);\n  /* Updating searchedResults context state given changes in searched input */\n\n  useEffect(() => {\n    let foundKeywordIndexes = [];\n    const adjustedSearchedInput = escapeString(searchedInput);\n\n    if (adjustedSearchedInput !== '' && adjustedSearchedInput.length >= minSearchChars) {\n      foundKeywordIndexes = searchForKeyword(adjustedSearchedInput, parsedData, itemCount || parsedData.length);\n\n      if (foundKeywordIndexes.length !== 0) {\n        setSearchedWordIndexes(foundKeywordIndexes);\n        scrollToRow(foundKeywordIndexes[DEFAULT_SEARCH_INDEX]);\n        setCurrentSearchedItemCount(DEFAULT_INDEX);\n      }\n    }\n\n    if (!adjustedSearchedInput) {\n      setRowInFocus(defaultRowInFocus);\n    }\n  }, [searchedInput]);\n  const hasFoundResults = searchedWordIndexes.length > 0 && ((_b = searchedWordIndexes[0]) === null || _b === void 0 ? void 0 : _b.rowIndex) !== -1;\n  /* Clearing out the search input */\n\n  const handleClear = () => {\n    setSearchedInput('');\n    setCurrentSearchedItemCount(DEFAULT_INDEX);\n    setSearchedWordIndexes([]);\n    setRowInFocus(defaultRowInFocus);\n  };\n  /* Moving focus over to next row containing searched word */\n\n\n  const handleNextSearchItem = () => {\n    const adjustedSearchedItemCount = (currentSearchedItemCount + NUMBER_INDEX_DELTA) % searchedWordIndexes.length;\n    setCurrentSearchedItemCount(adjustedSearchedItemCount);\n    scrollToRow(searchedWordIndexes[adjustedSearchedItemCount]);\n  };\n  /* Moving focus over to next row containing searched word */\n\n\n  const handlePrevSearchItem = () => {\n    let adjustedSearchedItemCount = currentSearchedItemCount - NUMBER_INDEX_DELTA;\n\n    if (adjustedSearchedItemCount < DEFAULT_INDEX) {\n      adjustedSearchedItemCount += searchedWordIndexes.length;\n    }\n\n    setCurrentSearchedItemCount(adjustedSearchedItemCount);\n    scrollToRow(searchedWordIndexes[adjustedSearchedItemCount]);\n  };\n\n  return React.createElement(SearchInput, Object.assign({\n    placeholder: placeholder,\n    value: searchedInput,\n    resultsCount: `${currentSearchedItemCount + indexAdjuster} / ${hasFoundResults ? searchedWordIndexes.length : 0}`\n  }, props, {\n    onChange: (input, event) => {\n      props.onChange && props.onChange(input, event);\n      setSearchedInput(input);\n    },\n    onNextClick: event => {\n      props.onNextClick && props.onNextClick(event);\n      handleNextSearchItem();\n    },\n    onPreviousClick: event => {\n      props.onPreviousClick && props.onPreviousClick(event);\n      handlePrevSearchItem();\n    },\n    onClear: event => {\n      props.onClear && props.onClear(event);\n      handleClear();\n    }\n  }));\n};\nLogViewerSearch.displayName = 'LogViewerSearch';","map":{"version":3,"mappings":"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","names":["React","useContext","useEffect","useState","NUMBER_INDEX_DELTA","DEFAULT_FOCUS","DEFAULT_INDEX","DEFAULT_SEARCH_INDEX","DEFAULT_MATCH","SearchInput","LogViewerToolbarContext","LogViewerContext","escapeString","searchForKeyword","LogViewerSearch","_a","placeholder","minSearchChars","props","indexAdjuster","setIndexAdjuster","searchedWordIndexes","scrollToRow","setSearchedInput","setCurrentSearchedItemCount","setRowInFocus","setSearchedWordIndexes","currentSearchedItemCount","searchedInput","itemCount","parsedData","defaultRowInFocus","rowIndex","matchIndex","hasFoundResults","foundKeywordIndexes","adjustedSearchedInput","length","_b","handleClear","handleNextSearchItem","adjustedSearchedItemCount","handlePrevSearchItem","Object","value","resultsCount","onChange","input","event","onNextClick","onPreviousClick","onClear","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-log-viewer/src/LogViewer/LogViewerSearch.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport {\n  NUMBER_INDEX_DELTA,\n  DEFAULT_FOCUS,\n  DEFAULT_INDEX,\n  DEFAULT_SEARCH_INDEX,\n  DEFAULT_MATCH\n} from './utils/constants';\nimport { SearchInput, SearchInputProps } from '@patternfly/react-core';\nimport { LogViewerToolbarContext, LogViewerContext } from './LogViewerContext';\nimport { escapeString, searchForKeyword, searchedKeyWordType } from './utils/utils';\n\nexport interface LogViewerSearchProps extends SearchInputProps {\n  /** Place holder text inside of searchbar */\n  placeholder: string;\n  /** Minimum number of characters required for searching */\n  minSearchChars: number;\n}\n\nexport const LogViewerSearch: React.FunctionComponent<LogViewerSearchProps> = ({\n  placeholder = 'Search',\n  minSearchChars = 1,\n  ...props\n}) => {\n  const [indexAdjuster, setIndexAdjuster] = useState(0);\n  const {\n    searchedWordIndexes,\n    scrollToRow,\n    setSearchedInput,\n    setCurrentSearchedItemCount,\n    setRowInFocus,\n    setSearchedWordIndexes,\n    currentSearchedItemCount,\n    searchedInput,\n    itemCount\n  } = useContext(LogViewerToolbarContext);\n\n  const { parsedData } = useContext(LogViewerContext);\n\n  const defaultRowInFocus = { rowIndex: DEFAULT_FOCUS, matchIndex: DEFAULT_MATCH };\n\n  /* Defaulting the first focused row that contain searched keywords */\n  useEffect(() => {\n    if (hasFoundResults) {\n      setIndexAdjuster(1);\n    } else {\n      setIndexAdjuster(0);\n    }\n  }, [searchedWordIndexes]);\n\n  /* Updating searchedResults context state given changes in searched input */\n  useEffect(() => {\n    let foundKeywordIndexes: (searchedKeyWordType | null)[] = [];\n    const adjustedSearchedInput = escapeString(searchedInput);\n\n    if (adjustedSearchedInput !== '' && adjustedSearchedInput.length >= minSearchChars) {\n      foundKeywordIndexes = searchForKeyword(adjustedSearchedInput, parsedData, itemCount || parsedData.length);\n\n      if (foundKeywordIndexes.length !== 0) {\n        setSearchedWordIndexes(foundKeywordIndexes);\n        scrollToRow(foundKeywordIndexes[DEFAULT_SEARCH_INDEX]);\n        setCurrentSearchedItemCount(DEFAULT_INDEX);\n      }\n    }\n\n    if (!adjustedSearchedInput) {\n      setRowInFocus(defaultRowInFocus);\n    }\n  }, [searchedInput]);\n\n  const hasFoundResults = searchedWordIndexes.length > 0 && searchedWordIndexes[0]?.rowIndex !== -1;\n\n  /* Clearing out the search input */\n  const handleClear = (): void => {\n    setSearchedInput('');\n    setCurrentSearchedItemCount(DEFAULT_INDEX);\n    setSearchedWordIndexes([]);\n    setRowInFocus(defaultRowInFocus);\n  };\n\n  /* Moving focus over to next row containing searched word */\n  const handleNextSearchItem = (): void => {\n    const adjustedSearchedItemCount = (currentSearchedItemCount + NUMBER_INDEX_DELTA) % searchedWordIndexes.length;\n\n    setCurrentSearchedItemCount(adjustedSearchedItemCount);\n    scrollToRow(searchedWordIndexes[adjustedSearchedItemCount]);\n  };\n\n  /* Moving focus over to next row containing searched word */\n  const handlePrevSearchItem = (): void => {\n    let adjustedSearchedItemCount = currentSearchedItemCount - NUMBER_INDEX_DELTA;\n\n    if (adjustedSearchedItemCount < DEFAULT_INDEX) {\n      adjustedSearchedItemCount += searchedWordIndexes.length;\n    }\n\n    setCurrentSearchedItemCount(adjustedSearchedItemCount);\n    scrollToRow(searchedWordIndexes[adjustedSearchedItemCount]);\n  };\n\n  return (\n    <SearchInput\n      placeholder={placeholder}\n      value={searchedInput}\n      resultsCount={`${currentSearchedItemCount + indexAdjuster} / ${hasFoundResults ? searchedWordIndexes.length : 0}`}\n      {...props}\n      onChange={(input, event) => {\n        props.onChange && props.onChange(input, event);\n        setSearchedInput(input);\n      }}\n      onNextClick={event => {\n        props.onNextClick && props.onNextClick(event);\n        handleNextSearchItem();\n      }}\n      onPreviousClick={event => {\n        props.onPreviousClick && props.onPreviousClick(event);\n        handlePrevSearchItem();\n      }}\n      onClear={event => {\n        props.onClear && props.onClear(event);\n        handleClear();\n      }}\n    />\n  );\n};\nLogViewerSearch.displayName = 'LogViewerSearch';\n"]},"metadata":{},"sourceType":"module"}