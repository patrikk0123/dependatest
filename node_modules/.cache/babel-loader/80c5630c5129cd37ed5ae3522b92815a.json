{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Label/label';\nimport labelGrpStyles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport { Button } from '../Button';\nimport { Tooltip } from '../Tooltip';\nimport { css } from '@patternfly/react-styles';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\nconst colorStyles = {\n  blue: styles.modifiers.blue,\n  cyan: styles.modifiers.cyan,\n  green: styles.modifiers.green,\n  orange: styles.modifiers.orange,\n  purple: styles.modifiers.purple,\n  red: styles.modifiers.red,\n  gold: styles.modifiers.gold,\n  grey: ''\n};\nexport const Label = _a => {\n  var {\n    children,\n    className = '',\n    color = 'grey',\n    variant = 'filled',\n    isCompact = false,\n    isEditable = false,\n    editableProps,\n    isTruncated = false,\n    tooltipPosition,\n    icon,\n    onClose,\n    onEditCancel,\n    onEditComplete,\n    closeBtn,\n    closeBtnAriaLabel,\n    closeBtnProps,\n    href,\n    isOverflowLabel,\n    render\n  } = _a,\n      props = __rest(_a, [\"children\", \"className\", \"color\", \"variant\", \"isCompact\", \"isEditable\", \"editableProps\", \"isTruncated\", \"tooltipPosition\", \"icon\", \"onClose\", \"onEditCancel\", \"onEditComplete\", \"closeBtn\", \"closeBtnAriaLabel\", \"closeBtnProps\", \"href\", \"isOverflowLabel\", \"render\"]);\n\n  const [isEditableActive, setIsEditableActive] = useState(false);\n  const [currValue, setCurrValue] = useState(children);\n  const editableButtonRef = React.useRef();\n  const editableInputRef = React.useRef();\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocMouseDown);\n    document.addEventListener('keydown', onKeyDown);\n    return () => {\n      document.removeEventListener('mousedown', onDocMouseDown);\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  });\n\n  const onDocMouseDown = event => {\n    if (isEditableActive && editableInputRef && editableInputRef.current && !editableInputRef.current.contains(event.target)) {\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(editableInputRef.current.value);\n      }\n\n      setIsEditableActive(false);\n    }\n  };\n\n  const onKeyDown = event => {\n    const key = event.key;\n\n    if (!isEditableActive && (!editableButtonRef || !editableButtonRef.current || !editableButtonRef.current.contains(event.target)) || isEditableActive && (!editableInputRef || !editableInputRef.current || !editableInputRef.current.contains(event.target))) {\n      return;\n    }\n\n    if (isEditableActive && (key === 'Enter' || key === 'Tab')) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(editableInputRef.current.value);\n      }\n\n      setIsEditableActive(false);\n    }\n\n    if (isEditableActive && key === 'Escape') {\n      event.preventDefault();\n      event.stopImmediatePropagation(); // Reset div text to initial children prop - pre-edit\n\n      if (editableInputRef.current.value) {\n        editableInputRef.current.value = children;\n        onEditCancel && onEditCancel(children);\n      }\n\n      setIsEditableActive(false);\n    }\n\n    if (!isEditableActive && key === 'Enter') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      setIsEditableActive(true); // Set cursor position to end of text\n\n      const el = event.target;\n      const range = document.createRange();\n      const sel = window.getSelection();\n      range.selectNodeContents(el);\n      range.collapse(false);\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n  };\n\n  const LabelComponent = isOverflowLabel ? 'button' : 'span';\n  const button = closeBtn ? closeBtn : React.createElement(Button, Object.assign({\n    type: \"button\",\n    variant: \"plain\",\n    onClick: onClose,\n    \"aria-label\": closeBtnAriaLabel || `Close ${children}`\n  }, closeBtnProps), React.createElement(TimesIcon, null));\n  const textRef = React.createRef(); // ref to apply tooltip when rendered is used\n\n  const componentRef = React.useRef();\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  useIsomorphicLayoutEffect(() => {\n    const currTextRef = isEditable ? editableButtonRef : textRef;\n\n    if (!isEditableActive) {\n      setIsTooltipVisible(currTextRef.current && currTextRef.current.offsetWidth < currTextRef.current.scrollWidth);\n    }\n  }, [isEditableActive]);\n  const content = React.createElement(React.Fragment, null, icon && React.createElement(\"span\", {\n    className: css(styles.labelIcon)\n  }, icon), isTruncated && React.createElement(\"span\", {\n    ref: textRef,\n    className: css(styles.labelText)\n  }, children), !isTruncated && children);\n  React.useEffect(() => {\n    if (isEditableActive && editableInputRef) {\n      editableInputRef.current && editableInputRef.current.focus();\n    }\n  }, [editableInputRef, isEditableActive]);\n\n  const updateVal = () => {\n    setCurrValue(editableInputRef.current.value);\n  };\n\n  let labelComponentChild = React.createElement(\"span\", {\n    className: css(styles.labelContent)\n  }, content);\n\n  if (href) {\n    labelComponentChild = React.createElement(\"a\", {\n      className: css(styles.labelContent),\n      href: href\n    }, content);\n  } else if (isEditable) {\n    labelComponentChild = React.createElement(\"button\", Object.assign({\n      ref: editableButtonRef,\n      className: css(styles.labelContent),\n      onClick: e => {\n        setIsEditableActive(true);\n        e.stopPropagation();\n      }\n    }, editableProps), content);\n  }\n\n  if (render) {\n    labelComponentChild = React.createElement(React.Fragment, null, isTooltipVisible && React.createElement(Tooltip, {\n      reference: componentRef,\n      content: children,\n      position: tooltipPosition\n    }), render({\n      className: styles.labelContent,\n      content,\n      componentRef\n    }));\n  } else if (isTooltipVisible) {\n    labelComponentChild = React.createElement(Tooltip, {\n      content: children,\n      position: tooltipPosition\n    }, labelComponentChild);\n  }\n\n  return React.createElement(LabelComponent, Object.assign({}, props, {\n    className: css(styles.label, colorStyles[color], variant === 'outline' && styles.modifiers.outline, isOverflowLabel && styles.modifiers.overflow, isCompact && styles.modifiers.compact, isEditable && labelGrpStyles.modifiers.editable, isEditableActive && styles.modifiers.editableActive, className)\n  }), !isEditableActive && labelComponentChild, !isEditableActive && onClose && button, isEditableActive && React.createElement(\"input\", Object.assign({\n    className: css(styles.labelContent),\n    type: \"text\",\n    id: \"editable-input\",\n    ref: editableInputRef,\n    value: currValue,\n    onChange: updateVal\n  }, editableProps)));\n};\nLabel.displayName = 'Label';","map":{"version":3,"mappings":"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","names":["React","useState","styles","labelGrpStyles","Button","Tooltip","css","TimesIcon","useIsomorphicLayoutEffect","colorStyles","blue","modifiers","cyan","green","orange","purple","red","gold","grey","Label","_a","children","className","color","variant","isCompact","isEditable","editableProps","isTruncated","tooltipPosition","icon","onClose","onEditCancel","onEditComplete","closeBtn","closeBtnAriaLabel","closeBtnProps","href","isOverflowLabel","render","props","isEditableActive","setIsEditableActive","currValue","setCurrValue","editableButtonRef","useRef","editableInputRef","useEffect","document","addEventListener","onDocMouseDown","onKeyDown","removeEventListener","event","current","contains","target","value","key","preventDefault","stopImmediatePropagation","el","range","createRange","sel","window","getSelection","selectNodeContents","collapse","removeAllRanges","addRange","LabelComponent","button","Object","type","onClick","textRef","createRef","componentRef","isTooltipVisible","setIsTooltipVisible","currTextRef","offsetWidth","scrollWidth","content","Fragment","labelIcon","ref","labelText","focus","updateVal","labelComponentChild","labelContent","e","stopPropagation","reference","position","label","outline","overflow","compact","editable","editableActive","id","onChange","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Label/Label.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport styles from '@patternfly/react-styles/css/components/Label/label';\nimport labelGrpStyles from '@patternfly/react-styles/css/components/LabelGroup/label-group';\nimport { Button } from '../Button';\nimport { Tooltip, TooltipPosition } from '../Tooltip';\nimport { css } from '@patternfly/react-styles';\nimport TimesIcon from '@patternfly/react-icons/dist/esm/icons/times-icon';\nimport { useIsomorphicLayoutEffect } from '../../helpers';\n\nexport interface LabelProps extends React.HTMLProps<HTMLSpanElement> {\n  /** Content rendered inside the label. */\n  children?: React.ReactNode;\n  /** Additional classes added to the label. */\n  className?: string;\n  /** Color of the label. */\n  color?: 'blue' | 'cyan' | 'green' | 'orange' | 'purple' | 'red' | 'grey' | 'gold';\n  /** Variant of the label. */\n  variant?: 'outline' | 'filled';\n  /** Flag indicating the label is compact. */\n  isCompact?: boolean;\n  /** @beta Flag indicating the label is editable. */\n  isEditable?: boolean;\n  /** @beta Additional props passed to the editable label text div. Optionally passing onInput and onBlur callbacks will allow finer custom text input control. */\n  editableProps?: any;\n  /** @beta Callback when an editable label completes an edit. */\n  onEditComplete?: (newText: string) => void;\n  /** @beta Callback when an editable label cancels an edit. */\n  onEditCancel?: (previousText: string) => void;\n  /** Flag indicating the label text should be truncated. */\n  isTruncated?: boolean;\n  /** Position of the tooltip which is displayed if text is truncated */\n  tooltipPosition?:\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Icon added to the left of the label text. */\n  icon?: React.ReactNode;\n  /** Close click callback for removable labels. If present, label will have a close button. */\n  onClose?: (event: React.MouseEvent) => void;\n  /** Node for custom close button. */\n  closeBtn?: React.ReactNode;\n  /** Aria label for close button */\n  closeBtnAriaLabel?: string;\n  /** Additional properties for the default close button. */\n  closeBtnProps?: any;\n  /** Href for a label that is a link. If present, the label will change to an anchor element. */\n  href?: string;\n  /** Flag indicating if the label is an overflow label */\n  isOverflowLabel?: boolean;\n  /** Forwards the label content and className to rendered function.  Use this prop for react router support.*/\n  render?: ({\n    className,\n    content,\n    componentRef\n  }: {\n    className: string;\n    content: React.ReactNode;\n    componentRef: any;\n  }) => React.ReactNode;\n}\n\nconst colorStyles = {\n  blue: styles.modifiers.blue,\n  cyan: styles.modifiers.cyan,\n  green: styles.modifiers.green,\n  orange: styles.modifiers.orange,\n  purple: styles.modifiers.purple,\n  red: styles.modifiers.red,\n  gold: styles.modifiers.gold,\n  grey: ''\n};\n\nexport const Label: React.FunctionComponent<LabelProps> = ({\n  children,\n  className = '',\n  color = 'grey',\n  variant = 'filled',\n  isCompact = false,\n  isEditable = false,\n  editableProps,\n  isTruncated = false,\n  tooltipPosition,\n  icon,\n  onClose,\n  onEditCancel,\n  onEditComplete,\n  closeBtn,\n  closeBtnAriaLabel,\n  closeBtnProps,\n  href,\n  isOverflowLabel,\n  render,\n  ...props\n}: LabelProps) => {\n  const [isEditableActive, setIsEditableActive] = useState(false);\n  const [currValue, setCurrValue] = useState(children);\n  const editableButtonRef = React.useRef<HTMLButtonElement>();\n  const editableInputRef = React.useRef<HTMLInputElement>();\n\n  React.useEffect(() => {\n    document.addEventListener('mousedown', onDocMouseDown);\n    document.addEventListener('keydown', onKeyDown);\n    return () => {\n      document.removeEventListener('mousedown', onDocMouseDown);\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  });\n\n  const onDocMouseDown = (event: MouseEvent) => {\n    if (\n      isEditableActive &&\n      editableInputRef &&\n      editableInputRef.current &&\n      !editableInputRef.current.contains(event.target as Node)\n    ) {\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(editableInputRef.current.value);\n      }\n      setIsEditableActive(false);\n    }\n  };\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const key = event.key;\n    if (\n      (!isEditableActive &&\n        (!editableButtonRef ||\n          !editableButtonRef.current ||\n          !editableButtonRef.current.contains(event.target as Node))) ||\n      (isEditableActive &&\n        (!editableInputRef || !editableInputRef.current || !editableInputRef.current.contains(event.target as Node)))\n    ) {\n      return;\n    }\n    if (isEditableActive && (key === 'Enter' || key === 'Tab')) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      if (editableInputRef.current.value) {\n        onEditComplete && onEditComplete(editableInputRef.current.value);\n      }\n      setIsEditableActive(false);\n    }\n    if (isEditableActive && key === 'Escape') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      // Reset div text to initial children prop - pre-edit\n      if (editableInputRef.current.value) {\n        editableInputRef.current.value = children as string;\n        onEditCancel && onEditCancel(children as string);\n      }\n      setIsEditableActive(false);\n    }\n    if (!isEditableActive && key === 'Enter') {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      setIsEditableActive(true);\n\n      // Set cursor position to end of text\n      const el = event.target as HTMLElement;\n      const range = document.createRange();\n      const sel = window.getSelection();\n      range.selectNodeContents(el);\n      range.collapse(false);\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n  };\n\n  const LabelComponent = (isOverflowLabel ? 'button' : 'span') as any;\n\n  const button = closeBtn ? (\n    closeBtn\n  ) : (\n    <Button\n      type=\"button\"\n      variant=\"plain\"\n      onClick={onClose}\n      aria-label={closeBtnAriaLabel || `Close ${children}`}\n      {...closeBtnProps}\n    >\n      <TimesIcon />\n    </Button>\n  );\n  const textRef = React.createRef<any>();\n  // ref to apply tooltip when rendered is used\n  const componentRef = React.useRef();\n  const [isTooltipVisible, setIsTooltipVisible] = React.useState(false);\n  useIsomorphicLayoutEffect(() => {\n    const currTextRef = isEditable ? editableButtonRef : textRef;\n    if (!isEditableActive) {\n      setIsTooltipVisible(currTextRef.current && currTextRef.current.offsetWidth < currTextRef.current.scrollWidth);\n    }\n  }, [isEditableActive]);\n  const content = (\n    <React.Fragment>\n      {icon && <span className={css(styles.labelIcon)}>{icon}</span>}\n      {isTruncated && (\n        <span ref={textRef} className={css(styles.labelText)}>\n          {children}\n        </span>\n      )}\n      {!isTruncated && children}\n    </React.Fragment>\n  );\n\n  React.useEffect(() => {\n    if (isEditableActive && editableInputRef) {\n      editableInputRef.current && editableInputRef.current.focus();\n    }\n  }, [editableInputRef, isEditableActive]);\n\n  const updateVal = () => {\n    setCurrValue(editableInputRef.current.value);\n  };\n\n  let labelComponentChild = <span className={css(styles.labelContent)}>{content}</span>;\n\n  if (href) {\n    labelComponentChild = (\n      <a className={css(styles.labelContent)} href={href}>\n        {content}\n      </a>\n    );\n  } else if (isEditable) {\n    labelComponentChild = (\n      <button\n        ref={editableButtonRef}\n        className={css(styles.labelContent)}\n        onClick={(e: React.MouseEvent) => {\n          setIsEditableActive(true);\n          e.stopPropagation();\n        }}\n        {...editableProps}\n      >\n        {content}\n      </button>\n    );\n  }\n\n  if (render) {\n    labelComponentChild = (\n      <React.Fragment>\n        {isTooltipVisible && <Tooltip reference={componentRef} content={children} position={tooltipPosition} />}\n        {render({\n          className: styles.labelContent,\n          content,\n          componentRef\n        })}\n      </React.Fragment>\n    );\n  } else if (isTooltipVisible) {\n    labelComponentChild = (\n      <Tooltip content={children} position={tooltipPosition}>\n        {labelComponentChild}\n      </Tooltip>\n    );\n  }\n\n  return (\n    <LabelComponent\n      {...props}\n      className={css(\n        styles.label,\n        colorStyles[color],\n        variant === 'outline' && styles.modifiers.outline,\n        isOverflowLabel && styles.modifiers.overflow,\n        isCompact && styles.modifiers.compact,\n        isEditable && labelGrpStyles.modifiers.editable,\n        isEditableActive && styles.modifiers.editableActive,\n        className\n      )}\n    >\n      {!isEditableActive && labelComponentChild}\n      {!isEditableActive && onClose && button}\n      {isEditableActive && (\n        <input\n          className={css(styles.labelContent)}\n          type=\"text\"\n          id=\"editable-input\"\n          ref={editableInputRef}\n          value={currValue}\n          onChange={updateVal}\n          {...editableProps}\n        />\n      )}\n    </LabelComponent>\n  );\n};\nLabel.displayName = 'Label';\n"]},"metadata":{},"sourceType":"module"}