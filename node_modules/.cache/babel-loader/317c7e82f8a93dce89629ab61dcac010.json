{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\nexport const OptionsMenuToggle = _a => {\n  var {\n    isPlain = false,\n    isDisabled = false,\n    isOpen = false,\n    parentId = '',\n    toggleTemplate = React.createElement(React.Fragment, null),\n    hideCaret = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isActive = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isSplitButton = false,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type,\n    'aria-label': ariaLabel = 'Options menu'\n  } = _a,\n      props = __rest(_a, [\"isPlain\", \"isDisabled\", \"isOpen\", \"parentId\", \"toggleTemplate\", \"hideCaret\", \"isActive\", \"isSplitButton\", \"type\", 'aria-label']);\n\n  return React.createElement(DropdownContext.Consumer, null, _ref => {\n    let {\n      id: contextId\n    } = _ref;\n    return React.createElement(DropdownToggle, Object.assign({}, (isPlain || hideCaret) && {\n      toggleIndicator: null\n    }, props, {\n      isPlain: isPlain,\n      isOpen: isOpen,\n      isDisabled: isDisabled,\n      isActive: isActive,\n      id: parentId ? `${parentId}-toggle` : `${contextId}-toggle`,\n      \"aria-haspopup\": \"listbox\",\n      \"aria-label\": ariaLabel,\n      \"aria-expanded\": isOpen\n    }, toggleTemplate ? {\n      children: toggleTemplate\n    } : {}));\n  });\n};\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,aAAhD;AA4BA,OAAO,MAAMC,iBAAiB,GAAqDC,EAAD,IAerD;MAfsD;IACjFC,OAAO,GAAG,KADuE;IAEjFC,UAAU,GAAG,KAFoE;IAGjFC,MAAM,GAAG,KAHwE;IAIjFC,QAAQ,GAAG,EAJsE;IAKjFC,cAAc,GAAGT,oBAACA,KAAK,CAACU,QAAP,EAAe,IAAf,CALgE;IAMjFC,SAAS,GAAG,KANqE;IAOjF;IACAC,QAAQ,GAAG,KARsE;IASjF;IACAC,aAAa,GAAG,KAViE;IAWjF;IACAC,IAZiF;IAajF,cAAcC,SAAS,GAAG;EAbuD,IAazCX;MACrCY,KAAK,cAdyE,iIAczE;;EACoB,OAC5BhB,oBAACE,eAAe,CAACe,QAAjB,EAAyB,IAAzB,EACG;IAAA,IAAC;MAAEC,EAAE,EAAEC;IAAN,CAAD;IAAA,OACCnB,oBAACC,cAAD,EAAemB,kBACR,CAACf,OAAO,IAAIM,SAAZ,KAA0B;MAAEU,eAAe,EAAE;IAAnB,CADlB,EAETL,KAFS,EAEJ;MACTX,OAAO,EAAEA,OADA;MAETE,MAAM,EAAEA,MAFC;MAGTD,UAAU,EAAEA,UAHH;MAITM,QAAQ,EAAEA,QAJD;MAKTM,EAAE,EAAEV,QAAQ,GAAG,GAAGA,QAAQ,SAAd,GAA0B,GAAGW,SAAS,SALzC;MAKkD,iBAC7C,SANL;MAMc,cACXJ,SAPH;MAOY,iBACNR;IARN,CAFI,EAWRE,cAAc,GAAG;MAAEa,QAAQ,EAAEb;IAAZ,CAAH,GAAkC,EAXxC,CAAf,CADD;EAAA,CADH,CAD4B;AAkB7B,CAjCM;AAkCPN,iBAAiB,CAACoB,WAAlB,GAAgC,mBAAhC","names":["React","DropdownToggle","DropdownContext","OptionsMenuToggle","_a","isPlain","isDisabled","isOpen","parentId","toggleTemplate","Fragment","hideCaret","isActive","isSplitButton","type","ariaLabel","props","Consumer","id","contextId","Object","toggleIndicator","children","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/OptionsMenu/OptionsMenuToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DropdownToggle, DropdownContext } from '../Dropdown';\n\nexport interface OptionsMenuToggleProps extends React.HTMLProps<HTMLButtonElement> {\n  /** Id of the parent options menu component */\n  parentId?: string;\n  /** Callback for when this options menu is toggled */\n  onToggle?: (isOpen: boolean) => void;\n  /** Flag to indicate if menu is open */\n  isOpen?: boolean;\n  /** Flag to indicate if the button is plain */\n  isPlain?: boolean;\n  isSplitButton?: boolean;\n  /** Forces display of the active state of the options menu */\n  isActive?: boolean;\n  /** Disables the options menu toggle */\n  isDisabled?: boolean;\n  /** hide the toggle caret */\n  hideCaret?: boolean;\n  /** Provides an accessible name for the button when an icon is used instead of text */\n  'aria-label'?: string;\n  /** @hide Internal function to implement enter click */\n  onEnter?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** @hide Internal parent reference */\n  parentRef?: HTMLElement;\n  /** Content to be rendered in the options menu toggle button */\n  toggleTemplate?: React.ReactNode;\n}\n\nexport const OptionsMenuToggle: React.FunctionComponent<OptionsMenuToggleProps> = ({\n  isPlain = false,\n  isDisabled = false,\n  isOpen = false,\n  parentId = '',\n  toggleTemplate = <React.Fragment />,\n  hideCaret = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isActive = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isSplitButton = false,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  type,\n  'aria-label': ariaLabel = 'Options menu',\n  ...props\n}: OptionsMenuToggleProps) => (\n  <DropdownContext.Consumer>\n    {({ id: contextId }) => (\n      <DropdownToggle\n        {...((isPlain || hideCaret) && { toggleIndicator: null })}\n        {...props}\n        isPlain={isPlain}\n        isOpen={isOpen}\n        isDisabled={isDisabled}\n        isActive={isActive}\n        id={parentId ? `${parentId}-toggle` : `${contextId}-toggle`}\n        aria-haspopup=\"listbox\"\n        aria-label={ariaLabel}\n        aria-expanded={isOpen}\n        {...(toggleTemplate ? { children: toggleTemplate } : {})}\n      />\n    )}\n  </DropdownContext.Consumer>\n);\nOptionsMenuToggle.displayName = 'OptionsMenuToggle';\n"]},"metadata":{},"sourceType":"module"}