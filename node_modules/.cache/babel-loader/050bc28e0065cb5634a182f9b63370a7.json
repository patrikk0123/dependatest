{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/BuildMetrics/BuildMetrics.tsx\";\nimport { Popover, Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport Chart from 'chart.js/auto';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { DataContainer } from 'containers/DataContainer/DataContainer';\nimport { useDataContainer } from 'containers/DataContainer/useDataContainer';\nimport { calculateBuildName } from 'components/BuildName/BuildName';\nimport { buildService } from 'services/buildService';\nimport styles from './BuildMetrics.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BUILDS_DISPLAY_LIMIT = 20;\nconst BUILDS_DISPLAY_LIMIT_EXAMPLE = 5;\nlet metricsTooltipList;\nlet lineChart;\nlet barChart;\n/**\n * Generate time title according to the metricValue.\n *\n *\n * @param {number | string} metricValue - Metric value coming from the REST API\n */\n\nconst generateTimeTitle = metricValueData => {\n  // Chart.js converts null values to NaN string\n  let metricValue;\n\n  if (metricValueData === null || metricValueData === 'NaN') {\n    return 'Not Available';\n  } else {\n    metricValue = metricValueData;\n  }\n\n  const SECOND_MS = 1000;\n  const MINUTE_MS = 60 * SECOND_MS;\n  const HOUR_MS = 60 * MINUTE_MS;\n  const DAYS_MS = 24 * HOUR_MS;\n  const time = {\n    milliseconds: metricValue % SECOND_MS,\n    seconds: Math.floor(metricValue / SECOND_MS % 60),\n    minutes: Math.floor(metricValue / MINUTE_MS % 60),\n    hours: Math.floor(metricValue / HOUR_MS % 24),\n    days: Math.floor(metricValue / DAYS_MS)\n  }; // days\n\n  if (metricValue >= DAYS_MS) {\n    return time.days + 'd ' + (time.hours ? time.hours + 'h' : '');\n  } // hours\n\n\n  if (metricValue >= HOUR_MS) {\n    return time.hours + 'h ' + (time.minutes ? time.minutes + 'm' : '');\n  } // minutes\n\n\n  if (metricValue >= MINUTE_MS) {\n    return time.minutes + 'm ' + (time.seconds ? time.seconds + 's' : '');\n  } // seconds\n\n\n  if (metricValue >= SECOND_MS) {\n    return time.seconds + (time.milliseconds ? '.' + time.milliseconds + ' s' : ' s');\n  } // ms\n\n\n  return time.milliseconds + ' ms';\n};\n/**\n * Return color and label for each metric.\n *\n * Colors are based on patternfly.org/v3/styles/color-palette/\n *\n * @param {string} metricName - Metric name coming from the REST API\n */\n\n\nconst adaptMetric = metricName => {\n  switch (metricName) {\n    // purple\n    case 'WAITING_FOR_DEPENDENCIES':\n      return {\n        color: '#a18fff',\n        label: 'Waiting',\n        description: 'Waiting for dependencies'\n      };\n    // light-green\n\n    case 'ENQUEUED':\n      return {\n        color: '#c8eb79',\n        label: 'Enqueued',\n        description: 'Waiting to be started, the metric ends with the BPM process being started from PNC Orchestrator'\n      };\n    // cyan\n\n    case 'SCM_CLONE':\n      return {\n        color: '#7dbdc3',\n        label: 'SCM Clone',\n        description: 'Cloning / Syncing from Gerrit'\n      };\n    // orange\n\n    case 'ALIGNMENT_ADJUST':\n      return {\n        color: '#f7bd7f',\n        label: 'Alignment',\n        description: 'Alignment only'\n      };\n    // blue\n\n    case 'BUILD_ENV_SETTING_UP':\n      return {\n        color: '#7cdbf3',\n        label: 'Starting Environment',\n        description: 'Requesting to start new Build Environment in OpenShift'\n      };\n\n    case 'REPO_SETTING_UP':\n      return {\n        color: '#00b9e4',\n        label: 'Artifact Repos Setup',\n        description: 'Creating per build artifact repositories in Indy'\n      };\n\n    case 'BUILD_SETTING_UP':\n      return {\n        color: '#008bad',\n        label: 'Building',\n        description: 'Uploading the build script, running the build, downloading the results (logs)'\n      };\n    // black\n\n    case 'COLLECTING_RESULTS_FROM_BUILD_DRIVER':\n      return {\n        color: 'black',\n        label: 'Collecting Results From Build Driver',\n        description: '',\n        skip: true\n      };\n    // light purple\n\n    case 'SEALING_REPOSITORY_MANAGER_RESULTS':\n      return {\n        color: '#c7bfff',\n        label: 'Sealing',\n        description: 'Sealing artifact repository in Indy'\n      };\n    // purple\n\n    case 'COLLECTING_RESULTS_FROM_REPOSITORY_MANAGER':\n      return {\n        color: '#703fec',\n        label: 'Promotion',\n        description: 'Downloading the list of built artifact and dependencies from Indy, promoting them to shared repository in Indy'\n      };\n    // green\n\n    case 'FINALIZING_BUILD':\n      return {\n        color: '#3f9c35',\n        label: 'Finalizing',\n        description: 'Completing all other build execution tasks, destroying build environments, invoking the BPM'\n      };\n    // gray\n\n    case 'OTHER':\n      return {\n        color: 'silver',\n        label: 'Other',\n        description: 'Other tasks from the time when the build was submitted to the time when the build ends'\n      };\n\n    default:\n      console.warn('adaptMetric: Unknown metric name: \"' + metricName + '\"', metricName);\n      return {\n        color: 'gray',\n        label: metricName,\n        description: 'Unknown metric'\n      };\n  }\n};\n\nconst navigationOptions = [{\n  id: 1,\n  name: '1st'\n}, {\n  id: 2,\n  name: '2nd'\n}, {\n  id: 3,\n  name: '3rd'\n}, {\n  id: 5,\n  name: '5th'\n}, {\n  id: 10,\n  name: '10th'\n}];\n\nconst getNavigationIdByName = name => {\n  var _navigationOptions$fi;\n\n  return (_navigationOptions$fi = navigationOptions.find(option => option.name === name)) === null || _navigationOptions$fi === void 0 ? void 0 : _navigationOptions$fi.id;\n};\n\nconst generateBuildTitle = buildName => '#' + buildName;\n/**\n * Load Build Metrics for specified builds.\n *\n * @param {Object[]} builds - List of Builds.\n */\n\n\nconst transferBuildsToBuildId = builds => {\n  if (builds) {\n    return builds.map(build => {\n      return build.id.toString();\n    });\n  }\n};\n\nconst MetricsPopoverContent = metricsTooltipList => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Each metric consists of several subtasks:\", metricsTooltipList.map(metricsTooltip => {\n      return /*#__PURE__*/_jsxDEV(\"dl\", {\n        className: styles['pnc-popover-paragraph'],\n        children: [/*#__PURE__*/_jsxDEV(\"dt\", {\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: metricsTooltip.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"dd\", {\n          children: metricsTooltip.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)]\n      }, metricsTooltip.label, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n\nconst BuildMetricsCanvas = _ref => {\n  let {\n    buildMetrics,\n    chartType,\n    componentId\n  } = _ref;\n  const isCanvasInit = useRef(true);\n  const chartRef = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    const lineChartConfig = {\n      type: 'line',\n      data: {\n        datasets: []\n      },\n      options: {}\n    };\n    const barChartConfig = {\n      type: 'bar',\n      data: {\n        datasets: []\n      },\n      options: {}\n    };\n\n    const updateChartConfig = () => {\n      // Chart is pointing to single instance of chartConfig declared on the Controller level and providing later updates based on it's changes.\n      let adaptedMetric;\n      const buildIds = buildMetrics.builds.map(build => build.id.toString()); // skip specific metrics\n\n      const filteredData = buildMetrics.buildMetricsData ? buildMetrics.buildMetricsData.filter(item => !adaptMetric(item.name).skip) : [];\n      const buildMetricsData = {\n        labels: buildMetrics.builds.map(build => calculateBuildName(build)),\n        datasets: filteredData\n      }; // sum individual metrics for given build\n\n      const buildMetricsSum = new Array(buildIds.length).fill(0);\n\n      for (let m = 0; m < buildMetricsData.datasets.length; m++) {\n        for (let n = 0; n < buildMetricsData.datasets[m].data.length; n++) {\n          buildMetricsSum[n] += buildMetricsData.datasets[m].data[n];\n        }\n      } // compute Other metric\n\n\n      const metricOthersData = [];\n\n      for (let k = 0; k < buildMetrics.builds.length; k++) {\n        const submitTime = new Date(buildMetrics.builds[k].submitTime);\n        const endTime = new Date(buildMetrics.builds[k].endTime);\n        const metricOther = endTime.getTime() - submitTime.getTime() - buildMetricsSum[k];\n        metricOthersData.push(metricOther > 0 ? metricOther : 0);\n      }\n\n      const otherData = buildMetricsData.datasets.find(data => data.name === 'OTHER');\n\n      if (otherData) {\n        otherData.data = metricOthersData;\n      } else {\n        buildMetricsData.datasets.push({\n          name: 'OTHER',\n          data: metricOthersData\n        });\n      } // generate tooltip content\n\n\n      metricsTooltipList = buildMetricsData.datasets.map(item => {\n        adaptedMetric = adaptMetric(item.name);\n        return {\n          label: adaptedMetric.label,\n          description: adaptedMetric.description\n        };\n      });\n\n      if (chartType === 'line') {\n        for (let i = 0; i < buildMetricsData.datasets.length; i++) {\n          adaptedMetric = adaptMetric(buildMetricsData.datasets[i].name);\n          Object.assign(buildMetricsData.datasets[i], {\n            label: adaptedMetric.label,\n            fill: false,\n            // lines\n            borderColor: adaptedMetric.color,\n            borderWidth: 4,\n            // points\n            pointBackgroundColor: adaptedMetric.color,\n            pointBorderColor: 'white',\n            pointBorderWidth: 1.5,\n            pointRadius: 4\n          });\n        }\n\n        lineChartConfig.options = {\n          maintainAspectRatio: false,\n          elements: {\n            line: {\n              tension: 0.5\n            }\n          },\n          animation: {\n            duration: 0 // disable animation\n\n          },\n          scales: {\n            y: {\n              type: 'logarithmic',\n              title: {\n                display: true,\n                text: 'Logarithmic scale'\n              },\n              ticks: {\n                maxTicksLimit: 8,\n                callback: generateTimeTitle\n              }\n            }\n          }\n        };\n      } else if (chartType === 'horizontalBar') {\n        for (let j = 0; j < buildMetricsData.datasets.length; j++) {\n          adaptedMetric = adaptMetric(buildMetricsData.datasets[j].name);\n          Object.assign(buildMetricsData.datasets[j], {\n            label: adaptedMetric.label,\n            backgroundColor: adaptedMetric.color\n          });\n        }\n\n        barChartConfig.options = {\n          indexAxis: 'y',\n          plugins: {\n            tooltip: {\n              position: 'nearest'\n            }\n          },\n          animation: {\n            duration: 0 // disable animation\n\n          },\n          scales: {\n            x: {\n              min: 0,\n              position: 'bottom',\n              ticks: {\n                maxTicksLimit: 30,\n                callback: generateTimeTitle\n              },\n              stacked: true,\n              title: {\n                display: true,\n                text: 'Linear scale'\n              }\n            },\n            y: {\n              reverse: false,\n              stacked: true\n            }\n          }\n        };\n      } else {\n        console.warn('Unsupported chart type: ' + chartType);\n      }\n\n      const isSingleBuild = buildMetricsData.datasets[0].data.length === 1;\n      const commonChartConfig = {\n        layout: {\n          padding: {\n            top: 20,\n            bottom: 20\n          }\n        },\n        maintainAspectRatio: false,\n        tooltips: {\n          callbacks: {\n            title: tooltipItems => generateBuildTitle(tooltipItems[0].label),\n            label: (tooltipItem, data) => {\n              let label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n              if (label) {\n                label += ': ' + generateTimeTitle(tooltipItem.value);\n              }\n\n              if (tooltipItem.value !== 'NaN' && tooltipItem.value > 1000) {\n                label += '  (' + tooltipItem.value + ' ms)';\n              }\n\n              return label;\n            }\n          }\n        }\n      };\n      const commonChartPlugins = [{\n        id: '',\n        beforeInit: chart => {\n          chart.legend.afterFit = () => {\n            chart.height = chart.height + 25;\n          };\n        }\n      }];\n      lineChartConfig.data = buildMetricsData;\n      barChartConfig.data = buildMetricsData; // increase space between legend and chart\n\n      let heightTmp = 0;\n      const MIN_HEIGHT = 290;\n      const MIN_HEIGHT_SINGLE_BUILD = 400;\n\n      if (chartType === 'horizontalBar') {\n        Object.assign(barChartConfig.options, commonChartConfig);\n        barChartConfig.plugins = commonChartPlugins;\n        heightTmp = buildMetricsData.datasets[0].data.length * 30;\n        chartRef.current.parentElement.style.height = (heightTmp < MIN_HEIGHT ? isSingleBuild ? MIN_HEIGHT_SINGLE_BUILD : MIN_HEIGHT : heightTmp) + 'px';\n\n        if (isSingleBuild) {\n          barChartConfig.options.layout.padding = 50;\n        }\n      } else {\n        Object.assign(lineChartConfig.options, commonChartConfig);\n        lineChartConfig.plugins = commonChartPlugins;\n        chartRef.current.parentElement.style.height = '300px';\n      }\n    };\n\n    updateChartConfig();\n\n    if (chartType === 'line' && lineChart) {\n      lineChart.config.data = lineChartConfig.data;\n      lineChart.config.options = lineChartConfig.options;\n      lineChart.update();\n    } else if (chartType === 'horizontalBar' && barChart) {\n      barChart.config.data = barChartConfig.data;\n      barChart.config.options = barChartConfig.options;\n      barChart.update();\n    }\n\n    if (isCanvasInit.current) {\n      if (chartType === 'line') {\n        var _chartRef$current;\n\n        const lineCtx = (_chartRef$current = chartRef.current) === null || _chartRef$current === void 0 ? void 0 : _chartRef$current.getContext('2d');\n\n        if (!lineCtx) {\n          throw new Error('Chart.JS: Failed to get 2D context');\n        }\n\n        lineChart = new Chart(lineCtx, lineChartConfig);\n      } else if (chartType === 'horizontalBar') {\n        var _chartRef$current2;\n\n        const barCtx = (_chartRef$current2 = chartRef.current) === null || _chartRef$current2 === void 0 ? void 0 : _chartRef$current2.getContext('2d');\n\n        if (!barCtx) {\n          throw new Error('Chart.JS: Failed to get 2D context');\n        }\n\n        barChart = new Chart(barCtx, barChartConfig);\n      }\n\n      isCanvasInit.current = false;\n    }\n  }, [chartRef, chartType, buildMetrics.buildMetricsData, buildMetrics.builds]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: componentId,\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 487,\n    columnNumber: 10\n  }, this);\n};\n/**\n * The component representing Build Metric charts.\n *\n * @param {Object[]} builds - List of Builds.\n * @param {string} chartType - Possible values: line, horizontalBar\n * @param {string} componentId - Unique component id.\n *\n * @example\n * ```tsx\n * <BuildMetrics builds={buildList} chartType=\"line\" componentId=\"BUILD_CONFIG_METRICS\"></BuildMetrics>\n * ```\n *\n */\n\n\nexport const BuildMetrics = _ref2 => {\n  let {\n    builds,\n    chartType,\n    componentId\n  } = _ref2;\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState('1st');\n  const [buildMetrics, setBuildMetrics] = useState();\n  const dataContainer = useDataContainer(useCallback(_ref3 => {\n    let {\n      serviceData,\n      requestConfig\n    } = _ref3;\n    return buildService.getBuildMetrics(transferBuildsToBuildId(serviceData), requestConfig);\n  }, []));\n  const dataContainerRefresh = dataContainer.refresh;\n  const navigationSelectOptions = navigationOptions.map(option => /*#__PURE__*/_jsxDEV(SelectOption, {\n    value: option.name\n  }, option.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 514,\n    columnNumber: 5\n  }, this));\n  useEffect(() => {\n    /**\n     * Filter array using Nth and max parameters.\n     *\n     * @param {array} array - Full array to be filtered.\n     * @param {number} nth - Returned array will contain only every Nth item.\n     * @param {number} max [20] - Returned array max size.\n     */\n    const filterBuilds = function (array, nth) {\n      let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BUILDS_DISPLAY_LIMIT;\n      const result = [];\n\n      for (let i = 0; i < array.length; i = i + nth) {\n        result.push(array[i]);\n      }\n\n      return result.slice(0, max);\n    };\n    /* Load data according to the current filter */\n\n\n    const currentFilteredBuilds = filterBuilds(builds, getNavigationIdByName(selected));\n    dataContainerRefresh({\n      serviceData: currentFilteredBuilds,\n      requestConfig: {}\n    }).then(res => {\n      setBuildMetrics({\n        builds: currentFilteredBuilds,\n        buildMetricsData: res.data\n      });\n    });\n  }, [builds, selected, dataContainerRefresh]);\n\n  const onToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (event, value) => {\n    setSelected(value);\n    setIsOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DataContainer, { ...dataContainer,\n      title: \"Build Metrics\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles['pnc-build-metrics'],\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles['pnc-build-metrics-body'],\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles['pnc-build-metrics-help'],\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Select specific metric in the chart legend to filter it out:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this), metricsTooltipList &&\n          /*#__PURE__*/\n          // Popover seems to cause warning: findDOMNode is deprecated in StrictMode\n          _jsxDEV(Popover, {\n            \"aria-label\": \"Basic popover\",\n            bodyContent: MetricsPopoverContent(metricsTooltipList),\n            showClose: false,\n            enableFlip: false,\n            position: \"left-start\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `${styles['pnc-build-metrics-help']} ${styles['pnc-build-metrics-help--right']}`,\n              children: /*#__PURE__*/_jsxDEV(\"small\", {\n                children: [\"Metrics Descriptions \\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles['pnc-build-metric-info-icon'],\n                  children: /*#__PURE__*/_jsxDEV(InfoCircleIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 572,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 571,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles['canvas-wrapper'],\n            children: buildMetrics && buildMetrics.builds && buildMetrics.buildMetricsData && /*#__PURE__*/_jsxDEV(BuildMetricsCanvas, {\n              buildMetrics: buildMetrics,\n              chartType: chartType,\n              componentId: componentId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: styles['pnc-build-metric-navigation'],\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pull-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pull-right\",\n            \"ng-if\": \"$ctrl.builds.length > 1\",\n            children: [\"Display every\\xA0\", /*#__PURE__*/_jsxDEV(Select, {\n              width: 100,\n              variant: SelectVariant.single,\n              onToggle: onToggle,\n              onSelect: onSelect,\n              selections: selected,\n              isOpen: isOpen,\n              \"aria-labelledby\": `${componentId}-select`,\n              children: navigationSelectOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 15\n            }, this), \"\\xA0build\", /*#__PURE__*/_jsxDEV(Popover, {\n              \"aria-label\": \"Basic popover\",\n              bodyContent: `Always a maximum of ${BUILDS_DISPLAY_LIMIT} builds will be displayed if they are available, eg. if every ${BUILDS_DISPLAY_LIMIT_EXAMPLE}th build is displayed, ${BUILDS_DISPLAY_LIMIT} builds will cover last ${BUILDS_DISPLAY_LIMIT * BUILDS_DISPLAY_LIMIT_EXAMPLE} builds.`,\n              showClose: false,\n              children: /*#__PURE__*/_jsxDEV(\"small\", {\n                children: [\"\\xA0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: styles['pnc-build-metric-info-icon'],\n                  children: /*#__PURE__*/_jsxDEV(InfoCircleIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 615,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};","map":{"version":3,"names":["Popover","Select","SelectOption","SelectVariant","InfoCircleIcon","Chart","React","useCallback","useEffect","useRef","useState","DataContainer","useDataContainer","calculateBuildName","buildService","styles","BUILDS_DISPLAY_LIMIT","BUILDS_DISPLAY_LIMIT_EXAMPLE","metricsTooltipList","lineChart","barChart","generateTimeTitle","metricValueData","metricValue","SECOND_MS","MINUTE_MS","HOUR_MS","DAYS_MS","time","milliseconds","seconds","Math","floor","minutes","hours","days","adaptMetric","metricName","color","label","description","skip","console","warn","navigationOptions","id","name","getNavigationIdByName","find","option","generateBuildTitle","buildName","transferBuildsToBuildId","builds","map","build","toString","MetricsPopoverContent","metricsTooltip","BuildMetricsCanvas","buildMetrics","chartType","componentId","isCanvasInit","chartRef","createRef","lineChartConfig","type","data","datasets","options","barChartConfig","updateChartConfig","adaptedMetric","buildIds","filteredData","buildMetricsData","filter","item","labels","buildMetricsSum","Array","length","fill","m","n","metricOthersData","k","submitTime","Date","endTime","metricOther","getTime","push","otherData","i","Object","assign","borderColor","borderWidth","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","maintainAspectRatio","elements","line","tension","animation","duration","scales","y","title","display","text","ticks","maxTicksLimit","callback","j","backgroundColor","indexAxis","plugins","tooltip","position","x","min","stacked","reverse","isSingleBuild","commonChartConfig","layout","padding","top","bottom","tooltips","callbacks","tooltipItems","tooltipItem","datasetIndex","value","commonChartPlugins","beforeInit","chart","legend","afterFit","height","heightTmp","MIN_HEIGHT","MIN_HEIGHT_SINGLE_BUILD","current","parentElement","style","config","update","lineCtx","getContext","Error","barCtx","BuildMetrics","isOpen","setIsOpen","selected","setSelected","setBuildMetrics","dataContainer","serviceData","requestConfig","getBuildMetrics","dataContainerRefresh","refresh","navigationSelectOptions","filterBuilds","array","nth","max","result","slice","currentFilteredBuilds","then","res","onToggle","onSelect","event","single"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/BuildMetrics/BuildMetrics.tsx"],"sourcesContent":["import { Popover, Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { AxiosResponse } from 'axios';\nimport Chart, { ChartConfiguration } from 'chart.js/auto';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { Build } from 'pnc-api-types-ts';\n\nimport { DataContainer } from 'containers/DataContainer/DataContainer';\nimport { IService, useDataContainer } from 'containers/DataContainer/useDataContainer';\n\nimport { calculateBuildName } from 'components/BuildName/BuildName';\n\nimport { buildService } from 'services/buildService';\n\nimport styles from './BuildMetrics.module.css';\n\ninterface IBuildMetricsProps {\n  builds: Array<Build>;\n  chartType: string;\n  componentId: string;\n}\n\ninterface IBuildMetrics {\n  builds: Array<Build>;\n  buildMetricsData: Array<IBuildMetricsData>;\n}\n\ninterface IBuildMetricsCanvasProps {\n  buildMetrics: IBuildMetrics;\n  chartType: string;\n  componentId: string;\n}\n\ninterface IBuildMetricsData {\n  name: string;\n  data: Array<number>;\n}\n\ninterface IMetricsTooltip {\n  label: string;\n  description: string;\n}\n\nconst BUILDS_DISPLAY_LIMIT = 20;\nconst BUILDS_DISPLAY_LIMIT_EXAMPLE = 5;\nlet metricsTooltipList: Array<IMetricsTooltip>;\nlet lineChart: Chart;\nlet barChart: Chart;\n\n/**\n * Generate time title according to the metricValue.\n *\n *\n * @param {number | string} metricValue - Metric value coming from the REST API\n */\nconst generateTimeTitle = (metricValueData: number | string) => {\n  // Chart.js converts null values to NaN string\n  let metricValue: number;\n  if (metricValueData === null || metricValueData === 'NaN') {\n    return 'Not Available';\n  } else {\n    metricValue = metricValueData as number;\n  }\n\n  const SECOND_MS = 1000;\n  const MINUTE_MS = 60 * SECOND_MS;\n  const HOUR_MS = 60 * MINUTE_MS;\n  const DAYS_MS = 24 * HOUR_MS;\n\n  const time = {\n    milliseconds: metricValue % SECOND_MS,\n    seconds: Math.floor((metricValue / SECOND_MS) % 60),\n    minutes: Math.floor((metricValue / MINUTE_MS) % 60),\n    hours: Math.floor((metricValue / HOUR_MS) % 24),\n    days: Math.floor(metricValue / DAYS_MS),\n  };\n\n  // days\n  if (metricValue >= DAYS_MS) {\n    return time.days + 'd ' + (time.hours ? time.hours + 'h' : '');\n  }\n  // hours\n  if (metricValue >= HOUR_MS) {\n    return time.hours + 'h ' + (time.minutes ? time.minutes + 'm' : '');\n  }\n  // minutes\n  if (metricValue >= MINUTE_MS) {\n    return time.minutes + 'm ' + (time.seconds ? time.seconds + 's' : '');\n  }\n  // seconds\n  if (metricValue >= SECOND_MS) {\n    return time.seconds + (time.milliseconds ? '.' + time.milliseconds + ' s' : ' s');\n  }\n  // ms\n  return time.milliseconds + ' ms';\n};\n\n/**\n * Return color and label for each metric.\n *\n * Colors are based on patternfly.org/v3/styles/color-palette/\n *\n * @param {string} metricName - Metric name coming from the REST API\n */\nconst adaptMetric = (metricName: string) => {\n  switch (metricName) {\n    // purple\n    case 'WAITING_FOR_DEPENDENCIES':\n      return {\n        color: '#a18fff',\n        label: 'Waiting',\n        description: 'Waiting for dependencies',\n      };\n\n    // light-green\n    case 'ENQUEUED':\n      return {\n        color: '#c8eb79',\n        label: 'Enqueued',\n        description: 'Waiting to be started, the metric ends with the BPM process being started from PNC Orchestrator',\n      };\n\n    // cyan\n    case 'SCM_CLONE':\n      return {\n        color: '#7dbdc3',\n        label: 'SCM Clone',\n        description: 'Cloning / Syncing from Gerrit',\n      };\n\n    // orange\n    case 'ALIGNMENT_ADJUST':\n      return {\n        color: '#f7bd7f',\n        label: 'Alignment',\n        description: 'Alignment only',\n      };\n\n    // blue\n    case 'BUILD_ENV_SETTING_UP':\n      return {\n        color: '#7cdbf3',\n        label: 'Starting Environment',\n        description: 'Requesting to start new Build Environment in OpenShift',\n      };\n    case 'REPO_SETTING_UP':\n      return {\n        color: '#00b9e4',\n        label: 'Artifact Repos Setup',\n        description: 'Creating per build artifact repositories in Indy',\n      };\n    case 'BUILD_SETTING_UP':\n      return {\n        color: '#008bad',\n        label: 'Building',\n        description: 'Uploading the build script, running the build, downloading the results (logs)',\n      };\n\n    // black\n    case 'COLLECTING_RESULTS_FROM_BUILD_DRIVER':\n      return {\n        color: 'black',\n        label: 'Collecting Results From Build Driver',\n        description: '',\n        skip: true,\n      };\n\n    // light purple\n    case 'SEALING_REPOSITORY_MANAGER_RESULTS':\n      return {\n        color: '#c7bfff',\n        label: 'Sealing',\n        description: 'Sealing artifact repository in Indy',\n      };\n\n    // purple\n    case 'COLLECTING_RESULTS_FROM_REPOSITORY_MANAGER':\n      return {\n        color: '#703fec',\n        label: 'Promotion',\n        description:\n          'Downloading the list of built artifact and dependencies from Indy, promoting them to shared repository in Indy',\n      };\n\n    // green\n    case 'FINALIZING_BUILD':\n      return {\n        color: '#3f9c35',\n        label: 'Finalizing',\n        description: 'Completing all other build execution tasks, destroying build environments, invoking the BPM',\n      };\n\n    // gray\n    case 'OTHER':\n      return {\n        color: 'silver',\n        label: 'Other',\n        description: 'Other tasks from the time when the build was submitted to the time when the build ends',\n      };\n\n    default:\n      console.warn('adaptMetric: Unknown metric name: \"' + metricName + '\"', metricName);\n      return {\n        color: 'gray',\n        label: metricName,\n        description: 'Unknown metric',\n      };\n  }\n};\n\nconst navigationOptions = [\n  { id: 1, name: '1st' },\n  { id: 2, name: '2nd' },\n  { id: 3, name: '3rd' },\n  { id: 5, name: '5th' },\n  { id: 10, name: '10th' },\n];\n\nconst getNavigationIdByName = (name: string) => navigationOptions.find((option) => option.name === name)?.id!;\n\nconst generateBuildTitle = (buildName: string) => '#' + buildName;\n\n/**\n * Load Build Metrics for specified builds.\n *\n * @param {Object[]} builds - List of Builds.\n */\nconst transferBuildsToBuildId = (builds?: Array<Build>) => {\n  if (builds) {\n    return builds.map((build) => {\n      return build.id.toString();\n    });\n  }\n};\n\nconst MetricsPopoverContent = (metricsTooltipList: Array<IMetricsTooltip>) => {\n  return (\n    <div>\n      Each metric consists of several subtasks:\n      {metricsTooltipList.map((metricsTooltip) => {\n        return (\n          <dl className={styles['pnc-popover-paragraph']} key={metricsTooltip.label}>\n            <dt>\n              <b>{metricsTooltip.label}</b>\n            </dt>\n            <dd>{metricsTooltip.description}</dd>\n          </dl>\n        );\n      })}\n    </div>\n  );\n};\n\nconst BuildMetricsCanvas = ({ buildMetrics, chartType, componentId }: IBuildMetricsCanvasProps) => {\n  const isCanvasInit = useRef<boolean>(true);\n  const chartRef: React.RefObject<HTMLCanvasElement> = React.createRef();\n\n  useEffect(() => {\n    const lineChartConfig: ChartConfiguration = { type: 'line', data: { datasets: [] }, options: {} };\n    const barChartConfig: ChartConfiguration = { type: 'bar', data: { datasets: [] }, options: {} };\n    const updateChartConfig = () => {\n      // Chart is pointing to single instance of chartConfig declared on the Controller level and providing later updates based on it's changes.\n      let adaptedMetric;\n      const buildIds = buildMetrics.builds.map((build) => build.id.toString());\n\n      // skip specific metrics\n      const filteredData = buildMetrics.buildMetricsData\n        ? buildMetrics.buildMetricsData.filter((item) => !adaptMetric(item.name).skip)\n        : [];\n\n      const buildMetricsData = {\n        labels: buildMetrics.builds.map((build) => calculateBuildName(build)),\n        datasets: filteredData,\n      };\n\n      // sum individual metrics for given build\n      const buildMetricsSum = new Array(buildIds.length).fill(0);\n\n      for (let m = 0; m < buildMetricsData.datasets.length; m++) {\n        for (let n = 0; n < buildMetricsData.datasets[m].data.length; n++) {\n          buildMetricsSum[n] += buildMetricsData.datasets[m].data[n];\n        }\n      }\n\n      // compute Other metric\n      const metricOthersData = [];\n\n      for (let k = 0; k < buildMetrics.builds.length; k++) {\n        const submitTime = new Date(buildMetrics.builds[k].submitTime!);\n        const endTime = new Date(buildMetrics.builds[k].endTime!);\n        const metricOther = endTime.getTime() - submitTime.getTime() - buildMetricsSum[k];\n        metricOthersData.push(metricOther > 0 ? metricOther : 0);\n      }\n\n      const otherData = buildMetricsData.datasets.find((data) => data.name === 'OTHER');\n      if (otherData) {\n        otherData.data = metricOthersData;\n      } else {\n        buildMetricsData.datasets.push({\n          name: 'OTHER',\n          data: metricOthersData,\n        });\n      }\n      // generate tooltip content\n      metricsTooltipList = buildMetricsData.datasets.map((item) => {\n        adaptedMetric = adaptMetric(item.name);\n        return {\n          label: adaptedMetric.label,\n          description: adaptedMetric.description,\n        };\n      });\n\n      if (chartType === 'line') {\n        for (let i = 0; i < buildMetricsData.datasets.length; i++) {\n          adaptedMetric = adaptMetric(buildMetricsData.datasets[i].name);\n\n          Object.assign(buildMetricsData.datasets[i], {\n            label: adaptedMetric.label,\n            fill: false,\n\n            // lines\n            borderColor: adaptedMetric.color,\n            borderWidth: 4,\n\n            // points\n            pointBackgroundColor: adaptedMetric.color,\n            pointBorderColor: 'white',\n            pointBorderWidth: 1.5,\n            pointRadius: 4,\n          });\n        }\n        lineChartConfig.options = {\n          maintainAspectRatio: false,\n          elements: {\n            line: {\n              tension: 0.5,\n            },\n          },\n          animation: {\n            duration: 0, // disable animation\n          },\n          scales: {\n            y: {\n              type: 'logarithmic',\n              title: {\n                display: true,\n                text: 'Logarithmic scale',\n              },\n              ticks: {\n                maxTicksLimit: 8,\n                callback: generateTimeTitle,\n              },\n            },\n          },\n        };\n      } else if (chartType === 'horizontalBar') {\n        for (let j = 0; j < buildMetricsData.datasets.length; j++) {\n          adaptedMetric = adaptMetric(buildMetricsData.datasets[j].name);\n          Object.assign(buildMetricsData.datasets[j], {\n            label: adaptedMetric.label,\n            backgroundColor: adaptedMetric.color,\n          });\n        }\n\n        barChartConfig.options = {\n          indexAxis: 'y' as const,\n          plugins: {\n            tooltip: {\n              position: 'nearest',\n            },\n          },\n          animation: {\n            duration: 0, // disable animation\n          },\n          scales: {\n            x: {\n              min: 0,\n              position: 'bottom',\n              ticks: {\n                maxTicksLimit: 30,\n                callback: generateTimeTitle,\n              },\n              stacked: true,\n              title: {\n                display: true,\n                text: 'Linear scale',\n              },\n            },\n            y: {\n              reverse: false,\n              stacked: true,\n            },\n          },\n        };\n      } else {\n        console.warn('Unsupported chart type: ' + chartType);\n      }\n\n      const isSingleBuild = buildMetricsData.datasets[0].data.length === 1;\n\n      const commonChartConfig = {\n        layout: {\n          padding: {\n            top: 20,\n            bottom: 20,\n          },\n        },\n        maintainAspectRatio: false,\n        tooltips: {\n          callbacks: {\n            title: (tooltipItems: Array<any>) => generateBuildTitle(tooltipItems[0].label),\n            label: (tooltipItem: any, data: any) => {\n              let label = data.datasets[tooltipItem.datasetIndex].label || '';\n\n              if (label) {\n                label += ': ' + generateTimeTitle(tooltipItem.value);\n              }\n              if (tooltipItem.value !== 'NaN' && tooltipItem.value > 1000) {\n                label += '  (' + tooltipItem.value + ' ms)';\n              }\n              return label;\n            },\n          },\n        },\n      };\n      const commonChartPlugins = [\n        {\n          id: '',\n          beforeInit: (chart: any) => {\n            chart.legend.afterFit = () => {\n              chart.height = chart.height + 25;\n            };\n          },\n        },\n      ];\n      lineChartConfig.data = buildMetricsData;\n      barChartConfig.data = buildMetricsData;\n\n      // increase space between legend and chart\n      let heightTmp = 0;\n      const MIN_HEIGHT = 290;\n      const MIN_HEIGHT_SINGLE_BUILD = 400;\n\n      if (chartType === 'horizontalBar') {\n        Object.assign(barChartConfig.options!, commonChartConfig);\n        barChartConfig.plugins = commonChartPlugins;\n        heightTmp = buildMetricsData.datasets[0].data.length * 30;\n        chartRef.current!.parentElement!.style.height =\n          (heightTmp < MIN_HEIGHT ? (isSingleBuild ? MIN_HEIGHT_SINGLE_BUILD : MIN_HEIGHT) : heightTmp) + 'px';\n        if (isSingleBuild) {\n          barChartConfig.options!.layout!.padding = 50;\n        }\n      } else {\n        Object.assign(lineChartConfig.options!, commonChartConfig);\n        lineChartConfig.plugins = commonChartPlugins;\n        chartRef.current!.parentElement!.style.height = '300px';\n      }\n    };\n    updateChartConfig();\n    if (chartType === 'line' && lineChart) {\n      lineChart.config.data = lineChartConfig.data;\n      lineChart.config.options = lineChartConfig.options;\n      lineChart.update();\n    } else if (chartType === 'horizontalBar' && barChart) {\n      barChart.config.data = barChartConfig.data;\n      barChart.config.options = barChartConfig.options;\n      barChart.update();\n    }\n    if (isCanvasInit.current) {\n      if (chartType === 'line') {\n        const lineCtx = chartRef.current?.getContext('2d');\n        if (!lineCtx) {\n          throw new Error('Chart.JS: Failed to get 2D context');\n        }\n        lineChart = new Chart(lineCtx, lineChartConfig);\n      } else if (chartType === 'horizontalBar') {\n        const barCtx = chartRef.current?.getContext('2d');\n        if (!barCtx) {\n          throw new Error('Chart.JS: Failed to get 2D context');\n        }\n        barChart = new Chart(barCtx, barChartConfig);\n      }\n      isCanvasInit.current = false;\n    }\n  }, [chartRef, chartType, buildMetrics.buildMetricsData, buildMetrics.builds]);\n  return <canvas id={componentId} ref={chartRef} />;\n};\n\n/**\n * The component representing Build Metric charts.\n *\n * @param {Object[]} builds - List of Builds.\n * @param {string} chartType - Possible values: line, horizontalBar\n * @param {string} componentId - Unique component id.\n *\n * @example\n * ```tsx\n * <BuildMetrics builds={buildList} chartType=\"line\" componentId=\"BUILD_CONFIG_METRICS\"></BuildMetrics>\n * ```\n *\n */\nexport const BuildMetrics = ({ builds, chartType, componentId }: IBuildMetricsProps) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [selected, setSelected] = useState<string>('1st');\n  const [buildMetrics, setBuildMetrics] = useState<IBuildMetrics>();\n  const dataContainer = useDataContainer(\n    useCallback(({ serviceData, requestConfig }: IService<Array<Build>>) => {\n      return buildService.getBuildMetrics(transferBuildsToBuildId(serviceData), requestConfig);\n    }, [])\n  );\n  const dataContainerRefresh = dataContainer.refresh;\n  const navigationSelectOptions: Array<any> = navigationOptions.map((option) => (\n    <SelectOption key={option.id} value={option.name} />\n  ));\n\n  useEffect(() => {\n    /**\n     * Filter array using Nth and max parameters.\n     *\n     * @param {array} array - Full array to be filtered.\n     * @param {number} nth - Returned array will contain only every Nth item.\n     * @param {number} max [20] - Returned array max size.\n     */\n    const filterBuilds = (array: Array<Build>, nth: number, max: number = BUILDS_DISPLAY_LIMIT) => {\n      const result: Build[] = [];\n      for (let i = 0; i < array.length; i = i + nth) {\n        result.push(array[i]);\n      }\n\n      return result.slice(0, max);\n    };\n    /* Load data according to the current filter */\n    const currentFilteredBuilds: Build[] = filterBuilds(builds, getNavigationIdByName(selected));\n    dataContainerRefresh({ serviceData: currentFilteredBuilds, requestConfig: {} }).then((res: AxiosResponse) => {\n      setBuildMetrics({\n        builds: currentFilteredBuilds,\n        buildMetricsData: res.data,\n      });\n    });\n  }, [builds, selected, dataContainerRefresh]);\n\n  const onToggle = () => {\n    setIsOpen(!isOpen);\n  };\n  const onSelect = (event: any, value: any) => {\n    setSelected(value);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <DataContainer {...dataContainer} title=\"Build Metrics\">\n        <div className={styles['pnc-build-metrics']}>\n          <div className={styles['pnc-build-metrics-body']}>\n            <div className={styles['pnc-build-metrics-help']}>\n              <small>Select specific metric in the chart legend to filter it out:</small>\n            </div>\n            {metricsTooltipList && (\n              // Popover seems to cause warning: findDOMNode is deprecated in StrictMode\n              <Popover\n                aria-label=\"Basic popover\"\n                bodyContent={MetricsPopoverContent(metricsTooltipList)}\n                showClose={false}\n                enableFlip={false}\n                position=\"left-start\"\n              >\n                <div className={`${styles['pnc-build-metrics-help']} ${styles['pnc-build-metrics-help--right']}`}>\n                  <small>\n                    Metrics Descriptions &nbsp;\n                    <span className={styles['pnc-build-metric-info-icon']}>\n                      <InfoCircleIcon />\n                    </span>\n                  </small>\n                </div>\n              </Popover>\n            )}\n\n            <div className={styles['canvas-wrapper']}>\n              {buildMetrics && buildMetrics.builds && buildMetrics.buildMetricsData && (\n                <BuildMetricsCanvas\n                  buildMetrics={buildMetrics!}\n                  chartType={chartType}\n                  componentId={componentId}\n                ></BuildMetricsCanvas>\n              )}\n            </div>\n          </div>\n          <form className={styles['pnc-build-metric-navigation']}>\n            <div className=\"pull-left\"></div>\n            <div className=\"pull-right\" ng-if=\"$ctrl.builds.length > 1\">\n              Display every&nbsp;\n              <Select\n                width={100}\n                variant={SelectVariant.single}\n                onToggle={onToggle}\n                onSelect={onSelect}\n                selections={selected}\n                isOpen={isOpen}\n                aria-labelledby={`${componentId}-select`}\n              >\n                {navigationSelectOptions}\n              </Select>\n              &nbsp;build\n              <Popover\n                aria-label=\"Basic popover\"\n                bodyContent={`Always a maximum of ${BUILDS_DISPLAY_LIMIT} builds will be displayed if they are available, eg. if every ${BUILDS_DISPLAY_LIMIT_EXAMPLE}th build is displayed, ${BUILDS_DISPLAY_LIMIT} builds will cover last ${\n                  BUILDS_DISPLAY_LIMIT * BUILDS_DISPLAY_LIMIT_EXAMPLE\n                } builds.`}\n                showClose={false}\n              >\n                <small>\n                  &nbsp;\n                  <span className={styles['pnc-build-metric-info-icon']}>\n                    <InfoCircleIcon />\n                  </span>\n                </small>\n              </Popover>\n            </div>\n          </form>\n        </div>\n      </DataContainer>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}