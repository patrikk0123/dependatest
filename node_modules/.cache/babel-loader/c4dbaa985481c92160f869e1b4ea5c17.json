{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var ExpandableSection = /*#__PURE__*/function (_React$Component) {\n  _inherits(ExpandableSection, _React$Component);\n\n  var _super = _createSuper(ExpandableSection);\n\n  function ExpandableSection(props) {\n    var _this;\n\n    _classCallCheck(this, ExpandableSection);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isExpanded: props.isExpanded\n    };\n    return _this;\n  }\n\n  _createClass(ExpandableSection, [{\n    key: \"calculateToggleText\",\n    value: function calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {\n      if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n        return toggleTextExpanded;\n      }\n\n      if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n        return toggleTextCollapsed;\n      }\n\n      return toggleText;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _a = this.props,\n          onToggleProp = _a.onToggle,\n          isActive = _a.isActive,\n          className = _a.className,\n          toggleText = _a.toggleText,\n          toggleTextExpanded = _a.toggleTextExpanded,\n          toggleTextCollapsed = _a.toggleTextCollapsed,\n          toggleContent = _a.toggleContent,\n          children = _a.children,\n          isExpanded = _a.isExpanded,\n          isDetached = _a.isDetached,\n          displaySize = _a.displaySize,\n          isWidthLimited = _a.isWidthLimited,\n          isIndented = _a.isIndented,\n          contentId = _a.contentId,\n          props = __rest(_a, [\"onToggle\", \"isActive\", \"className\", \"toggleText\", \"toggleTextExpanded\", \"toggleTextCollapsed\", \"toggleContent\", \"children\", \"isExpanded\", \"isDetached\", \"displaySize\", \"isWidthLimited\", \"isIndented\", \"contentId\"]);\n\n      var onToggle = onToggleProp;\n      var propOrStateIsExpanded = isExpanded; // uncontrolled\n\n      if (isExpanded === undefined) {\n        propOrStateIsExpanded = this.state.isExpanded;\n\n        onToggle = function onToggle(isOpen) {\n          _this2.setState({\n            isExpanded: isOpen\n          }, function () {\n            return onToggleProp(_this2.state.isExpanded);\n          });\n        };\n      }\n\n      var computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);\n      return React.createElement(\"div\", Object.assign({}, props, {\n        className: css(styles.expandableSection, propOrStateIsExpanded && styles.modifiers.expanded, isActive && styles.modifiers.active, isDetached && styles.modifiers.detached, displaySize === 'large' && styles.modifiers.displayLg, isWidthLimited && styles.modifiers.limitWidth, isIndented && styles.modifiers.indented, className)\n      }), !isDetached && React.createElement(\"button\", {\n        className: css(styles.expandableSectionToggle),\n        type: \"button\",\n        \"aria-expanded\": propOrStateIsExpanded,\n        onClick: function onClick() {\n          return onToggle(!propOrStateIsExpanded);\n        }\n      }, React.createElement(\"span\", {\n        className: css(styles.expandableSectionToggleIcon)\n      }, React.createElement(AngleRightIcon, {\n        \"aria-hidden\": true\n      })), React.createElement(\"span\", {\n        className: css(styles.expandableSectionToggleText)\n      }, toggleContent || computedToggleText)), React.createElement(\"div\", {\n        className: css(styles.expandableSectionContent),\n        hidden: !propOrStateIsExpanded,\n        id: contentId\n      }, children));\n    }\n  }]);\n\n  return ExpandableSection;\n}(React.Component);\nExpandableSection.displayName = 'ExpandableSection';\nExpandableSection.defaultProps = {\n  className: '',\n  toggleText: '',\n  toggleTextExpanded: '',\n  toggleTextCollapsed: '',\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onToggle: function onToggle(isExpanded) {\n    return undefined;\n  },\n  isActive: false,\n  isDetached: false,\n  displaySize: 'default',\n  isWidthLimited: false,\n  isIndented: false,\n  contentId: ''\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","AngleRightIcon","ExpandableSection","props","state","isExpanded","toggleText","toggleTextExpanded","toggleTextCollapsed","propOrStateIsExpanded","onToggleProp","_a","onToggle","isActive","className","toggleContent","children","isDetached","displaySize","isWidthLimited","isIndented","contentId","__rest","undefined","setState","isOpen","computedToggleText","calculateToggleText","expandableSection","modifiers","expanded","active","detached","displayLg","limitWidth","indented","expandableSectionToggle","type","onClick","expandableSectionToggleIcon","expandableSectionToggleText","expandableSectionContent","hidden","id","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ExpandableSection/ExpandableSection.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { PickOptional } from '../../helpers/typeUtils';\n\nexport interface ExpandableSectionProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the Expandable Component */\n  children?: React.ReactNode;\n  /** Additional classes added to the Expandable Component */\n  className?: string;\n  /** Flag to indicate if the content is expanded */\n  isExpanded?: boolean;\n  /** Text that appears in the attached toggle */\n  toggleText?: string;\n  /** Text that appears in the attached toggle when expanded (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */\n  toggleTextExpanded?: string;\n  /** Text that appears in the attached toggle when collapsed (will override toggleText if both are specified; used for uncontrolled expandable with dynamic toggle text) */\n  toggleTextCollapsed?: string;\n  /** React node that appears in the attached toggle in place of toggle text */\n  toggleContent?: React.ReactNode;\n  /** Callback function to toggle the expandable content. Detached expandable sections should use the onToggle property of ExpandableSectionToggle. */\n  onToggle?: (isExpanded: boolean) => void;\n  /** Forces active state */\n  isActive?: boolean;\n  /** Indicates the expandable section has a detached toggle */\n  isDetached?: boolean;\n  /** ID of the content of the expandable section */\n  contentId?: string;\n  /** Display size variant. Set to large for disclosure styling. */\n  displaySize?: 'default' | 'large';\n  /** Flag to indicate the width of the component is limited. Set to true for disclosure styling. */\n  isWidthLimited?: boolean;\n  /** Flag to indicate if the content is indented */\n  isIndented?: boolean;\n}\n\ninterface ExpandableSectionState {\n  isExpanded: boolean;\n}\n\nexport class ExpandableSection extends React.Component<ExpandableSectionProps, ExpandableSectionState> {\n  static displayName = 'ExpandableSection';\n  constructor(props: ExpandableSectionProps) {\n    super(props);\n\n    this.state = {\n      isExpanded: props.isExpanded\n    };\n  }\n\n  static defaultProps: PickOptional<ExpandableSectionProps> = {\n    className: '',\n    toggleText: '',\n    toggleTextExpanded: '',\n    toggleTextCollapsed: '',\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onToggle: (isExpanded): void => undefined,\n    isActive: false,\n    isDetached: false,\n    displaySize: 'default',\n    isWidthLimited: false,\n    isIndented: false,\n    contentId: ''\n  };\n\n  private calculateToggleText(\n    toggleText: string,\n    toggleTextExpanded: string,\n    toggleTextCollapsed: string,\n    propOrStateIsExpanded: boolean\n  ) {\n    if (propOrStateIsExpanded && toggleTextExpanded !== '') {\n      return toggleTextExpanded;\n    }\n    if (!propOrStateIsExpanded && toggleTextCollapsed !== '') {\n      return toggleTextCollapsed;\n    }\n    return toggleText;\n  }\n\n  render() {\n    const {\n      onToggle: onToggleProp,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isActive,\n      className,\n      toggleText,\n      toggleTextExpanded,\n      toggleTextCollapsed,\n      toggleContent,\n      children,\n      isExpanded,\n      isDetached,\n      displaySize,\n      isWidthLimited,\n      isIndented,\n      contentId,\n      ...props\n    } = this.props;\n    let onToggle = onToggleProp;\n    let propOrStateIsExpanded = isExpanded;\n\n    // uncontrolled\n    if (isExpanded === undefined) {\n      propOrStateIsExpanded = this.state.isExpanded;\n      onToggle = isOpen => {\n        this.setState({ isExpanded: isOpen }, () => onToggleProp(this.state.isExpanded));\n      };\n    }\n\n    const computedToggleText = this.calculateToggleText(\n      toggleText,\n      toggleTextExpanded,\n      toggleTextCollapsed,\n      propOrStateIsExpanded\n    );\n\n    return (\n      <div\n        {...props}\n        className={css(\n          styles.expandableSection,\n          propOrStateIsExpanded && styles.modifiers.expanded,\n          isActive && styles.modifiers.active,\n          isDetached && styles.modifiers.detached,\n          displaySize === 'large' && styles.modifiers.displayLg,\n          isWidthLimited && styles.modifiers.limitWidth,\n          isIndented && styles.modifiers.indented,\n          className\n        )}\n      >\n        {!isDetached && (\n          <button\n            className={css(styles.expandableSectionToggle)}\n            type=\"button\"\n            aria-expanded={propOrStateIsExpanded}\n            onClick={() => onToggle(!propOrStateIsExpanded)}\n          >\n            <span className={css(styles.expandableSectionToggleIcon)}>\n              <AngleRightIcon aria-hidden />\n            </span>\n            <span className={css(styles.expandableSectionToggleText)}>{toggleContent || computedToggleText}</span>\n          </button>\n        )}\n        <div className={css(styles.expandableSectionContent)} hidden={!propOrStateIsExpanded} id={contentId}>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}