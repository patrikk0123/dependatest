{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Objects consisting of whether is input required and validation function\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> fieldValues - values of input fields\n *  -> fieldErrors - error messages of inout fields\n *  -> fieldStates - 'default' | 'success' | 'error'\n *  -> isSubmitDisabled - submit disabled or not\n *  -> onChange - callback for input fields on change\n *  -> setFieldValues - set all field values\n *  -> onSubmit - callback for submit button\n *\n * initValues, validators, fieldValues, fieldErrors, fieldStates are objects whose keys are equal to ids of inputs fields.\n * example: validators.projectUrl.isRequired\n */\nexport const useForm = (initForm, callback) => {\n  const [form, setForm] = useState(initForm); // is submit button disabled?\n\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true); // has any field been changed?\n  // important for edit page (do not submit until any new content)\n\n  const [hasChanged, setHasChanged] = useState(false); // // input values\n  // const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  // // input error messages\n  // const [fieldErrors, setFieldErrors] = useState<IFieldErrors>({});\n  // // inpur validation functions\n  // const [fieldValidators] = useState<IFieldValidators>(validators);\n  // const initFieldStates = copyAndSetValues(initValues, 'default');\n  // // input states - 'default' | 'success' | 'error'\n  // const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n  // are all validated inputs valid?\n\n  const isFormValid = useCallback(() => {\n    return !Object.keys(fieldErrors).length;\n  }, [fieldErrors]); // are all required inputs filled?\n\n  const areRequiredFilled = useCallback(() => {\n    for (const key in fieldValidators) {\n      if (fieldValidators[key].isRequired && !fieldValues[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }, [fieldValidators, fieldValues]); // callback (on change of input)\n\n  const onChange = event => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n    setFieldValues({ ...fieldValues,\n      [fieldName]: fieldValue\n    });\n    validate(fieldName, fieldValue);\n    setHasChanged(true);\n  }; // validate field\n\n\n  const validate = (fieldName, fieldValue) => {\n    if (fieldValidators[fieldName]) {\n      const isRequired = fieldValidators[fieldName].isRequired;\n      const validator = fieldValidators[fieldName].validator;\n\n      if (isRequired) {\n        const error = fieldValue ? '' : 'Field must be filled!';\n        setError(fieldName, fieldValue, error);\n      } else if (validator) {\n        const error = validator(fieldValue);\n        setError(fieldName, fieldValue, error);\n      }\n    }\n  }; // set error message and state\n\n\n  const setError = (fieldName, fieldValue, error) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors,\n        [fieldName]: error\n      });\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'error'\n      });\n    } else {\n      // if no error, delete old error (if any)\n      const newErrors = { ...fieldErrors\n      };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors); // display success state only if not empty\n\n      if (fieldValue) {\n        setFieldStates({ ...fieldStates,\n          [fieldName]: 'success'\n        });\n      } else {\n        setFieldStates({ ...fieldStates,\n          [fieldName]: 'default'\n        });\n      }\n    }\n  }; // callback (on submit of form)\n\n\n  const onSubmit = () => {\n    callback(fieldValues); // reset state to 'default' (valid inputs wont be highlighted)\n\n    setFieldStates(initFieldStates);\n    setIsSubmitDisabled(true);\n  };\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fieldValues, hasChanged, isFormValid, areRequiredFilled]);\n  return {\n    form,\n    isSubmitDisabled,\n    onChange,\n    setFieldValues,\n    onSubmit\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useState","useForm","initForm","callback","form","setForm","isSubmitDisabled","setIsSubmitDisabled","hasChanged","setHasChanged","isFormValid","Object","keys","fieldErrors","length","areRequiredFilled","key","fieldValidators","isRequired","fieldValues","onChange","event","fieldName","currentTarget","name","fieldValue","value","setFieldValues","validate","validator","error","setError","setFieldErrors","setFieldStates","fieldStates","newErrors","onSubmit","initFieldStates"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { copyAndSetValues } from '../utils/utils';\n\n// interface IFieldValues {\n//   [key: string]: string;\n// }\n\n// interface IFieldErrors {\n//   [key: string]: string | undefined;\n// }\n\n// interface IFieldValidators {\n//   [key: string]: IValidator;\n// }\n\ninterface IValidator {\n  isRequired?: boolean;\n  validator?: Function;\n}\n\ninterface IFieldState {\n  value: string;\n  errorMessage?: string;\n  state?: any;\n  validator?: IValidator;\n}\n\ninterface IFormState {\n  [key: string]: IFieldState;\n}\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Objects consisting of whether is input required and validation function\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> fieldValues - values of input fields\n *  -> fieldErrors - error messages of inout fields\n *  -> fieldStates - 'default' | 'success' | 'error'\n *  -> isSubmitDisabled - submit disabled or not\n *  -> onChange - callback for input fields on change\n *  -> setFieldValues - set all field values\n *  -> onSubmit - callback for submit button\n *\n * initValues, validators, fieldValues, fieldErrors, fieldStates are objects whose keys are equal to ids of inputs fields.\n * example: validators.projectUrl.isRequired\n */\nexport const useForm = (initForm: Omit<Omit<IFormState, 'errorMessage'>, 'state'>, callback: Function) => {\n  const [form, setForm] = useState<IFormState>(initForm);\n\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  // has any field been changed?\n  // important for edit page (do not submit until any new content)\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // // input values\n  // const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  // // input error messages\n  // const [fieldErrors, setFieldErrors] = useState<IFieldErrors>({});\n  // // inpur validation functions\n  // const [fieldValidators] = useState<IFieldValidators>(validators);\n\n  // const initFieldStates = copyAndSetValues(initValues, 'default');\n  // // input states - 'default' | 'success' | 'error'\n  // const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n\n  // are all validated inputs valid?\n  const isFormValid = useCallback(() => {\n    return !Object.keys(fieldErrors).length;\n  }, [fieldErrors]);\n\n  // are all required inputs filled?\n  const areRequiredFilled = useCallback(() => {\n    for (const key in fieldValidators) {\n      if (fieldValidators[key].isRequired && !fieldValues[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }, [fieldValidators, fieldValues]);\n\n  // callback (on change of input)\n  const onChange = (event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n\n    setFieldValues({ ...fieldValues, [fieldName]: fieldValue });\n    validate(fieldName, fieldValue);\n    setHasChanged(true);\n  };\n\n  // validate field\n  const validate = (fieldName: string, fieldValue: string) => {\n    if (fieldValidators[fieldName]) {\n      const isRequired = fieldValidators[fieldName].isRequired;\n      const validator = fieldValidators[fieldName].validator;\n      if (isRequired) {\n        const error = fieldValue ? '' : 'Field must be filled!';\n        setError(fieldName, fieldValue, error);\n      } else if (validator) {\n        const error = validator(fieldValue);\n        setError(fieldName, fieldValue, error);\n      }\n    }\n  };\n\n  // set error message and state\n  const setError = (fieldName: string, fieldValue: string, error: string) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors, [fieldName]: error });\n      setFieldStates({ ...fieldStates, [fieldName]: 'error' });\n    } else {\n      // if no error, delete old error (if any)\n      const newErrors = { ...fieldErrors };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      // display success state only if not empty\n      if (fieldValue) {\n        setFieldStates({ ...fieldStates, [fieldName]: 'success' });\n      } else {\n        setFieldStates({ ...fieldStates, [fieldName]: 'default' });\n      }\n    }\n  };\n\n  // callback (on submit of form)\n  const onSubmit = () => {\n    callback(fieldValues);\n    // reset state to 'default' (valid inputs wont be highlighted)\n    setFieldStates(initFieldStates);\n    setIsSubmitDisabled(true);\n  };\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fieldValues, hasChanged, isFormValid, areRequiredFilled]);\n\n  return { form, isSubmitDisabled, onChange, setFieldValues, onSubmit };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}