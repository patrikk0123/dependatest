{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Objects consisting of whether is input required and validation function\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> fieldValues - values of input fields\n *  -> fieldErrors - error messages of inout fields\n *  -> fieldStates - 'default' | 'success' | 'error'\n *  -> isSubmitDisabled - submit disabled or not\n *  -> onChange - callback for input fields on change\n *  -> setFieldValues - set all field values\n *  -> onSubmit - callback for submit button\n *\n * initValues, validators, fieldValues, fieldErrors, fieldStates are objects whose keys are equal to ids of inputs fields.\n * example: validators.projectUrl.isRequired\n */\nexport const useForm = (initForm, callback) => {\n  const defaultForm = { ...initForm\n  };\n\n  for (const key in defaultForm) {\n    defaultForm[key].state = 'default';\n  }\n\n  const [form, setForm] = useState(defaultForm); // is submit button disabled?\n\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(true); // has any field been changed?\n  // important for edit page (do not submit until any new content)\n\n  const [hasChanged, setHasChanged] = useState(false); // // input values\n  // const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  // // input error messages\n  // const [fieldErrors, setFieldErrors] = useState<IFieldErrors>({});\n  // // inpur validation functions\n  // const [fieldValidators] = useState<IFieldValidators>(validators);\n  // const initFieldStates = copyAndSetValues(initValues, 'default');\n  // // input states - 'default' | 'success' | 'error'\n  // const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n  // are all validated inputs valid?\n\n  const isFormValid = useCallback(() => {\n    for (const key in form) {\n      if (form[key].errorMessage) return false;\n    }\n\n    return true;\n  }, [form]); // are all required inputs filled?\n\n  const areRequiredFilled = useCallback(() => {\n    for (const key in form) {\n      const validator = form[key].validator;\n\n      if (validator) {\n        if (validator.isRequired && !form[key].value) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }, [form]); // callback (on change of input)\n\n  const onChange = event => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n    const newField = { ...form[fieldName],\n      value: fieldName\n    };\n    setForm({ ...form,\n      [fieldName]: newField\n    });\n    validate(fieldName, fieldValue);\n    setHasChanged(true);\n  }; // validate field\n\n\n  const validate = (fieldName, fieldValue) => {\n    const validator = form[fieldName].validator;\n\n    if (validator) {\n      if (validator.isRequired) {\n        const error = fieldValue ? '' : 'Field must be filled!';\n        setError(fieldName, fieldValue, error);\n      } else if (validator.check) {\n        const error = validator.check(fieldValue);\n        setError(fieldName, fieldValue, error);\n      }\n    }\n  }; // set error message and state\n\n\n  const setError = (fieldName, fieldValue, error) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors,\n        [fieldName]: error\n      });\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'error'\n      });\n    } else {\n      // if no error, delete old error (if any)\n      const newErrors = { ...fieldErrors\n      };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors); // display success state only if not empty\n\n      if (fieldValue) {\n        setFieldStates({ ...fieldStates,\n          [fieldName]: 'success'\n        });\n      } else {\n        setFieldStates({ ...fieldStates,\n          [fieldName]: 'default'\n        });\n      }\n    }\n  };\n\n  const generateSubmitData = form => {\n    const formData = {};\n\n    for (const key in form) {\n      formData[key] = form[key].value;\n    }\n  }; // callback (on submit of form)\n\n\n  const onSubmit = () => {\n    callback(fieldValues); // reset state to 'default' (valid inputs wont be highlighted)\n\n    setFieldStates(initFieldStates);\n    setIsSubmitDisabled(true);\n  };\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fieldValues, hasChanged, isFormValid, areRequiredFilled]);\n  return {\n    form,\n    isSubmitDisabled,\n    onChange,\n    setFieldValues,\n    onSubmit\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useState","useForm","initForm","callback","defaultForm","key","state","form","setForm","isSubmitDisabled","setIsSubmitDisabled","hasChanged","setHasChanged","isFormValid","errorMessage","areRequiredFilled","validator","isRequired","value","onChange","event","fieldName","currentTarget","name","fieldValue","newField","validate","error","setError","check","setFieldErrors","fieldErrors","setFieldStates","fieldStates","newErrors","generateSubmitData","formData","onSubmit","fieldValues","initFieldStates","setFieldValues"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { fileURLToPath } from 'url';\nimport { copyAndSetValues } from '../utils/utils';\n\ninterface IFieldValues {\n  [key: string]: string;\n}\n\n// interface IFieldErrors {\n//   [key: string]: string | undefined;\n// }\n\n// interface IFieldValidators {\n//   [key: string]: IValidator;\n// }\n\ninterface IValidator {\n  isRequired?: boolean;\n  check?: Function;\n}\n\ninterface IFieldState {\n  value: string;\n  errorMessage?: string;\n  state?: any;\n  validator?: IValidator;\n}\n\ninterface IFormState {\n  [key: string]: IFieldState;\n}\n\n/**\n * Hook to manage input values, validation and states of a form.\n * All validation is done on change of input.\n * Submit button is firstly disabled. In order to enable button:\n *  -> at least one change must be done\n *  -> all required fields must not be empty\n *  -> all validated inputs must be valid\n *\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Objects consisting of whether is input required and validation function\n * @param callback - Function to call when submitting user input data\n *\n * @returns form states and access functions\n *  -> fieldValues - values of input fields\n *  -> fieldErrors - error messages of inout fields\n *  -> fieldStates - 'default' | 'success' | 'error'\n *  -> isSubmitDisabled - submit disabled or not\n *  -> onChange - callback for input fields on change\n *  -> setFieldValues - set all field values\n *  -> onSubmit - callback for submit button\n *\n * initValues, validators, fieldValues, fieldErrors, fieldStates are objects whose keys are equal to ids of inputs fields.\n * example: validators.projectUrl.isRequired\n */\nexport const useForm = (initForm: Omit<Omit<IFormState, 'errorMessage'>, 'state'>, callback: Function) => {\n  const defaultForm = { ...initForm };\n  for (const key in defaultForm) {\n    defaultForm[key].state = 'default';\n  }\n  const [form, setForm] = useState<IFormState>(defaultForm);\n\n  // is submit button disabled?\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState<boolean>(true);\n  // has any field been changed?\n  // important for edit page (do not submit until any new content)\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // // input values\n  // const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  // // input error messages\n  // const [fieldErrors, setFieldErrors] = useState<IFieldErrors>({});\n  // // inpur validation functions\n  // const [fieldValidators] = useState<IFieldValidators>(validators);\n\n  // const initFieldStates = copyAndSetValues(initValues, 'default');\n  // // input states - 'default' | 'success' | 'error'\n  // const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n\n  // are all validated inputs valid?\n  const isFormValid = useCallback(() => {\n    for (const key in form) {\n      if (form[key].errorMessage) return false;\n    }\n\n    return true;\n  }, [form]);\n\n  // are all required inputs filled?\n  const areRequiredFilled = useCallback(() => {\n    for (const key in form) {\n      const validator = form[key].validator;\n      if (validator) {\n        if (validator.isRequired && !form[key].value) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }, [form]);\n\n  // callback (on change of input)\n  const onChange = (event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n    const fieldName = event.currentTarget.name;\n    const fieldValue = event.currentTarget.value;\n\n    const newField = { ...form[fieldName], value: fieldName };\n    setForm({ ...form, [fieldName]: newField });\n\n    validate(fieldName, fieldValue);\n    setHasChanged(true);\n  };\n\n  // validate field\n  const validate = (fieldName: string, fieldValue: string) => {\n    const validator = form[fieldName].validator;\n    if (validator) {\n      if (validator.isRequired) {\n        const error = fieldValue ? '' : 'Field must be filled!';\n        setError(fieldName, fieldValue, error);\n      } else if (validator.check) {\n        const error = validator.check(fieldValue);\n        setError(fieldName, fieldValue, error);\n      }\n    }\n  };\n\n  // set error message and state\n  const setError = (fieldName: string, fieldValue: string, error: string) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors, [fieldName]: error });\n      setFieldStates({ ...fieldStates, [fieldName]: 'error' });\n    } else {\n      // if no error, delete old error (if any)\n      const newErrors = { ...fieldErrors };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      // display success state only if not empty\n      if (fieldValue) {\n        setFieldStates({ ...fieldStates, [fieldName]: 'success' });\n      } else {\n        setFieldStates({ ...fieldStates, [fieldName]: 'default' });\n      }\n    }\n  };\n\n  const generateSubmitData = (form: IFormState) => {\n    const formData: IFieldValues = {};\n\n    for (const key in form) {\n      formData[key] = form[key].value;\n    }\n  };\n\n  // callback (on submit of form)\n  const onSubmit = () => {\n    callback(fieldValues);\n    // reset state to 'default' (valid inputs wont be highlighted)\n    setFieldStates(initFieldStates);\n    setIsSubmitDisabled(true);\n  };\n\n  useEffect(() => {\n    if (isFormValid() && areRequiredFilled() && hasChanged) {\n      setIsSubmitDisabled(false);\n    } else {\n      setIsSubmitDisabled(true);\n    }\n  }, [fieldValues, hasChanged, isFormValid, areRequiredFilled]);\n\n  return { form, isSubmitDisabled, onChange, setFieldValues, onSubmit };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}