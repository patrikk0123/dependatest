{"ast":null,"code":"import { useEffect, useState } from 'react';\n\n/**\n * Hook to manage input values, validation and states of a form. All validation is done on change of input.\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Functions to validate inputs with\n * @param callback - Function to call when submitting user input data\n *\n * Both initValues and validators are objects whose keys are equal to ids of input elements.\n */\nexport const useForm = (initValues, validators, callback) => {\n  // are all form inputs valid?\n  const [isFormValid, setIsFormValid] = useState(false); // has user made any changes to the newly loaded form?\n  // at least one change must be to in order to submit form\n\n  const [hasChanged, setHasChanged] = useState(false); // input values\n\n  const [fieldValues, setFieldValues] = useState(initValues); // input error messages\n\n  const [fieldErrors, setFieldErrors] = useState({}); // inpur validation functons\n\n  const [fieldValidators, setFieldValidators] = useState(validators); // submitting state\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const initFieldStates = { ...initValues\n  };\n  Object.keys(initFieldStates).forEach(key => {\n    initFieldStates[key] = 'default';\n  }); // input states - 'default' | 'success' | 'error'\n\n  const [fieldStates, setFieldStates] = useState(initFieldStates);\n  useEffect(() => {\n    if (!Object.keys(fieldErrors).length && hasChanged) {\n      setIsFormValid(true);\n\n      if (isSubmitting) {\n        callback(fieldValues); // reset state to 'default' (valid inputs wont be highlighted)\n\n        setFieldStates(initFieldStates);\n      }\n    } else {\n      setIsFormValid(false);\n    }\n\n    setIsSubmitting(false);\n  }, [fieldErrors]);\n\n  const onChange = event => {\n    const fieldName = event.currentTarget.name;\n    setFieldValues({ ...fieldValues,\n      [fieldName]: event.currentTarget.value\n    });\n    setHasChanged(true); // if has any validator\n\n    if (fieldValidators[fieldName]) {\n      const error = fieldValidators[fieldName](event.currentTarget.value);\n      setError(fieldName, error);\n    }\n  };\n\n  const setError = (fieldName, error) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors,\n        [fieldName]: error\n      });\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'error'\n      });\n    } else {\n      const newErrors = { ...fieldErrors\n      };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      setFieldStates({ ...fieldStates,\n        [fieldName]: 'success'\n      });\n    }\n  };\n\n  const onSubmit = () => {\n    // check all inputs before submit\n    for (const key in fieldValidators) {\n      const error = fieldValidators[key](fieldValues[key]);\n\n      if (error) {\n        setFieldErrors({ ...fieldErrors,\n          [key]: error\n        });\n      } else {\n        const newErrors = { ...fieldErrors\n        };\n        delete newErrors[key];\n        setFieldErrors(newErrors);\n      }\n    }\n\n    setIsSubmitting(true);\n  };\n\n  return {\n    fieldValues,\n    fieldErrors,\n    fieldStates,\n    isFormValid,\n    onChange,\n    setFieldValues,\n    onSubmit\n  };\n};","map":{"version":3,"names":["useEffect","useState","useForm","initValues","validators","callback","isFormValid","setIsFormValid","hasChanged","setHasChanged","fieldValues","setFieldValues","fieldErrors","setFieldErrors","fieldValidators","setFieldValidators","isSubmitting","setIsSubmitting","initFieldStates","Object","keys","forEach","key","fieldStates","setFieldStates","length","onChange","event","fieldName","currentTarget","name","value","error","setError","newErrors","onSubmit"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/containers/useForm.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\ninterface IFieldValues {\n  [key: string]: string;\n}\n\ninterface IFieldErros {\n  [key: string]: string | undefined;\n}\n\ninterface IFieldValidators {\n  [key: string]: Function;\n}\n\n/**\n * Hook to manage input values, validation and states of a form. All validation is done on change of input.\n * See also {@link ProjectCreateEditPage}\n *\n * @param initValues - Values to initialize inputs with\n * @param validators - Functions to validate inputs with\n * @param callback - Function to call when submitting user input data\n *\n * Both initValues and validators are objects whose keys are equal to ids of input elements.\n */\nexport const useForm = (initValues: IFieldValues, validators: IFieldValidators, callback: Function) => {\n  // are all form inputs valid?\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  // has user made any changes to the newly loaded form?\n  // at least one change must be to in order to submit form\n  const [hasChanged, setHasChanged] = useState<boolean>(false);\n\n  // input values\n  const [fieldValues, setFieldValues] = useState<IFieldValues>(initValues);\n  // input error messages\n  const [fieldErrors, setFieldErrors] = useState<IFieldErros>({});\n  // inpur validation functons\n  const [fieldValidators, setFieldValidators] = useState<IFieldValidators>(validators);\n\n  // submitting state\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n\n  const initFieldStates = { ...initValues };\n  Object.keys(initFieldStates).forEach((key) => {\n    initFieldStates[key] = 'default';\n  });\n  // input states - 'default' | 'success' | 'error'\n  const [fieldStates, setFieldStates] = useState<any>(initFieldStates);\n\n  useEffect(() => {\n    if (!Object.keys(fieldErrors).length && hasChanged) {\n      setIsFormValid(true);\n      if (isSubmitting) {\n        callback(fieldValues);\n        // reset state to 'default' (valid inputs wont be highlighted)\n        setFieldStates(initFieldStates);\n      }\n    } else {\n      setIsFormValid(false);\n    }\n\n    setIsSubmitting(false);\n  }, [fieldErrors]);\n\n  const onChange = (event: React.FormEvent<HTMLInputElement> | React.FormEvent<HTMLTextAreaElement>) => {\n    const fieldName = event.currentTarget.name;\n    setFieldValues({ ...fieldValues, [fieldName]: event.currentTarget.value });\n    setHasChanged(true);\n\n    // if has any validator\n    if (fieldValidators[fieldName]) {\n      const error = fieldValidators[fieldName](event.currentTarget.value);\n      setError(fieldName, error);\n    }\n  };\n\n  const setError = (fieldName: string, error: string) => {\n    if (error) {\n      setFieldErrors({ ...fieldErrors, [fieldName]: error });\n      setFieldStates({ ...fieldStates, [fieldName]: 'error' });\n    } else {\n      const newErrors = { ...fieldErrors };\n      delete newErrors[fieldName];\n      setFieldErrors(newErrors);\n      setFieldStates({ ...fieldStates, [fieldName]: 'success' });\n    }\n  };\n\n  const onSubmit = () => {\n    // check all inputs before submit\n    for (const key in fieldValidators) {\n      const error = fieldValidators[key](fieldValues[key]);\n\n      if (error) {\n        setFieldErrors({ ...fieldErrors, [key]: error });\n      } else {\n        const newErrors = { ...fieldErrors };\n        delete newErrors[key];\n        setFieldErrors(newErrors);\n      }\n    }\n\n    setIsSubmitting(true);\n  };\n\n  return { fieldValues, fieldErrors, fieldStates, isFormValid, onChange, setFieldValues, onSubmit };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}