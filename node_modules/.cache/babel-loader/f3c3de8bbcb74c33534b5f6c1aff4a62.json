{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nimport * as React from 'react';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nexport var DualListSelectorList = function DualListSelectorList(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  var _React$useContext = React.useContext(DualListSelectorListContext),\n      setFocusedOption = _React$useContext.setFocusedOption,\n      isTree = _React$useContext.isTree,\n      ariaLabelledBy = _React$useContext.ariaLabelledBy,\n      focusedOption = _React$useContext.focusedOption,\n      displayOption = _React$useContext.displayOption,\n      selectedOptions = _React$useContext.selectedOptions,\n      id = _React$useContext.id,\n      onOptionSelect = _React$useContext.onOptionSelect,\n      options = _React$useContext.options,\n      isDisabled = _React$useContext.isDisabled; // only called when options are passed via options prop\n\n\n  var onOptionClick = function onOptionClick(e, index, id) {\n    setFocusedOption(id);\n    onOptionSelect(e, index, id);\n  };\n\n  return React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList),\n    role: isTree ? 'tree' : 'listbox',\n    \"aria-multiselectable\": \"true\",\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-activedescendant\": focusedOption,\n    \"aria-disabled\": isDisabled ? 'true' : undefined\n  }, props), options.length === 0 ? children : options.map(function (option, index) {\n    if (displayOption(option)) {\n      return React.createElement(DualListSelectorListItem, {\n        key: index,\n        isSelected: selectedOptions.indexOf(index) !== -1,\n        id: \"\".concat(id, \"-option-\").concat(index),\n        onOptionSelect: function onOptionSelect(e, id) {\n          return onOptionClick(e, index, id);\n        },\n        orderIndex: index,\n        isDisabled: isDisabled\n      }, option);\n    }\n\n    return;\n  }));\n};\nDualListSelectorList.displayName = 'DualListSelectorList';","map":{"version":3,"mappings":";AAAA,SAASA,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,6EAAnB;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,2BAAT,QAA4C,2BAA5C;AAMA,OAAO,IAAMC,oBAAoB,GAAuD,SAA3EA,oBAA2E,CAACC,EAAD,EAGxD;EAHyD,IACvFC,QADuF,GAC/ED,EAD+E,CACvFC,QADuF;EAAA,IAEpFC,KAFoF,GAE/EC,WAF+E,YAE/E,CAF+E;;EAIvF,wBAWIN,KAAK,CAACO,UAAN,CAAiBN,2BAAjB,CAXJ;EAAA,IACEO,gBADF,qBACEA,gBADF;EAAA,IAEEC,MAFF,qBAEEA,MAFF;EAAA,IAGEC,cAHF,qBAGEA,cAHF;EAAA,IAIEC,aAJF,qBAIEA,aAJF;EAAA,IAKEC,aALF,qBAKEA,aALF;EAAA,IAMEC,eANF,qBAMEA,eANF;EAAA,IAOEC,EAPF,qBAOEA,EAPF;EAAA,IAQEC,cARF,qBAQEA,cARF;EAAA,IASEC,OATF,qBASEA,OATF;EAAA,IAUEC,UAVF,qBAUEA,UAVF,CAD8B,CAc9B;;;EACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,CAAD,EAAgEC,KAAhE,EAA+EN,EAA/E,EAA6F;IACjHN,gBAAgB,CAACM,EAAD,CAAhB;IACAC,cAAc,CAACI,CAAD,EAAIC,KAAJ,EAAWN,EAAX,CAAd;EACD,CAHD;;EAKA,OACEd;IACEqB,SAAS,EAAExB,GAAG,CAACC,MAAM,CAACwB,oBAAR,CADhB;IAEEC,IAAI,EAAEd,MAAM,GAAG,MAAH,GAAY,SAF1B;IAEmC,wBACZ,MAHvB;IAG6B,mBACVC,cAJnB;IAIiC,yBACRC,aALzB;IAKsC,iBACrBM,UAAU,GAAG,MAAH,GAAYO;EANvC,GAOMnB,KAPN,GASGW,OAAO,CAACS,MAAR,KAAmB,CAAnB,GACGrB,QADH,GAEGY,OAAO,CAACU,GAAR,CAAY,UAACC,MAAD,EAASP,KAAT,EAAkB;IAC5B,IAAIR,aAAa,CAACe,MAAD,CAAjB,EAA2B;MACzB,OACE3B,oBAACD,wBAAD,EAAyB;QACvB6B,GAAG,EAAER,KADkB;QAEvBS,UAAU,EAAGhB,eAA4B,CAACiB,OAA7B,CAAqCV,KAArC,MAAgD,CAAC,CAFvC;QAGvBN,EAAE,YAAKA,EAAL,qBAAkBM,KAAlB,CAHqB;QAIvBL,cAAc,EAAE,wBAACI,CAAD,EAAIL,EAAJ;UAAA,OAAWI,aAAa,CAACC,CAAD,EAAIC,KAAJ,EAAWN,EAAX,CAAxB;QAAA,CAJO;QAKvBiB,UAAU,EAAEX,KALW;QAMvBH,UAAU,EAAEA;MANW,CAAzB,EAQGU,MARH,CADF;IAYD;;IACD;EACD,CAhBD,CAXN,CADF;AA+BD,CAtDM;AAuDPzB,oBAAoB,CAAC8B,WAArB,GAAmC,sBAAnC","names":["css","styles","DualListSelectorListItem","React","DualListSelectorListContext","DualListSelectorList","_a","children","props","__rest","useContext","setFocusedOption","isTree","ariaLabelledBy","focusedOption","displayOption","selectedOptions","id","onOptionSelect","options","isDisabled","onOptionClick","e","index","className","dualListSelectorList","role","undefined","length","map","option","key","isSelected","indexOf","orderIndex","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorList.tsx"],"sourcesContent":["import { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nimport * as React from 'react';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorListProps extends React.HTMLProps<HTMLUListElement> {\n  children?: React.ReactNode;\n}\n\nexport const DualListSelectorList: React.FunctionComponent<DualListSelectorListProps> = ({\n  children,\n  ...props\n}: DualListSelectorListProps) => {\n  const {\n    setFocusedOption,\n    isTree,\n    ariaLabelledBy,\n    focusedOption,\n    displayOption,\n    selectedOptions,\n    id,\n    onOptionSelect,\n    options,\n    isDisabled\n  } = React.useContext(DualListSelectorListContext);\n\n  // only called when options are passed via options prop\n  const onOptionClick = (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, index: number, id: string) => {\n    setFocusedOption(id);\n    onOptionSelect(e, index, id);\n  };\n\n  return (\n    <ul\n      className={css(styles.dualListSelectorList)}\n      role={isTree ? 'tree' : 'listbox'}\n      aria-multiselectable=\"true\"\n      aria-labelledby={ariaLabelledBy}\n      aria-activedescendant={focusedOption}\n      aria-disabled={isDisabled ? 'true' : undefined}\n      {...props}\n    >\n      {options.length === 0\n        ? children\n        : options.map((option, index) => {\n            if (displayOption(option)) {\n              return (\n                <DualListSelectorListItem\n                  key={index}\n                  isSelected={(selectedOptions as number[]).indexOf(index) !== -1}\n                  id={`${id}-option-${index}`}\n                  onOptionSelect={(e, id) => onOptionClick(e, index, id)}\n                  orderIndex={index}\n                  isDisabled={isDisabled}\n                >\n                  {option}\n                </DualListSelectorListItem>\n              );\n            }\n            return;\n          })}\n    </ul>\n  );\n};\nDualListSelectorList.displayName = 'DualListSelectorList';\n"]},"metadata":{},"sourceType":"module"}