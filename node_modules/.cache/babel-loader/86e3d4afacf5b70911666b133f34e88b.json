{"ast":null,"code":"import _slicedToArray from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport getBasePlacement from '../utils/getBasePlacement';\nimport { top, left, right, placements } from '../enums';\n/**\n * @param placement\n * @param rects\n * @param offset\n */\n\nexport function distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign(Object.assign({}, rects), {\n    placement: placement\n  })) : offset,\n      _ref2 = _slicedToArray(_ref, 2),\n      skidding = _ref2[0],\n      distance = _ref2[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n/**\n *\n */\n\nfunction offset(_ref3) {\n  var state = _ref3.state,\n      options = _ref3.options,\n      name = _ref3.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n}\n\nexport default {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n};","map":{"version":3,"mappings":";AAGA,OAAOA,gBAAP,MAA6B,2BAA7B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,UAA3B,QAA6C,UAA7C;AAeA;;;;;;AAKA,OAAM,SAAUC,uBAAV,CACJC,SADI,EAEJC,KAFI,EAGJC,MAHI,EAGU;EAEd,IAAMC,aAAa,GAAGT,gBAAgB,CAACM,SAAD,CAAtC;EACA,IAAMI,cAAc,GAAG,CAACR,IAAD,EAAOD,GAAP,EAAYU,OAAZ,CAAoBF,aAApB,KAAsC,CAAtC,GAA0C,CAAC,CAA3C,GAA+C,CAAtE;;EAEA,WACE,OAAOD,MAAP,KAAkB,UAAlB,GACIA,MAAM,iCACDD,KADC,GACI;IACRD,SAAS,EAATA;EADQ,CADJ,EADV,GAKIE,MANN;EAAA;EAAA,IAAKI,QAAL;EAAA,IAAeC,QAAf;;EAQAD,QAAQ,GAAGA,QAAQ,IAAI,CAAvB;EACAC,QAAQ,GAAG,CAACA,QAAQ,IAAI,CAAb,IAAkBH,cAA7B;EAEA,OAAO,CAACR,IAAD,EAAOC,KAAP,EAAcQ,OAAd,CAAsBF,aAAtB,KAAwC,CAAxC,GAA4C;IAAEK,CAAC,EAAED,QAAL;IAAeE,CAAC,EAAEH;EAAlB,CAA5C,GAA2E;IAAEE,CAAC,EAAEF,QAAL;IAAeG,CAAC,EAAEF;EAAlB,CAAlF;AACD;AAED;;;;AAGA,SAASL,MAAT,QAAoE;EAAA,IAAlDQ,KAAkD,SAAlDA,KAAkD;EAAA,IAA3CC,OAA2C,SAA3CA,OAA2C;EAAA,IAAlCC,IAAkC,SAAlCA,IAAkC;EAClE,sBAA4BD,OAA5B,CAAQT,MAAR;EAAA,IAAQA,MAAR,gCAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB;EAEA,IAAMW,IAAI,GAAGf,UAAU,CAACgB,MAAX,CAAkB,UAACC,GAAD,EAAMf,SAAN,EAAmB;IAChDe,GAAG,CAACf,SAAD,CAAH,GAAiBD,uBAAuB,CAACC,SAAD,EAAYU,KAAK,CAACT,KAAlB,EAAyBC,MAAzB,CAAxC;IACA,OAAOa,GAAP;EACD,CAHY,EAGV,EAHU,CAAb;EAKA,4BAAiBF,IAAI,CAACH,KAAK,CAACV,SAAP,CAArB;EAAA,IAAQQ,CAAR,yBAAQA,CAAR;EAAA,IAAWC,CAAX,yBAAWA,CAAX;;EAEA,IAAIC,KAAK,CAACM,aAAN,CAAoBC,aAApB,IAAqC,IAAzC,EAA+C;IAC7CP,KAAK,CAACM,aAAN,CAAoBC,aAApB,CAAkCT,CAAlC,IAAuCA,CAAvC;IACAE,KAAK,CAACM,aAAN,CAAoBC,aAApB,CAAkCR,CAAlC,IAAuCA,CAAvC;EACD;;EAEDC,KAAK,CAACM,aAAN,CAAoBJ,IAApB,IAA4BC,IAA5B;AACD;;AAID,eAAe;EACbD,IAAI,EAAE,QADO;EAEbM,OAAO,EAAE,IAFI;EAGbC,KAAK,EAAE,MAHM;EAIbC,QAAQ,EAAE,CAAC,eAAD,CAJG;EAKbC,EAAE,EAAEnB;AALS,CAAf","names":["getBasePlacement","top","left","right","placements","distanceAndSkiddingToXY","placement","rects","offset","basePlacement","invertDistance","indexOf","skidding","distance","x","y","state","options","name","data","reduce","acc","modifiersData","popperOffsets","enabled","phase","requires","fn"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/modifiers/offset.ts"],"sourcesContent":["// @ts-nocheck\nimport { Placement } from '../enums';\nimport { ModifierArguments, Modifier, Rect, Offsets } from '../types';\nimport getBasePlacement from '../utils/getBasePlacement';\nimport { top, left, right, placements } from '../enums';\n\ntype OffsetsFunction = (arg0: {\n  popper: Rect;\n  reference: Rect;\n  placement: Placement;\n}) => [number | null | undefined, number | null | undefined];\n\ntype Offset = OffsetsFunction | [number | null | undefined, number | null | undefined];\n\n// eslint-disable-next-line import/no-unused-modules\nexport interface Options {\n  offset: Offset;\n}\n\n/**\n * @param placement\n * @param rects\n * @param offset\n */\nexport function distanceAndSkiddingToXY(\n  placement: Placement,\n  rects: { popper: Rect; reference: Rect },\n  offset: Offset\n): Offsets {\n  const basePlacement = getBasePlacement(placement);\n  const invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  let [skidding, distance] =\n    typeof offset === 'function'\n      ? offset({\n          ...rects,\n          placement\n        })\n      : offset;\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n\n  return [left, right].indexOf(basePlacement) >= 0 ? { x: distance, y: skidding } : { x: skidding, y: distance };\n}\n\n/**\n *\n */\nfunction offset({ state, options, name }: ModifierArguments<Options>) {\n  const { offset = [0, 0] } = options;\n\n  const data = placements.reduce((acc, placement) => {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n\n  const { x, y } = data[state.placement];\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n}\n\n// eslint-disable-next-line import/no-unused-modules\nexport type OffsetModifier = Modifier<'offset', Options>;\nexport default {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n} as OffsetModifier;\n"]},"metadata":{},"sourceType":"module"}