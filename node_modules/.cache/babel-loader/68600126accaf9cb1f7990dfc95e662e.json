{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/Page';\nexport class Toolbar extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.chipGroupContentRef = React.createRef();\n    this.staticFilterInfo = {};\n    this.state = {\n      isManagedToggleExpanded: false,\n      filterInfo: {},\n      windowWidth: canUseDOM ? window.innerWidth : 1200,\n      ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n    };\n\n    this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n\n    this.toggleIsExpanded = () => {\n      this.setState(prevState => ({\n        isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n      }));\n    };\n\n    this.closeExpandableContent = e => {\n      if (e.target.innerWidth !== this.state.windowWidth) {\n        this.setState(() => ({\n          isManagedToggleExpanded: false,\n          windowWidth: e.target.innerWidth\n        }));\n      }\n    };\n\n    this.updateNumberFilters = (categoryName, numberOfFilters) => {\n      const filterInfoToUpdate = Object.assign({}, this.staticFilterInfo);\n\n      if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n        filterInfoToUpdate[categoryName] = numberOfFilters;\n        this.staticFilterInfo = filterInfoToUpdate;\n        this.setState({\n          filterInfo: filterInfoToUpdate\n        });\n      }\n    };\n\n    this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);\n\n    this.renderToolbar = randomId => {\n      const _a = this.props,\n            {\n        clearAllFilters,\n        clearFiltersButtonText,\n        collapseListedFiltersBreakpoint,\n        isExpanded: isExpandedProp,\n        toggleIsExpanded,\n        className,\n        children,\n        isFullHeight,\n        isStatic,\n        inset,\n        usePageInsets,\n        isSticky,\n        ouiaId,\n        numberOfFiltersText,\n        customChipGroupContent\n      } = _a,\n            props = __rest(_a, [\"clearAllFilters\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"isExpanded\", \"toggleIsExpanded\", \"className\", \"children\", \"isFullHeight\", \"isStatic\", \"inset\", \"usePageInsets\", \"isSticky\", \"ouiaId\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n\n      const {\n        isManagedToggleExpanded\n      } = this.state;\n      const isToggleManaged = this.isToggleManaged();\n      const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n      const numberOfFilters = this.getNumberOfFilters();\n      const showClearFiltersButton = numberOfFilters > 0;\n      return React.createElement(PageContext.Consumer, null, _ref => {\n        let {\n          width,\n          getBreakpoint\n        } = _ref;\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.toolbar, isFullHeight && styles.modifiers.fullHeight, isStatic && styles.modifiers.static, usePageInsets && styles.modifiers.pageInsets, isSticky && styles.modifiers.sticky, formatBreakpointMods(inset, styles, '', getBreakpoint(width)), className),\n          id: randomId\n        }, getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId), props), React.createElement(ToolbarContext.Provider, {\n          value: {\n            isExpanded,\n            toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n            chipGroupContentRef: this.chipGroupContentRef,\n            updateNumberFilters: this.updateNumberFilters,\n            numberOfFilters,\n            clearAllFilters,\n            clearFiltersButtonText,\n            showClearFiltersButton,\n            toolbarId: randomId,\n            customChipGroupContent\n          }\n        }, children, React.createElement(ToolbarChipGroupContent, {\n          isExpanded: isExpanded,\n          chipGroupContentRef: this.chipGroupContentRef,\n          clearAllFilters: clearAllFilters,\n          showClearFiltersButton: showClearFiltersButton,\n          clearFiltersButtonText: clearFiltersButtonText,\n          numberOfFilters: numberOfFilters,\n          numberOfFiltersText: numberOfFiltersText,\n          collapseListedFiltersBreakpoint: collapseListedFiltersBreakpoint,\n          customChipGroupContent: customChipGroupContent\n        })));\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  render() {\n    return this.props.id ? this.renderToolbar(this.props.id) : React.createElement(GenerateId, null, randomId => this.renderToolbar(randomId));\n  }\n\n}\nToolbar.displayName = 'Toolbar';","map":{"version":3,"mappings":"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","names":["React","styles","GenerateId","css","ToolbarContext","ToolbarChipGroupContent","formatBreakpointMods","canUseDOM","getDefaultOUIAId","getOUIAProps","PageContext","Toolbar","Component","constructor","createRef","isManagedToggleExpanded","filterInfo","windowWidth","window","innerWidth","ouiaStateId","displayName","props","isExpanded","toggleIsExpanded","setState","prevState","e","target","state","categoryName","numberOfFilters","filterInfoToUpdate","staticFilterInfo","hasOwnProperty","Object","values","reduce","acc","cur","randomId","_a","clearAllFilters","clearFiltersButtonText","collapseListedFiltersBreakpoint","isExpandedProp","className","children","isFullHeight","isStatic","inset","usePageInsets","isSticky","ouiaId","numberOfFiltersText","customChipGroupContent","isToggleManaged","getNumberOfFilters","showClearFiltersButton","Consumer","width","getBreakpoint","toolbar","modifiers","fullHeight","static","pageInsets","sticky","id","undefined","Provider","value","chipGroupContentRef","updateNumberFilters","toolbarId","componentDidMount","addEventListener","closeExpandableContent","componentWillUnmount","removeEventListener","render","renderToolbar"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/Toolbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps, OUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/Page';\n\nexport interface ToolbarProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** Optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Custom content appended to the filter generated chip group. To maintain spacing and styling, each node should be wrapped in a ToolbarItem or ToolbarGroup. This property will remove the default \"Clear all filters\" button. */\n  customChipGroupContent?: React.ReactNode;\n  /** The breakpoint at which the listed filters in chip groups are collapsed down to a summary */\n  collapseListedFiltersBreakpoint?: 'all' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** A callback for setting the isExpanded flag */\n  toggleIsExpanded?: () => void;\n  /** Classes applied to root element of the data toolbar */\n  className?: string;\n  /** Content to be rendered as rows in the data toolbar */\n  children?: React.ReactNode;\n  /** Id of the data toolbar */\n  id?: string;\n  /** Flag indicating the toolbar height should expand to the full height of the container */\n  isFullHeight?: boolean;\n  /** Flag indicating the toolbar is static */\n  isStatic?: boolean;\n  /** Flag indicating the toolbar should use the Page insets */\n  usePageInsets?: boolean;\n  /** Flag indicating the toolbar should stick to the top of its container */\n  isSticky?: boolean;\n  /** Insets at various breakpoints. */\n  inset?: {\n    default?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    sm?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    md?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    lg?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    xl?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    '2xl'?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  };\n  /** Text to display in the total number of applied filters ToolbarFilter */\n  numberOfFiltersText?: (numberOfFilters: number) => string;\n}\n\nexport interface ToolbarState {\n  /** Flag used if the user has opted NOT to manage the 'isExpanded' state of the toggle group.\n   *  Indicates whether or not the toggle group is expanded. */\n  isManagedToggleExpanded: boolean;\n  /** Object managing information about how many chips are in each chip group */\n  filterInfo: FilterInfo;\n  /** Used to keep track of window width so we can collapse expanded content when window is resizing */\n  windowWidth: number;\n  ouiaStateId: string;\n}\n\ninterface FilterInfo {\n  [key: string]: number;\n}\n\nexport class Toolbar extends React.Component<ToolbarProps, ToolbarState> {\n  static displayName = 'Toolbar';\n  chipGroupContentRef = React.createRef<HTMLDivElement>();\n  staticFilterInfo = {};\n  state = {\n    isManagedToggleExpanded: false,\n    filterInfo: {},\n    windowWidth: canUseDOM ? window.innerWidth : 1200,\n    ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n  };\n\n  isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n\n  toggleIsExpanded = () => {\n    this.setState(prevState => ({\n      isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n    }));\n  };\n\n  closeExpandableContent = (e: any) => {\n    if (e.target.innerWidth !== this.state.windowWidth) {\n      this.setState(() => ({\n        isManagedToggleExpanded: false,\n        windowWidth: e.target.innerWidth\n      }));\n    }\n  };\n\n  componentDidMount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  updateNumberFilters = (categoryName: string, numberOfFilters: number) => {\n    const filterInfoToUpdate: FilterInfo = { ...this.staticFilterInfo };\n    if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n      filterInfoToUpdate[categoryName] = numberOfFilters;\n      this.staticFilterInfo = filterInfoToUpdate;\n      this.setState({ filterInfo: filterInfoToUpdate });\n    }\n  };\n\n  getNumberOfFilters = () =>\n    Object.values(this.state.filterInfo).reduce((acc: any, cur: any) => acc + cur, 0) as number;\n\n  renderToolbar = (randomId: string) => {\n    const {\n      clearAllFilters,\n      clearFiltersButtonText,\n      collapseListedFiltersBreakpoint,\n      isExpanded: isExpandedProp,\n      toggleIsExpanded,\n      className,\n      children,\n      isFullHeight,\n      isStatic,\n      inset,\n      usePageInsets,\n      isSticky,\n      ouiaId,\n      numberOfFiltersText,\n      customChipGroupContent,\n      ...props\n    } = this.props;\n\n    const { isManagedToggleExpanded } = this.state;\n\n    const isToggleManaged = this.isToggleManaged();\n    const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n    const numberOfFilters = this.getNumberOfFilters();\n    const showClearFiltersButton = numberOfFilters > 0;\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <div\n            className={css(\n              styles.toolbar,\n              isFullHeight && styles.modifiers.fullHeight,\n              isStatic && styles.modifiers.static,\n              usePageInsets && styles.modifiers.pageInsets,\n              isSticky && styles.modifiers.sticky,\n              formatBreakpointMods(inset, styles, '', getBreakpoint(width)),\n              className\n            )}\n            id={randomId}\n            {...getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n            {...props}\n          >\n            <ToolbarContext.Provider\n              value={{\n                isExpanded,\n                toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n                chipGroupContentRef: this.chipGroupContentRef,\n                updateNumberFilters: this.updateNumberFilters,\n                numberOfFilters,\n                clearAllFilters,\n                clearFiltersButtonText,\n                showClearFiltersButton,\n                toolbarId: randomId,\n                customChipGroupContent\n              }}\n            >\n              {children}\n              <ToolbarChipGroupContent\n                isExpanded={isExpanded}\n                chipGroupContentRef={this.chipGroupContentRef}\n                clearAllFilters={clearAllFilters}\n                showClearFiltersButton={showClearFiltersButton}\n                clearFiltersButtonText={clearFiltersButtonText}\n                numberOfFilters={numberOfFilters}\n                numberOfFiltersText={numberOfFiltersText}\n                collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n                customChipGroupContent={customChipGroupContent}\n              />\n            </ToolbarContext.Provider>\n          </div>\n        )}\n      </PageContext.Consumer>\n    );\n  };\n\n  render() {\n    return this.props.id ? (\n      this.renderToolbar(this.props.id)\n    ) : (\n      <GenerateId>{randomId => this.renderToolbar(randomId)}</GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}