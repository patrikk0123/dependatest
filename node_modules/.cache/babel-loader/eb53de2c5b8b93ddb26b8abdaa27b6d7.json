{"ast":null,"code":"var _jsxFileName = \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx\";\nimport { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute equality to current filter text value (=like= operator)\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param onSelect - function to be called when option is selected (value is passed in)\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param shouldDisplayDescription - should options display description? (if any)\n */\nexport const SearchSelect = _ref => {\n  let {\n    fetchCallback,\n    attribute,\n    onSelect,\n    delay = 200,\n    pageSize = 20,\n    shouldDisplayDescription = false\n  } = _ref;\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState([]); // data downloaded on first load\n\n  const [defaultData, setDefaultData] = useState([]); // currenyly selected option\n\n  const [selected, setSelected] = useState();\n  const [isSelectOpen, setIsSelectOpen] = useState(false); // used to fetch data after delay\n\n  const timeout = useRef();\n  const selectRef = useRef();\n  const [loading, setLoading] = useState(false); // fetch data and save them\n  // uses pageSize\n  // sets filter config (if there is non empty filterText)\n\n  const fetchData = useCallback(function (filterText) {\n    let setDefaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let forceSelect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const config = {\n      params: {\n        pageSize\n      }\n    };\n\n    if (filterText) {\n      config.params.q = `${attribute}=like=\"%${filterText}%\"`;\n    }\n\n    fetchCallback(config).then(response => {\n      var _selectRef$current, _selectRef$current$st, _selectRef$current2, _selectRef$current2$s;\n\n      const data = response.data.content;\n      const currentFilterText = selectRef !== null && selectRef !== void 0 && (_selectRef$current = selectRef.current) !== null && _selectRef$current !== void 0 && (_selectRef$current$st = _selectRef$current.state) !== null && _selectRef$current$st !== void 0 && _selectRef$current$st.typeaheadInputValue ? selectRef === null || selectRef === void 0 ? void 0 : (_selectRef$current2 = selectRef.current) === null || _selectRef$current2 === void 0 ? void 0 : (_selectRef$current2$s = _selectRef$current2.state) === null || _selectRef$current2$s === void 0 ? void 0 : _selectRef$current2$s.typeaheadInputValue : ''; // if filter text changed (compared to one when request was made), do not set options\n      // (although on select forces options change)\n\n      console.log(selectRef === null || selectRef === void 0 ? void 0 : selectRef.current);\n\n      if (currentFilterText === filterText || forceSelect) {\n        setCurrentData(data);\n      }\n\n      if (setDefaults) setDefaultData(data);\n    });\n  }, [fetchCallback, attribute, pageSize]); // load first / default data\n\n  useEffect(() => {\n    fetchData('', true);\n  }, [fetchData]); // if anything was selected, unselect it\n\n  const clearSelection = () => {\n    if (selected) {\n      setSelected(undefined);\n      onSelect('');\n    }\n  }; // on clear, set default values\n\n\n  const clearSelect = () => {\n    setCurrentData(defaultData);\n    setIsSelectOpen(false);\n    clearSelection();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Select, {\n    variant: SelectVariant.typeahead,\n    onToggle: isOpen => {\n      setIsSelectOpen(isOpen);\n    },\n    onTypeaheadInputChanged: value => {\n      clearSelection();\n      clearTimeout(timeout === null || timeout === void 0 ? void 0 : timeout.current);\n\n      if (value !== '') {\n        timeout.current = setTimeout(() => fetchData(value), delay);\n      } else {\n        // if filter is empty string, just set default options\n        setCurrentData(defaultData);\n      }\n    },\n    onSelect: (event, selection, isPlaceholder) => {\n      if (isPlaceholder) clearSelect();else {\n        if (event) {\n          // do this only when select option is clicked\n          // (for some reason, this function is called also on blur)\n          setCurrentData([]);\n          fetchData(selection, false, true);\n          onSelect(selection);\n        }\n\n        setSelected(selection);\n        setIsSelectOpen(false);\n      }\n    },\n    onFilter: () => {\n      // filtering is not done here\n      return undefined;\n    },\n    loadingVariant: !loading ? undefined : 'spinner',\n    onClear: clearSelect,\n    selections: selected,\n    isOpen: isSelectOpen,\n    isInputValuePersisted: true,\n    isInputFilterPersisted: true,\n    ref: selectRef,\n    children: currentData.map((option, index) => /*#__PURE__*/_jsxDEV(SelectOption, {\n      value: option[attribute],\n      description: shouldDisplayDescription && option['description']\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["Select","SelectOption","SelectVariant","useCallback","useEffect","useRef","useState","SearchSelect","fetchCallback","attribute","onSelect","delay","pageSize","shouldDisplayDescription","currentData","setCurrentData","defaultData","setDefaultData","selected","setSelected","isSelectOpen","setIsSelectOpen","timeout","selectRef","loading","setLoading","fetchData","filterText","setDefaults","forceSelect","config","params","q","then","response","data","content","currentFilterText","current","state","typeaheadInputValue","console","log","clearSelection","undefined","clearSelect","typeahead","isOpen","value","clearTimeout","setTimeout","event","selection","isPlaceholder","map","option","index"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/components/SearchSelect/SearchSelect.tsx"],"sourcesContent":["import { Select, SelectOption, SelectVariant } from '@patternfly/react-core';\nimport { AxiosRequestConfig } from 'axios';\nimport { MutableRefObject, useCallback, useEffect, useRef, useState } from 'react';\n\ninterface ISearchSelectProps {\n  fetchCallback: Function;\n  attribute: string;\n  onSelect: Function;\n  delay?: number;\n  pageSize?: number;\n  shouldDisplayDescription?: boolean;\n}\n\n/**\n * Filtered select with data dynamically fetched from backend.\n * Select options data are fetched:\n *  -> when select is firstly loaded\n *    -> these are buffered so they are not refetched\n *  -> when filter input text is changed (by typing or selecting option)\n *    -> these are filtered by attribute equality to current filter text value (=like= operator)\n *\n * onSelect callback is used so selected option is accessible from outside.\n *\n * @param fetchCallback - function to fetch the data from backend\n * @param attribute - which attribute will be filtered\n * @param onSelect - function to be called when option is selected (value is passed in)\n * @param delay - delay after which data are fetched when filter input is changed\n * @param pageSize - count of entries fetched\n * @param shouldDisplayDescription - should options display description? (if any)\n */\nexport const SearchSelect = ({\n  fetchCallback,\n  attribute,\n  onSelect,\n  delay = 200,\n  pageSize = 20,\n  shouldDisplayDescription = false,\n}: ISearchSelectProps) => {\n  // newest (filtered) data downloaded using callback\n  const [currentData, setCurrentData] = useState<any[]>([]);\n  // data downloaded on first load\n  const [defaultData, setDefaultData] = useState<any[]>([]);\n  // currenyly selected option\n  const [selected, setSelected] = useState<string | undefined>();\n  const [isSelectOpen, setIsSelectOpen] = useState<boolean>(false);\n  // used to fetch data after delay\n  const timeout = useRef<NodeJS.Timeout>();\n  const selectRef = useRef() as MutableRefObject<Select>;\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  // fetch data and save them\n  // uses pageSize\n  // sets filter config (if there is non empty filterText)\n  const fetchData = useCallback(\n    (filterText: string, setDefaults: boolean = false, forceSelect: boolean = false) => {\n      const config: AxiosRequestConfig = { params: { pageSize } };\n      if (filterText) {\n        config.params.q = `${attribute}=like=\"%${filterText}%\"`;\n      }\n\n      fetchCallback(config).then((response: any) => {\n        const data = response.data.content;\n        const currentFilterText = selectRef?.current?.state?.typeaheadInputValue\n          ? selectRef?.current?.state?.typeaheadInputValue\n          : '';\n        // if filter text changed (compared to one when request was made), do not set options\n        // (although on select forces options change)\n        console.log(selectRef?.current);\n        if (currentFilterText === filterText || forceSelect) {\n          setCurrentData(data);\n        }\n        if (setDefaults) setDefaultData(data);\n      });\n    },\n    [fetchCallback, attribute, pageSize]\n  );\n\n  // load first / default data\n  useEffect(() => {\n    fetchData('', true);\n  }, [fetchData]);\n\n  // if anything was selected, unselect it\n  const clearSelection = () => {\n    if (selected) {\n      setSelected(undefined);\n      onSelect('');\n    }\n  };\n\n  // on clear, set default values\n  const clearSelect = () => {\n    setCurrentData(defaultData);\n    setIsSelectOpen(false);\n    clearSelection();\n  };\n\n  return (\n    <Select\n      variant={SelectVariant.typeahead}\n      onToggle={(isOpen) => {\n        setIsSelectOpen(isOpen);\n      }}\n      onTypeaheadInputChanged={(value: string) => {\n        clearSelection();\n\n        clearTimeout(timeout?.current);\n        if (value !== '') {\n          timeout.current = setTimeout(() => fetchData(value), delay);\n        } else {\n          // if filter is empty string, just set default options\n          setCurrentData(defaultData);\n        }\n      }}\n      onSelect={(event, selection, isPlaceholder) => {\n        if (isPlaceholder) clearSelect();\n        else {\n          if (event) {\n            // do this only when select option is clicked\n            // (for some reason, this function is called also on blur)\n            setCurrentData([]);\n            fetchData(selection as string, false, true);\n            onSelect(selection);\n          }\n          setSelected(selection as string);\n          setIsSelectOpen(false);\n        }\n      }}\n      onFilter={() => {\n        // filtering is not done here\n        return undefined;\n      }}\n      loadingVariant={!loading ? undefined : 'spinner'}\n      onClear={clearSelect}\n      selections={selected}\n      isOpen={isSelectOpen}\n      isInputValuePersisted={true}\n      isInputFilterPersisted={true}\n      ref={selectRef}\n    >\n      {currentData.map((option: any, index: number) => (\n        <SelectOption key={index} value={option[attribute]} description={shouldDisplayDescription && option['description']} />\n      ))}\n    </Select>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}