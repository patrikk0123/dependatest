{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { useState, useEffect, memo } from 'react';\nimport { LogViewerContext, LogViewerToolbarContext } from './LogViewerContext';\nimport { css } from '@patternfly/react-styles';\nimport { LogViewerRow } from './LogViewerRow';\nimport { parseConsoleOutput, stripAnsi } from './utils/utils';\nimport { VariableSizeList as List, areEqual } from '../react-window';\nimport styles from '@patternfly/react-styles/css/components/LogViewer/log-viewer';\nimport AnsiUp from '../ansi_up/ansi_up';\nlet canvas;\n\nconst getCharNums = (windowWidth, font) => {\n  // if given, use cached canvas for better performance\n  // else, create new canvas\n  canvas = canvas || document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const oneChar = context.measureText('a');\n  return Math.floor(windowWidth / oneChar.width);\n};\n\nconst LogViewerBase = memo(_a => {\n  var {\n    data = '',\n    hasLineNumbers = true,\n    height = 600,\n    overScanCount = 10,\n    loadingContent = '',\n    toolbar,\n    width,\n    theme = 'light',\n    scrollToRow = 0,\n    itemCount = undefined,\n    header,\n    footer,\n    onScroll,\n    innerRef,\n    isTextWrapped = true\n  } = _a,\n      props = __rest(_a, [\"data\", \"hasLineNumbers\", \"height\", \"overScanCount\", \"loadingContent\", \"toolbar\", \"width\", \"theme\", \"scrollToRow\", \"itemCount\", \"header\", \"footer\", \"onScroll\", \"innerRef\", \"isTextWrapped\"]);\n\n  const [searchedInput, setSearchedInput] = useState('');\n  const [rowInFocus, setRowInFocus] = useState({\n    rowIndex: scrollToRow,\n    matchIndex: 0\n  });\n  const [searchedWordIndexes, setSearchedWordIndexes] = useState([]);\n  const [currentSearchedItemCount, setCurrentSearchedItemCount] = useState(0);\n  const [parsedData, setParsedData] = useState([]);\n  const [lineHeight, setLineHeight] = useState(0);\n  const [charNumsPerLine, setCharNumsPerLine] = useState(0);\n  const [resizing, setResizing] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [listKey, setListKey] = useState(1);\n  const ansiUp = new AnsiUp();\n  const logViewerRef = innerRef || React.useRef();\n  const containerRef = React.useRef();\n  let resizeTimer = null;\n  useEffect(() => {\n    if (containerRef && containerRef.current) {\n      window.addEventListener('resize', callbackResize);\n      setLoading(false);\n      createDummyElements();\n      ansiUp.resetStyles();\n    }\n\n    return () => window.removeEventListener('resize', callbackResize);\n  }, [containerRef.current]);\n\n  const callbackResize = () => {\n    if (!resizing) {\n      setResizing(true);\n    }\n\n    if (resizeTimer) {\n      clearTimeout(resizeTimer);\n    }\n\n    resizeTimer = setTimeout(() => {\n      setResizing(false);\n      createDummyElements();\n    }, 100);\n  };\n\n  useEffect(() => {\n    setLoading(resizing);\n  }, [resizing]);\n  const dataToRender = React.useMemo(() => ({\n    parsedData,\n    logViewerRef,\n    rowInFocus,\n    searchedWordIndexes\n  }), [data, parsedData, logViewerRef, rowInFocus, searchedWordIndexes]);\n  /* Parse data every time it changes */\n\n  useEffect(() => {\n    setParsedData(Array.isArray(data) ? data : parseConsoleOutput(data));\n  }, [data]);\n  useEffect(() => {\n    if (logViewerRef && logViewerRef.current) {\n      logViewerRef.current.resetAfterIndex(0);\n    }\n  }, [parsedData]);\n  useEffect(() => {\n    if (scrollToRow && parsedData.length) {\n      setRowInFocus({\n        rowIndex: scrollToRow,\n        matchIndex: 0\n      }); // only in this way (setTimeout) the scrollToItem will work\n\n      setTimeout(() => {\n        if (logViewerRef && logViewerRef.current) {\n          logViewerRef.current.scrollToItem(scrollToRow, 'center');\n        }\n      }, 1);\n    }\n  }, [parsedData, scrollToRow]);\n\n  const createDummyElements = () => {\n    const dummyIndex = document.createElement('span');\n    dummyIndex.className = css(styles.logViewerIndex);\n    const dummyText = document.createElement('span');\n    dummyText.className = css(styles.logViewerText);\n    containerRef.current.appendChild(dummyIndex);\n    containerRef.current.appendChild(dummyText);\n    const dummyIndexStyles = getComputedStyle(dummyIndex);\n    const dummyTextStyles = getComputedStyle(dummyText);\n    setLineHeight(parseFloat(dummyTextStyles.lineHeight));\n    const lineWidth = hasLineNumbers ? containerRef.current.clientWidth - (parseFloat(dummyTextStyles.paddingLeft) + parseFloat(dummyTextStyles.paddingRight) + parseFloat(dummyIndexStyles.width)) : containerRef.current.clientWidth - (parseFloat(dummyTextStyles.paddingLeft) + parseFloat(dummyTextStyles.paddingRight));\n    const charNumsPerLine = getCharNums(lineWidth, `${dummyTextStyles.fontWeight} ${dummyTextStyles.fontSize} ${dummyTextStyles.fontFamily}`);\n    setCharNumsPerLine(charNumsPerLine);\n    containerRef.current.removeChild(dummyIndex);\n    containerRef.current.removeChild(dummyText);\n    setListKey(listKey => listKey + 1);\n  };\n\n  const scrollToRowInFocus = searchedRowIndex => {\n    setRowInFocus(searchedRowIndex);\n    logViewerRef.current.scrollToItem(searchedRowIndex.rowIndex, 'center'); // use this method to scroll to the right\n    // if the keyword is out of the window when wrapping text\n\n    if (!isTextWrapped) {\n      setTimeout(() => {\n        const element = containerRef.current.querySelector('.pf-c-log-viewer__string.pf-m-current');\n        element && element.scrollIntoView({\n          block: 'nearest',\n          inline: 'center'\n        });\n      }, 1);\n    }\n  };\n\n  useEffect(() => {\n    setListKey(listKey => listKey + 1);\n  }, [isTextWrapped]);\n\n  const guessRowHeight = rowIndex => {\n    if (!isTextWrapped) {\n      return lineHeight;\n    } // strip ansi escape code before estimate the row height\n\n\n    const rowText = stripAnsi(parsedData[rowIndex]); // get the row numbers of the current text\n\n    const numRows = Math.ceil(rowText.length / charNumsPerLine); // multiply by line height to get the total height\n\n    return lineHeight * (numRows || 1);\n  };\n\n  const createList = parsedData => React.createElement(List, {\n    key: listKey,\n    outerClassName: css(styles.logViewerScrollContainer),\n    innerClassName: css(styles.logViewerList),\n    height: containerRef.current.clientHeight,\n    width: containerRef.current.clientWidth,\n    itemSize: guessRowHeight,\n    itemCount: typeof itemCount === 'undefined' ? parsedData.length : itemCount,\n    itemData: dataToRender,\n    ref: logViewerRef,\n    overscanCount: overScanCount,\n    onScroll: onScroll,\n    isTextWrapped: isTextWrapped,\n    hasLineNumbers: hasLineNumbers,\n    ansiUp: ansiUp\n  }, LogViewerRow);\n\n  return React.createElement(LogViewerContext.Provider, {\n    value: {\n      parsedData,\n      searchedInput\n    }\n  }, React.createElement(\"div\", Object.assign({\n    className: css(styles.logViewer, hasLineNumbers && styles.modifiers.lineNumbers, !isTextWrapped && styles.modifiers.nowrap, theme === 'dark' && styles.modifiers.dark)\n  }, props), toolbar && React.createElement(LogViewerToolbarContext.Provider, {\n    value: {\n      itemCount,\n      searchedInput,\n      rowInFocus,\n      searchedWordIndexes,\n      currentSearchedItemCount,\n      scrollToRow: scrollToRowInFocus,\n      setRowInFocus,\n      setSearchedInput,\n      setSearchedWordIndexes,\n      setCurrentSearchedItemCount\n    }\n  }, React.createElement(\"div\", {\n    className: css(styles.logViewerHeader)\n  }, toolbar)), header, React.createElement(\"div\", {\n    className: css(styles.logViewerMain),\n    style: {\n      height,\n      width\n    },\n    ref: containerRef\n  }, loading ? React.createElement(\"div\", null, loadingContent) : createList(parsedData)), footer));\n}, areEqual);\nexport const LogViewer = React.forwardRef((props, ref) => React.createElement(LogViewerBase, Object.assign({\n  innerRef: ref\n}, props)));\nLogViewer.displayName = 'LogViewer';","map":{"version":3,"mappings":"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","names":["React","useState","useEffect","memo","LogViewerContext","LogViewerToolbarContext","css","LogViewerRow","parseConsoleOutput","stripAnsi","VariableSizeList","List","areEqual","styles","AnsiUp","canvas","getCharNums","windowWidth","font","document","createElement","context","getContext","oneChar","measureText","Math","floor","width","LogViewerBase","_a","data","hasLineNumbers","height","overScanCount","loadingContent","toolbar","theme","scrollToRow","itemCount","undefined","header","footer","onScroll","innerRef","isTextWrapped","props","searchedInput","setSearchedInput","rowInFocus","setRowInFocus","rowIndex","matchIndex","searchedWordIndexes","setSearchedWordIndexes","currentSearchedItemCount","setCurrentSearchedItemCount","parsedData","setParsedData","lineHeight","setLineHeight","charNumsPerLine","setCharNumsPerLine","resizing","setResizing","loading","setLoading","listKey","setListKey","ansiUp","logViewerRef","useRef","containerRef","resizeTimer","current","window","addEventListener","callbackResize","createDummyElements","resetStyles","removeEventListener","clearTimeout","setTimeout","dataToRender","useMemo","Array","isArray","resetAfterIndex","length","scrollToItem","dummyIndex","className","logViewerIndex","dummyText","logViewerText","appendChild","dummyIndexStyles","getComputedStyle","dummyTextStyles","parseFloat","lineWidth","clientWidth","paddingLeft","paddingRight","fontWeight","fontSize","fontFamily","removeChild","scrollToRowInFocus","searchedRowIndex","element","querySelector","scrollIntoView","block","inline","guessRowHeight","rowText","numRows","ceil","createList","key","outerClassName","logViewerScrollContainer","innerClassName","logViewerList","clientHeight","itemSize","itemData","ref","overscanCount","Provider","value","logViewer","modifiers","lineNumbers","nowrap","dark","logViewerHeader","logViewerMain","style","LogViewer","forwardRef","Object","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-log-viewer/src/LogViewer/LogViewer.tsx"],"sourcesContent":["import React, { useState, useEffect, memo } from 'react';\nimport { LogViewerContext, LogViewerToolbarContext } from './LogViewerContext';\nimport { css } from '@patternfly/react-styles';\nimport { LogViewerRow } from './LogViewerRow';\nimport { parseConsoleOutput, searchedKeyWordType, stripAnsi } from './utils/utils';\nimport { VariableSizeList as List, areEqual } from '../react-window';\nimport styles from '@patternfly/react-styles/css/components/LogViewer/log-viewer';\nimport AnsiUp from '../ansi_up/ansi_up';\n\ninterface LogViewerProps {\n  /** String or String Array data being sent by the consumer*/\n  data?: string | string[];\n  /** Consumer may turn off the visibility on the toolbar */\n  hasToolbar?: boolean;\n  /** Flag to enable or disable line numbers on the log viewer. */\n  hasLineNumbers?: boolean;\n  /** Width of the log viewer. */\n  width?: number | string;\n  /** Height of the log viewer. */\n  height?: number | string;\n  /** Rows rendered outside of view. The more rows are rendered, the higher impact on performance */\n  overScanCount?: number;\n  /** Toolbar rendered in the log viewer header */\n  toolbar?: React.ReactNode;\n  /** Content displayed while the log viewer is loading */\n  loadingContent?: React.ReactNode;\n  /** Flag indicating that log viewer is dark themed */\n  theme?: 'dark' | 'light';\n  /** Row index to scroll to */\n  scrollToRow?: number;\n  /** Number of rows to display in the log viewer */\n  itemCount?: number;\n  /** Flag indicating that log viewer is wrapping text or not */\n  isTextWrapped?: boolean;\n  /** Component rendered in the log viewer console window header */\n  header?: React.ReactNode;\n  /** Component rendered in the log viewer console window footer */\n  footer?: React.ReactNode;\n  /** Callback function when scrolling the window.\n   * scrollDirection is the direction of scroll, could be 'forward'|'backward'.\n   * scrollOffset and scrollOffsetToBottom are the offset of the current position to the top or the bottom.\n   * scrollUpdateWasRequested is false when the scroll event is cause by the user interaction in the browser, else it's true.\n   * @example onScroll={({scrollDirection, scrollOffset, scrollOffsetToBottom, scrollUpdateWasRequested})=>{}}\n   */\n  onScroll?: ({\n    scrollDirection,\n    scrollOffset,\n    scrollOffsetToBottom,\n    scrollUpdateWasRequested\n  }: {\n    scrollDirection: 'forward' | 'backward';\n    scrollOffset: number;\n    scrollOffsetToBottom: number;\n    scrollUpdateWasRequested: boolean;\n  }) => void;\n  /** Forwarded ref */\n  innerRef?: React.RefObject<any>;\n}\n\nlet canvas: HTMLCanvasElement | undefined;\n\nconst getCharNums = (windowWidth: number, font: string) => {\n  // if given, use cached canvas for better performance\n  // else, create new canvas\n  canvas = canvas || document.createElement('canvas');\n  const context = canvas.getContext('2d');\n  context.font = font;\n  const oneChar = context.measureText('a');\n  return Math.floor(windowWidth / oneChar.width);\n};\n\nconst LogViewerBase: React.FunctionComponent<LogViewerProps> = memo(\n  ({\n    data = '',\n    hasLineNumbers = true,\n    height = 600,\n    overScanCount = 10,\n    loadingContent = '',\n    toolbar,\n    width,\n    theme = 'light',\n    scrollToRow = 0,\n    itemCount = undefined,\n    header,\n    footer,\n    onScroll,\n    innerRef,\n    isTextWrapped = true,\n    ...props\n  }: LogViewerProps) => {\n    const [searchedInput, setSearchedInput] = useState<string | null>('');\n    const [rowInFocus, setRowInFocus] = useState<searchedKeyWordType | null>({ rowIndex: scrollToRow, matchIndex: 0 });\n    const [searchedWordIndexes, setSearchedWordIndexes] = useState<searchedKeyWordType[] | null>([]);\n    const [currentSearchedItemCount, setCurrentSearchedItemCount] = useState<number>(0);\n    const [parsedData, setParsedData] = useState<string[] | null>([]);\n    const [lineHeight, setLineHeight] = useState<number>(0);\n    const [charNumsPerLine, setCharNumsPerLine] = useState<number>(0);\n    const [resizing, setResizing] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [listKey, setListKey] = useState(1);\n    const ansiUp = new AnsiUp();\n\n    const logViewerRef = innerRef || React.useRef<any>();\n    const containerRef = React.useRef<any>();\n    let resizeTimer = null as any;\n\n    useEffect(() => {\n      if (containerRef && containerRef.current) {\n        window.addEventListener('resize', callbackResize);\n        setLoading(false);\n        createDummyElements();\n        ansiUp.resetStyles();\n      }\n      return () => window.removeEventListener('resize', callbackResize);\n    }, [containerRef.current]);\n\n    const callbackResize = () => {\n      if (!resizing) {\n        setResizing(true);\n      }\n      if (resizeTimer) {\n        clearTimeout(resizeTimer);\n      }\n      resizeTimer = setTimeout(() => {\n        setResizing(false);\n        createDummyElements();\n      }, 100);\n    };\n\n    useEffect(() => {\n      setLoading(resizing);\n    }, [resizing]);\n\n    const dataToRender = React.useMemo(\n      () => ({\n        parsedData,\n        logViewerRef,\n        rowInFocus,\n        searchedWordIndexes\n      }),\n      [data, parsedData, logViewerRef, rowInFocus, searchedWordIndexes]\n    );\n\n    /* Parse data every time it changes */\n    useEffect(() => {\n      setParsedData(Array.isArray(data) ? data : parseConsoleOutput(data));\n    }, [data]);\n\n    useEffect(() => {\n      if (logViewerRef && logViewerRef.current) {\n        logViewerRef.current.resetAfterIndex(0);\n      }\n    }, [parsedData]);\n\n    useEffect(() => {\n      if (scrollToRow && parsedData.length) {\n        setRowInFocus({ rowIndex: scrollToRow, matchIndex: 0 });\n        // only in this way (setTimeout) the scrollToItem will work\n        setTimeout(() => {\n          if (logViewerRef && logViewerRef.current) {\n            logViewerRef.current.scrollToItem(scrollToRow, 'center');\n          }\n        }, 1);\n      }\n    }, [parsedData, scrollToRow]);\n\n    const createDummyElements = () => {\n      const dummyIndex = document.createElement('span');\n      dummyIndex.className = css(styles.logViewerIndex);\n      const dummyText = document.createElement('span');\n      dummyText.className = css(styles.logViewerText);\n      containerRef.current.appendChild(dummyIndex);\n      containerRef.current.appendChild(dummyText);\n      const dummyIndexStyles = getComputedStyle(dummyIndex);\n      const dummyTextStyles = getComputedStyle(dummyText);\n      setLineHeight(parseFloat(dummyTextStyles.lineHeight));\n      const lineWidth = hasLineNumbers\n        ? (containerRef.current as HTMLDivElement).clientWidth -\n          (parseFloat(dummyTextStyles.paddingLeft) +\n            parseFloat(dummyTextStyles.paddingRight) +\n            parseFloat(dummyIndexStyles.width))\n        : (containerRef.current as HTMLDivElement).clientWidth -\n          (parseFloat(dummyTextStyles.paddingLeft) + parseFloat(dummyTextStyles.paddingRight));\n      const charNumsPerLine = getCharNums(\n        lineWidth,\n        `${dummyTextStyles.fontWeight} ${dummyTextStyles.fontSize} ${dummyTextStyles.fontFamily}`\n      );\n      setCharNumsPerLine(charNumsPerLine);\n      containerRef.current.removeChild(dummyIndex);\n      containerRef.current.removeChild(dummyText);\n      setListKey(listKey => listKey + 1);\n    };\n\n    const scrollToRowInFocus = (searchedRowIndex: searchedKeyWordType) => {\n      setRowInFocus(searchedRowIndex);\n      logViewerRef.current.scrollToItem(searchedRowIndex.rowIndex, 'center');\n      // use this method to scroll to the right\n      // if the keyword is out of the window when wrapping text\n      if (!isTextWrapped) {\n        setTimeout(() => {\n          const element = containerRef.current.querySelector('.pf-c-log-viewer__string.pf-m-current');\n          element && element.scrollIntoView({ block: 'nearest', inline: 'center' });\n        }, 1);\n      }\n    };\n\n    useEffect(() => {\n      setListKey(listKey => listKey + 1);\n    }, [isTextWrapped]);\n\n    const guessRowHeight = (rowIndex: number) => {\n      if (!isTextWrapped) {\n        return lineHeight;\n      }\n      // strip ansi escape code before estimate the row height\n      const rowText = stripAnsi(parsedData[rowIndex]);\n      // get the row numbers of the current text\n      const numRows = Math.ceil(rowText.length / charNumsPerLine);\n      // multiply by line height to get the total height\n      return lineHeight * (numRows || 1);\n    };\n\n    const createList = (parsedData: string[]) => (\n      <List\n        key={listKey}\n        outerClassName={css(styles.logViewerScrollContainer)}\n        innerClassName={css(styles.logViewerList)}\n        height={containerRef.current.clientHeight}\n        width={containerRef.current.clientWidth}\n        itemSize={guessRowHeight}\n        itemCount={typeof itemCount === 'undefined' ? parsedData.length : itemCount}\n        itemData={dataToRender}\n        ref={logViewerRef}\n        overscanCount={overScanCount}\n        onScroll={onScroll}\n        isTextWrapped={isTextWrapped}\n        hasLineNumbers={hasLineNumbers}\n        ansiUp={ansiUp}\n      >\n        {LogViewerRow}\n      </List>\n    );\n\n    return (\n      <LogViewerContext.Provider\n        value={{\n          parsedData,\n          searchedInput\n        }}\n      >\n        <div\n          className={css(\n            styles.logViewer,\n            hasLineNumbers && styles.modifiers.lineNumbers,\n            !isTextWrapped && styles.modifiers.nowrap,\n            theme === 'dark' && styles.modifiers.dark\n          )}\n          {...props}\n        >\n          {toolbar && (\n            <LogViewerToolbarContext.Provider\n              value={{\n                itemCount,\n                searchedInput,\n                rowInFocus,\n                searchedWordIndexes,\n                currentSearchedItemCount,\n                scrollToRow: scrollToRowInFocus,\n                setRowInFocus,\n                setSearchedInput,\n                setSearchedWordIndexes,\n                setCurrentSearchedItemCount\n              }}\n            >\n              <div className={css(styles.logViewerHeader)}>{toolbar}</div>\n            </LogViewerToolbarContext.Provider>\n          )}\n          {header}\n          <div className={css(styles.logViewerMain)} style={{ height, width }} ref={containerRef}>\n            {loading ? <div>{loadingContent}</div> : createList(parsedData)}\n          </div>\n          {footer}\n        </div>\n      </LogViewerContext.Provider>\n    );\n  },\n  areEqual\n);\n\nexport const LogViewer = React.forwardRef((props: LogViewerProps, ref: React.Ref<any>) => (\n  <LogViewerBase innerRef={ref as React.MutableRefObject<any>} {...props} />\n));\n\nLogViewer.displayName = 'LogViewer';\n"]},"metadata":{},"sourceType":"module"}