{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nexport var TextAreResizeOrientation;\n\n(function (TextAreResizeOrientation) {\n  TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n  TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n  TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\n\nexport var TextAreaBase = /*#__PURE__*/function (_React$Component) {\n  _inherits(TextAreaBase, _React$Component);\n\n  var _super = _createSuper(TextAreaBase);\n\n  function TextAreaBase(props) {\n    var _this;\n\n    _classCallCheck(this, TextAreaBase);\n\n    _this = _super.call(this, props);\n\n    _this.handleChange = function (event) {\n      // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n      var field = event.currentTarget;\n\n      if (_this.props.autoResize && canUseDOM) {\n        field.style.setProperty(heightToken.name, 'inherit');\n        var computed = window.getComputedStyle(field); // Calculate the height\n\n        var height = parseInt(computed.getPropertyValue('border-top-width')) + parseInt(computed.getPropertyValue('padding-top')) + field.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom')) + parseInt(computed.getPropertyValue('border-bottom-width'));\n        field.style.setProperty(heightToken.name, \"\".concat(height, \"px\"));\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(field.value, event);\n      }\n    };\n\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n\n    return _this;\n  }\n\n  _createClass(TextAreaBase, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          className = _a.className,\n          value = _a.value,\n          validated = _a.validated,\n          isRequired = _a.isRequired,\n          isDisabled = _a.isDisabled,\n          isIconSprite = _a.isIconSprite,\n          isReadOnly = _a.isReadOnly,\n          resizeOrientation = _a.resizeOrientation,\n          innerRef = _a.innerRef,\n          readOnly = _a.readOnly,\n          disabled = _a.disabled,\n          autoResize = _a.autoResize,\n          onChange = _a.onChange,\n          props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"isIconSprite\", \"isReadOnly\", \"resizeOrientation\", \"innerRef\", \"readOnly\", \"disabled\", \"autoResize\", \"onChange\"]);\n\n      var orientation = \"resize\".concat(capitalize(resizeOrientation));\n      return React.createElement(\"textarea\", Object.assign({\n        className: css(styles.formControl, isIconSprite && styles.modifiers.iconSprite, className, resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation], validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning),\n        onChange: this.handleChange\n      }, typeof this.props.defaultValue !== 'string' && {\n        value: value\n      }, {\n        \"aria-invalid\": validated === ValidatedOptions.error,\n        required: isRequired,\n        disabled: isDisabled || disabled,\n        readOnly: isReadOnly || readOnly,\n        ref: innerRef\n      }, props));\n    }\n  }]);\n\n  return TextAreaBase;\n}(React.Component);\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n  innerRef: React.createRef(),\n  className: '',\n  isRequired: false,\n  isDisabled: false,\n  isIconSprite: false,\n  validated: 'default',\n  resizeOrientation: 'both',\n  'aria-label': null\n};\nexport var TextArea = React.forwardRef(function (props, ref) {\n  return React.createElement(TextAreaBase, Object.assign({}, props, {\n    innerRef: ref\n  }));\n});\nTextArea.displayName = 'TextArea';","map":{"version":3,"mappings":"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","names":["React","styles","heightToken","css","capitalize","ValidatedOptions","canUseDOM","TextAreResizeOrientation","TextAreaBase","props","event","field","currentTarget","autoResize","style","setProperty","name","computed","window","getComputedStyle","height","parseInt","getPropertyValue","scrollHeight","onChange","value","id","console","error","className","_a","validated","isRequired","isDisabled","isIconSprite","isReadOnly","resizeOrientation","innerRef","readOnly","disabled","__rest","orientation","formControl","modifiers","iconSprite","both","success","warning","handleChange","defaultValue","required","ref","Component","createRef","TextArea","forwardRef","Object","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/TextArea/TextArea.tsx"],"sourcesContent":["import * as React from 'react';\nimport { HTMLProps } from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport heightToken from '@patternfly/react-tokens/dist/esm/c_form_control_textarea_Height';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\n\nexport enum TextAreResizeOrientation {\n  horizontal = 'horizontal',\n  vertical = 'vertical',\n  both = 'both'\n}\n\nexport interface TextAreaProps extends Omit<HTMLProps<HTMLTextAreaElement>, 'onChange' | 'ref'> {\n  /** Additional classes added to the TextArea. */\n  className?: string;\n  /** Flag to show if the TextArea is required. */\n  isRequired?: boolean;\n  /** Flag to show if the TextArea is disabled. */\n  isDisabled?: boolean;\n  /** Flag to show if the TextArea is read only. */\n  isReadOnly?: boolean;\n  /** Use the external file instead of a data URI */\n  isIconSprite?: boolean;\n  /** Flag to modify height based on contents. */\n  autoResize?: boolean;\n  /** Value to indicate if the textarea is modified to show that validation state.\n   * If set to success, textarea will be modified to indicate valid state.\n   * If set to error, textarea will be modified to indicate error state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** Value of the TextArea. */\n  value?: string | number;\n  /** A callback for when the TextArea value changes. */\n  onChange?: (value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  /** Sets the orientation to limit the resize to */\n  resizeOrientation?: 'horizontal' | 'vertical' | 'both';\n  /** Custom flag to show that the TextArea requires an associated id or aria-label. */\n  'aria-label'?: string;\n  /** A reference object to attach to the textarea. */\n  innerRef?: React.RefObject<any>;\n}\n\nexport class TextAreaBase extends React.Component<TextAreaProps> {\n  static displayName = 'TextArea';\n  static defaultProps: TextAreaProps = {\n    innerRef: React.createRef<HTMLTextAreaElement>(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    isIconSprite: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null as string\n  };\n\n  constructor(props: TextAreaProps) {\n    super(props);\n    if (!props.id && !props['aria-label']) {\n      // eslint-disable-next-line no-console\n      console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n    }\n  }\n\n  private handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n    const field = event.currentTarget;\n    if (this.props.autoResize && canUseDOM) {\n      field.style.setProperty(heightToken.name, 'inherit');\n      const computed = window.getComputedStyle(field);\n      // Calculate the height\n      const height =\n        parseInt(computed.getPropertyValue('border-top-width')) +\n        parseInt(computed.getPropertyValue('padding-top')) +\n        field.scrollHeight +\n        parseInt(computed.getPropertyValue('padding-bottom')) +\n        parseInt(computed.getPropertyValue('border-bottom-width'));\n      field.style.setProperty(heightToken.name, `${height}px`);\n    }\n    if (this.props.onChange) {\n      this.props.onChange(field.value, event);\n    }\n  };\n\n  render() {\n    const {\n      className,\n      value,\n      validated,\n      isRequired,\n      isDisabled,\n      isIconSprite,\n      isReadOnly,\n      resizeOrientation,\n      innerRef,\n      readOnly,\n      disabled,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      autoResize,\n      onChange,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      ...props\n    } = this.props;\n    const orientation = `resize${capitalize(resizeOrientation)}` as 'resizeVertical' | 'resizeHorizontal';\n    return (\n      <textarea\n        className={css(\n          styles.formControl,\n          isIconSprite && styles.modifiers.iconSprite,\n          className,\n          resizeOrientation !== TextAreResizeOrientation.both && styles.modifiers[orientation],\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning\n        )}\n        onChange={this.handleChange}\n        {...(typeof this.props.defaultValue !== 'string' && { value })}\n        aria-invalid={validated === ValidatedOptions.error}\n        required={isRequired}\n        disabled={isDisabled || disabled}\n        readOnly={isReadOnly || readOnly}\n        ref={innerRef}\n        {...props}\n      />\n    );\n  }\n}\n\nexport const TextArea = React.forwardRef<HTMLTextAreaElement, TextAreaProps>((props, ref) => (\n  <TextAreaBase {...props} innerRef={ref as React.MutableRefObject<any>} />\n));\nTextArea.displayName = 'TextArea';\n"]},"metadata":{},"sourceType":"module"}