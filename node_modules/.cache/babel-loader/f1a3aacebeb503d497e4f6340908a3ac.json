{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { canUseDOM } from '../../helpers';\nimport { AlertGroupInline } from './AlertGroupInline';\nexport class AlertGroup extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      container: undefined\n    };\n  }\n\n  componentDidMount() {\n    const container = document.createElement('div');\n    const target = this.getTargetElement();\n    this.setState({\n      container\n    });\n    target.appendChild(container);\n  }\n\n  componentWillUnmount() {\n    const target = this.getTargetElement();\n\n    if (this.state.container) {\n      target.removeChild(this.state.container);\n    }\n  }\n\n  getTargetElement() {\n    const appendTo = this.props.appendTo;\n\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n\n    return appendTo || document.body;\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      className,\n      children,\n      isToast,\n      isLiveRegion,\n      onOverflowClick,\n      overflowMessage\n    } = _a,\n          props = __rest(_a, [\"className\", \"children\", \"isToast\", \"isLiveRegion\", \"onOverflowClick\", \"overflowMessage\"]);\n\n    const alertGroup = React.createElement(AlertGroupInline, Object.assign({\n      onOverflowClick: onOverflowClick,\n      className: className,\n      isToast: isToast,\n      isLiveRegion: isLiveRegion,\n      overflowMessage: overflowMessage\n    }, props), children);\n\n    if (!this.props.isToast) {\n      return alertGroup;\n    }\n\n    const container = this.state.container;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(alertGroup, container);\n  }\n\n}\nAlertGroup.displayName = 'AlertGroup';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAuBA,OAAM,MAAOC,UAAP,SAA0BJ,KAAK,CAACK,SAAhC,CAA2E;EAAjFC;;IAEE,aAAQ;MACNC,SAAS,EAAEC;IADL,CAAR;EAoDD;;EAhDCC,iBAAiB;IACf,MAAMF,SAAS,GAAGG,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAlB;IACA,MAAMC,MAAM,GAAgB,KAAKC,gBAAL,EAA5B;IACA,KAAKC,QAAL,CAAc;MAAEP;IAAF,CAAd;IACAK,MAAM,CAACG,WAAP,CAAmBR,SAAnB;EACD;;EAEDS,oBAAoB;IAClB,MAAMJ,MAAM,GAAgB,KAAKC,gBAAL,EAA5B;;IACA,IAAI,KAAKI,KAAL,CAAWV,SAAf,EAA0B;MACxBK,MAAM,CAACM,WAAP,CAAmB,KAAKD,KAAL,CAAWV,SAA9B;IACD;EACF;;EAEDM,gBAAgB;IACd,MAAMM,QAAQ,GAAG,KAAKC,KAAL,CAAWD,QAA5B;;IACA,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;MAClC,OAAOA,QAAQ,EAAf;IACD;;IACD,OAAOA,QAAQ,IAAIT,QAAQ,CAACW,IAA5B;EACD;;EAEDC,MAAM;IACJ,MAAMC,KAA6F,KAAKH,KAAxG;IAAA,MAAM;MAAEI,SAAF;MAAaC,QAAb;MAAuBC,OAAvB;MAAgCC,YAAhC;MAA8CC,eAA9C;MAA+DC;IAA/D,IAA8EN,EAApF;IAAA,MAAyFH,KAAK,cAAxF,0FAAwF,CAA9F;;IACA,MAAMU,UAAU,GACd9B,oBAACG,gBAAD,EAAiB4B;MACfH,eAAe,EAAEA,eADF;MAEfJ,SAAS,EAAEA,SAFI;MAGfE,OAAO,EAAEA,OAHM;MAIfC,YAAY,EAAEA,YAJC;MAKfE,eAAe,EAAEA;IALF,GAMXT,KANW,CAAjB,EAQGK,QARH,CADF;;IAYA,IAAI,CAAC,KAAKL,KAAL,CAAWM,OAAhB,EAAyB;MACvB,OAAOI,UAAP;IACD;;IAED,MAAMvB,SAAS,GAAG,KAAKU,KAAL,CAAWV,SAA7B;;IAEA,IAAI,CAACL,SAAD,IAAc,CAACK,SAAnB,EAA8B;MAC5B,OAAO,IAAP;IACD;;IAED,OAAON,QAAQ,CAAC+B,YAAT,CAAsBF,UAAtB,EAAkCvB,SAAlC,CAAP;EACD;;AArD8E;AACxEH,yBAAc,YAAd","names":["React","ReactDOM","canUseDOM","AlertGroupInline","AlertGroup","Component","constructor","container","undefined","componentDidMount","document","createElement","target","getTargetElement","setState","appendChild","componentWillUnmount","state","removeChild","appendTo","props","body","render","_a","className","children","isToast","isLiveRegion","onOverflowClick","overflowMessage","alertGroup","Object","createPortal"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/AlertGroup/AlertGroup.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { canUseDOM } from '../../helpers';\nimport { AlertGroupInline } from './AlertGroupInline';\n\nexport interface AlertGroupProps extends Omit<React.HTMLProps<HTMLUListElement>, 'className'> {\n  /** Additional classes added to the AlertGroup */\n  className?: string;\n  /** Alerts to be rendered in the AlertGroup */\n  children?: React.ReactNode;\n  /** Toast notifications are positioned at the top right corner of the viewport */\n  isToast?: boolean;\n  /** Turns the container into a live region so that changes to content within the AlertGroup, such as appending an Alert, are reliably announced to assistive technology. */\n  isLiveRegion?: boolean;\n  /** Determine where the alert is appended to */\n  appendTo?: HTMLElement | (() => HTMLElement);\n  /** Function to call if user clicks on overflow message */\n  onOverflowClick?: () => void;\n  /** Custom text to show for the overflow message */\n  overflowMessage?: string;\n}\n\ninterface AlertGroupState {\n  container: HTMLElement;\n}\n\nexport class AlertGroup extends React.Component<AlertGroupProps, AlertGroupState> {\n  static displayName = 'AlertGroup';\n  state = {\n    container: undefined\n  } as AlertGroupState;\n\n  componentDidMount() {\n    const container = document.createElement('div');\n    const target: HTMLElement = this.getTargetElement();\n    this.setState({ container });\n    target.appendChild(container);\n  }\n\n  componentWillUnmount() {\n    const target: HTMLElement = this.getTargetElement();\n    if (this.state.container) {\n      target.removeChild(this.state.container);\n    }\n  }\n\n  getTargetElement() {\n    const appendTo = this.props.appendTo;\n    if (typeof appendTo === 'function') {\n      return appendTo();\n    }\n    return appendTo || document.body;\n  }\n\n  render() {\n    const { className, children, isToast, isLiveRegion, onOverflowClick, overflowMessage, ...props } = this.props;\n    const alertGroup = (\n      <AlertGroupInline\n        onOverflowClick={onOverflowClick}\n        className={className}\n        isToast={isToast}\n        isLiveRegion={isLiveRegion}\n        overflowMessage={overflowMessage}\n        {...props}\n      >\n        {children}\n      </AlertGroupInline>\n    );\n    if (!this.props.isToast) {\n      return alertGroup;\n    }\n\n    const container = this.state.container;\n\n    if (!canUseDOM || !container) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(alertGroup, container);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}