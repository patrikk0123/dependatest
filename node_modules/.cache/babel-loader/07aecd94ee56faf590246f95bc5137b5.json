{"ast":null,"code":"import _classCallCheck from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/Page';\nexport var Toolbar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Toolbar, _React$Component);\n\n  var _super = _createSuper(Toolbar);\n\n  function Toolbar() {\n    var _this;\n\n    _classCallCheck(this, Toolbar);\n\n    _this = _super.apply(this, arguments);\n    _this.chipGroupContentRef = React.createRef();\n    _this.staticFilterInfo = {};\n    _this.state = {\n      isManagedToggleExpanded: false,\n      filterInfo: {},\n      windowWidth: canUseDOM ? window.innerWidth : 1200,\n      ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n    };\n\n    _this.isToggleManaged = function () {\n      return !(_this.props.isExpanded || !!_this.props.toggleIsExpanded);\n    };\n\n    _this.toggleIsExpanded = function () {\n      _this.setState(function (prevState) {\n        return {\n          isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n        };\n      });\n    };\n\n    _this.closeExpandableContent = function (e) {\n      if (e.target.innerWidth !== _this.state.windowWidth) {\n        _this.setState(function () {\n          return {\n            isManagedToggleExpanded: false,\n            windowWidth: e.target.innerWidth\n          };\n        });\n      }\n    };\n\n    _this.updateNumberFilters = function (categoryName, numberOfFilters) {\n      var filterInfoToUpdate = Object.assign({}, _this.staticFilterInfo);\n\n      if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n        filterInfoToUpdate[categoryName] = numberOfFilters;\n        _this.staticFilterInfo = filterInfoToUpdate;\n\n        _this.setState({\n          filterInfo: filterInfoToUpdate\n        });\n      }\n    };\n\n    _this.getNumberOfFilters = function () {\n      return Object.values(_this.state.filterInfo).reduce(function (acc, cur) {\n        return acc + cur;\n      }, 0);\n    };\n\n    _this.renderToolbar = function (randomId) {\n      var _a = _this.props,\n          clearAllFilters = _a.clearAllFilters,\n          clearFiltersButtonText = _a.clearFiltersButtonText,\n          collapseListedFiltersBreakpoint = _a.collapseListedFiltersBreakpoint,\n          isExpandedProp = _a.isExpanded,\n          toggleIsExpanded = _a.toggleIsExpanded,\n          className = _a.className,\n          children = _a.children,\n          isFullHeight = _a.isFullHeight,\n          isStatic = _a.isStatic,\n          inset = _a.inset,\n          usePageInsets = _a.usePageInsets,\n          isSticky = _a.isSticky,\n          ouiaId = _a.ouiaId,\n          numberOfFiltersText = _a.numberOfFiltersText,\n          customChipGroupContent = _a.customChipGroupContent,\n          props = __rest(_a, [\"clearAllFilters\", \"clearFiltersButtonText\", \"collapseListedFiltersBreakpoint\", \"isExpanded\", \"toggleIsExpanded\", \"className\", \"children\", \"isFullHeight\", \"isStatic\", \"inset\", \"usePageInsets\", \"isSticky\", \"ouiaId\", \"numberOfFiltersText\", \"customChipGroupContent\"]);\n\n      var isManagedToggleExpanded = _this.state.isManagedToggleExpanded;\n\n      var isToggleManaged = _this.isToggleManaged();\n\n      var isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n\n      var numberOfFilters = _this.getNumberOfFilters();\n\n      var showClearFiltersButton = numberOfFilters > 0;\n      return React.createElement(PageContext.Consumer, null, function (_ref) {\n        var width = _ref.width,\n            getBreakpoint = _ref.getBreakpoint;\n        return React.createElement(\"div\", Object.assign({\n          className: css(styles.toolbar, isFullHeight && styles.modifiers.fullHeight, isStatic && styles.modifiers.static, usePageInsets && styles.modifiers.pageInsets, isSticky && styles.modifiers.sticky, formatBreakpointMods(inset, styles, '', getBreakpoint(width)), className),\n          id: randomId\n        }, getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : _this.state.ouiaStateId), props), React.createElement(ToolbarContext.Provider, {\n          value: {\n            isExpanded: isExpanded,\n            toggleIsExpanded: isToggleManaged ? _this.toggleIsExpanded : toggleIsExpanded,\n            chipGroupContentRef: _this.chipGroupContentRef,\n            updateNumberFilters: _this.updateNumberFilters,\n            numberOfFilters: numberOfFilters,\n            clearAllFilters: clearAllFilters,\n            clearFiltersButtonText: clearFiltersButtonText,\n            showClearFiltersButton: showClearFiltersButton,\n            toolbarId: randomId,\n            customChipGroupContent: customChipGroupContent\n          }\n        }, children, React.createElement(ToolbarChipGroupContent, {\n          isExpanded: isExpanded,\n          chipGroupContentRef: _this.chipGroupContentRef,\n          clearAllFilters: clearAllFilters,\n          showClearFiltersButton: showClearFiltersButton,\n          clearFiltersButtonText: clearFiltersButtonText,\n          numberOfFilters: numberOfFilters,\n          numberOfFiltersText: numberOfFiltersText,\n          collapseListedFiltersBreakpoint: collapseListedFiltersBreakpoint,\n          customChipGroupContent: customChipGroupContent\n        })));\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.isToggleManaged() && canUseDOM) {\n        window.addEventListener('resize', this.closeExpandableContent);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.isToggleManaged() && canUseDOM) {\n        window.removeEventListener('resize', this.closeExpandableContent);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return this.props.id ? this.renderToolbar(this.props.id) : React.createElement(GenerateId, null, function (randomId) {\n        return _this2.renderToolbar(randomId);\n      });\n    }\n  }]);\n\n  return Toolbar;\n}(React.Component);\nToolbar.displayName = 'Toolbar';","map":{"version":3,"mappings":"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","names":["React","styles","GenerateId","css","ToolbarContext","ToolbarChipGroupContent","formatBreakpointMods","canUseDOM","getDefaultOUIAId","getOUIAProps","PageContext","Toolbar","createRef","isManagedToggleExpanded","filterInfo","windowWidth","window","innerWidth","ouiaStateId","displayName","props","isExpanded","toggleIsExpanded","setState","prevState","e","target","state","categoryName","numberOfFilters","filterInfoToUpdate","staticFilterInfo","hasOwnProperty","Object","values","reduce","acc","cur","randomId","clearAllFilters","_a","clearFiltersButtonText","collapseListedFiltersBreakpoint","isExpandedProp","className","children","isFullHeight","isStatic","inset","usePageInsets","isSticky","ouiaId","numberOfFiltersText","customChipGroupContent","__rest","isToggleManaged","getNumberOfFilters","showClearFiltersButton","Consumer","width","getBreakpoint","toolbar","modifiers","fullHeight","static","pageInsets","sticky","id","undefined","Provider","value","chipGroupContentRef","updateNumberFilters","toolbarId","addEventListener","closeExpandableContent","removeEventListener","renderToolbar","Component"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Toolbar/Toolbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Toolbar/toolbar';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { css } from '@patternfly/react-styles';\nimport { ToolbarContext } from './ToolbarUtils';\nimport { ToolbarChipGroupContent } from './ToolbarChipGroupContent';\nimport { formatBreakpointMods, canUseDOM } from '../../helpers/util';\nimport { getDefaultOUIAId, getOUIAProps, OUIAProps } from '../../helpers';\nimport { PageContext } from '../Page/Page';\n\nexport interface ToolbarProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** Optional callback for clearing all filters in the toolbar */\n  clearAllFilters?: () => void;\n  /** Text to display in the clear all filters button */\n  clearFiltersButtonText?: string;\n  /** Custom content appended to the filter generated chip group. To maintain spacing and styling, each node should be wrapped in a ToolbarItem or ToolbarGroup. This property will remove the default \"Clear all filters\" button. */\n  customChipGroupContent?: React.ReactNode;\n  /** The breakpoint at which the listed filters in chip groups are collapsed down to a summary */\n  collapseListedFiltersBreakpoint?: 'all' | 'md' | 'lg' | 'xl' | '2xl';\n  /** Flag indicating if a data toolbar toggle group's expandable content is expanded */\n  isExpanded?: boolean;\n  /** A callback for setting the isExpanded flag */\n  toggleIsExpanded?: () => void;\n  /** Classes applied to root element of the data toolbar */\n  className?: string;\n  /** Content to be rendered as rows in the data toolbar */\n  children?: React.ReactNode;\n  /** Id of the data toolbar */\n  id?: string;\n  /** Flag indicating the toolbar height should expand to the full height of the container */\n  isFullHeight?: boolean;\n  /** Flag indicating the toolbar is static */\n  isStatic?: boolean;\n  /** Flag indicating the toolbar should use the Page insets */\n  usePageInsets?: boolean;\n  /** Flag indicating the toolbar should stick to the top of its container */\n  isSticky?: boolean;\n  /** Insets at various breakpoints. */\n  inset?: {\n    default?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    sm?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    md?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    lg?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    xl?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n    '2xl'?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  };\n  /** Text to display in the total number of applied filters ToolbarFilter */\n  numberOfFiltersText?: (numberOfFilters: number) => string;\n}\n\nexport interface ToolbarState {\n  /** Flag used if the user has opted NOT to manage the 'isExpanded' state of the toggle group.\n   *  Indicates whether or not the toggle group is expanded. */\n  isManagedToggleExpanded: boolean;\n  /** Object managing information about how many chips are in each chip group */\n  filterInfo: FilterInfo;\n  /** Used to keep track of window width so we can collapse expanded content when window is resizing */\n  windowWidth: number;\n  ouiaStateId: string;\n}\n\ninterface FilterInfo {\n  [key: string]: number;\n}\n\nexport class Toolbar extends React.Component<ToolbarProps, ToolbarState> {\n  static displayName = 'Toolbar';\n  chipGroupContentRef = React.createRef<HTMLDivElement>();\n  staticFilterInfo = {};\n  state = {\n    isManagedToggleExpanded: false,\n    filterInfo: {},\n    windowWidth: canUseDOM ? window.innerWidth : 1200,\n    ouiaStateId: getDefaultOUIAId(Toolbar.displayName)\n  };\n\n  isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);\n\n  toggleIsExpanded = () => {\n    this.setState(prevState => ({\n      isManagedToggleExpanded: !prevState.isManagedToggleExpanded\n    }));\n  };\n\n  closeExpandableContent = (e: any) => {\n    if (e.target.innerWidth !== this.state.windowWidth) {\n      this.setState(() => ({\n        isManagedToggleExpanded: false,\n        windowWidth: e.target.innerWidth\n      }));\n    }\n  };\n\n  componentDidMount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.addEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.isToggleManaged() && canUseDOM) {\n      window.removeEventListener('resize', this.closeExpandableContent);\n    }\n  }\n\n  updateNumberFilters = (categoryName: string, numberOfFilters: number) => {\n    const filterInfoToUpdate: FilterInfo = { ...this.staticFilterInfo };\n    if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {\n      filterInfoToUpdate[categoryName] = numberOfFilters;\n      this.staticFilterInfo = filterInfoToUpdate;\n      this.setState({ filterInfo: filterInfoToUpdate });\n    }\n  };\n\n  getNumberOfFilters = () =>\n    Object.values(this.state.filterInfo).reduce((acc: any, cur: any) => acc + cur, 0) as number;\n\n  renderToolbar = (randomId: string) => {\n    const {\n      clearAllFilters,\n      clearFiltersButtonText,\n      collapseListedFiltersBreakpoint,\n      isExpanded: isExpandedProp,\n      toggleIsExpanded,\n      className,\n      children,\n      isFullHeight,\n      isStatic,\n      inset,\n      usePageInsets,\n      isSticky,\n      ouiaId,\n      numberOfFiltersText,\n      customChipGroupContent,\n      ...props\n    } = this.props;\n\n    const { isManagedToggleExpanded } = this.state;\n\n    const isToggleManaged = this.isToggleManaged();\n    const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;\n    const numberOfFilters = this.getNumberOfFilters();\n    const showClearFiltersButton = numberOfFilters > 0;\n\n    return (\n      <PageContext.Consumer>\n        {({ width, getBreakpoint }) => (\n          <div\n            className={css(\n              styles.toolbar,\n              isFullHeight && styles.modifiers.fullHeight,\n              isStatic && styles.modifiers.static,\n              usePageInsets && styles.modifiers.pageInsets,\n              isSticky && styles.modifiers.sticky,\n              formatBreakpointMods(inset, styles, '', getBreakpoint(width)),\n              className\n            )}\n            id={randomId}\n            {...getOUIAProps(Toolbar.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId)}\n            {...props}\n          >\n            <ToolbarContext.Provider\n              value={{\n                isExpanded,\n                toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,\n                chipGroupContentRef: this.chipGroupContentRef,\n                updateNumberFilters: this.updateNumberFilters,\n                numberOfFilters,\n                clearAllFilters,\n                clearFiltersButtonText,\n                showClearFiltersButton,\n                toolbarId: randomId,\n                customChipGroupContent\n              }}\n            >\n              {children}\n              <ToolbarChipGroupContent\n                isExpanded={isExpanded}\n                chipGroupContentRef={this.chipGroupContentRef}\n                clearAllFilters={clearAllFilters}\n                showClearFiltersButton={showClearFiltersButton}\n                clearFiltersButtonText={clearFiltersButtonText}\n                numberOfFilters={numberOfFilters}\n                numberOfFiltersText={numberOfFiltersText}\n                collapseListedFiltersBreakpoint={collapseListedFiltersBreakpoint}\n                customChipGroupContent={customChipGroupContent}\n              />\n            </ToolbarContext.Provider>\n          </div>\n        )}\n      </PageContext.Consumer>\n    );\n  };\n\n  render() {\n    return this.props.id ? (\n      this.renderToolbar(this.props.id)\n    ) : (\n      <GenerateId>{randomId => this.renderToolbar(randomId)}</GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}