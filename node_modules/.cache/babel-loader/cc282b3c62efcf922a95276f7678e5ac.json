{"ast":null,"code":"import getBoundingClientRect from './getBoundingClientRect';\nimport getNodeScroll from './getNodeScroll';\nimport getNodeName from './getNodeName';\nimport { isHTMLElement } from './instanceOf';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getDocumentElement from './getDocumentElement';\nimport isScrollParent from './isScrollParent'; // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n/**\n * @param elementOrVirtualElement\n * @param offsetParent\n * @param isFixed\n */\n\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent) {\n  var isFixed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement);\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}","map":{"version":3,"mappings":"AAEA,OAAOA,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAEA;AACA;;AACA;;;;;;AAKA,eAAc,SAAUC,gBAAV,CACZC,uBADY,EAEZC,YAFY,EAGY;EAAA,IAAxBC,OAAwB,uEAAL,KAAK;EAExB,IAAMC,eAAe,GAAGN,kBAAkB,CAACI,YAAD,CAA1C;EACA,IAAMG,IAAI,GAAGZ,qBAAqB,CAACQ,uBAAD,CAAlC;EACA,IAAMK,uBAAuB,GAAGV,aAAa,CAACM,YAAD,CAA7C;EAEA,IAAIK,MAAM,GAAG;IAAEC,UAAU,EAAE,CAAd;IAAiBC,SAAS,EAAE;EAA5B,CAAb;EACA,IAAIC,OAAO,GAAG;IAAEC,CAAC,EAAE,CAAL;IAAQC,CAAC,EAAE;EAAX,CAAd;;EAEA,IAAIN,uBAAuB,IAAK,CAACA,uBAAD,IAA4B,CAACH,OAA7D,EAAuE;IACrE,IACER,WAAW,CAACO,YAAD,CAAX,KAA8B,MAA9B,IAAwC;IACxCH,cAAc,CAACK,eAAD,CAFhB,EAGE;MACAG,MAAM,GAAGb,aAAa,CAACQ,YAAD,CAAtB;IACD;;IAED,IAAIN,aAAa,CAACM,YAAD,CAAjB,EAAiC;MAC/BQ,OAAO,GAAGjB,qBAAqB,CAACS,YAAD,CAA/B;MACAQ,OAAO,CAACC,CAAR,IAAaT,YAAY,CAACW,UAA1B;MACAH,OAAO,CAACE,CAAR,IAAaV,YAAY,CAACY,SAA1B;IACD,CAJD,MAIO,IAAIV,eAAJ,EAAqB;MAC1BM,OAAO,CAACC,CAAR,GAAYd,mBAAmB,CAACO,eAAD,CAA/B;IACD;EACF;;EAED,OAAO;IACLO,CAAC,EAAEN,IAAI,CAACU,IAAL,GAAYR,MAAM,CAACC,UAAnB,GAAgCE,OAAO,CAACC,CADtC;IAELC,CAAC,EAAEP,IAAI,CAACW,GAAL,GAAWT,MAAM,CAACE,SAAlB,GAA8BC,OAAO,CAACE,CAFpC;IAGLK,KAAK,EAAEZ,IAAI,CAACY,KAHP;IAILC,MAAM,EAAEb,IAAI,CAACa;EAJR,CAAP;AAMD","names":["getBoundingClientRect","getNodeScroll","getNodeName","isHTMLElement","getWindowScrollBarX","getDocumentElement","isScrollParent","getCompositeRect","elementOrVirtualElement","offsetParent","isFixed","documentElement","rect","isOffsetParentAnElement","scroll","scrollLeft","scrollTop","offsets","x","y","clientLeft","clientTop","left","top","width","height"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/helpers/Popper/thirdparty/popper-core/dom-utils/getCompositeRect.ts"],"sourcesContent":["// @ts-nocheck\nimport { Rect, VirtualElement, Window } from '../types';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport getNodeScroll from './getNodeScroll';\nimport getNodeName from './getNodeName';\nimport { isHTMLElement } from './instanceOf';\nimport getWindowScrollBarX from './getWindowScrollBarX';\nimport getDocumentElement from './getDocumentElement';\nimport isScrollParent from './isScrollParent';\n\n// Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n/**\n * @param elementOrVirtualElement\n * @param offsetParent\n * @param isFixed\n */\nexport default function getCompositeRect(\n  elementOrVirtualElement: Element | VirtualElement,\n  offsetParent: Element | Window,\n  isFixed: boolean = false\n): Rect {\n  const documentElement = getDocumentElement(offsetParent);\n  const rect = getBoundingClientRect(elementOrVirtualElement);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n\n  let scroll = { scrollLeft: 0, scrollTop: 0 };\n  let offsets = { x: 0, y: 0 };\n\n  if (isOffsetParentAnElement || (!isOffsetParentAnElement && !isFixed)) {\n    if (\n      getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n      isScrollParent(documentElement)\n    ) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n"]},"metadata":{},"sourceType":"module"}