{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { ToggleTemplate } from './ToggleTemplate';\nimport styles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\nimport { fillTemplate } from '../../helpers';\nimport { Navigation } from './Navigation';\nimport { PaginationOptionsMenu } from './PaginationOptionsMenu';\nimport { getOUIAProps, getDefaultOUIAId } from '../../helpers';\nimport widthChars from '@patternfly/react-tokens/dist/esm/c_pagination__nav_page_select_c_form_control_width_chars';\nexport var PaginationVariant;\n\n(function (PaginationVariant) {\n  PaginationVariant[\"top\"] = \"top\";\n  PaginationVariant[\"bottom\"] = \"bottom\";\n})(PaginationVariant || (PaginationVariant = {}));\n\nconst defaultPerPageOptions = [{\n  title: '10',\n  value: 10\n}, {\n  title: '20',\n  value: 20\n}, {\n  title: '50',\n  value: 50\n}, {\n  title: '100',\n  value: 100\n}];\n\nconst handleInputWidth = (lastPage, node) => {\n  if (!node) {\n    return;\n  }\n\n  const len = String(lastPage).length;\n\n  if (len >= 3) {\n    node.style.setProperty(widthChars.name, `${len}`);\n  } else {\n    node.style.setProperty(widthChars.name, '2');\n  }\n};\n\nlet paginationId = 0;\nexport class Pagination extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.paginationRef = React.createRef();\n    this.state = {\n      ouiaStateId: getDefaultOUIAId(Pagination.displayName, this.props.variant)\n    };\n  }\n\n  getLastPage() {\n    const {\n      itemCount,\n      perPage,\n      page\n    } = this.props; // when itemCount is not known let's set lastPage as page+1 as we don't know the total count\n\n    return itemCount || itemCount === 0 ? Math.ceil(itemCount / perPage) || 0 : page + 1;\n  }\n\n  componentDidMount() {\n    const node = this.paginationRef.current;\n    handleInputWidth(this.getLastPage(), node);\n  }\n\n  componentDidUpdate(prevProps) {\n    const node = this.paginationRef.current;\n\n    if (prevProps.perPage !== this.props.perPage || prevProps.itemCount !== this.props.itemCount) {\n      handleInputWidth(this.getLastPage(), node);\n    }\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      className,\n      variant,\n      isDisabled,\n      isCompact,\n      isStatic,\n      isSticky,\n      perPage,\n      titles,\n      firstPage,\n      page: propPage,\n      offset,\n      defaultToFullPage,\n      itemCount,\n      itemsStart,\n      itemsEnd,\n      perPageOptions,\n      dropDirection: dropDirectionProp,\n      widgetId,\n      toggleTemplate,\n      onSetPage,\n      onPerPageSelect,\n      onFirstClick,\n      onPreviousClick,\n      onNextClick,\n      onPageInput,\n      onLastClick,\n      ouiaId,\n      ouiaSafe,\n      perPageComponent\n    } = _a,\n          props = __rest(_a, [\"children\", \"className\", \"variant\", \"isDisabled\", \"isCompact\", \"isStatic\", \"isSticky\", \"perPage\", \"titles\", \"firstPage\", \"page\", \"offset\", \"defaultToFullPage\", \"itemCount\", \"itemsStart\", \"itemsEnd\", \"perPageOptions\", \"dropDirection\", \"widgetId\", \"toggleTemplate\", \"onSetPage\", \"onPerPageSelect\", \"onFirstClick\", \"onPreviousClick\", \"onNextClick\", \"onPageInput\", \"onLastClick\", \"ouiaId\", \"ouiaSafe\", \"perPageComponent\"]);\n\n    const dropDirection = dropDirectionProp || (variant === 'bottom' && !isStatic ? 'up' : 'down');\n    let page = propPage;\n\n    if (!page && offset) {\n      page = Math.ceil(offset / perPage);\n    }\n\n    if (page === 0 && !itemCount) {\n      page = 1;\n    }\n\n    const lastPage = this.getLastPage();\n    let firstIndex = (page - 1) * perPage + 1;\n    let lastIndex = page * perPage;\n\n    if (itemCount || itemCount === 0) {\n      firstIndex = itemCount <= 0 ? 0 : (page - 1) * perPage + 1;\n\n      if (page < firstPage && itemCount > 0) {\n        page = firstPage;\n      } else if (page > lastPage) {\n        page = lastPage;\n      }\n\n      if (itemCount >= 0) {\n        lastIndex = page === lastPage || itemCount === 0 ? itemCount : page * perPage;\n      }\n    }\n\n    const toggleTemplateProps = {\n      firstIndex,\n      lastIndex,\n      itemCount,\n      itemsTitle: titles.items,\n      ofWord: titles.ofWord\n    };\n    return React.createElement(\"div\", Object.assign({\n      ref: this.paginationRef,\n      className: css(styles.pagination, variant === PaginationVariant.bottom && styles.modifiers.bottom, isCompact && styles.modifiers.compact, isStatic && styles.modifiers.static, isSticky && styles.modifiers.sticky, className),\n      id: `${widgetId}-${paginationId++}`\n    }, getOUIAProps(Pagination.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), variant === PaginationVariant.top && React.createElement(\"div\", {\n      className: css(styles.paginationTotalItems)\n    }, toggleTemplate && typeof toggleTemplate === 'string' && fillTemplate(toggleTemplate, toggleTemplateProps), toggleTemplate && typeof toggleTemplate !== 'string' && toggleTemplate(toggleTemplateProps), !toggleTemplate && React.createElement(ToggleTemplate, {\n      firstIndex: firstIndex,\n      lastIndex: lastIndex,\n      itemCount: itemCount,\n      itemsTitle: titles.items,\n      ofWord: titles.ofWord\n    })), React.createElement(PaginationOptionsMenu, {\n      itemsPerPageTitle: titles.itemsPerPage,\n      perPageSuffix: titles.perPageSuffix,\n      itemsTitle: isCompact ? '' : titles.items,\n      optionsToggle: titles.optionsToggle,\n      perPageOptions: perPageOptions,\n      firstIndex: itemsStart !== null ? itemsStart : firstIndex,\n      lastIndex: itemsEnd !== null ? itemsEnd : lastIndex,\n      ofWord: titles.ofWord,\n      defaultToFullPage: defaultToFullPage,\n      itemCount: itemCount,\n      page: page,\n      perPage: perPage,\n      lastPage: lastPage,\n      onPerPageSelect: onPerPageSelect,\n      dropDirection: dropDirection,\n      widgetId: widgetId,\n      toggleTemplate: toggleTemplate,\n      isDisabled: isDisabled,\n      perPageComponent: perPageComponent\n    }), React.createElement(Navigation, {\n      pagesTitle: titles.page,\n      pagesTitlePlural: titles.pages,\n      toLastPage: titles.toLastPage,\n      toPreviousPage: titles.toPreviousPage,\n      toNextPage: titles.toNextPage,\n      toFirstPage: titles.toFirstPage,\n      currPage: titles.currPage,\n      paginationTitle: titles.paginationTitle,\n      ofWord: titles.ofWord,\n      page: itemCount && itemCount <= 0 ? 0 : page,\n      perPage: perPage,\n      itemCount: itemCount,\n      firstPage: itemsStart !== null ? itemsStart : 1,\n      lastPage: lastPage,\n      onSetPage: onSetPage,\n      onFirstClick: onFirstClick,\n      onPreviousClick: onPreviousClick,\n      onNextClick: onNextClick,\n      onLastClick: onLastClick,\n      onPageInput: onPageInput,\n      isDisabled: isDisabled,\n      isCompact: isCompact\n    }), children);\n  }\n\n}\nPagination.displayName = 'Pagination';\nPagination.defaultProps = {\n  children: null,\n  className: '',\n  variant: PaginationVariant.top,\n  isDisabled: false,\n  isCompact: false,\n  isSticky: false,\n  perPage: defaultPerPageOptions[0].value,\n  titles: {\n    items: '',\n    page: '',\n    pages: '',\n    itemsPerPage: 'Items per page',\n    perPageSuffix: 'per page',\n    toFirstPage: 'Go to first page',\n    toPreviousPage: 'Go to previous page',\n    toLastPage: 'Go to last page',\n    toNextPage: 'Go to next page',\n    optionsToggle: '',\n    currPage: 'Current page',\n    paginationTitle: 'Pagination',\n    ofWord: 'of'\n  },\n  firstPage: 1,\n  page: 0,\n  offset: 0,\n  defaultToFullPage: false,\n  itemsStart: null,\n  itemsEnd: null,\n  perPageOptions: defaultPerPageOptions,\n  widgetId: 'pagination-options-menu',\n  onSetPage: () => undefined,\n  onPerPageSelect: () => undefined,\n  onFirstClick: () => undefined,\n  onPreviousClick: () => undefined,\n  onNextClick: () => undefined,\n  onPageInput: () => undefined,\n  onLastClick: () => undefined,\n  ouiaSafe: true,\n  perPageComponent: 'div'\n};","map":{"version":3,"mappings":"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","names":["React","ToggleTemplate","styles","css","fillTemplate","Navigation","PaginationOptionsMenu","getOUIAProps","getDefaultOUIAId","widthChars","PaginationVariant","defaultPerPageOptions","title","value","handleInputWidth","lastPage","node","len","String","length","style","setProperty","name","paginationId","Pagination","Component","constructor","createRef","ouiaStateId","displayName","props","variant","getLastPage","itemCount","perPage","page","Math","ceil","componentDidMount","paginationRef","current","componentDidUpdate","prevProps","render","_a","children","className","isDisabled","isCompact","isStatic","isSticky","titles","firstPage","propPage","offset","defaultToFullPage","itemsStart","itemsEnd","perPageOptions","dropDirection","dropDirectionProp","widgetId","toggleTemplate","onSetPage","onPerPageSelect","onFirstClick","onPreviousClick","onNextClick","onPageInput","onLastClick","ouiaId","ouiaSafe","perPageComponent","firstIndex","lastIndex","toggleTemplateProps","itemsTitle","items","ofWord","ref","pagination","bottom","modifiers","compact","static","sticky","id","undefined","state","top","paginationTotalItems","itemsPerPageTitle","itemsPerPage","perPageSuffix","optionsToggle","pagesTitle","pagesTitlePlural","pages","toLastPage","toPreviousPage","toNextPage","toFirstPage","currPage","paginationTitle"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Pagination/Pagination.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ToggleTemplate, ToggleTemplateProps } from './ToggleTemplate';\nimport styles from '@patternfly/react-styles/css/components/Pagination/pagination';\nimport { css } from '@patternfly/react-styles';\n\nimport { fillTemplate } from '../../helpers';\nimport { Navigation } from './Navigation';\nimport { PaginationOptionsMenu } from './PaginationOptionsMenu';\nimport { getOUIAProps, OUIAProps, getDefaultOUIAId } from '../../helpers';\nimport widthChars from '@patternfly/react-tokens/dist/esm/c_pagination__nav_page_select_c_form_control_width_chars';\nimport { PickOptional } from '../../helpers';\n\nexport enum PaginationVariant {\n  top = 'top',\n  bottom = 'bottom'\n}\n\nconst defaultPerPageOptions = [\n  {\n    title: '10',\n    value: 10\n  },\n  {\n    title: '20',\n    value: 20\n  },\n  {\n    title: '50',\n    value: 50\n  },\n  {\n    title: '100',\n    value: 100\n  }\n];\n\nexport interface PerPageOptions {\n  /** option title */\n  title?: string;\n  /** option value */\n  value?: number;\n}\n\nexport interface PaginationTitles {\n  /** The title of a page displayed beside the page number */\n  page?: string;\n  /** The title of a page displayed beside the page number (plural form) */\n  pages?: string;\n  /** The type or title of the items being paginated */\n  items?: string;\n  /** The title of the pagination options menu */\n  itemsPerPage?: string;\n  /** The suffix to be displayed after each option on the options menu dropdown */\n  perPageSuffix?: string;\n  /** Accessible label for the button which moves to the first page */\n  toFirstPage?: string;\n  /** Accessible label for the button which moves to the previous page */\n  toPreviousPage?: string;\n  /** Accessible label for the button which moves to the last page */\n  toLastPage?: string;\n  /** Accessible label for the button which moves to the next page */\n  toNextPage?: string;\n  /** Accessible label for the options toggle */\n  optionsToggle?: string;\n  /** Accessible label for the input displaying the current page */\n  currPage?: string;\n  /** Accessible label for the pagination component */\n  paginationTitle?: string;\n  /** Accessible label for the English word \"of\" */\n  ofWord?: string;\n}\n\nexport type OnSetPage = (\n  _evt: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPage: number,\n  perPage?: number,\n  startIdx?: number,\n  endIdx?: number\n) => void;\n\nexport type OnPerPageSelect = (\n  _evt: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPerPage: number,\n  newPage: number,\n  startIdx?: number,\n  endIdx?: number\n) => void;\n\nexport interface PaginationProps extends React.HTMLProps<HTMLDivElement>, OUIAProps {\n  /** What should be rendered inside */\n  children?: React.ReactNode;\n  /** Additional classes for the container. */\n  className?: string;\n  /** Total number of items. */\n  itemCount?: number;\n  /** Position where pagination is rendered. */\n  variant?: 'top' | 'bottom' | PaginationVariant;\n  /** Flag indicating if pagination is disabled */\n  isDisabled?: boolean;\n  /** Flag indicating if pagination is compact */\n  isCompact?: boolean;\n  /** Flag indicating if pagination should not be sticky on mobile */\n  isStatic?: boolean;\n  /** Flag indicating if pagination should stick to its position (based on variant) */\n  isSticky?: boolean;\n  /** Number of items per page. */\n  perPage?: number;\n  /** Array of the number of items per page  options. */\n  perPageOptions?: PerPageOptions[];\n  /** Indicate whether to show last full page of results when user selects perPage value greater than remaining rows */\n  defaultToFullPage?: boolean;\n  /** Page we start at. */\n  firstPage?: number;\n  /** Current page number. */\n  page?: number;\n  /** Start index of rows to display, used in place of providing page */\n  offset?: number;\n  /** First index of items on current page. */\n  itemsStart?: number;\n  /** Last index of items on current page. */\n  itemsEnd?: number;\n  /** ID to ideintify widget on page. */\n  widgetId?: string;\n  /** Direction of dropdown context menu. */\n  dropDirection?: 'up' | 'down';\n  /** Object with titles to display in pagination. */\n  titles?: PaginationTitles;\n  /** This will be shown in pagination toggle span. You can use firstIndex, lastIndex, itemCount, itemsTitle, ofWord props. */\n  toggleTemplate?: ((props: ToggleTemplateProps) => React.ReactElement) | string;\n  /** Function called when user sets page. */\n  onSetPage?: OnSetPage;\n  /** Function called when user clicks on navigate to first page. */\n  onFirstClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks on navigate to previous page. */\n  onPreviousClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks on navigate to next page. */\n  onNextClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user clicks on navigate to last page. */\n  onLastClick?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user inputs page number. */\n  onPageInput?: (event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void;\n  /** Function called when user selects number of items per page. */\n  onPerPageSelect?: OnPerPageSelect;\n  /** Component to be used for wrapping the toggle contents. Use 'button' when you want\n   * all of the toggle text to be clickable.\n   */\n  perPageComponent?: 'div' | 'button';\n}\n\nconst handleInputWidth = (lastPage: number, node: HTMLDivElement) => {\n  if (!node) {\n    return;\n  }\n  const len = String(lastPage).length;\n  if (len >= 3) {\n    node.style.setProperty(widthChars.name, `${len}`);\n  } else {\n    node.style.setProperty(widthChars.name, '2');\n  }\n};\n\nlet paginationId = 0;\nexport class Pagination extends React.Component<PaginationProps, { ouiaStateId: string }> {\n  static displayName = 'Pagination';\n  paginationRef = React.createRef<HTMLDivElement>();\n  static defaultProps: PickOptional<PaginationProps> = {\n    children: null,\n    className: '',\n    variant: PaginationVariant.top,\n    isDisabled: false,\n    isCompact: false,\n    isSticky: false,\n    perPage: defaultPerPageOptions[0].value,\n    titles: {\n      items: '',\n      page: '',\n      pages: '',\n      itemsPerPage: 'Items per page',\n      perPageSuffix: 'per page',\n      toFirstPage: 'Go to first page',\n      toPreviousPage: 'Go to previous page',\n      toLastPage: 'Go to last page',\n      toNextPage: 'Go to next page',\n      optionsToggle: '',\n      currPage: 'Current page',\n      paginationTitle: 'Pagination',\n      ofWord: 'of'\n    },\n    firstPage: 1,\n    page: 0,\n    offset: 0,\n    defaultToFullPage: false,\n    itemsStart: null,\n    itemsEnd: null,\n    perPageOptions: defaultPerPageOptions,\n    widgetId: 'pagination-options-menu',\n    onSetPage: () => undefined,\n    onPerPageSelect: () => undefined,\n    onFirstClick: () => undefined,\n    onPreviousClick: () => undefined,\n    onNextClick: () => undefined,\n    onPageInput: () => undefined,\n    onLastClick: () => undefined,\n    ouiaSafe: true,\n    perPageComponent: 'div'\n  };\n\n  state = {\n    ouiaStateId: getDefaultOUIAId(Pagination.displayName, this.props.variant)\n  };\n\n  getLastPage() {\n    const { itemCount, perPage, page } = this.props;\n    // when itemCount is not known let's set lastPage as page+1 as we don't know the total count\n    return itemCount || itemCount === 0 ? Math.ceil(itemCount / perPage) || 0 : page + 1;\n  }\n\n  componentDidMount() {\n    const node = this.paginationRef.current;\n    handleInputWidth(this.getLastPage(), node);\n  }\n\n  componentDidUpdate(prevProps: PaginationProps & OUIAProps) {\n    const node = this.paginationRef.current;\n    if (prevProps.perPage !== this.props.perPage || prevProps.itemCount !== this.props.itemCount) {\n      handleInputWidth(this.getLastPage(), node);\n    }\n  }\n  render() {\n    const {\n      children,\n      className,\n      variant,\n      isDisabled,\n      isCompact,\n      isStatic,\n      isSticky,\n      perPage,\n      titles,\n      firstPage,\n      page: propPage,\n      offset,\n      defaultToFullPage,\n      itemCount,\n      itemsStart,\n      itemsEnd,\n      perPageOptions,\n      dropDirection: dropDirectionProp,\n      widgetId,\n      toggleTemplate,\n      onSetPage,\n      onPerPageSelect,\n      onFirstClick,\n      onPreviousClick,\n      onNextClick,\n      onPageInput,\n      onLastClick,\n      ouiaId,\n      ouiaSafe,\n      perPageComponent,\n      ...props\n    } = this.props;\n    const dropDirection = dropDirectionProp || (variant === 'bottom' && !isStatic ? 'up' : 'down');\n\n    let page = propPage;\n    if (!page && offset) {\n      page = Math.ceil(offset / perPage);\n    }\n    if (page === 0 && !itemCount) {\n      page = 1;\n    }\n\n    const lastPage = this.getLastPage();\n    let firstIndex = (page - 1) * perPage + 1;\n    let lastIndex = page * perPage;\n\n    if (itemCount || itemCount === 0) {\n      firstIndex = itemCount <= 0 ? 0 : (page - 1) * perPage + 1;\n\n      if (page < firstPage && itemCount > 0) {\n        page = firstPage;\n      } else if (page > lastPage) {\n        page = lastPage;\n      }\n\n      if (itemCount >= 0) {\n        lastIndex = page === lastPage || itemCount === 0 ? itemCount : page * perPage;\n      }\n    }\n\n    const toggleTemplateProps = { firstIndex, lastIndex, itemCount, itemsTitle: titles.items, ofWord: titles.ofWord };\n\n    return (\n      <div\n        ref={this.paginationRef}\n        className={css(\n          styles.pagination,\n          variant === PaginationVariant.bottom && styles.modifiers.bottom,\n          isCompact && styles.modifiers.compact,\n          isStatic && styles.modifiers.static,\n          isSticky && styles.modifiers.sticky,\n          className\n        )}\n        id={`${widgetId}-${paginationId++}`}\n        {...getOUIAProps(Pagination.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n        {...props}\n      >\n        {variant === PaginationVariant.top && (\n          <div className={css(styles.paginationTotalItems)}>\n            {toggleTemplate && typeof toggleTemplate === 'string' && fillTemplate(toggleTemplate, toggleTemplateProps)}\n            {toggleTemplate &&\n              typeof toggleTemplate !== 'string' &&\n              (toggleTemplate as (props: ToggleTemplateProps) => React.ReactElement)(toggleTemplateProps)}\n            {!toggleTemplate && (\n              <ToggleTemplate\n                firstIndex={firstIndex}\n                lastIndex={lastIndex}\n                itemCount={itemCount}\n                itemsTitle={titles.items}\n                ofWord={titles.ofWord}\n              />\n            )}\n          </div>\n        )}\n        <PaginationOptionsMenu\n          itemsPerPageTitle={titles.itemsPerPage}\n          perPageSuffix={titles.perPageSuffix}\n          itemsTitle={isCompact ? '' : titles.items}\n          optionsToggle={titles.optionsToggle}\n          perPageOptions={perPageOptions}\n          firstIndex={itemsStart !== null ? itemsStart : firstIndex}\n          lastIndex={itemsEnd !== null ? itemsEnd : lastIndex}\n          ofWord={titles.ofWord}\n          defaultToFullPage={defaultToFullPage}\n          itemCount={itemCount}\n          page={page}\n          perPage={perPage}\n          lastPage={lastPage}\n          onPerPageSelect={onPerPageSelect}\n          dropDirection={dropDirection}\n          widgetId={widgetId}\n          toggleTemplate={toggleTemplate}\n          isDisabled={isDisabled}\n          perPageComponent={perPageComponent}\n        />\n        <Navigation\n          pagesTitle={titles.page}\n          pagesTitlePlural={titles.pages}\n          toLastPage={titles.toLastPage}\n          toPreviousPage={titles.toPreviousPage}\n          toNextPage={titles.toNextPage}\n          toFirstPage={titles.toFirstPage}\n          currPage={titles.currPage}\n          paginationTitle={titles.paginationTitle}\n          ofWord={titles.ofWord}\n          page={itemCount && itemCount <= 0 ? 0 : page}\n          perPage={perPage}\n          itemCount={itemCount}\n          firstPage={itemsStart !== null ? itemsStart : 1}\n          lastPage={lastPage}\n          onSetPage={onSetPage}\n          onFirstClick={onFirstClick}\n          onPreviousClick={onPreviousClick}\n          onNextClick={onNextClick}\n          onLastClick={onLastClick}\n          onPageInput={onPageInput}\n          isDisabled={isDisabled}\n          isCompact={isCompact}\n        />\n        {children}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}