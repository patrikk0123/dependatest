{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\nexport const LoginForm = _a => {\n  var {\n    noAutoFocus = false,\n    className = '',\n    showHelperText = false,\n    helperText = null,\n    helperTextIcon = null,\n    usernameLabel = 'Username',\n    usernameValue = '',\n    onChangeUsername = () => undefined,\n    isValidUsername = true,\n    passwordLabel = 'Password',\n    passwordValue = '',\n    onChangePassword = () => undefined,\n    isShowPasswordEnabled = false,\n    hidePasswordAriaLabel = 'Hide password',\n    showPasswordAriaLabel = 'Show password',\n    isValidPassword = true,\n    loginButtonLabel = 'Log In',\n    isLoginButtonDisabled = false,\n    onLoginButtonClick = () => undefined,\n    rememberMeLabel = '',\n    isRememberMeChecked = false,\n    onChangeRememberMe = () => undefined\n  } = _a,\n      props = __rest(_a, [\"noAutoFocus\", \"className\", \"showHelperText\", \"helperText\", \"helperTextIcon\", \"usernameLabel\", \"usernameValue\", \"onChangeUsername\", \"isValidUsername\", \"passwordLabel\", \"passwordValue\", \"onChangePassword\", \"isShowPasswordEnabled\", \"hidePasswordAriaLabel\", \"showPasswordAriaLabel\", \"isValidPassword\", \"loginButtonLabel\", \"isLoginButtonDisabled\", \"onLoginButtonClick\", \"rememberMeLabel\", \"isRememberMeChecked\", \"onChangeRememberMe\"]);\n\n  const [passwordHidden, setPasswordHidden] = React.useState(true);\n  const passwordInput = React.createElement(TextInput, {\n    isRequired: true,\n    type: passwordHidden ? 'password' : 'text',\n    id: \"pf-login-password-id\",\n    name: \"pf-login-password-id\",\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    value: passwordValue,\n    onChange: onChangePassword\n  });\n  return React.createElement(Form, Object.assign({\n    className: className\n  }, props), React.createElement(FormHelperText, {\n    isError: !isValidUsername || !isValidPassword,\n    isHidden: !showHelperText,\n    icon: helperTextIcon\n  }, helperText), React.createElement(FormGroup, {\n    label: usernameLabel,\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-username-id\"\n  }, React.createElement(TextInput, {\n    autoFocus: !noAutoFocus,\n    id: \"pf-login-username-id\",\n    isRequired: true,\n    validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error,\n    type: \"text\",\n    name: \"pf-login-username-id\",\n    value: usernameValue,\n    onChange: onChangeUsername\n  })), React.createElement(FormGroup, {\n    label: passwordLabel,\n    isRequired: true,\n    validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error,\n    fieldId: \"pf-login-password-id\"\n  }, isShowPasswordEnabled && React.createElement(InputGroup, null, passwordInput, React.createElement(Button, {\n    variant: \"control\",\n    onClick: () => setPasswordHidden(!passwordHidden),\n    \"aria-label\": passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel\n  }, passwordHidden ? React.createElement(EyeIcon, null) : React.createElement(EyeSlashIcon, null))), !isShowPasswordEnabled && passwordInput), rememberMeLabel.length > 0 && React.createElement(FormGroup, {\n    fieldId: \"pf-login-remember-me-id\"\n  }, React.createElement(Checkbox, {\n    id: \"pf-login-remember-me-id\",\n    label: rememberMeLabel,\n    isChecked: isRememberMeChecked,\n    onChange: onChangeRememberMe\n  })), React.createElement(ActionGroup, null, React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: onLoginButtonClick,\n    isBlock: true,\n    isDisabled: isLoginButtonDisabled\n  }, loginButtonLabel)));\n};\nLoginForm.displayName = 'LoginForm';","map":{"version":3,"mappings":"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","names":["React","Form","FormGroup","ActionGroup","FormHelperText","TextInput","Button","Checkbox","ValidatedOptions","InputGroup","EyeSlashIcon","EyeIcon","LoginForm","_a","noAutoFocus","className","showHelperText","helperText","helperTextIcon","usernameLabel","usernameValue","onChangeUsername","undefined","isValidUsername","passwordLabel","passwordValue","onChangePassword","isShowPasswordEnabled","hidePasswordAriaLabel","showPasswordAriaLabel","isValidPassword","loginButtonLabel","isLoginButtonDisabled","onLoginButtonClick","rememberMeLabel","isRememberMeChecked","onChangeRememberMe","props","passwordHidden","setPasswordHidden","useState","passwordInput","isRequired","type","id","name","validated","default","error","value","onChange","Object","isError","isHidden","icon","label","fieldId","autoFocus","variant","onClick","length","isChecked","isBlock","isDisabled","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/LoginPage/LoginForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Form, FormGroup, ActionGroup, FormHelperText } from '../Form';\nimport { TextInput } from '../TextInput';\nimport { Button } from '../Button';\nimport { Checkbox } from '../Checkbox';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { InputGroup } from '../InputGroup';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\n\nexport interface LoginFormProps extends React.HTMLProps<HTMLFormElement> {\n  /** Flag to indicate if the first dropdown item should not gain initial focus */\n  noAutoFocus?: boolean;\n  /** Additional classes added to the Login Main Body's Form */\n  className?: string;\n  /** Flag indicating the Helper Text is visible * */\n  showHelperText?: boolean;\n  /** Content displayed in the Helper Text component * */\n  helperText?: React.ReactNode;\n  /** Icon displayed to the left in the Helper Text */\n  helperTextIcon?: React.ReactNode;\n  /** Label for the Username Input Field */\n  usernameLabel?: string;\n  /** Value for the Username */\n  usernameValue?: string;\n  /** Function that handles the onChange event for the Username */\n  onChangeUsername?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the Username is valid */\n  isValidUsername?: boolean;\n  /** Label for the Password Input Field */\n  passwordLabel?: string;\n  /** Value for the Password */\n  passwordValue?: string;\n  /** Function that handles the onChange event for the Password */\n  onChangePassword?: (value: string, event: React.FormEvent<HTMLInputElement>) => void;\n  /** Flag indicating if the Password is valid */\n  isValidPassword?: boolean;\n  /** Flag indicating if the user can toggle hiding the password */\n  isShowPasswordEnabled?: boolean;\n  /** Accessible label for the show password button */\n  showPasswordAriaLabel?: string;\n  /** Accessible label for the hide password button */\n  hidePasswordAriaLabel?: string;\n  /** Label for the Log in Button Input */\n  loginButtonLabel?: string;\n  /** Flag indicating if the Login Button is disabled */\n  isLoginButtonDisabled?: boolean;\n  /** Function that is called when the Login button is clicked */\n  onLoginButtonClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** Label for the Remember Me Checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show. */\n  rememberMeLabel?: string;\n  /** Flag indicating if the remember me Checkbox is checked. */\n  isRememberMeChecked?: boolean;\n  /** Function that handles the onChange event for the Remember Me Checkbox */\n  onChangeRememberMe?: (checked: boolean, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport const LoginForm: React.FunctionComponent<LoginFormProps> = ({\n  noAutoFocus = false,\n  className = '',\n  showHelperText = false,\n  helperText = null,\n  helperTextIcon = null,\n  usernameLabel = 'Username',\n  usernameValue = '',\n  onChangeUsername = () => undefined as any,\n  isValidUsername = true,\n  passwordLabel = 'Password',\n  passwordValue = '',\n  onChangePassword = () => undefined as any,\n  isShowPasswordEnabled = false,\n  hidePasswordAriaLabel = 'Hide password',\n  showPasswordAriaLabel = 'Show password',\n  isValidPassword = true,\n  loginButtonLabel = 'Log In',\n  isLoginButtonDisabled = false,\n  onLoginButtonClick = () => undefined as any,\n  rememberMeLabel = '',\n  isRememberMeChecked = false,\n  onChangeRememberMe = () => undefined as any,\n  ...props\n}: LoginFormProps) => {\n  const [passwordHidden, setPasswordHidden] = React.useState(true);\n\n  const passwordInput = (\n    <TextInput\n      isRequired\n      type={passwordHidden ? 'password' : 'text'}\n      id=\"pf-login-password-id\"\n      name=\"pf-login-password-id\"\n      validated={isValidPassword ? ValidatedOptions.default : ValidatedOptions.error}\n      value={passwordValue}\n      onChange={onChangePassword}\n    />\n  );\n\n  return (\n    <Form className={className} {...props}>\n      <FormHelperText isError={!isValidUsername || !isValidPassword} isHidden={!showHelperText} icon={helperTextIcon}>\n        {helperText}\n      </FormHelperText>\n      <FormGroup\n        label={usernameLabel}\n        isRequired\n        validated={isValidUsername ? ValidatedOptions.default : ValidatedOptions.error}\n        fieldId=\"pf-login-username-id\"\n      >\n        <TextInput\n          autoFocus={!noAutoFocus}\n          id=\"pf-login-username-id\"\n          isRequired\n          validated={isValidUsername ? ValidatedOptions.default : ValidatedOptions.error}\n          type=\"text\"\n          name=\"pf-login-username-id\"\n          value={usernameValue}\n          onChange={onChangeUsername}\n        />\n      </FormGroup>\n      <FormGroup\n        label={passwordLabel}\n        isRequired\n        validated={isValidPassword ? ValidatedOptions.default : ValidatedOptions.error}\n        fieldId=\"pf-login-password-id\"\n      >\n        {isShowPasswordEnabled && (\n          <InputGroup>\n            {passwordInput}\n            <Button\n              variant=\"control\"\n              onClick={() => setPasswordHidden(!passwordHidden)}\n              aria-label={passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel}\n            >\n              {passwordHidden ? <EyeIcon /> : <EyeSlashIcon />}\n            </Button>\n          </InputGroup>\n        )}\n        {!isShowPasswordEnabled && passwordInput}\n      </FormGroup>\n      {rememberMeLabel.length > 0 && (\n        <FormGroup fieldId=\"pf-login-remember-me-id\">\n          <Checkbox\n            id=\"pf-login-remember-me-id\"\n            label={rememberMeLabel}\n            isChecked={isRememberMeChecked}\n            onChange={onChangeRememberMe}\n          />\n        </FormGroup>\n      )}\n      <ActionGroup>\n        <Button variant=\"primary\" type=\"submit\" onClick={onLoginButtonClick} isBlock isDisabled={isLoginButtonDisabled}>\n          {loginButtonLabel}\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n};\nLoginForm.displayName = 'LoginForm';\n"]},"metadata":{},"sourceType":"module"}