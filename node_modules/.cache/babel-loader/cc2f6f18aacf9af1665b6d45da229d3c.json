{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nexport var ExpandableSectionToggle = function ExpandableSectionToggle(_a) {\n  var children = _a.children,\n      _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      onToggle = _a.onToggle,\n      contentId = _a.contentId,\n      _a$direction = _a.direction,\n      direction = _a$direction === void 0 ? 'down' : _a$direction,\n      props = __rest(_a, [\"children\", \"className\", \"isExpanded\", \"onToggle\", \"contentId\", \"direction\"]);\n\n  return React.createElement(\"div\", Object.assign({}, props, {\n    className: css(styles.expandableSection, isExpanded && styles.modifiers.expanded, styles.modifiers.detached, className)\n  }), React.createElement(\"button\", {\n    className: css(styles.expandableSectionToggle),\n    type: \"button\",\n    \"aria-expanded\": isExpanded,\n    \"aria-controls\": contentId,\n    onClick: function onClick() {\n      return onToggle(!isExpanded);\n    }\n  }, React.createElement(\"span\", {\n    className: css(styles.expandableSectionToggleIcon, isExpanded && direction === 'up' && styles.modifiers.expandTop)\n  }, React.createElement(AngleRightIcon, {\n    \"aria-hidden\": true\n  })), React.createElement(\"span\", {\n    className: css(styles.expandableSectionToggleText)\n  }, children)));\n};\nExpandableSectionToggle.displayName = 'ExpandableSectionToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,8EAAnB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AAiBA,OAAO,IAAMC,uBAAuB,GAA0D,SAAjFA,uBAAiF,CAACC,EAAD,EAQ3D;MAPjCC,WAKkBD,GALlBC;qBAKkBD,GAJlBE;MAAAA,sCAAY;sBAIMF,GAHlBG;MAAAA,wCAAa;MACbC,WAEkBJ,GAFlBI;MACAC,YACkBL,GADlBK;qBACkBL,GAAlBM;MAAAA,sCAAY;MACTC,QAAKC,WAPqF,6EAOrF;;EAC0B,OAClCb,6CACMY,KADN,EACW;IACTL,SAAS,EAAEL,GAAG,CACZD,MAAM,CAACa,iBADK,EAEZN,UAAU,IAAIP,MAAM,CAACc,SAAP,CAAiBC,QAFnB,EAGZf,MAAM,CAACc,SAAP,CAAiBE,QAHL,EAIZV,SAJY;EADL,CADX,GASEP;IACEO,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACiB,uBAAR,CADhB;IAEEC,IAAI,EAAC,QAFP;IAEe,iBACEX,UAHjB;IAG2B,iBACVE,SAJjB;IAKEU,OAAO,EAAE;MAAA,OAAMX,QAAQ,CAAC,CAACD,UAAF,CAAd;IAAA;EALX,GAOER;IACEO,SAAS,EAAEL,GAAG,CACZD,MAAM,CAACoB,2BADK,EAEZb,UAAU,IAAIG,SAAS,KAAK,IAA5B,IAAoCV,MAAM,CAACc,SAAP,CAAiBO,SAFzC;EADhB,GAMEtB,oBAACG,cAAD,EAAe;IAAA;EAAA,CAAf,CANF,CAPF,EAeEH;IAAMO,SAAS,EAAEL,GAAG,CAACD,MAAM,CAACsB,2BAAR;EAApB,GAA2DjB,QAA3D,CAfF,CATF,CADkC;AA4BnC,CApCM;AAsCPF,uBAAuB,CAACoB,WAAxB,GAAsC,yBAAtC","names":["React","styles","css","AngleRightIcon","ExpandableSectionToggle","_a","children","className","isExpanded","onToggle","contentId","direction","props","__rest","expandableSection","modifiers","expanded","detached","expandableSectionToggle","type","onClick","expandableSectionToggleIcon","expandTop","expandableSectionToggleText","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ExpandableSection/ExpandableSectionToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ExpandableSection/expandable-section';\nimport { css } from '@patternfly/react-styles';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\n\nexport interface ExpandableSectionToggleProps extends React.HTMLProps<HTMLDivElement> {\n  /** Content rendered inside the expandable toggle. */\n  children?: React.ReactNode;\n  /** Additional classes added to the expandable toggle. */\n  className?: string;\n  /** Flag indicating if the expandable section is expanded. */\n  isExpanded?: boolean;\n  /** Callback function to toggle the expandable content. */\n  onToggle?: (isExpanded: boolean) => void;\n  /** ID of the toggle's respective expandable section content. */\n  contentId?: string;\n  /** Direction the toggle arrow should point when the expandable section is expanded. */\n  direction?: 'up' | 'down';\n}\n\nexport const ExpandableSectionToggle: React.FunctionComponent<ExpandableSectionToggleProps> = ({\n  children,\n  className = '',\n  isExpanded = false,\n  onToggle,\n  contentId,\n  direction = 'down',\n  ...props\n}: ExpandableSectionToggleProps) => (\n  <div\n    {...props}\n    className={css(\n      styles.expandableSection,\n      isExpanded && styles.modifiers.expanded,\n      styles.modifiers.detached,\n      className\n    )}\n  >\n    <button\n      className={css(styles.expandableSectionToggle)}\n      type=\"button\"\n      aria-expanded={isExpanded}\n      aria-controls={contentId}\n      onClick={() => onToggle(!isExpanded)}\n    >\n      <span\n        className={css(\n          styles.expandableSectionToggleIcon,\n          isExpanded && direction === 'up' && styles.modifiers.expandTop\n        )}\n      >\n        <AngleRightIcon aria-hidden />\n      </span>\n      <span className={css(styles.expandableSectionToggleText)}>{children}</span>\n    </button>\n  </div>\n);\n\nExpandableSectionToggle.displayName = 'ExpandableSectionToggle';\n"]},"metadata":{},"sourceType":"module"}