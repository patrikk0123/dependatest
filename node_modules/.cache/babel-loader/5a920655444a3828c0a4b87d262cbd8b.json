{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/BackToTop/back-to-top';\nimport { css } from '@patternfly/react-styles';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport { canUseDOM } from '../../helpers/util';\nimport { Button } from '../Button';\n\nconst BackToTopBase = _a => {\n  var {\n    className,\n    title = 'Back to top',\n    innerRef,\n    scrollableSelector,\n    isAlwaysVisible = false\n  } = _a,\n      props = __rest(_a, [\"className\", \"title\", \"innerRef\", \"scrollableSelector\", \"isAlwaysVisible\"]);\n\n  const [visible, setVisible] = React.useState(isAlwaysVisible);\n  React.useEffect(() => {\n    setVisible(isAlwaysVisible);\n  }, [isAlwaysVisible]);\n  const [scrollElement, setScrollElement] = React.useState(null);\n\n  const toggleVisible = () => {\n    const scrolled = scrollElement.scrollY ? scrollElement.scrollY : scrollElement.scrollTop;\n\n    if (!isAlwaysVisible) {\n      if (scrolled > 400) {\n        setVisible(true);\n      } else {\n        setVisible(false);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    const hasScrollSpy = Boolean(scrollableSelector);\n\n    if (hasScrollSpy) {\n      const scrollEl = document.querySelector(scrollableSelector);\n\n      if (!canUseDOM || !(scrollEl instanceof HTMLElement)) {\n        return;\n      }\n\n      setScrollElement(scrollEl);\n      scrollEl.addEventListener('scroll', toggleVisible);\n      return () => {\n        scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    } else {\n      if (!canUseDOM) {\n        return;\n      }\n\n      const scrollEl = window;\n      setScrollElement(scrollEl);\n      scrollEl.addEventListener('scroll', toggleVisible);\n      return () => {\n        scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    }\n  }, [scrollableSelector, toggleVisible]);\n\n  const handleClick = () => {\n    scrollElement.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n\n  return React.createElement(\"div\", Object.assign({\n    className: css(styles.backToTop, !visible && styles.modifiers.hidden, className),\n    ref: innerRef,\n    onClick: handleClick\n  }, props), React.createElement(Button, {\n    variant: \"primary\",\n    icon: React.createElement(AngleUpIcon, {\n      \"aria-hidden\": \"true\"\n    }),\n    iconPosition: \"right\"\n  }, title));\n};\n\nexport const BackToTop = React.forwardRef((props, ref) => React.createElement(BackToTopBase, Object.assign({\n  innerRef: ref\n}, props)));\nBackToTop.displayName = 'BackToTop';","map":{"version":3,"mappings":"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","names":["React","styles","css","AngleUpIcon","canUseDOM","Button","BackToTopBase","_a","className","title","innerRef","scrollableSelector","isAlwaysVisible","props","visible","setVisible","useState","useEffect","scrollElement","setScrollElement","toggleVisible","scrolled","scrollY","scrollTop","hasScrollSpy","Boolean","scrollEl","document","querySelector","HTMLElement","addEventListener","removeEventListener","window","handleClick","scrollTo","top","behavior","backToTop","modifiers","hidden","ref","onClick","variant","icon","iconPosition","BackToTop","forwardRef","Object","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/BackToTop/BackToTop.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/BackToTop/back-to-top';\nimport { css } from '@patternfly/react-styles';\nimport AngleUpIcon from '@patternfly/react-icons/dist/esm/icons/angle-up-icon';\nimport { canUseDOM } from '../../helpers/util';\nimport { Button } from '../Button';\n\ninterface BackToTopProps extends React.DetailedHTMLProps<React.HTMLProps<HTMLDivElement>, HTMLDivElement> {\n  /** Additional classes added to the back to top. */\n  className?: string;\n  /** Title to appear in back to top button. */\n  title?: string;\n  /** Forwarded ref */\n  innerRef?: React.Ref<any>;\n  /** Selector for the scrollable element to spy on. Not passing a selector defaults to spying on window scroll events. */\n  scrollableSelector?: string;\n  /** Flag to always show back to top button, defaults to false. */\n  isAlwaysVisible?: boolean;\n}\n\nconst BackToTopBase: React.FunctionComponent<BackToTopProps> = ({\n  className,\n  title = 'Back to top',\n  innerRef,\n  scrollableSelector,\n  isAlwaysVisible = false,\n  ...props\n}: BackToTopProps) => {\n  const [visible, setVisible] = React.useState(isAlwaysVisible);\n  React.useEffect(() => {\n    setVisible(isAlwaysVisible);\n  }, [isAlwaysVisible]);\n\n  const [scrollElement, setScrollElement] = React.useState(null);\n\n  const toggleVisible = () => {\n    const scrolled = scrollElement.scrollY ? scrollElement.scrollY : scrollElement.scrollTop;\n    if (!isAlwaysVisible) {\n      if (scrolled > 400) {\n        setVisible(true);\n      } else {\n        setVisible(false);\n      }\n    }\n  };\n\n  React.useEffect(() => {\n    const hasScrollSpy = Boolean(scrollableSelector);\n    if (hasScrollSpy) {\n      const scrollEl = document.querySelector(scrollableSelector) as HTMLElement;\n      if (!canUseDOM || !(scrollEl instanceof HTMLElement)) {\n        return;\n      }\n      setScrollElement(scrollEl);\n      scrollEl.addEventListener('scroll', toggleVisible);\n\n      return () => {\n        scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    } else {\n      if (!canUseDOM) {\n        return;\n      }\n      const scrollEl = window;\n      setScrollElement(scrollEl);\n      scrollEl.addEventListener('scroll', toggleVisible);\n\n      return () => {\n        scrollEl.removeEventListener('scroll', toggleVisible);\n      };\n    }\n  }, [scrollableSelector, toggleVisible]);\n\n  const handleClick = () => {\n    scrollElement.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  return (\n    <div\n      className={css(styles.backToTop, !visible && styles.modifiers.hidden, className)}\n      ref={innerRef}\n      onClick={handleClick}\n      {...props}\n    >\n      <Button variant=\"primary\" icon={<AngleUpIcon aria-hidden=\"true\" />} iconPosition=\"right\">\n        {title}\n      </Button>\n    </div>\n  );\n};\n\nexport const BackToTop = React.forwardRef((props: BackToTopProps, ref: React.Ref<any>) => (\n  <BackToTopBase innerRef={ref} {...props} />\n));\nBackToTop.displayName = 'BackToTop';\n"]},"metadata":{},"sourceType":"module"}