{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nimport * as React from 'react';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\nexport const DualListSelectorList = _a => {\n  var {\n    children\n  } = _a,\n      props = __rest(_a, [\"children\"]);\n\n  const {\n    setFocusedOption,\n    isTree,\n    ariaLabelledBy,\n    focusedOption,\n    displayOption,\n    selectedOptions,\n    id,\n    onOptionSelect,\n    options,\n    isDisabled\n  } = React.useContext(DualListSelectorListContext); // only called when options are passed via options prop\n\n  const onOptionClick = (e, index, id) => {\n    setFocusedOption(id);\n    onOptionSelect(e, index, id);\n  };\n\n  return React.createElement(\"ul\", Object.assign({\n    className: css(styles.dualListSelectorList),\n    role: isTree ? 'tree' : 'listbox',\n    \"aria-multiselectable\": \"true\",\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-activedescendant\": focusedOption,\n    \"aria-disabled\": isDisabled ? 'true' : undefined\n  }, props), options.length === 0 ? children : options.map((option, index) => {\n    if (displayOption(option)) {\n      return React.createElement(DualListSelectorListItem, {\n        key: index,\n        isSelected: selectedOptions.indexOf(index) !== -1,\n        id: `${id}-option-${index}`,\n        onOptionSelect: (e, id) => onOptionClick(e, index, id),\n        orderIndex: index,\n        isDisabled: isDisabled\n      }, option);\n    }\n\n    return;\n  }));\n};\nDualListSelectorList.displayName = 'DualListSelectorList';","map":{"version":3,"mappings":";AAAA,SAASA,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,6EAAnB;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,2BAAT,QAA4C,2BAA5C;AAMA,OAAO,MAAMC,oBAAoB,GAAwDC,EAAD,IAGxD;MAHyD;IACvFC;EADuF,IAC/ED;MACLE,KAAK,cAF+E,YAE/E;;EAER,MAAM;IACJC,gBADI;IAEJC,MAFI;IAGJC,cAHI;IAIJC,aAJI;IAKJC,aALI;IAMJC,eANI;IAOJC,EAPI;IAQJC,cARI;IASJC,OATI;IAUJC;EAVI,IAWFf,KAAK,CAACgB,UAAN,CAAiBf,2BAAjB,CAXJ,CAD8B,CAc9B;;EACA,MAAMgB,aAAa,GAAG,CAACC,CAAD,EAAgEC,KAAhE,EAA+EP,EAA/E,KAA6F;IACjHN,gBAAgB,CAACM,EAAD,CAAhB;IACAC,cAAc,CAACK,CAAD,EAAIC,KAAJ,EAAWP,EAAX,CAAd;EACD,CAHD;;EAKA,OACEZ;IACEoB,SAAS,EAAEvB,GAAG,CAACC,MAAM,CAACuB,oBAAR,CADhB;IAEEC,IAAI,EAAEf,MAAM,GAAG,MAAH,GAAY,SAF1B;IAEmC,wBACZ,MAHvB;IAG6B,mBACVC,cAJnB;IAIiC,yBACRC,aALzB;IAKsC,iBACrBM,UAAU,GAAG,MAAH,GAAYQ;EANvC,GAOMlB,KAPN,GASGS,OAAO,CAACU,MAAR,KAAmB,CAAnB,GACGpB,QADH,GAEGU,OAAO,CAACW,GAAR,CAAY,CAACC,MAAD,EAASP,KAAT,KAAkB;IAC5B,IAAIT,aAAa,CAACgB,MAAD,CAAjB,EAA2B;MACzB,OACE1B,oBAACD,wBAAD,EAAyB;QACvB4B,GAAG,EAAER,KADkB;QAEvBS,UAAU,EAAGjB,eAA4B,CAACkB,OAA7B,CAAqCV,KAArC,MAAgD,CAAC,CAFvC;QAGvBP,EAAE,EAAE,GAAGA,EAAE,WAAWO,KAAK,EAHF;QAIvBN,cAAc,EAAE,CAACK,CAAD,EAAIN,EAAJ,KAAWK,aAAa,CAACC,CAAD,EAAIC,KAAJ,EAAWP,EAAX,CAJjB;QAKvBkB,UAAU,EAAEX,KALW;QAMvBJ,UAAU,EAAEA;MANW,CAAzB,EAQGW,MARH,CADF;IAYD;;IACD;EACD,CAhBD,CAXN,CADF;AA+BD,CAtDM;AAuDPxB,oBAAoB,CAAC6B,WAArB,GAAmC,sBAAnC","names":["css","styles","DualListSelectorListItem","React","DualListSelectorListContext","DualListSelectorList","_a","children","props","setFocusedOption","isTree","ariaLabelledBy","focusedOption","displayOption","selectedOptions","id","onOptionSelect","options","isDisabled","useContext","onOptionClick","e","index","className","dualListSelectorList","role","undefined","length","map","option","key","isSelected","indexOf","orderIndex","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorList.tsx"],"sourcesContent":["import { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DualListSelector/dual-list-selector';\nimport { DualListSelectorListItem } from './DualListSelectorListItem';\nimport * as React from 'react';\nimport { DualListSelectorListContext } from './DualListSelectorContext';\n\nexport interface DualListSelectorListProps extends React.HTMLProps<HTMLUListElement> {\n  children?: React.ReactNode;\n}\n\nexport const DualListSelectorList: React.FunctionComponent<DualListSelectorListProps> = ({\n  children,\n  ...props\n}: DualListSelectorListProps) => {\n  const {\n    setFocusedOption,\n    isTree,\n    ariaLabelledBy,\n    focusedOption,\n    displayOption,\n    selectedOptions,\n    id,\n    onOptionSelect,\n    options,\n    isDisabled\n  } = React.useContext(DualListSelectorListContext);\n\n  // only called when options are passed via options prop\n  const onOptionClick = (e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, index: number, id: string) => {\n    setFocusedOption(id);\n    onOptionSelect(e, index, id);\n  };\n\n  return (\n    <ul\n      className={css(styles.dualListSelectorList)}\n      role={isTree ? 'tree' : 'listbox'}\n      aria-multiselectable=\"true\"\n      aria-labelledby={ariaLabelledBy}\n      aria-activedescendant={focusedOption}\n      aria-disabled={isDisabled ? 'true' : undefined}\n      {...props}\n    >\n      {options.length === 0\n        ? children\n        : options.map((option, index) => {\n            if (displayOption(option)) {\n              return (\n                <DualListSelectorListItem\n                  key={index}\n                  isSelected={(selectedOptions as number[]).indexOf(index) !== -1}\n                  id={`${id}-option-${index}`}\n                  onOptionSelect={(e, id) => onOptionClick(e, index, id)}\n                  orderIndex={index}\n                  isDisabled={isDisabled}\n                >\n                  {option}\n                </DualListSelectorListItem>\n              );\n            }\n            return;\n          })}\n    </ul>\n  );\n};\nDualListSelectorList.displayName = 'DualListSelectorList';\n"]},"metadata":{},"sourceType":"module"}