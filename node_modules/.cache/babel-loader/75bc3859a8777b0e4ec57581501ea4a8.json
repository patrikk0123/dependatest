{"ast":null,"code":"import _slicedToArray from\"/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/**\n * Q (RSQL) param helper\n *\n * Only ';' is supported at this moment\n *\n * @example\n * user.username=like=\"%u1%\";\n * filename=like=\"%te_t%\";\n * filename=like=\"%te%t%\"\n * filename=notlike=\"%test%\";\n * status==REJECTED;\n * temporaryBuild==FALSE;\n * status!=CANCELLED;\n *\n */ /**\n * Operator =like= is converted to =notlike= automatically when qValue starts with ! character,\n * there is no need to declare it manually.\n */ /**\n * List of all supported RSQL operators.\n */var qParamSupportedOperators=['=like=','=notlike=','==','!='];/**\n * @example\n * {\n *   name: ['\"%t1%\"', '\"%t2%\"'],\n *   status: ['CANCELLED', 'SYSTEM_ERROR']\n * }\n */ /**\n * @param qParamString RSQL string: filename=like=\"%te%t%\";status!=CANCELLED\n * @returns Array of individual RSQL items: [filename=like=\"%te%t%\", status!=CANCELLED]\n */var parseQParamShallow=function parseQParamShallow(qParamString){var qParamArray;if(qParamString.indexOf(';')>-1){qParamArray=qParamString.split(';');}else if(qParamString){qParamArray=[qParamString];}else{qParamArray=[];}return qParamArray;};var constructQParamItem=function constructQParamItem(id,value,operator){switch(operator){case'=like=':// #support =notlike=\n// value does NOT contain \"% characters yet, they need to be added\n// use '=notlike=' when '=like=\"%!' exists, otherwise use '=like='\nreturn(id+operator+'\"%'+value+'%\"').replace('=like=\"%!','=notlike=\"%');default:return\"\".concat(id).concat(operator).concat(value);}};/**\n * @returns\n * 1) new Q string containing new param\n * 2) null when Q param is already contained in Q string\n */export var addQParamItem=function addQParamItem(id,value,operator,qParam){var qParamItems=parseQParamShallow(qParam);var newItem=constructQParamItem(id,value,operator);// prevent duplicities\nif(qParamItems.indexOf(newItem)===-1){qParamItems.push(newItem);}else{return null;}return qParamItems.join(';');};/**\n * @param qParam - RSQL string: filename=like=\"%te%t%\";status!=CANCELLED\n * @returns\n * 1) New Q string without specified param\n * 2) Empty string when last param was removed\n */export var removeQParamItem=function removeQParamItem(id,value,operator,qParam){var qParamItems=parseQParamShallow(qParam);// #support =notlike=\n// value already contains \"% characters\n// use '=notlike=' when '=like=!' exists, otherwise use '=like='\nvar removeItem=(id+operator+value).replace('=like=!','=notlike=');var removeItemIndex=qParamItems.indexOf(removeItem);if(removeItemIndex>-1){qParamItems.splice(removeItemIndex,1);}else{// #log\nconsole.error(\"\".concat(removeItem,\" removing failed, it does not exist\"));}return qParamItems.join(';');};/**\n * @param qParam - RSQL string: filename=like=\"%te%t%\";status!=CANCELLED\n * @returns Object representing individual RSQL items deeply parsed:\n * {\n *   name: ['\"%te%t%\"'],\n *   status: ['CANCELLED']\n * }\n */export var parseQParamDeep=function parseQParamDeep(qParam){var qParamObject={};var qParamItems=parseQParamShallow(qParam);// loop Q Params Items\nfor(var i=0;i<qParamItems.length;i++){var isOperatorFound=false;// loop supported operators\nfor(var j=0;j<qParamSupportedOperators.length;j++){var qOperator=qParamSupportedOperators[j];if(qParamItems[i].indexOf(qOperator)>-1){isOperatorFound=true;var _qParamItems$i$split=qParamItems[i].split(qOperator),_qParamItems$i$split2=_slicedToArray(_qParamItems$i$split,2),qKey=_qParamItems$i$split2[0],qValue=_qParamItems$i$split2[1];// add ! character\n// #support =notlike=\nif(qOperator==='=notlike='){qValue='!'+qValue;}if(qParamObject[qKey]){qParamObject[qKey].push(qValue);}else{qParamObject[qKey]=[qValue];}}}if(!isOperatorFound){// #log\nconsole.error(\"\".concat(qParamItems[i],\" does not contain any valid operator, supported operators are: \").concat(qParamSupportedOperators));}}return qParamObject;};","map":{"version":3,"names":["qParamSupportedOperators","parseQParamShallow","qParamString","qParamArray","indexOf","split","constructQParamItem","id","value","operator","replace","addQParamItem","qParam","qParamItems","newItem","push","join","removeQParamItem","removeItem","removeItemIndex","splice","console","error","parseQParamDeep","qParamObject","i","length","isOperatorFound","j","qOperator","qKey","qValue"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/src/utils/qParamHelper.ts"],"sourcesContent":["/**\n * Q (RSQL) param helper\n *\n * Only ';' is supported at this moment\n *\n * @example\n * user.username=like=\"%u1%\";\n * filename=like=\"%te_t%\";\n * filename=like=\"%te%t%\"\n * filename=notlike=\"%test%\";\n * status==REJECTED;\n * temporaryBuild==FALSE;\n * status!=CANCELLED;\n *\n */\n\n/**\n * Operator =like= is converted to =notlike= automatically when qValue starts with ! character,\n * there is no need to declare it manually.\n */\nexport type IQParamOperators = '=like=' | '==' | '!=';\n\n/**\n * List of all supported RSQL operators.\n */\nconst qParamSupportedOperators = ['=like=', '=notlike=', '==', '!='];\n\n/**\n * @example\n * {\n *   name: ['\"%t1%\"', '\"%t2%\"'],\n *   status: ['CANCELLED', 'SYSTEM_ERROR']\n * }\n */\nexport interface IQParamObject {\n  [key: string]: string[];\n}\n\n/**\n * @param qParamString RSQL string: filename=like=\"%te%t%\";status!=CANCELLED\n * @returns Array of individual RSQL items: [filename=like=\"%te%t%\", status!=CANCELLED]\n */\nconst parseQParamShallow = (qParamString: string): string[] => {\n  let qParamArray: string[];\n  if (qParamString.indexOf(';') > -1) {\n    qParamArray = qParamString.split(';');\n  } else if (qParamString) {\n    qParamArray = [qParamString];\n  } else {\n    qParamArray = [];\n  }\n  return qParamArray;\n};\n\nconst constructQParamItem = (id: string, value: string, operator: IQParamOperators): string => {\n  switch (operator) {\n    case '=like=':\n      // #support =notlike=\n      // value does NOT contain \"% characters yet, they need to be added\n      // use '=notlike=' when '=like=\"%!' exists, otherwise use '=like='\n      return (id + operator + '\"%' + value + '%\"').replace('=like=\"%!', '=notlike=\"%');\n    default:\n      return `${id}${operator}${value}`;\n  }\n};\n\n/**\n * @returns\n * 1) new Q string containing new param\n * 2) null when Q param is already contained in Q string\n */\nexport const addQParamItem = (id: string, value: string, operator: IQParamOperators, qParam: string): string | null => {\n  const qParamItems = parseQParamShallow(qParam);\n  const newItem = constructQParamItem(id, value, operator);\n\n  // prevent duplicities\n  if (qParamItems.indexOf(newItem) === -1) {\n    qParamItems.push(newItem);\n  } else {\n    return null;\n  }\n\n  return qParamItems.join(';');\n};\n\n/**\n * @param qParam - RSQL string: filename=like=\"%te%t%\";status!=CANCELLED\n * @returns\n * 1) New Q string without specified param\n * 2) Empty string when last param was removed\n */\nexport const removeQParamItem = (id: string, value: string, operator: IQParamOperators, qParam: string): string => {\n  const qParamItems = parseQParamShallow(qParam);\n\n  // #support =notlike=\n  // value already contains \"% characters\n  // use '=notlike=' when '=like=!' exists, otherwise use '=like='\n  const removeItem = (id + operator + value).replace('=like=!', '=notlike=');\n  const removeItemIndex = qParamItems.indexOf(removeItem);\n\n  if (removeItemIndex > -1) {\n    qParamItems.splice(removeItemIndex, 1);\n  } else {\n    // #log\n    console.error(`${removeItem} removing failed, it does not exist`);\n  }\n\n  return qParamItems.join(';');\n};\n\n/**\n * @param qParam - RSQL string: filename=like=\"%te%t%\";status!=CANCELLED\n * @returns Object representing individual RSQL items deeply parsed:\n * {\n *   name: ['\"%te%t%\"'],\n *   status: ['CANCELLED']\n * }\n */\nexport const parseQParamDeep = (qParam: string): IQParamObject => {\n  let qParamObject: IQParamObject = {};\n\n  let qParamItems = parseQParamShallow(qParam);\n\n  // loop Q Params Items\n  for (let i = 0; i < qParamItems.length; i++) {\n    let isOperatorFound = false;\n\n    // loop supported operators\n    for (let j = 0; j < qParamSupportedOperators.length; j++) {\n      const qOperator = qParamSupportedOperators[j];\n\n      if (qParamItems[i].indexOf(qOperator) > -1) {\n        isOperatorFound = true;\n        let [qKey, qValue] = qParamItems[i].split(qOperator);\n\n        // add ! character\n        // #support =notlike=\n        if (qOperator === '=notlike=') {\n          qValue = '!' + qValue;\n        }\n\n        if (qParamObject[qKey]) {\n          qParamObject[qKey].push(qValue);\n        } else {\n          qParamObject[qKey] = [qValue];\n        }\n      }\n    }\n    if (!isOperatorFound) {\n      // #log\n      console.error(\n        `${qParamItems[i]} does not contain any valid operator, supported operators are: ${qParamSupportedOperators}`\n      );\n    }\n  }\n  return qParamObject;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}