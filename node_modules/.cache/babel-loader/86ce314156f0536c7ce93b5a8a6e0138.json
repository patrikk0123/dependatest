{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const CardContext = React.createContext({\n  cardId: '',\n  registerTitleId: () => {},\n  isExpanded: false\n});\nexport const Card = _a => {\n  var {\n    children = null,\n    id = '',\n    className = '',\n    component = 'article',\n    isHoverable = false,\n    isCompact = false,\n    isSelectable = false,\n    isSelectableRaised = false,\n    isSelected = false,\n    isDisabledRaised = false,\n    isFlat = false,\n    isExpanded = false,\n    isRounded = false,\n    isLarge = false,\n    isFullHeight = false,\n    isPlain = false,\n    ouiaId,\n    ouiaSafe = true,\n    hasSelectableInput = false,\n    selectableInputAriaLabel,\n    onSelectableInputChange = () => {}\n  } = _a,\n      props = __rest(_a, [\"children\", \"id\", \"className\", \"component\", \"isHoverable\", \"isCompact\", \"isSelectable\", \"isSelectableRaised\", \"isSelected\", \"isDisabledRaised\", \"isFlat\", \"isExpanded\", \"isRounded\", \"isLarge\", \"isFullHeight\", \"isPlain\", \"ouiaId\", \"ouiaSafe\", \"hasSelectableInput\", \"selectableInputAriaLabel\", \"onSelectableInputChange\"]);\n\n  const Component = component;\n  const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);\n  const [titleId, setTitleId] = React.useState('');\n  const [ariaProps, setAriaProps] = React.useState();\n\n  if (isCompact && isLarge) {\n    // eslint-disable-next-line no-console\n    console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n    isLarge = false;\n  }\n\n  const getSelectableModifiers = () => {\n    if (isDisabledRaised) {\n      return css(styles.modifiers.nonSelectableRaised);\n    }\n\n    if (isSelectableRaised) {\n      return css(styles.modifiers.selectableRaised, isSelected && styles.modifiers.selectedRaised);\n    }\n\n    if (isSelectable || isHoverable) {\n      return css(styles.modifiers.selectable, isSelected && styles.modifiers.selected);\n    }\n\n    return '';\n  };\n\n  const containsCardTitleChildRef = React.useRef(false);\n\n  const registerTitleId = id => {\n    setTitleId(id);\n    containsCardTitleChildRef.current = !!id;\n  };\n\n  React.useEffect(() => {\n    if (selectableInputAriaLabel) {\n      setAriaProps({\n        'aria-label': selectableInputAriaLabel\n      });\n    } else if (titleId) {\n      setAriaProps({\n        'aria-labelledby': titleId\n      });\n    } else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n      setAriaProps({}); // eslint-disable-next-line no-console\n\n      console.warn('If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed');\n    }\n  }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n  return React.createElement(CardContext.Provider, {\n    value: {\n      cardId: id,\n      registerTitleId,\n      isExpanded\n    }\n  }, hasSelectableInput && React.createElement(\"input\", Object.assign({\n    className: \"pf-screen-reader\",\n    id: `${id}-input`\n  }, ariaProps, {\n    type: \"checkbox\",\n    checked: isSelected,\n    onChange: event => onSelectableInputChange(id, event),\n    disabled: isDisabledRaised,\n    tabIndex: -1\n  })), React.createElement(Component, Object.assign({\n    id: id,\n    className: css(styles.card, isCompact && styles.modifiers.compact, isExpanded && styles.modifiers.expanded, isFlat && styles.modifiers.flat, isRounded && styles.modifiers.rounded, isLarge && styles.modifiers.displayLg, isFullHeight && styles.modifiers.fullHeight, isPlain && styles.modifiers.plain, getSelectableModifiers(), className),\n    tabIndex: isSelectable || isSelectableRaised ? '0' : undefined\n  }, props, ouiaProps), children));\n};\nCard.displayName = 'Card';","map":{"version":3,"mappings":"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","names":["React","styles","css","useOUIAProps","CardContext","createContext","cardId","registerTitleId","isExpanded","Card","_a","children","id","className","component","isHoverable","isCompact","isSelectable","isSelectableRaised","isSelected","isDisabledRaised","isFlat","isRounded","isLarge","isFullHeight","isPlain","ouiaId","ouiaSafe","hasSelectableInput","selectableInputAriaLabel","onSelectableInputChange","props","Component","ouiaProps","displayName","titleId","setTitleId","useState","ariaProps","setAriaProps","console","warn","getSelectableModifiers","modifiers","nonSelectableRaised","selectableRaised","selectedRaised","selectable","selected","containsCardTitleChildRef","useRef","current","useEffect","Provider","value","type","checked","onChange","event","disabled","tabIndex","Object","card","compact","expanded","flat","rounded","displayLg","fullHeight","plain","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Card/Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Card/card';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps, OUIAProps } from '../../helpers';\n\nexport interface CardProps extends React.HTMLProps<HTMLElement>, OUIAProps {\n  /** Content rendered inside the Card */\n  children?: React.ReactNode;\n  /** ID of the Card. Also passed back in the CardHeader onExpand callback. */\n  id?: string;\n  /** Additional classes added to the Card */\n  className?: string;\n  /** Sets the base component to render. defaults to article */\n  component?: keyof JSX.IntrinsicElements;\n  /** @deprecated to make a card hoverable, use isSelectable or isSelectableRaised. */\n  isHoverable?: boolean;\n  /** Modifies the card to include compact styling. Should not be used with isLarge. */\n  isCompact?: boolean;\n  /** Modifies the card to include selectable styling */\n  isSelectable?: boolean;\n  /** @beta Specifies the card is selectable, and applies the new raised styling on hover and select */\n  isSelectableRaised?: boolean;\n  /** Modifies the card to include selected styling */\n  isSelected?: boolean;\n  /** @beta Modifies a raised selectable card to have disabled styling */\n  isDisabledRaised?: boolean;\n  /** Modifies the card to include flat styling */\n  isFlat?: boolean;\n  /** Modifies the card to include rounded styling */\n  isRounded?: boolean;\n  /** Modifies the card to be large. Should not be used with isCompact. */\n  isLarge?: boolean;\n  /** Cause component to consume the available height of its container */\n  isFullHeight?: boolean;\n  /** Modifies the card to include plain styling; this removes border and background */\n  isPlain?: boolean;\n  /** Flag indicating if a card is expanded. Modifies the card to be expandable. */\n  isExpanded?: boolean;\n  /** Flag indicating that the card should render a hidden input to make it selectable */\n  hasSelectableInput?: boolean;\n  /** Aria label to apply to the selectable input if one is rendered */\n  selectableInputAriaLabel?: string;\n  /** Callback that executes when the selectable input is changed */\n  onSelectableInputChange?: (labelledBy: string, event: React.FormEvent<HTMLInputElement>) => void;\n}\n\ninterface CardContextProps {\n  cardId: string;\n  registerTitleId: (id: string) => void;\n  isExpanded: boolean;\n}\n\ninterface AriaProps {\n  'aria-label'?: string;\n  'aria-labelledby'?: string;\n}\n\nexport const CardContext = React.createContext<Partial<CardContextProps>>({\n  cardId: '',\n  registerTitleId: () => {},\n  isExpanded: false\n});\n\nexport const Card: React.FunctionComponent<CardProps> = ({\n  children = null,\n  id = '',\n  className = '',\n  component = 'article',\n  isHoverable = false,\n  isCompact = false,\n  isSelectable = false,\n  isSelectableRaised = false,\n  isSelected = false,\n  isDisabledRaised = false,\n  isFlat = false,\n  isExpanded = false,\n  isRounded = false,\n  isLarge = false,\n  isFullHeight = false,\n  isPlain = false,\n  ouiaId,\n  ouiaSafe = true,\n  hasSelectableInput = false,\n  selectableInputAriaLabel,\n  onSelectableInputChange = () => {},\n  ...props\n}: CardProps) => {\n  const Component = component as any;\n  const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);\n  const [titleId, setTitleId] = React.useState('');\n  const [ariaProps, setAriaProps] = React.useState<AriaProps>();\n\n  if (isCompact && isLarge) {\n    // eslint-disable-next-line no-console\n    console.warn('Card: Cannot use isCompact with isLarge. Defaulting to isCompact');\n    isLarge = false;\n  }\n\n  const getSelectableModifiers = () => {\n    if (isDisabledRaised) {\n      return css(styles.modifiers.nonSelectableRaised);\n    }\n    if (isSelectableRaised) {\n      return css(styles.modifiers.selectableRaised, isSelected && styles.modifiers.selectedRaised);\n    }\n    if (isSelectable || isHoverable) {\n      return css(styles.modifiers.selectable, isSelected && styles.modifiers.selected);\n    }\n    return '';\n  };\n\n  const containsCardTitleChildRef = React.useRef(false);\n\n  const registerTitleId = (id: string) => {\n    setTitleId(id);\n    containsCardTitleChildRef.current = !!id;\n  };\n\n  React.useEffect(() => {\n    if (selectableInputAriaLabel) {\n      setAriaProps({ 'aria-label': selectableInputAriaLabel });\n    } else if (titleId) {\n      setAriaProps({ 'aria-labelledby': titleId });\n    } else if (hasSelectableInput && !containsCardTitleChildRef.current) {\n      setAriaProps({});\n      // eslint-disable-next-line no-console\n      console.warn(\n        'If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed'\n      );\n    }\n  }, [hasSelectableInput, selectableInputAriaLabel, titleId]);\n\n  return (\n    <CardContext.Provider\n      value={{\n        cardId: id,\n        registerTitleId,\n        isExpanded\n      }}\n    >\n      {hasSelectableInput && (\n        <input\n          className=\"pf-screen-reader\"\n          id={`${id}-input`}\n          {...ariaProps}\n          type=\"checkbox\"\n          checked={isSelected}\n          onChange={event => onSelectableInputChange(id, event)}\n          disabled={isDisabledRaised}\n          tabIndex={-1}\n        />\n      )}\n      <Component\n        id={id}\n        className={css(\n          styles.card,\n          isCompact && styles.modifiers.compact,\n          isExpanded && styles.modifiers.expanded,\n          isFlat && styles.modifiers.flat,\n          isRounded && styles.modifiers.rounded,\n          isLarge && styles.modifiers.displayLg,\n          isFullHeight && styles.modifiers.fullHeight,\n          isPlain && styles.modifiers.plain,\n          getSelectableModifiers(),\n          className\n        )}\n        tabIndex={isSelectable || isSelectableRaised ? '0' : undefined}\n        {...props}\n        {...ouiaProps}\n      >\n        {children}\n      </Component>\n    </CardContext.Provider>\n  );\n};\nCard.displayName = 'Card';\n"]},"metadata":{},"sourceType":"module"}