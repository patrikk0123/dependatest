{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Tooltip } from '../Tooltip';\nexport var DualListSelectorControlBase = function DualListSelectorControlBase(_a) {\n  var innerRef = _a.innerRef,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      className = _a.className,\n      ariaLabel = _a['aria-label'],\n      _a$isDisabled = _a.isDisabled,\n      isDisabled = _a$isDisabled === void 0 ? true : _a$isDisabled,\n      _a$onClick = _a.onClick,\n      onClick = _a$onClick === void 0 ? function () {} : _a$onClick,\n      tooltipContent = _a.tooltipContent,\n      _a$tooltipProps = _a.tooltipProps,\n      tooltipProps = _a$tooltipProps === void 0 ? {} : _a$tooltipProps,\n      props = __rest(_a, [\"innerRef\", \"children\", \"className\", 'aria-label', \"isDisabled\", \"onClick\", \"tooltipContent\", \"tooltipProps\"]);\n\n  var ref = innerRef || React.useRef(null);\n  return React.createElement(\"div\", Object.assign({\n    className: css('pf-c-dual-list-selector__controls-item', className)\n  }, props), React.createElement(Button, {\n    isDisabled: isDisabled,\n    \"aria-disabled\": isDisabled,\n    variant: ButtonVariant.plain,\n    onClick: onClick,\n    \"aria-label\": ariaLabel,\n    tabIndex: -1,\n    ref: ref\n  }, children), tooltipContent && React.createElement(Tooltip, Object.assign({\n    content: tooltipContent,\n    position: \"left\",\n    reference: ref\n  }, tooltipProps)));\n};\nDualListSelectorControlBase.displayName = 'DualListSelectorControlBase';\nexport var DualListSelectorControl = React.forwardRef(function (props, ref) {\n  return React.createElement(DualListSelectorControlBase, Object.assign({\n    innerRef: ref\n  }, props));\n});\nDualListSelectorControl.displayName = 'DualListSelectorControl';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,MAAT,EAAiBC,aAAjB,QAAsC,WAAtC;AACA,SAASC,OAAT,QAAwB,YAAxB;AAqBA,OAAO,IAAMC,2BAA2B,GAA0D,SAArFA,2BAAqF,CAACC,EAAD,EAU/D;MATjCC,WAOwBD,GAPxBC;oBAOwBD,GANxBE;MAAAA,oCAAW;MACXC,YAKwBH,GALxBG;MACcC,YAIUJ,GAJxB;sBAIwBA,GAHxBK;MAAAA,wCAAa;mBAGWL,GAFxBM;MAAAA,kCAAU,YAAK,CAAG;MAClBC,iBACwBP,GADxBO;wBACwBP,GAAxBQ;MAAAA,4CAAe;MACZC,QAAKC,WATyF,8GASzF;;EAER,IAAMC,GAAG,GAAGV,QAAQ,IAAIP,KAAK,CAACkB,MAAN,CAAa,IAAb,CAAxB;EACA,OACElB;IAAKS,SAAS,EAAER,GAAG,CAAC,wCAAD,EAA2CQ,SAA3C;EAAnB,GAA8EM,KAA9E,GACEf,oBAACE,MAAD,EAAO;IACLS,UAAU,EAAEA,UADP;IACiB,iBACPA,UAFV;IAGLQ,OAAO,EAAEhB,aAAa,CAACiB,KAHlB;IAILR,OAAO,EAAEA,OAJJ;IAIW,cACJF,SALP;IAMLW,QAAQ,EAAE,CAAC,CANN;IAOLJ,GAAG,EAAEA;EAPA,CAAP,EASGT,QATH,CADF,EAYGK,cAAc,IAAIb,oBAACI,OAAD,EAAQkB;IAACC,OAAO,EAAEV,cAAV;IAA0BW,QAAQ,EAAC,MAAnC;IAA0CC,SAAS,EAAER;EAArD,GAA8DH,YAA9D,CAAR,CAZrB,CADF;AAgBD,CA5BM;AA6BPT,2BAA2B,CAACqB,WAA5B,GAA0C,6BAA1C;AAEA,OAAO,IAAMC,uBAAuB,GAAG3B,KAAK,CAAC4B,UAAN,CAAiB,UAACb,KAAD,EAAsCE,GAAtC;EAAA,OACtDjB,oBAACK,2BAAD,EAA4BiB;IAACf,QAAQ,EAAEU;EAAX,GAAoBF,KAApB,CAA5B,CADsD;AAAA,CAAjB,CAAhC;AAIPY,uBAAuB,CAACD,WAAxB,GAAsC,yBAAtC","names":["React","css","Button","ButtonVariant","Tooltip","DualListSelectorControlBase","_a","innerRef","children","className","ariaLabel","isDisabled","onClick","tooltipContent","tooltipProps","props","__rest","ref","useRef","variant","plain","tabIndex","Object","content","position","reference","displayName","DualListSelectorControl","forwardRef"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/DualListSelector/DualListSelectorControl.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Button, ButtonVariant } from '../Button';\nimport { Tooltip } from '../Tooltip';\n\nexport interface DualListSelectorControlProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onClick'> {\n  /** Content to be rendered in the dual list selector control. */\n  children?: React.ReactNode;\n  /** @hide forwarded ref */\n  innerRef?: React.Ref<any>;\n  /** Flag indicating the control is disabled. */\n  isDisabled?: boolean;\n  /** Additional classes applied to the dual list selector control. */\n  className?: string;\n  /** Callback fired when dual list selector control is selected. */\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  /** Accessible label for the dual list selector control. */\n  'aria-label'?: string;\n  /** Content to be displayed in a tooltip on hover of control. */\n  tooltipContent?: React.ReactNode;\n  /** Additional tooltip properties passed to the tooltip. */\n  tooltipProps?: any;\n}\n\nexport const DualListSelectorControlBase: React.FunctionComponent<DualListSelectorControlProps> = ({\n  innerRef,\n  children = null,\n  className,\n  'aria-label': ariaLabel,\n  isDisabled = true,\n  onClick = () => {},\n  tooltipContent,\n  tooltipProps = {} as any,\n  ...props\n}: DualListSelectorControlProps) => {\n  const ref = innerRef || React.useRef(null);\n  return (\n    <div className={css('pf-c-dual-list-selector__controls-item', className)} {...props}>\n      <Button\n        isDisabled={isDisabled}\n        aria-disabled={isDisabled}\n        variant={ButtonVariant.plain}\n        onClick={onClick}\n        aria-label={ariaLabel}\n        tabIndex={-1}\n        ref={ref}\n      >\n        {children}\n      </Button>\n      {tooltipContent && <Tooltip content={tooltipContent} position=\"left\" reference={ref} {...tooltipProps} />}\n    </div>\n  );\n};\nDualListSelectorControlBase.displayName = 'DualListSelectorControlBase';\n\nexport const DualListSelectorControl = React.forwardRef((props: DualListSelectorControlProps, ref: React.Ref<any>) => (\n  <DualListSelectorControlBase innerRef={ref} {...props} />\n));\n\nDualListSelectorControl.displayName = 'DualListSelectorControl';\n"]},"metadata":{},"sourceType":"module"}