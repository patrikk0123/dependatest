{"ast":null,"code":"import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nexport var collapsible = function collapsible(value, _ref) {\n  var rowIndex = _ref.rowIndex,\n      columnIndex = _ref.columnIndex,\n      rowData = _ref.rowData,\n      column = _ref.column,\n      property = _ref.property;\n  var _column$extraParams = column.extraParams,\n      onCollapse = _column$extraParams.onCollapse,\n      _column$extraParams$r = _column$extraParams.rowLabeledBy,\n      rowLabeledBy = _column$extraParams$r === void 0 ? 'simple-node' : _column$extraParams$r,\n      _column$extraParams$e = _column$extraParams.expandId,\n      expandId = _column$extraParams$e === void 0 ? 'expand-toggle' : _column$extraParams$e,\n      allRowsExpanded = _column$extraParams.allRowsExpanded,\n      collapseAllAriaLabel = _column$extraParams.collapseAllAriaLabel;\n  var extraData = {\n    rowIndex: rowIndex,\n    columnIndex: columnIndex,\n    column: column,\n    property: property\n  };\n  var rowId = rowIndex !== undefined ? rowIndex : -1;\n  var customProps = Object.assign({}, rowId !== -1 ? {\n    isOpen: rowData === null || rowData === void 0 ? void 0 : rowData.isOpen,\n    'aria-labelledby': \"\".concat(rowLabeledBy).concat(rowId, \" \").concat(expandId).concat(rowId)\n  } : {\n    isOpen: allRowsExpanded,\n    'aria-label': collapseAllAriaLabel || 'Expand all rows'\n  });\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n\n  function onToggle(event) {\n    var open = rowData ? !rowData.isOpen : !allRowsExpanded; // tslint:disable-next-line:no-unused-expression\n\n    onCollapse && onCollapse(event, rowIndex, open, rowData, extraData);\n  }\n\n  return {\n    className: ((rowData === null || rowData === void 0 ? void 0 : rowData.isOpen) !== undefined || rowId === -1) && css(styles.tableToggle),\n    isVisible: !(rowData === null || rowData === void 0 ? void 0 : rowData.fullWidth),\n    children: React.createElement(CollapseColumn, Object.assign({\n      \"aria-labelledby\": \"\".concat(rowLabeledBy).concat(rowId, \" \").concat(expandId).concat(rowId),\n      onToggle: onToggle,\n      id: expandId + rowId\n    }, customProps), value)\n  };\n};\nexport var expandable = function expandable(value, _ref2) {\n  var rowData = _ref2.rowData;\n  return rowData && rowData.hasOwnProperty('parent') ? React.createElement(ExpandableRowContent, null, value) : value;\n};\nexport var expandedRow = function expandedRow(colSpan) {\n  var expandedRowFormatter = function expandedRowFormatter(value, _ref3) {\n    var columnIndex = _ref3.columnIndex,\n        rowIndex = _ref3.rowIndex,\n        rowData = _ref3.rowData,\n        _ref3$column$extraPar = _ref3.column.extraParams.contentId,\n        contentId = _ref3$column$extraPar === void 0 ? 'expanded-content' : _ref3$column$extraPar;\n    return value && rowData.hasOwnProperty('parent') && {\n      // todo: rewrite this logic, it is not type safe\n      colSpan: !rowData.cells || rowData.cells.length === 1 ? colSpan + !!rowData.fullWidth : 1,\n      id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n      className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n  };\n\n  return expandedRowFormatter;\n};","map":{"version":3,"mappings":"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","names":["React","css","styles","CollapseColumn","ExpandableRowContent","collapsible","value","rowIndex","columnIndex","rowData","column","property","extraParams","onCollapse","rowLabeledBy","expandId","allRowsExpanded","collapseAllAriaLabel","extraData","rowId","undefined","customProps","isOpen","onToggle","event","open","className","tableToggle","isVisible","fullWidth","children","Object","id","expandable","hasOwnProperty","expandedRow","colSpan","expandedRowFormatter","contentId","cells","length","noPadding","modifiers"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-table/src/components/Table/utils/decorators/collapsible.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Table/table';\nimport { CollapseColumn } from '../../CollapseColumn';\nimport { ExpandableRowContent } from '../../ExpandableRowContent';\nimport { IExtra, IFormatterValueType, IFormatter, decoratorReturnType } from '../../TableTypes';\n\nexport const collapsible: IFormatter = (\n  value: IFormatterValueType,\n  { rowIndex, columnIndex, rowData, column, property }: IExtra\n) => {\n  const {\n    extraParams: {\n      onCollapse,\n      rowLabeledBy = 'simple-node',\n      expandId = 'expand-toggle',\n      allRowsExpanded,\n      collapseAllAriaLabel\n    }\n  } = column;\n  const extraData = {\n    rowIndex,\n    columnIndex,\n    column,\n    property\n  };\n\n  const rowId = rowIndex !== undefined ? rowIndex : -1;\n\n  const customProps = {\n    ...(rowId !== -1\n      ? {\n          isOpen: rowData?.isOpen,\n          'aria-labelledby': `${rowLabeledBy}${rowId} ${expandId}${rowId}`\n        }\n      : {\n          isOpen: allRowsExpanded,\n          'aria-label': collapseAllAriaLabel || 'Expand all rows'\n        })\n  };\n\n  /**\n   * @param {React.MouseEvent} event - Mouse event\n   */\n  function onToggle(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    const open = rowData ? !rowData.isOpen : !allRowsExpanded;\n    // tslint:disable-next-line:no-unused-expression\n    onCollapse && onCollapse(event, rowIndex, open, rowData, extraData);\n  }\n\n  return {\n    className: (rowData?.isOpen !== undefined || rowId === -1) && css(styles.tableToggle),\n    isVisible: !rowData?.fullWidth,\n    children: (\n      <CollapseColumn\n        aria-labelledby={`${rowLabeledBy}${rowId} ${expandId}${rowId}`}\n        onToggle={onToggle}\n        id={expandId + rowId}\n        {...customProps}\n      >\n        {value}\n      </CollapseColumn>\n    )\n  };\n};\n\nexport const expandable: IFormatter = (value: IFormatterValueType, { rowData }: IExtra) =>\n  rowData && rowData.hasOwnProperty('parent') ? <ExpandableRowContent>{value}</ExpandableRowContent> : value;\n\nexport const expandedRow = (colSpan?: number) => {\n  const expandedRowFormatter = (\n    value: IFormatterValueType,\n    {\n      columnIndex,\n      rowIndex,\n      rowData,\n      column: {\n        extraParams: { contentId = 'expanded-content' }\n      }\n    }: IExtra\n  ): decoratorReturnType =>\n    value &&\n    rowData.hasOwnProperty('parent') && {\n      // todo: rewrite this logic, it is not type safe\n      colSpan: !rowData.cells || rowData.cells.length === 1 ? colSpan + (!!rowData.fullWidth as any) : 1,\n      id: contentId + rowIndex + (columnIndex ? '-' + columnIndex : ''),\n      className: rowData.noPadding && css(styles.modifiers.noPadding)\n    };\n  return expandedRowFormatter;\n};\n"]},"metadata":{},"sourceType":"module"}