{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PopoverPosition } from '../Popover';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\nexport const clipboardCopyFunc = (event, text) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('textarea');\n  el.value = text.toString();\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n};\nexport var ClipboardCopyVariant;\n\n(function (ClipboardCopyVariant) {\n  ClipboardCopyVariant[\"inline\"] = \"inline\";\n  ClipboardCopyVariant[\"expansion\"] = \"expansion\";\n  ClipboardCopyVariant[\"inlineCompact\"] = \"inline-compact\";\n})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));\n\nexport class ClipboardCopy extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timer = null; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (prevProps.children !== this.props.children) {\n        this.updateText(this.props.children);\n      }\n    };\n\n    this.componentWillUnmount = () => {\n      if (this.timer) {\n        window.clearTimeout(this.timer);\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    this.expandContent = _event => {\n      this.setState(prevState => ({\n        expanded: !prevState.expanded\n      }));\n    };\n\n    this.updateText = text => {\n      this.setState({\n        text\n      });\n      this.props.onChange(text);\n    };\n\n    this.render = () => {\n      const _a = this.props,\n            {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isExpanded,\n        onChange,\n        // Don't pass to <div>\n\n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        isReadOnly,\n        isCode,\n        isBlock,\n        exitDelay,\n        maxWidth,\n        entryDelay,\n        switchDelay,\n        onCopy,\n        hoverTip,\n        clickTip,\n        textAriaLabel,\n        toggleAriaLabel,\n        variant,\n        position,\n        className,\n        additionalActions\n      } = _a,\n            divProps = __rest(_a, [\"isExpanded\", \"onChange\", \"isReadOnly\", \"isCode\", \"isBlock\", \"exitDelay\", \"maxWidth\", \"entryDelay\", \"switchDelay\", \"onCopy\", \"hoverTip\", \"clickTip\", \"textAriaLabel\", \"toggleAriaLabel\", \"variant\", \"position\", \"className\", \"additionalActions\"]);\n\n      const textIdPrefix = 'text-input-';\n      const toggleIdPrefix = 'toggle-';\n      const contentIdPrefix = 'content-';\n      return React.createElement(\"div\", Object.assign({\n        className: css(styles.clipboardCopy, variant === 'inline-compact' && styles.modifiers.inline, isBlock && styles.modifiers.block, this.state.expanded && styles.modifiers.expanded, className)\n      }, divProps), variant === 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, id => React.createElement(React.Fragment, null, !isCode && React.createElement(\"span\", {\n        className: css(styles.clipboardCopyText),\n        id: `${textIdPrefix}${id}`\n      }, this.state.text), isCode && React.createElement(\"code\", {\n        className: css(styles.clipboardCopyText, styles.modifiers.code),\n        id: `${textIdPrefix}${id}`\n      }, this.state.text), React.createElement(\"span\", {\n        className: css(styles.clipboardCopyActions)\n      }, React.createElement(\"span\", {\n        className: css(styles.clipboardCopyActionsItem)\n      }, React.createElement(ClipboardCopyButton, {\n        variant: \"plain\",\n        exitDelay: exitDelay,\n        entryDelay: entryDelay,\n        maxWidth: maxWidth,\n        position: position,\n        id: `copy-button-${id}`,\n        textId: `text-input-${id}`,\n        \"aria-label\": hoverTip,\n        onClick: event => {\n          if (this.timer) {\n            window.clearTimeout(this.timer);\n            this.setState({\n              copied: false\n            });\n          }\n\n          onCopy(event, this.state.text);\n          this.setState({\n            copied: true\n          }, () => {\n            this.timer = window.setTimeout(() => {\n              this.setState({\n                copied: false\n              });\n              this.timer = null;\n            }, switchDelay);\n          });\n        }\n      }, this.state.copied ? clickTip : hoverTip)), additionalActions && additionalActions))), variant !== 'inline-compact' && React.createElement(GenerateId, {\n        prefix: \"\"\n      }, id => React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: css(styles.clipboardCopyGroup)\n      }, variant === 'expansion' && React.createElement(ClipboardCopyToggle, {\n        isExpanded: this.state.expanded,\n        onClick: this.expandContent,\n        id: `${toggleIdPrefix}${id}`,\n        textId: `${textIdPrefix}${id}`,\n        contentId: `${contentIdPrefix}${id}`,\n        \"aria-label\": toggleAriaLabel\n      }), React.createElement(TextInput, {\n        isReadOnly: isReadOnly || this.state.expanded,\n        onChange: this.updateText,\n        value: this.state.text,\n        id: `text-input-${id}`,\n        \"aria-label\": textAriaLabel\n      }), React.createElement(ClipboardCopyButton, {\n        exitDelay: exitDelay,\n        entryDelay: entryDelay,\n        maxWidth: maxWidth,\n        position: position,\n        id: `copy-button-${id}`,\n        textId: `text-input-${id}`,\n        \"aria-label\": hoverTip,\n        onClick: event => {\n          if (this.timer) {\n            window.clearTimeout(this.timer);\n            this.setState({\n              copied: false\n            });\n          }\n\n          onCopy(event, this.state.text);\n          this.setState({\n            copied: true\n          }, () => {\n            this.timer = window.setTimeout(() => {\n              this.setState({\n                copied: false\n              });\n              this.timer = null;\n            }, switchDelay);\n          });\n        }\n      }, this.state.copied ? clickTip : hoverTip)), this.state.expanded && React.createElement(ClipboardCopyExpanded, {\n        isReadOnly: isReadOnly,\n        isCode: isCode,\n        id: `content-${id}`,\n        onChange: this.updateText\n      }, this.state.text))));\n    };\n\n    this.state = {\n      text: Array.isArray(this.props.children) ? this.props.children.join('') : this.props.children,\n      expanded: this.props.isExpanded,\n      copied: false\n    };\n  }\n\n}\nClipboardCopy.displayName = 'ClipboardCopy';\nClipboardCopy.defaultProps = {\n  hoverTip: 'Copy to clipboard',\n  clickTip: 'Successfully copied to clipboard!',\n  isReadOnly: false,\n  isExpanded: false,\n  isCode: false,\n  variant: 'inline',\n  position: PopoverPosition.top,\n  maxWidth: '150px',\n  exitDelay: 1600,\n  entryDelay: 300,\n  switchDelay: 2000,\n  onCopy: clipboardCopyFunc,\n  onChange: () => undefined,\n  textAriaLabel: 'Copyable input',\n  toggleAriaLabel: 'Show content',\n  additionalActions: null\n};","map":{"version":3,"mappings":"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","names":["React","styles","css","PopoverPosition","TextInput","GenerateId","ClipboardCopyButton","ClipboardCopyToggle","ClipboardCopyExpanded","clipboardCopyFunc","event","text","clipboard","currentTarget","parentElement","el","document","createElement","value","toString","appendChild","select","execCommand","removeChild","ClipboardCopyVariant","ClipboardCopy","Component","constructor","props","prevProps","prevState","children","updateText","timer","window","clearTimeout","_event","setState","expanded","onChange","_a","isExpanded","isReadOnly","isCode","isBlock","exitDelay","maxWidth","entryDelay","switchDelay","onCopy","hoverTip","clickTip","textAriaLabel","toggleAriaLabel","variant","position","className","additionalActions","divProps","textIdPrefix","toggleIdPrefix","contentIdPrefix","clipboardCopy","modifiers","inline","block","state","prefix","id","Fragment","clipboardCopyText","code","clipboardCopyActions","clipboardCopyActionsItem","textId","onClick","copied","setTimeout","clipboardCopyGroup","expandContent","contentId","Array","isArray","join","top","undefined"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/ClipboardCopy/ClipboardCopy.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy';\nimport { css } from '@patternfly/react-styles';\nimport { PickOptional } from '../../helpers/typeUtils';\nimport { PopoverPosition } from '../Popover';\nimport { TooltipPosition } from '../Tooltip';\nimport { TextInput } from '../TextInput';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nimport { ClipboardCopyButton } from './ClipboardCopyButton';\nimport { ClipboardCopyToggle } from './ClipboardCopyToggle';\nimport { ClipboardCopyExpanded } from './ClipboardCopyExpanded';\n\nexport const clipboardCopyFunc = (event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => {\n  const clipboard = event.currentTarget.parentElement;\n  const el = document.createElement('textarea');\n  el.value = text.toString();\n  clipboard.appendChild(el);\n  el.select();\n  document.execCommand('copy');\n  clipboard.removeChild(el);\n};\n\nexport enum ClipboardCopyVariant {\n  inline = 'inline',\n  expansion = 'expansion',\n  inlineCompact = 'inline-compact'\n}\n\nexport interface ClipboardCopyState {\n  text: string | number;\n  expanded: boolean;\n  copied: boolean;\n}\n\nexport interface ClipboardCopyProps extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange'> {\n  /** Additional classes added to the clipboard copy container. */\n  className?: string;\n  /** Tooltip message to display when hover the copy button */\n  hoverTip?: string;\n  /** Tooltip message to display when clicking the copy button */\n  clickTip?: string;\n  /** Aria-label to use on the TextInput. */\n  textAriaLabel?: string;\n  /** Aria-label to use on the ClipboardCopyToggle. */\n  toggleAriaLabel?: string;\n  /** Flag to show if the input is read only. */\n  isReadOnly?: boolean;\n  /** Flag to determine if clipboard copy is in the expanded state initially */\n  isExpanded?: boolean;\n  /** Flag to determine if clipboard copy content includes code */\n  isCode?: boolean;\n  /** Flag to determine if inline clipboard copy should be block styling */\n  isBlock?: boolean;\n  /** Adds Clipboard Copy variant styles. */\n  variant?: typeof ClipboardCopyVariant | 'inline' | 'expansion' | 'inline-compact';\n  /** Copy button popover position. */\n  position?:\n    | PopoverPosition\n    | TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end';\n  /** Maximum width of the tooltip (default 150px). */\n  maxWidth?: string;\n  /** Delay in ms before the tooltip disappears. */\n  exitDelay?: number;\n  /** Delay in ms before the tooltip appears. */\n  entryDelay?: number;\n  /** Delay in ms before the tooltip message switch to hover tip. */\n  switchDelay?: number;\n  /** A function that is triggered on clicking the copy button. */\n  onCopy?: (event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => void;\n  /** A function that is triggered on changing the text. */\n  onChange?: (text?: string | number) => void;\n  /** The text which is copied. */\n  children: React.ReactNode;\n  /** Additional actions for inline clipboard copy. Should be wrapped with ClipboardCopyAction. */\n  additionalActions?: React.ReactNode;\n}\n\nexport class ClipboardCopy extends React.Component<ClipboardCopyProps, ClipboardCopyState> {\n  static displayName = 'ClipboardCopy';\n  timer = null as number;\n  constructor(props: ClipboardCopyProps) {\n    super(props);\n    this.state = {\n      text: Array.isArray(this.props.children)\n        ? this.props.children.join('')\n        : (this.props.children as string | number),\n      expanded: this.props.isExpanded,\n      copied: false\n    };\n  }\n\n  static defaultProps: PickOptional<ClipboardCopyProps> = {\n    hoverTip: 'Copy to clipboard',\n    clickTip: 'Successfully copied to clipboard!',\n    isReadOnly: false,\n    isExpanded: false,\n    isCode: false,\n    variant: 'inline',\n    position: PopoverPosition.top,\n    maxWidth: '150px',\n    exitDelay: 1600,\n    entryDelay: 300,\n    switchDelay: 2000,\n    onCopy: clipboardCopyFunc,\n    onChange: (): any => undefined,\n    textAriaLabel: 'Copyable input',\n    toggleAriaLabel: 'Show content',\n    additionalActions: null\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  componentDidUpdate = (prevProps: ClipboardCopyProps, prevState: ClipboardCopyState) => {\n    if (prevProps.children !== this.props.children) {\n      this.updateText(this.props.children as string | number);\n    }\n  };\n\n  componentWillUnmount = () => {\n    if (this.timer) {\n      window.clearTimeout(this.timer);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  expandContent = (_event: React.MouseEvent<Element, MouseEvent>) => {\n    this.setState(prevState => ({\n      expanded: !prevState.expanded\n    }));\n  };\n\n  updateText = (text: string | number) => {\n    this.setState({ text });\n    this.props.onChange(text);\n  };\n\n  render = () => {\n    const {\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isExpanded,\n      onChange, // Don't pass to <div>\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      isReadOnly,\n      isCode,\n      isBlock,\n      exitDelay,\n      maxWidth,\n      entryDelay,\n      switchDelay,\n      onCopy,\n      hoverTip,\n      clickTip,\n      textAriaLabel,\n      toggleAriaLabel,\n      variant,\n      position,\n      className,\n      additionalActions,\n      ...divProps\n    } = this.props;\n    const textIdPrefix = 'text-input-';\n    const toggleIdPrefix = 'toggle-';\n    const contentIdPrefix = 'content-';\n    return (\n      <div\n        className={css(\n          styles.clipboardCopy,\n          variant === 'inline-compact' && styles.modifiers.inline,\n          isBlock && styles.modifiers.block,\n          this.state.expanded && styles.modifiers.expanded,\n          className\n        )}\n        {...divProps}\n      >\n        {variant === 'inline-compact' && (\n          <GenerateId prefix=\"\">\n            {id => (\n              <React.Fragment>\n                {!isCode && (\n                  <span className={css(styles.clipboardCopyText)} id={`${textIdPrefix}${id}`}>\n                    {this.state.text}\n                  </span>\n                )}\n                {isCode && (\n                  <code className={css(styles.clipboardCopyText, styles.modifiers.code)} id={`${textIdPrefix}${id}`}>\n                    {this.state.text}\n                  </code>\n                )}\n                <span className={css(styles.clipboardCopyActions)}>\n                  <span className={css(styles.clipboardCopyActionsItem)}>\n                    <ClipboardCopyButton\n                      variant=\"plain\"\n                      exitDelay={exitDelay}\n                      entryDelay={entryDelay}\n                      maxWidth={maxWidth}\n                      position={position}\n                      id={`copy-button-${id}`}\n                      textId={`text-input-${id}`}\n                      aria-label={hoverTip}\n                      onClick={(event: any) => {\n                        if (this.timer) {\n                          window.clearTimeout(this.timer);\n                          this.setState({ copied: false });\n                        }\n                        onCopy(event, this.state.text);\n                        this.setState({ copied: true }, () => {\n                          this.timer = window.setTimeout(() => {\n                            this.setState({ copied: false });\n                            this.timer = null;\n                          }, switchDelay);\n                        });\n                      }}\n                    >\n                      {this.state.copied ? clickTip : hoverTip}\n                    </ClipboardCopyButton>\n                  </span>\n                  {additionalActions && additionalActions}\n                </span>\n              </React.Fragment>\n            )}\n          </GenerateId>\n        )}\n        {variant !== 'inline-compact' && (\n          <GenerateId prefix=\"\">\n            {id => (\n              <React.Fragment>\n                <div className={css(styles.clipboardCopyGroup)}>\n                  {variant === 'expansion' && (\n                    <ClipboardCopyToggle\n                      isExpanded={this.state.expanded}\n                      onClick={this.expandContent}\n                      id={`${toggleIdPrefix}${id}`}\n                      textId={`${textIdPrefix}${id}`}\n                      contentId={`${contentIdPrefix}${id}`}\n                      aria-label={toggleAriaLabel}\n                    />\n                  )}\n                  <TextInput\n                    isReadOnly={isReadOnly || this.state.expanded}\n                    onChange={this.updateText}\n                    value={this.state.text as string | number}\n                    id={`text-input-${id}`}\n                    aria-label={textAriaLabel}\n                  />\n                  <ClipboardCopyButton\n                    exitDelay={exitDelay}\n                    entryDelay={entryDelay}\n                    maxWidth={maxWidth}\n                    position={position}\n                    id={`copy-button-${id}`}\n                    textId={`text-input-${id}`}\n                    aria-label={hoverTip}\n                    onClick={(event: any) => {\n                      if (this.timer) {\n                        window.clearTimeout(this.timer);\n                        this.setState({ copied: false });\n                      }\n                      onCopy(event, this.state.text);\n                      this.setState({ copied: true }, () => {\n                        this.timer = window.setTimeout(() => {\n                          this.setState({ copied: false });\n                          this.timer = null;\n                        }, switchDelay);\n                      });\n                    }}\n                  >\n                    {this.state.copied ? clickTip : hoverTip}\n                  </ClipboardCopyButton>\n                </div>\n                {this.state.expanded && (\n                  <ClipboardCopyExpanded\n                    isReadOnly={isReadOnly}\n                    isCode={isCode}\n                    id={`content-${id}`}\n                    onChange={this.updateText}\n                  >\n                    {this.state.text}\n                  </ClipboardCopyExpanded>\n                )}\n              </React.Fragment>\n            )}\n          </GenerateId>\n        )}\n      </div>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}