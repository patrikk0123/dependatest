{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { AccordionContext } from './AccordionContext';\nexport var AccordionToggle = function AccordionToggle(_a) {\n  var _a$className = _a.className,\n      className = _a$className === void 0 ? '' : _a$className,\n      id = _a.id,\n      _a$isExpanded = _a.isExpanded,\n      isExpanded = _a$isExpanded === void 0 ? false : _a$isExpanded,\n      _a$children = _a.children,\n      children = _a$children === void 0 ? null : _a$children,\n      component = _a.component,\n      props = __rest(_a, [\"className\", \"id\", \"isExpanded\", \"children\", \"component\"]);\n\n  return React.createElement(AccordionContext.Consumer, null, function (_ref) {\n    var ToggleContainer = _ref.ToggleContainer;\n    var Container = component || ToggleContainer;\n    return React.createElement(Container, null, React.createElement(\"button\", Object.assign({\n      id: id,\n      className: css(styles.accordionToggle, isExpanded && styles.modifiers.expanded, className),\n      \"aria-expanded\": isExpanded,\n      type: \"button\"\n    }, props), React.createElement(\"span\", {\n      className: css(styles.accordionToggleText)\n    }, children), React.createElement(\"span\", {\n      className: css(styles.accordionToggleIcon)\n    }, React.createElement(AngleRightIcon, null))));\n  });\n};\nAccordionToggle.displayName = 'AccordionToggle';","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,MAAP,MAAmB,6DAAnB;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAgBA,OAAO,IAAMC,eAAe,GAAkD,SAAjEA,eAAiE,CAACC,EAAD,EAOnD;qBAFhBA,GAJTC;MAAAA,sCAAY;MACZC,KAGSF,GAHTE;sBAGSF,GAFTG;MAAAA,wCAAa;oBAEJH,GADTI;MAAAA,oCAAW;MACXC,YAASL,GAATK;MACGC,QAAKC,WANqE,0DAMrE;;EACkB,OAC1Bb,oBAACI,gBAAgB,CAACU,QAAlB,EAA0B,IAA1B,EACG,gBAAwB;IAAA,IAArBC,eAAqB,QAArBA,eAAqB;IACvB,IAAMC,SAAS,GAAGL,SAAS,IAAII,eAA/B;IACA,OACEf,oBAACgB,SAAD,EAAU,IAAV,EACEhB;MACEQ,EAAE,EAAEA,EADN;MAEED,SAAS,EAAEN,GAAG,CAACC,MAAM,CAACe,eAAR,EAAyBR,UAAU,IAAIP,MAAM,CAACgB,SAAP,CAAiBC,QAAxD,EAAkEZ,SAAlE,CAFhB;MAE4F,iBAC3EE,UAHjB;MAIEW,IAAI,EAAC;IAJP,GAKMR,KALN,GAOEZ;MAAMO,SAAS,EAAEN,GAAG,CAACC,MAAM,CAACmB,mBAAR;IAApB,GAAmDX,QAAnD,CAPF,EAQEV;MAAMO,SAAS,EAAEN,GAAG,CAACC,MAAM,CAACoB,mBAAR;IAApB,GACEtB,oBAACG,cAAD,EAAe,IAAf,CADF,CARF,CADF,CADF;EAgBD,CAnBH,CAD0B;AAsB3B,CA7BM;AA8BPE,eAAe,CAACkB,WAAhB,GAA8B,iBAA9B","names":["React","css","styles","AngleRightIcon","AccordionContext","AccordionToggle","_a","className","id","isExpanded","children","component","props","__rest","Consumer","ToggleContainer","Container","accordionToggle","modifiers","expanded","type","accordionToggleText","accordionToggleIcon","displayName"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Accordion/AccordionToggle.tsx"],"sourcesContent":["import * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Accordion/accordion';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { AccordionContext } from './AccordionContext';\n\nexport interface AccordionToggleProps\n  extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\n  /** Content rendered inside the Accordion toggle  */\n  children?: React.ReactNode;\n  /** Additional classes added to the Accordion Toggle  */\n  className?: string;\n  /** Flag to show if the expanded content of the Accordion item is visible  */\n  isExpanded?: boolean;\n  /** Identify the Accordion toggle number  */\n  id: string;\n  /** Container to override the default for toggle */\n  component?: React.ElementType;\n}\n\nexport const AccordionToggle: React.FunctionComponent<AccordionToggleProps> = ({\n  className = '',\n  id,\n  isExpanded = false,\n  children = null,\n  component,\n  ...props\n}: AccordionToggleProps) => (\n  <AccordionContext.Consumer>\n    {({ ToggleContainer }) => {\n      const Container = component || ToggleContainer;\n      return (\n        <Container>\n          <button\n            id={id}\n            className={css(styles.accordionToggle, isExpanded && styles.modifiers.expanded, className)}\n            aria-expanded={isExpanded}\n            type=\"button\"\n            {...props}\n          >\n            <span className={css(styles.accordionToggleText)}>{children}</span>\n            <span className={css(styles.accordionToggleIcon)}>\n              <AngleRightIcon />\n            </span>\n          </button>\n        </Container>\n      );\n    }}\n  </AccordionContext.Consumer>\n);\nAccordionToggle.displayName = 'AccordionToggle';\n"]},"metadata":{},"sourceType":"module"}