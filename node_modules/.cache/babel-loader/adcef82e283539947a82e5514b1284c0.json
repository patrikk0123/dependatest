{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport badgeStyles from '@patternfly/react-styles/css/components/Badge/badge';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { SelectMenu } from './SelectMenu';\nimport { SelectOption } from './SelectOption';\nimport { SelectGroup } from './SelectGroup';\nimport { SelectToggle } from './SelectToggle';\nimport { SelectContext, SelectVariant, SelectPosition, SelectDirection, SelectFooterTabbableItems } from './selectConstants';\nimport { ChipGroup } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { Spinner } from '../Spinner';\nimport { keyHandler, getNextIndex, getOUIAProps, getDefaultOUIAId, GenerateId } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nimport { Divider } from '../Divider';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { findTabbableElements } from '../../helpers/util'; // seed for the aria-labelledby ID\n\nlet currentId = 0;\nexport class Select extends React.Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n    this.parentRef = React.createRef();\n    this.menuComponentRef = React.createRef();\n    this.filterRef = React.createRef();\n    this.clearRef = React.createRef();\n    this.inputRef = React.createRef();\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n    this.footerRef = React.createRef();\n    this.state = {\n      focusFirstOption: false,\n      typeaheadInputValue: null,\n      typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n      favoritesGroup: [],\n      typeaheadCurrIndex: -1,\n      typeaheadStoredIndex: -1,\n      creatableValue: '',\n      tabbedIntoFavoritesMenu: false,\n      ouiaStateId: getDefaultOUIAId(Select.displayName, this.props.variant),\n      viewMoreNextIndex: -1\n    };\n\n    this.getTypeaheadActiveChild = typeaheadCurrIndex => this.refCollection[typeaheadCurrIndex] ? this.refCollection[typeaheadCurrIndex][0] : null;\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.hasInlineFilter) {\n        this.refCollection[0][0] = this.filterRef.current;\n      } // Move focus to top of the menu if state.focusFirstOption was updated to true and the menu does not have custom content\n\n\n      if (!prevState.focusFirstOption && this.state.focusFirstOption && !this.props.customContent) {\n        const firstRef = this.refCollection.find(ref => ref !== null);\n\n        if (firstRef && firstRef[0]) {\n          firstRef[0].focus();\n        }\n      } else if ( // if viewMoreNextIndex is not -1, view more was clicked, set focus on first newly loaded item\n      this.state.viewMoreNextIndex !== -1 && this.refCollection.length > this.state.viewMoreNextIndex && this.props.loadingVariant !== 'spinner' && this.refCollection[this.state.viewMoreNextIndex][0] && this.props.variant !== 'typeahead' && // do not hard focus newly added items for typeahead variants\n      this.props.variant !== 'typeaheadmulti') {\n        this.refCollection[this.state.viewMoreNextIndex][0].focus();\n      }\n\n      const hasUpdatedChildren = prevProps.children.length !== this.props.children.length || prevProps.children.some((prevChild, index) => {\n        const prevChildProps = prevChild.props;\n        const currChild = this.props.children[index];\n        const {\n          props: currChildProps\n        } = currChild;\n\n        if (prevChildProps && currChildProps) {\n          return prevChildProps.value !== currChildProps.value || prevChildProps.label !== currChildProps.label || prevChildProps.isDisabled !== currChildProps.isDisabled || prevChildProps.isPlaceholder !== currChildProps.isPlaceholder;\n        } else {\n          return prevChild !== currChild;\n        }\n      });\n\n      if (hasUpdatedChildren) {\n        this.updateTypeAheadFilteredChildren(prevState.typeaheadInputValue || '', null);\n      } // for menus with favorites,\n      // if the number of favorites or typeahead filtered children has changed, the generated\n      // list of favorites needs to be updated\n\n\n      if (this.props.onFavorite && (this.props.favorites.length !== prevProps.favorites.length || this.state.typeaheadFilteredChildren !== prevState.typeaheadFilteredChildren)) {\n        const tempRenderableChildren = this.props.variant === 'typeahead' || this.props.variant === 'typeaheadmulti' ? this.state.typeaheadFilteredChildren : this.props.children;\n        const renderableFavorites = createRenderableFavorites(tempRenderableChildren, this.props.isGrouped, this.props.favorites);\n        const favoritesGroup = renderableFavorites.length ? [React.createElement(SelectGroup, {\n          key: \"favorites\",\n          label: this.props.favoritesLabel\n        }, renderableFavorites), React.createElement(Divider, {\n          key: \"favorites-group-divider\"\n        })] : [];\n        this.setState({\n          favoritesGroup\n        });\n      }\n    };\n\n    this.onEnter = () => {\n      this.setState({\n        focusFirstOption: true\n      });\n    };\n\n    this.onToggle = (isExpanded, e) => {\n      const {\n        isInputValuePersisted,\n        onSelect,\n        onToggle,\n        hasInlineFilter\n      } = this.props;\n\n      if (!isExpanded && isInputValuePersisted && onSelect) {\n        onSelect(undefined, this.inputRef.current ? this.inputRef.current.value : '');\n      }\n\n      if (isExpanded && hasInlineFilter) {\n        this.setState({\n          focusFirstOption: true\n        });\n      }\n\n      onToggle(isExpanded, e);\n    };\n\n    this.onClose = () => {\n      const {\n        isInputFilterPersisted\n      } = this.props;\n      this.setState(Object.assign(Object.assign({\n        focusFirstOption: false,\n        typeaheadInputValue: null\n      }, !isInputFilterPersisted && {\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children)\n      }), {\n        typeaheadCurrIndex: -1,\n        tabbedIntoFavoritesMenu: false,\n        viewMoreNextIndex: -1\n      }));\n    };\n\n    this.onChange = e => {\n      if (e.target.value.toString() !== '' && !this.props.isOpen) {\n        this.onToggle(true, e);\n      }\n\n      if (this.props.onTypeaheadInputChanged) {\n        this.props.onTypeaheadInputChanged(e.target.value.toString());\n      }\n\n      this.setState({\n        typeaheadCurrIndex: -1,\n        typeaheadInputValue: e.target.value,\n        creatableValue: e.target.value\n      });\n      this.updateTypeAheadFilteredChildren(e.target.value.toString(), e);\n      this.refCollection = [[]];\n    };\n\n    this.updateTypeAheadFilteredChildren = (typeaheadInputValue, e) => {\n      let typeaheadFilteredChildren;\n      const {\n        onFilter,\n        isCreatable,\n        onCreateOption,\n        createText,\n        noResultsFoundText,\n        children,\n        isGrouped,\n        isCreateSelectOptionObject,\n        loadingVariant\n      } = this.props;\n\n      if (onFilter) {\n        /* The updateTypeAheadFilteredChildren callback is not only called on input changes but also when the children change.\n         * In this case the e is null but we can get the typeaheadInputValue from the state.\n         */\n        typeaheadFilteredChildren = onFilter(e, e ? e.target.value : typeaheadInputValue) || children;\n      } else {\n        let input;\n\n        try {\n          input = new RegExp(typeaheadInputValue.toString(), 'i');\n        } catch (err) {\n          input = new RegExp(typeaheadInputValue.toString().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n        }\n\n        const childrenArray = React.Children.toArray(children);\n\n        if (isGrouped) {\n          const childFilter = child => child.props.value && child.props.value.toString && this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n\n          typeaheadFilteredChildren = typeaheadInputValue.toString() !== '' ? React.Children.map(children, group => {\n            if (React.isValidElement(group) && group.type === SelectGroup) {\n              const filteredGroupChildren = React.Children.toArray(group.props.children).filter(childFilter);\n\n              if (filteredGroupChildren.length > 0) {\n                return React.cloneElement(group, {\n                  titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                  children: filteredGroupChildren\n                });\n              }\n            } else {\n              return React.Children.toArray(group).filter(childFilter);\n            }\n          }) : childrenArray;\n        } else {\n          typeaheadFilteredChildren = typeaheadInputValue.toString() !== '' ? childrenArray.filter(child => {\n            const valueToCheck = child.props.value; // Dividers don't have value and should not be filtered\n\n            if (!valueToCheck) {\n              return true;\n            }\n\n            const isSelectOptionObject = typeof valueToCheck !== 'string' && valueToCheck.toString && valueToCheck.compareTo; // View more option should be returned as not a match\n\n            if (loadingVariant !== 'spinner' && (loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.text) === valueToCheck) {\n              return true;\n            } // spinner should be returned as not a match\n\n\n            if (loadingVariant === 'spinner' && valueToCheck === 'loading') {\n              return true;\n            }\n\n            if (isSelectOptionObject) {\n              return valueToCheck.compareTo(typeaheadInputValue);\n            } else {\n              return this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n            }\n          }) : childrenArray;\n        }\n      }\n\n      if (!typeaheadFilteredChildren) {\n        typeaheadFilteredChildren = [];\n      }\n\n      if (typeaheadFilteredChildren.length === 0) {\n        !isCreatable && typeaheadFilteredChildren.push(React.createElement(SelectOption, {\n          isDisabled: true,\n          key: \"no-results\",\n          value: noResultsFoundText,\n          isNoResultsOption: true\n        }));\n      }\n\n      if (isCreatable && typeaheadInputValue !== '') {\n        const newValue = typeaheadInputValue;\n\n        if (!typeaheadFilteredChildren.find(i => i.props.value && i.props.value.toString().toLowerCase() === newValue.toString().toLowerCase())) {\n          const newOptionValue = isCreateSelectOptionObject ? {\n            toString: () => newValue,\n            compareTo: value => this.toString().toLowerCase().includes(value.toString().toLowerCase())\n          } : newValue;\n          typeaheadFilteredChildren.push(React.createElement(SelectOption, {\n            key: `create ${newValue}`,\n            value: newOptionValue,\n            onClick: () => onCreateOption && onCreateOption(newValue)\n          }, createText, \" \\\"\", newValue, \"\\\"\"));\n        }\n      }\n\n      this.setState({\n        typeaheadFilteredChildren\n      });\n    };\n\n    this.onClick = e => {\n      if (!this.props.isOpen) {\n        this.onToggle(true, e);\n      }\n    };\n\n    this.clearSelection = _e => {\n      this.setState({\n        typeaheadInputValue: null,\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n        typeaheadCurrIndex: -1\n      });\n    };\n\n    this.sendRef = (optionRef, favoriteRef, optionContainerRef, index) => {\n      this.refCollection[index] = [optionRef, favoriteRef];\n      this.optionContainerRefCollection[index] = optionContainerRef;\n    };\n\n    this.handleMenuKeys = (index, innerIndex, position) => {\n      keyHandler(index, innerIndex, position, this.refCollection, this.refCollection);\n\n      if (this.props.variant === SelectVariant.typeahead || this.props.variant === SelectVariant.typeaheadMulti) {\n        if (position !== 'tab') {\n          this.handleTypeaheadKeys(position);\n        }\n      }\n    };\n\n    this.moveFocus = function (nextIndex) {\n      let updateCurrentIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const {\n        isCreatable,\n        createText\n      } = _this.props;\n      const hasDescriptionElm = Boolean(_this.refCollection[nextIndex][0] && _this.refCollection[nextIndex][0].classList.contains('pf-m-description'));\n      const isLoad = Boolean(_this.refCollection[nextIndex][0] && _this.refCollection[nextIndex][0].classList.contains('pf-m-load'));\n      const optionTextElm = hasDescriptionElm ? _this.refCollection[nextIndex][0].firstElementChild : _this.refCollection[nextIndex][0];\n      let typeaheadInputValue = '';\n\n      if (isCreatable && optionTextElm.innerText.includes(createText)) {\n        typeaheadInputValue = _this.state.creatableValue;\n      } else if (optionTextElm && !isLoad) {\n        // !isLoad prevents the view more button text from appearing the typeahead input\n        typeaheadInputValue = optionTextElm.innerText;\n      }\n\n      _this.setState(prevState => ({\n        typeaheadCurrIndex: updateCurrentIndex ? nextIndex : prevState.typeaheadCurrIndex,\n        typeaheadStoredIndex: nextIndex,\n        typeaheadInputValue\n      }));\n    };\n\n    this.switchFocusToFavoriteMenu = () => {\n      const {\n        typeaheadCurrIndex,\n        typeaheadStoredIndex\n      } = this.state;\n      let indexForFocus = 0;\n\n      if (typeaheadCurrIndex !== -1) {\n        indexForFocus = typeaheadCurrIndex;\n      } else if (typeaheadStoredIndex !== -1) {\n        indexForFocus = typeaheadStoredIndex;\n      }\n\n      if (this.refCollection[indexForFocus] !== null && this.refCollection[indexForFocus][0] !== null) {\n        this.refCollection[indexForFocus][0].focus();\n      } else {\n        this.clearRef.current.focus();\n      }\n\n      this.setState({\n        tabbedIntoFavoritesMenu: true,\n        typeaheadCurrIndex: -1\n      });\n    };\n\n    this.moveFocusToLastMenuItem = () => {\n      const refCollectionLen = this.refCollection.length;\n\n      if (refCollectionLen > 0 && this.refCollection[refCollectionLen - 1] !== null && this.refCollection[refCollectionLen - 1][0] !== null) {\n        this.refCollection[refCollectionLen - 1][0].focus();\n      }\n    };\n\n    this.handleTypeaheadKeys = function (position) {\n      let shiftKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const {\n        isOpen,\n        onFavorite,\n        isCreatable\n      } = _this.props;\n      const {\n        typeaheadCurrIndex,\n        tabbedIntoFavoritesMenu\n      } = _this.state;\n\n      const typeaheadActiveChild = _this.getTypeaheadActiveChild(typeaheadCurrIndex);\n\n      if (isOpen) {\n        if (position === 'enter') {\n          if ((typeaheadCurrIndex !== -1 || isCreatable && _this.refCollection.length === 1) && ( // do not allow selection without moving to an initial option unless it is a single create option\n          typeaheadActiveChild || _this.refCollection[0] && _this.refCollection[0][0])) {\n            if (typeaheadActiveChild) {\n              if (!typeaheadActiveChild.classList.contains('pf-m-load')) {\n                const hasDescriptionElm = typeaheadActiveChild.childElementCount > 1;\n                const typeaheadActiveChildText = hasDescriptionElm ? typeaheadActiveChild.firstChild.innerText : typeaheadActiveChild.innerText;\n\n                _this.setState({\n                  typeaheadInputValue: typeaheadActiveChildText\n                });\n              }\n            } else if (_this.refCollection[0] && _this.refCollection[0][0]) {\n              _this.setState({\n                typeaheadInputValue: _this.refCollection[0][0].innerText\n              });\n            }\n\n            if (typeaheadActiveChild) {\n              typeaheadActiveChild.click();\n            } else {\n              _this.refCollection[0][0].click();\n            }\n          }\n        } else if (position === 'tab') {\n          if (onFavorite) {\n            // if the input has focus, tab to the first item or the last item that was previously focused.\n            if (_this.inputRef.current === document.activeElement) {\n              // If shift is also clicked and there is a footer, tab to the last item in tabbable footer\n              if (_this.props.footer && shiftKey) {\n                const tabbableItems = findTabbableElements(_this.footerRef, SelectFooterTabbableItems);\n\n                if (tabbableItems.length > 0) {\n                  if (tabbableItems[tabbableItems.length - 1]) {\n                    tabbableItems[tabbableItems.length - 1].focus();\n                  }\n                }\n              } else {\n                _this.switchFocusToFavoriteMenu();\n              }\n            } else {\n              // focus is on menu or footer\n              if (_this.props.footer) {\n                let tabbedIntoMenu = false;\n                const tabbableItems = findTabbableElements(_this.footerRef, SelectFooterTabbableItems);\n\n                if (tabbableItems.length > 0) {\n                  // if current element is not in footer, tab to first tabbable element in footer,\n                  // if shift was clicked, tab to input since focus is on menu\n                  const currentElementIndex = tabbableItems.findIndex(item => item === document.activeElement);\n\n                  if (currentElementIndex === -1) {\n                    if (shiftKey) {\n                      // currently in menu, shift back to input\n                      _this.inputRef.current.focus();\n                    } else {\n                      // currently in menu, tab to first tabbable item in footer\n                      tabbableItems[0].focus();\n                    }\n                  } else {\n                    // already in footer\n                    if (shiftKey) {\n                      // shift to previous item\n                      if (currentElementIndex === 0) {\n                        // on first footer item, shift back to menu\n                        _this.switchFocusToFavoriteMenu();\n\n                        tabbedIntoMenu = true;\n                      } else {\n                        // shift to previous footer item\n                        tabbableItems[currentElementIndex - 1].focus();\n                      }\n                    } else {\n                      // tab to next tabbable item in footer or to input.\n                      if (tabbableItems[currentElementIndex + 1]) {\n                        tabbableItems[currentElementIndex + 1].focus();\n                      } else {\n                        _this.inputRef.current.focus();\n                      }\n                    }\n                  }\n                } else {\n                  // no tabbable items in footer, tab to input\n                  _this.inputRef.current.focus();\n\n                  tabbedIntoMenu = false;\n                }\n\n                _this.setState({\n                  tabbedIntoFavoritesMenu: tabbedIntoMenu\n                });\n              } else {\n                _this.inputRef.current.focus();\n\n                _this.setState({\n                  tabbedIntoFavoritesMenu: false\n                });\n              }\n            }\n          } else {\n            // Close if there is no footer\n            if (!_this.props.footer) {\n              _this.onToggle(false, null);\n\n              _this.onClose();\n            } else {\n              // has footer\n              const tabbableItems = findTabbableElements(_this.footerRef, SelectFooterTabbableItems);\n              const currentElementIndex = tabbableItems.findIndex(item => item === document.activeElement);\n\n              if (_this.inputRef.current === document.activeElement) {\n                if (shiftKey) {\n                  // close toggle if shift key and tab on input\n                  _this.onToggle(false, null);\n\n                  _this.onClose();\n                } else {\n                  // tab to first tabbable item in footer\n                  if (tabbableItems[0]) {\n                    tabbableItems[0].focus();\n                  } else {\n                    _this.onToggle(false, null);\n\n                    _this.onClose();\n                  }\n                }\n              } else {\n                // focus is in footer\n                if (shiftKey) {\n                  if (currentElementIndex === 0) {\n                    // shift tab back to input\n                    _this.inputRef.current.focus();\n                  } else {\n                    // shift to previous footer item\n                    tabbableItems[currentElementIndex - 1].focus();\n                  }\n                } else {\n                  // tab to next footer item or close tab if last item\n                  if (tabbableItems[currentElementIndex + 1]) {\n                    tabbableItems[currentElementIndex + 1].focus();\n                  } else {\n                    // no next item, close toggle\n                    _this.onToggle(false, null);\n\n                    _this.inputRef.current.focus();\n\n                    _this.onClose();\n                  }\n                }\n              }\n            }\n          }\n        } else if (!tabbedIntoFavoritesMenu) {\n          if (_this.refCollection[0][0] === null) {\n            return;\n          }\n\n          let nextIndex;\n\n          if (typeaheadCurrIndex === -1 && position === 'down') {\n            nextIndex = 0;\n          } else if (typeaheadCurrIndex === -1 && position === 'up') {\n            nextIndex = _this.refCollection.length - 1;\n          } else if (position !== 'left' && position !== 'right') {\n            nextIndex = getNextIndex(typeaheadCurrIndex, position, _this.refCollection);\n          } else {\n            nextIndex = typeaheadCurrIndex;\n          }\n\n          if (_this.refCollection[nextIndex] === null) {\n            return;\n          }\n\n          _this.moveFocus(nextIndex);\n        } else {\n          const nextIndex = _this.refCollection.findIndex(ref => ref !== undefined && (ref[0] === document.activeElement || ref[1] === document.activeElement));\n\n          _this.moveFocus(nextIndex);\n        }\n      }\n    };\n\n    this.onClickTypeaheadToggleButton = () => {\n      if (this.inputRef && this.inputRef.current) {\n        this.inputRef.current.focus();\n      }\n    };\n\n    this.getDisplay = function (value) {\n      let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'node';\n\n      if (!value) {\n        return;\n      }\n\n      const item = _this.props.isGrouped ? React.Children.toArray(_this.props.children).reduce((acc, curr) => [...acc, ...React.Children.toArray(curr.props.children)], []).find(child => child.props.value.toString() === value.toString()) : React.Children.toArray(_this.props.children).find(child => child.props.value && child.props.value.toString() === value.toString());\n\n      if (item) {\n        if (item && item.props.children) {\n          if (type === 'node') {\n            return item.props.children;\n          }\n\n          return _this.findText(item);\n        }\n\n        return item.props.value.toString();\n      }\n\n      return value.toString();\n    };\n\n    this.findText = item => {\n      if (typeof item === 'string') {\n        return item;\n      } else if (!React.isValidElement(item)) {\n        return '';\n      } else {\n        const multi = [];\n        React.Children.toArray(item.props.children).forEach(child => multi.push(this.findText(child)));\n        return multi.join('');\n      }\n    };\n\n    this.generateSelectedBadge = () => {\n      const {\n        customBadgeText,\n        selections\n      } = this.props;\n\n      if (customBadgeText !== null) {\n        return customBadgeText;\n      }\n\n      if (Array.isArray(selections) && selections.length > 0) {\n        return selections.length;\n      }\n\n      return null;\n    };\n\n    this.setVieMoreNextIndex = () => {\n      this.setState({\n        viewMoreNextIndex: this.refCollection.length - 1\n      });\n    };\n\n    this.isLastOptionBeforeFooter = index => this.props.footer && index === this.refCollection.length - 1 ? true : false;\n  }\n\n  extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup) {\n    const {\n      isGrouped,\n      onFavorite\n    } = this.props;\n    const typeaheadChildren = favoritesGroup ? favoritesGroup.concat(this.state.typeaheadFilteredChildren) : this.state.typeaheadFilteredChildren;\n    const activeElement = this.optionContainerRefCollection[typeaheadCurrIndex];\n    let typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n\n    if (typeaheadActiveChild && typeaheadActiveChild.classList.contains('pf-m-description')) {\n      typeaheadActiveChild = typeaheadActiveChild.firstElementChild;\n    }\n\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n\n    if (isGrouped) {\n      return React.Children.map(typeaheadChildren, group => {\n        if (group.type === Divider) {\n          return group;\n        } else if (group.type === SelectGroup && onFavorite) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, child => child.type === Divider ? child : React.cloneElement(child, {\n              isFocused: activeElement && (activeElement.id === child.props.id || this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${group.props.value}\"`)\n            }))\n          });\n        } else if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, child => child.type === Divider ? child : React.cloneElement(child, {\n              isFocused: typeaheadActiveChild && (typeaheadActiveChild.innerText === child.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${child.props.value}\"`)\n            }))\n          });\n        } else {\n          // group has been filtered down to SelectOption\n          return React.cloneElement(group, {\n            isFocused: typeaheadActiveChild && (typeaheadActiveChild.innerText === group.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${group.props.value}\"`)\n          });\n        }\n      });\n    }\n\n    return typeaheadChildren.map((child, index) => {\n      const childElement = child;\n      return childElement.type.displayName === 'Divider' ? child : React.cloneElement(child, {\n        isFocused: typeaheadActiveChild ? typeaheadActiveChild.innerText === child.props.value.toString() || this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${child.props.value}\"` : index === typeaheadCurrIndex // fallback for view more + typeahead use cases, when the new expanded list is loaded and refCollection hasn't be updated yet\n\n      });\n    });\n  }\n\n  render() {\n    const _a = this.props,\n          {\n      children,\n      chipGroupProps,\n      chipGroupComponent,\n      className,\n      customContent,\n      variant,\n      direction,\n      onSelect,\n      onClear,\n      onBlur,\n      toggleId,\n      isOpen,\n      isGrouped,\n      isPlain,\n      isDisabled,\n      hasPlaceholderStyle,\n      validated,\n      selections: selectionsProp,\n      typeAheadAriaLabel,\n      typeAheadAriaDescribedby,\n      clearSelectionsAriaLabel,\n      toggleAriaLabel,\n      removeSelectionAriaLabel,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedby,\n      'aria-invalid': ariaInvalid,\n      placeholderText,\n      width,\n      maxHeight,\n      toggleIcon,\n      ouiaId,\n      ouiaSafe,\n      hasInlineFilter,\n      isCheckboxSelectionBadgeHidden,\n      inlineFilterPlaceholderText,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onFilter,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onTypeaheadInputChanged,\n      onCreateOption,\n      isCreatable,\n      onToggle,\n      createText,\n      noResultsFoundText,\n      customBadgeText,\n      inputIdPrefix,\n      inputAutoComplete,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isInputValuePersisted,\n      isInputFilterPersisted,\n\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      menuAppendTo,\n      favorites,\n      onFavorite,\n\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      favoritesLabel,\n      footer,\n      loadingVariant,\n      isCreateSelectOptionObject,\n      shouldResetOnSelect,\n      isFlipEnabled\n    } = _a,\n          props = __rest(_a, [\"children\", \"chipGroupProps\", \"chipGroupComponent\", \"className\", \"customContent\", \"variant\", \"direction\", \"onSelect\", \"onClear\", \"onBlur\", \"toggleId\", \"isOpen\", \"isGrouped\", \"isPlain\", \"isDisabled\", \"hasPlaceholderStyle\", \"validated\", \"selections\", \"typeAheadAriaLabel\", \"typeAheadAriaDescribedby\", \"clearSelectionsAriaLabel\", \"toggleAriaLabel\", \"removeSelectionAriaLabel\", 'aria-label', 'aria-labelledby', 'aria-describedby', 'aria-invalid', \"placeholderText\", \"width\", \"maxHeight\", \"toggleIcon\", \"ouiaId\", \"ouiaSafe\", \"hasInlineFilter\", \"isCheckboxSelectionBadgeHidden\", \"inlineFilterPlaceholderText\", \"onFilter\", \"onTypeaheadInputChanged\", \"onCreateOption\", \"isCreatable\", \"onToggle\", \"createText\", \"noResultsFoundText\", \"customBadgeText\", \"inputIdPrefix\", \"inputAutoComplete\", \"isInputValuePersisted\", \"isInputFilterPersisted\", \"menuAppendTo\", \"favorites\", \"onFavorite\", \"favoritesLabel\", \"footer\", \"loadingVariant\", \"isCreateSelectOptionObject\", \"shouldResetOnSelect\", \"isFlipEnabled\"]);\n\n    const {\n      focusFirstOption: openedOnEnter,\n      typeaheadCurrIndex,\n      typeaheadInputValue,\n      typeaheadFilteredChildren,\n      favoritesGroup\n    } = this.state;\n    const selectToggleId = toggleId || `pf-select-toggle-id-${currentId++}`;\n    const selections = Array.isArray(selectionsProp) ? selectionsProp : [selectionsProp]; // Find out if the selected option is a placeholder\n\n    const selectedOption = React.Children.toArray(children).find(option => option.props.value === selections[0]);\n    const isSelectedPlaceholder = selectedOption && selectedOption.props.isPlaceholder;\n    const hasAnySelections = Boolean(selections[0] && selections[0] !== '');\n    const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    let childPlaceholderText = null; // If onFavorites is set,  add isFavorite prop to children and add a Favorites group to the SelectMenu\n\n    let renderableItems = [];\n\n    if (onFavorite) {\n      // if variant is type-ahead call the extendTypeaheadChildren before adding favorites\n      let tempExtendedChildren = children;\n\n      if (variant === 'typeahead' || variant === 'typeaheadmulti') {\n        tempExtendedChildren = this.extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup);\n      } else if (onFavorite) {\n        tempExtendedChildren = favoritesGroup.concat(children);\n      } // mark items that are favorited with isFavorite\n\n\n      renderableItems = extendItemsWithFavorite(tempExtendedChildren, isGrouped, favorites);\n    } else {\n      renderableItems = children;\n    }\n\n    if (!customContent) {\n      if (!hasAnySelections && !placeholderText) {\n        const childPlaceholder = React.Children.toArray(children).filter(child => child.props.isPlaceholder === true);\n        childPlaceholderText = childPlaceholder[0] && this.getDisplay(childPlaceholder[0].props.value, 'node') || children[0] && this.getDisplay(children[0].props.value, 'node');\n      }\n    }\n\n    if (isOpen) {\n      if (renderableItems.find(item => {\n        var _a;\n\n        return ((_a = item) === null || _a === void 0 ? void 0 : _a.key) === 'loading';\n      }) === undefined) {\n        if (loadingVariant === 'spinner') {\n          renderableItems.push(React.createElement(SelectOption, {\n            isLoading: true,\n            key: \"loading\",\n            value: \"loading\"\n          }, React.createElement(Spinner, {\n            size: \"lg\"\n          })));\n        } else if (loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.text) {\n          renderableItems.push(React.createElement(SelectOption, {\n            isLoad: true,\n            key: \"loading\",\n            value: loadingVariant.text,\n            setViewMoreNextIndex: this.setVieMoreNextIndex,\n            onClick: loadingVariant === null || loadingVariant === void 0 ? void 0 : loadingVariant.onClick\n          }));\n        }\n      }\n    }\n\n    const hasOnClear = onClear !== Select.defaultProps.onClear;\n    const clearBtn = React.createElement(\"button\", {\n      className: css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear),\n      onClick: e => {\n        this.clearSelection(e);\n        onClear(e);\n        e.stopPropagation();\n      },\n      \"aria-label\": clearSelectionsAriaLabel,\n      type: \"button\",\n      disabled: isDisabled,\n      ref: this.clearRef,\n      onKeyDown: event => {\n        if (event.key === KeyTypes.Enter) {\n          this.clearRef.current.click();\n        }\n      }\n    }, React.createElement(TimesCircleIcon, {\n      \"aria-hidden\": true\n    }));\n    let selectedChips = null;\n\n    if (variant === SelectVariant.typeaheadMulti) {\n      selectedChips = chipGroupComponent ? chipGroupComponent : React.createElement(ChipGroup, Object.assign({}, chipGroupProps), selections && selections.map(item => React.createElement(Chip, {\n        key: item,\n        onClick: e => onSelect(e, item),\n        closeBtnAriaLabel: removeSelectionAriaLabel\n      }, this.getDisplay(item, 'node'))));\n    }\n\n    if (hasInlineFilter) {\n      const filterBox = React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        key: \"inline-filter\",\n        className: css(styles.selectMenuSearch)\n      }, React.createElement(\"input\", {\n        key: \"inline-filter-input\",\n        type: \"search\",\n        className: css(formStyles.formControl, formStyles.modifiers.search),\n        onChange: this.onChange,\n        placeholder: inlineFilterPlaceholderText,\n        onKeyDown: event => {\n          if (event.key === KeyTypes.ArrowUp) {\n            this.handleMenuKeys(0, 0, 'up');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowDown) {\n            this.handleMenuKeys(0, 0, 'down');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowLeft) {\n            this.handleMenuKeys(0, 0, 'left');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.ArrowRight) {\n            this.handleMenuKeys(0, 0, 'right');\n            event.preventDefault();\n          } else if (event.key === KeyTypes.Tab && variant !== SelectVariant.checkbox && this.props.footer) {\n            // tab to footer or close menu if shift key\n            if (event.shiftKey) {\n              this.onToggle(false, event);\n            } else {\n              const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n\n              if (tabbableItems.length > 0) {\n                tabbableItems[0].focus();\n                event.stopPropagation();\n                event.preventDefault();\n              } else {\n                this.onToggle(false, event);\n              }\n            }\n          } else if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n            // More modal-like experience for checkboxes\n            // Let SelectOption handle this\n            if (event.shiftKey) {\n              this.handleMenuKeys(0, 0, 'up');\n            } else {\n              this.handleMenuKeys(0, 0, 'down');\n            }\n\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        },\n        ref: this.filterRef,\n        autoComplete: inputAutoComplete\n      })), React.createElement(Divider, {\n        key: \"inline-filter-divider\"\n      }));\n      renderableItems = [filterBox, ...typeaheadFilteredChildren].map((option, index) => React.cloneElement(option, {\n        key: index\n      }));\n    }\n\n    let variantProps;\n    let variantChildren;\n\n    if (customContent) {\n      variantProps = {\n        selected: selections,\n        openedOnEnter,\n        isCustomContent: true\n      };\n      variantChildren = customContent;\n    } else {\n      switch (variant) {\n        case 'single':\n          variantProps = {\n            selected: selections[0],\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n\n        case 'checkbox':\n          variantProps = {\n            checked: selections,\n            isGrouped,\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n\n        case 'typeahead':\n          variantProps = {\n            selected: selections[0],\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n\n          if (variantChildren.length === 0) {\n            variantChildren.push(React.createElement(SelectOption, {\n              isDisabled: true,\n              key: 0,\n              value: noResultsFoundText,\n              isNoResultsOption: true\n            }));\n          }\n\n          break;\n\n        case 'typeaheadmulti':\n          variantProps = {\n            selected: selections,\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n\n          if (variantChildren.length === 0) {\n            variantChildren.push(React.createElement(SelectOption, {\n              isDisabled: true,\n              key: 0,\n              value: noResultsFoundText,\n              isNoResultsOption: true\n            }));\n          }\n\n          break;\n      }\n    }\n\n    const innerMenu = React.createElement(SelectMenu // This removes the `position: absolute` styling from the `.pf-c-select__menu`\n    // allowing the menu to flip correctly\n    , Object.assign({}, isFlipEnabled && {\n      style: {\n        position: 'revert'\n      }\n    }, props, {\n      isGrouped: isGrouped,\n      selected: selections\n    }, variantProps, {\n      openedOnEnter: openedOnEnter,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      sendRef: this.sendRef,\n      keyHandler: this.handleMenuKeys,\n      maxHeight: maxHeight,\n      ref: this.menuComponentRef,\n      footer: footer,\n      footerRef: this.footerRef,\n      isLastOptionBeforeFooter: this.isLastOptionBeforeFooter\n    }), variantChildren);\n    const menuContainer = footer ? React.createElement(\"div\", {\n      className: css(styles.selectMenu)\n    }, \" \", innerMenu, \" \") : innerMenu;\n    const popperContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className)\n    }, width && {\n      style: {\n        width\n      }\n    }, ariaDescribedby && {\n      'aria-describedby': ariaDescribedby\n    }, validated !== ValidatedOptions.default && {\n      'aria-invalid': ariaInvalid\n    }), isOpen && menuContainer);\n    const mainContainer = React.createElement(\"div\", Object.assign({\n      className: css(styles.select, isOpen && styles.modifiers.expanded, validated === ValidatedOptions.success && styles.modifiers.success, validated === ValidatedOptions.warning && styles.modifiers.warning, validated === ValidatedOptions.error && styles.modifiers.invalid, direction === SelectDirection.up && styles.modifiers.top, className),\n      ref: this.parentRef\n    }, getOUIAProps(Select.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe), width && {\n      style: {\n        width\n      }\n    }, ariaDescribedby && {\n      'aria-describedby': ariaDescribedby\n    }, validated !== ValidatedOptions.default && {\n      'aria-invalid': ariaInvalid\n    }), React.createElement(SelectToggle, Object.assign({\n      id: selectToggleId,\n      parentRef: this.parentRef,\n      menuRef: this.menuComponentRef\n    }, footer && {\n      footerRef: this.footerRef\n    }, {\n      isOpen: isOpen,\n      isPlain: isPlain,\n      hasPlaceholderStyle: hasPlaceholderStyle && (!selections.length || selections[0] === null || isSelectedPlaceholder),\n      onToggle: this.onToggle,\n      onEnter: this.onEnter,\n      onClose: this.onClose,\n      onBlur: onBlur,\n      variant: variant,\n      \"aria-labelledby\": `${ariaLabelledBy || ''} ${selectToggleId}`,\n      \"aria-label\": toggleAriaLabel,\n      handleTypeaheadKeys: this.handleTypeaheadKeys,\n      moveFocusToLastMenuItem: this.moveFocusToLastMenuItem,\n      isDisabled: isDisabled,\n      hasClearButton: hasOnClear,\n      hasFooter: footer !== undefined,\n      onClickTypeaheadToggleButton: this.onClickTypeaheadToggleButton\n    }), customContent && React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, placeholderText)), variant === SelectVariant.single && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, this.getDisplay(selections[0], 'node') || placeholderText || childPlaceholderText)), hasOnClear && hasAnySelections && clearBtn), variant === SelectVariant.checkbox && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"span\", {\n      className: css(styles.selectToggleText)\n    }, placeholderText), !isCheckboxSelectionBadgeHidden && hasAnySelections && React.createElement(\"div\", {\n      className: css(styles.selectToggleBadge)\n    }, React.createElement(\"span\", {\n      className: css(badgeStyles.badge, badgeStyles.modifiers.read)\n    }, this.generateSelectedBadge()))), hasOnClear && hasAnySelections && clearBtn), variant === SelectVariant.typeahead && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), React.createElement(\"input\", Object.assign({\n      className: css(formStyles.formControl, styles.selectToggleTypeahead),\n      \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id,\n      id: `${selectToggleId}-select-typeahead`,\n      \"aria-label\": typeAheadAriaLabel\n    }, typeAheadAriaDescribedby && {\n      'aria-describedby': typeAheadAriaDescribedby\n    }, {\n      placeholder: placeholderText,\n      value: typeaheadInputValue !== null ? typeaheadInputValue : this.getDisplay(selections[0], 'text') || '',\n      type: \"text\",\n      onClick: this.onClick,\n      onChange: this.onChange,\n      autoComplete: inputAutoComplete,\n      disabled: isDisabled,\n      ref: this.inputRef\n    }))), hasOnClear && (selections[0] || typeaheadInputValue) && clearBtn), variant === SelectVariant.typeaheadMulti && !customContent && React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: css(styles.selectToggleWrapper)\n    }, toggleIcon && React.createElement(\"span\", {\n      className: css(styles.selectToggleIcon)\n    }, toggleIcon), selections && Array.isArray(selections) && selections.length > 0 && selectedChips, React.createElement(\"input\", Object.assign({\n      className: css(formStyles.formControl, styles.selectToggleTypeahead),\n      \"aria-activedescendant\": typeaheadActiveChild && typeaheadActiveChild.id,\n      id: `${selectToggleId}-select-multi-typeahead-typeahead`,\n      \"aria-label\": typeAheadAriaLabel,\n      \"aria-invalid\": validated === ValidatedOptions.error\n    }, typeAheadAriaDescribedby && {\n      'aria-describedby': typeAheadAriaDescribedby\n    }, {\n      placeholder: placeholderText,\n      value: typeaheadInputValue !== null ? typeaheadInputValue : '',\n      type: \"text\",\n      onChange: this.onChange,\n      onClick: this.onClick,\n      autoComplete: inputAutoComplete,\n      disabled: isDisabled,\n      ref: this.inputRef\n    }))), hasOnClear && (selections && selections.length > 0 || typeaheadInputValue) && clearBtn), validated === ValidatedOptions.success && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(CheckCircleIcon, {\n      \"aria-hidden\": \"true\"\n    })), validated === ValidatedOptions.error && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(ExclamationCircleIcon, {\n      \"aria-hidden\": \"true\"\n    })), validated === ValidatedOptions.warning && React.createElement(\"span\", {\n      className: css(styles.selectToggleStatusIcon)\n    }, React.createElement(ExclamationTriangleIcon, {\n      \"aria-hidden\": \"true\"\n    }))), isOpen && menuAppendTo === 'inline' && menuContainer);\n\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n\n      return null;\n    };\n\n    return React.createElement(GenerateId, null, randomId => React.createElement(SelectContext.Provider, {\n      value: {\n        onSelect,\n        onFavorite,\n        onClose: this.onClose,\n        variant,\n        inputIdPrefix: inputIdPrefix || randomId,\n        shouldResetOnSelect\n      }\n    }, menuAppendTo === 'inline' ? mainContainer : React.createElement(Popper, {\n      trigger: mainContainer,\n      popper: popperContainer,\n      direction: direction,\n      appendTo: menuAppendTo === 'parent' ? getParentElement() : menuAppendTo,\n      isVisible: isOpen\n    })));\n  }\n\n}\nSelect.displayName = 'Select';\nSelect.defaultProps = {\n  children: [],\n  className: '',\n  position: SelectPosition.left,\n  direction: SelectDirection.down,\n  toggleId: null,\n  isOpen: false,\n  isGrouped: false,\n  isPlain: false,\n  isDisabled: false,\n  hasPlaceholderStyle: false,\n  isCreatable: false,\n  validated: 'default',\n  'aria-label': '',\n  'aria-labelledby': '',\n  'aria-describedby': '',\n  'aria-invalid': false,\n  typeAheadAriaLabel: '',\n  typeAheadAriaDescribedby: '',\n  clearSelectionsAriaLabel: 'Clear all',\n  toggleAriaLabel: 'Options menu',\n  removeSelectionAriaLabel: 'Remove',\n  selections: [],\n  createText: 'Create',\n  placeholderText: '',\n  noResultsFoundText: 'No results found',\n  variant: SelectVariant.single,\n  width: '',\n  onClear: () => undefined,\n  onCreateOption: () => undefined,\n  toggleIcon: null,\n  onFilter: null,\n  onTypeaheadInputChanged: null,\n  customContent: null,\n  hasInlineFilter: false,\n  inlineFilterPlaceholderText: null,\n  customBadgeText: null,\n  inputIdPrefix: '',\n  inputAutoComplete: 'off',\n  menuAppendTo: 'inline',\n  favorites: [],\n  favoritesLabel: 'Favorites',\n  ouiaSafe: true,\n  chipGroupComponent: null,\n  isInputValuePersisted: false,\n  isInputFilterPersisted: false,\n  isCreateSelectOptionObject: false,\n  shouldResetOnSelect: true,\n  isFlipEnabled: false\n};","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,uDAAnB;AACA,OAAOC,WAAP,MAAwB,qDAAxB;AACA,OAAOC,UAAP,MAAuB,kEAAvB;AACA,OAAOC,YAAP,MAAyB,uDAAzB;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,eAAP,MAA4B,0DAA5B;AACA,OAAOC,eAAP,MAA4B,0DAA5B;AACA,OAAOC,uBAAP,MAAoC,kEAApC;AACA,OAAOC,qBAAP,MAAkC,gEAAlC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAAiD,gBAAjD;AACA,SAASC,WAAT,QAA8C,eAA9C;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,yBALF,QAMO,mBANP;AAOA,SAASC,SAAT,QAA0C,cAA1C;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SACEC,UADF,EAEEC,YAFF,EAGEC,YAHF,EAKEC,gBALF,EAOEC,UAPF,QAQO,eARP;AASA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAA8BC,MAA9B,QAA4C,6BAA5C;AACA,SAASC,yBAAT,EAAoCC,uBAApC,QAAmE,yBAAnE;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,oBAAT,QAAqC,oBAArC,C,CAEA;;AACA,IAAIC,SAAS,GAAG,CAAhB;AA4JA,OAAM,MAAOC,MAAP,SAAsBnC,KAAK,CAACoC,SAA5B,CAA2E;EAAjFC;IAAA;;uBAAA;IAAA;IAEU,iBAAYrC,KAAK,CAACsC,SAAN,EAAZ;IACA,wBAAmBtC,KAAK,CAACsC,SAAN,EAAnB;IACA,iBAAYtC,KAAK,CAACsC,SAAN,EAAZ;IACA,gBAAWtC,KAAK,CAACsC,SAAN,EAAX;IACA,gBAAWtC,KAAK,CAACsC,SAAN,EAAX;IACA,qBAAiC,CAAC,EAAD,CAAjC;IACA,oCAA8C,EAA9C;IACA,iBAAYtC,KAAK,CAACsC,SAAN,EAAZ;IAqDR,aAAqB;MACnBC,gBAAgB,EAAE,KADC;MAEnBC,mBAAmB,EAAE,IAFF;MAGnBC,yBAAyB,EAAEzC,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuB,KAAKC,KAAL,CAAWC,QAAlC,CAHR;MAInBC,cAAc,EAAE,EAJG;MAKnBC,kBAAkB,EAAE,CAAC,CALF;MAMnBC,oBAAoB,EAAE,CAAC,CANJ;MAOnBC,cAAc,EAAE,EAPG;MAQnBC,uBAAuB,EAAE,KARN;MASnBC,WAAW,EAAE1B,gBAAgB,CAACU,MAAM,CAACiB,WAAR,EAAqB,KAAKR,KAAL,CAAWS,OAAhC,CATV;MAUnBC,iBAAiB,EAAE,CAAC;IAVD,CAArB;;IAaA,+BAA2BP,kBAAD,IACxB,KAAKQ,aAAL,CAAmBR,kBAAnB,IAAyC,KAAKQ,aAAL,CAAmBR,kBAAnB,EAAuC,CAAvC,CAAzC,GAAqF,IADvF;;IAGA,0BAAqB,CAACS,SAAD,EAAyBC,SAAzB,KAAmD;MACtE,IAAI,KAAKb,KAAL,CAAWc,eAAf,EAAgC;QAC9B,KAAKH,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,IAA2B,KAAKI,SAAL,CAAeC,OAA1C;MACD,CAHqE,CAKtE;;;MACA,IAAI,CAACH,SAAS,CAAClB,gBAAX,IAA+B,KAAKsB,KAAL,CAAWtB,gBAA1C,IAA8D,CAAC,KAAKK,KAAL,CAAWkB,aAA9E,EAA6F;QAC3F,MAAMC,QAAQ,GAAG,KAAKR,aAAL,CAAmBS,IAAnB,CAAwBC,GAAG,IAAIA,GAAG,KAAK,IAAvC,CAAjB;;QACA,IAAIF,QAAQ,IAAIA,QAAQ,CAAC,CAAD,CAAxB,EAA6B;UAC3BA,QAAQ,CAAC,CAAD,CAAR,CAAYG,KAAZ;QACD;MACF,CALD,MAKO,KACL;MACA,KAAKL,KAAL,CAAWP,iBAAX,KAAiC,CAAC,CAAlC,IACA,KAAKC,aAAL,CAAmBY,MAAnB,GAA4B,KAAKN,KAAL,CAAWP,iBADvC,IAEA,KAAKV,KAAL,CAAWwB,cAAX,KAA8B,SAF9B,IAGA,KAAKb,aAAL,CAAmB,KAAKM,KAAL,CAAWP,iBAA9B,EAAiD,CAAjD,CAHA,IAIA,KAAKV,KAAL,CAAWS,OAAX,KAAuB,WAJvB,IAIsC;MACtC,KAAKT,KAAL,CAAWS,OAAX,KAAuB,gBAPlB,EAQL;QACA,KAAKE,aAAL,CAAmB,KAAKM,KAAL,CAAWP,iBAA9B,EAAiD,CAAjD,EAAoDY,KAApD;MACD;;MAED,MAAMG,kBAAkB,GACtBb,SAAS,CAACX,QAAV,CAAmBsB,MAAnB,KAA8B,KAAKvB,KAAL,CAAWC,QAAX,CAAoBsB,MAAlD,IACAX,SAAS,CAACX,QAAV,CAAmByB,IAAnB,CAAwB,CAACC,SAAD,EAAgCC,KAAhC,KAAiD;QACvE,MAAMC,cAAc,GAAGF,SAAS,CAAC3B,KAAjC;QACA,MAAM8B,SAAS,GAAG,KAAK9B,KAAL,CAAWC,QAAX,CAAoB2B,KAApB,CAAlB;QACA,MAAM;UAAE5B,KAAK,EAAE+B;QAAT,IAA4BD,SAAlC;;QAEA,IAAID,cAAc,IAAIE,cAAtB,EAAsC;UACpC,OACEF,cAAc,CAACG,KAAf,KAAyBD,cAAc,CAACC,KAAxC,IACAH,cAAc,CAACI,KAAf,KAAyBF,cAAc,CAACE,KADxC,IAEAJ,cAAc,CAACK,UAAf,KAA8BH,cAAc,CAACG,UAF7C,IAGAL,cAAc,CAACM,aAAf,KAAiCJ,cAAc,CAACI,aAJlD;QAMD,CAPD,MAOO;UACL,OAAOR,SAAS,KAAKG,SAArB;QACD;MACF,CAfD,CAFF;;MAmBA,IAAIL,kBAAJ,EAAwB;QACtB,KAAKW,+BAAL,CAAqCvB,SAAS,CAACjB,mBAAV,IAAiC,EAAtE,EAA0E,IAA1E;MACD,CA5CqE,CA8CtE;MACA;MACA;;;MACA,IACE,KAAKI,KAAL,CAAWqC,UAAX,KACC,KAAKrC,KAAL,CAAWsC,SAAX,CAAqBf,MAArB,KAAgCX,SAAS,CAAC0B,SAAV,CAAoBf,MAApD,IACC,KAAKN,KAAL,CAAWpB,yBAAX,KAAyCgB,SAAS,CAAChB,yBAFrD,CADF,EAIE;QACA,MAAM0C,sBAAsB,GAC1B,KAAKvC,KAAL,CAAWS,OAAX,KAAuB,WAAvB,IAAsC,KAAKT,KAAL,CAAWS,OAAX,KAAuB,gBAA7D,GACI,KAAKQ,KAAL,CAAWpB,yBADf,GAEI,KAAKG,KAAL,CAAWC,QAHjB;QAIA,MAAMuC,mBAAmB,GAAGtD,yBAAyB,CACnDqD,sBADmD,EAEnD,KAAKvC,KAAL,CAAWyC,SAFwC,EAGnD,KAAKzC,KAAL,CAAWsC,SAHwC,CAArD;QAKA,MAAMpC,cAAc,GAAGsC,mBAAmB,CAACjB,MAApB,GACnB,CACEnE,oBAACY,WAAD,EAAY;UAAC0E,GAAG,EAAC,WAAL;UAAiBT,KAAK,EAAE,KAAKjC,KAAL,CAAW2C;QAAnC,CAAZ,EACGH,mBADH,CADF,EAIEpF,oBAAC4B,OAAD,EAAQ;UAAC0D,GAAG,EAAC;QAAL,CAAR,CAJF,CADmB,GAOnB,EAPJ;QAQA,KAAKE,QAAL,CAAc;UAAE1C;QAAF,CAAd;MACD;IACF,CAzED;;IA2EA,eAAU,MAAK;MACb,KAAK0C,QAAL,CAAc;QAAEjD,gBAAgB,EAAE;MAApB,CAAd;IACD,CAFD;;IAIA,gBAAW,CAACkD,UAAD,EAAsBC,CAAtB,KAA+F;MACxG,MAAM;QAAEC,qBAAF;QAAyBC,QAAzB;QAAmCC,QAAnC;QAA6CnC;MAA7C,IAAiE,KAAKd,KAA5E;;MACA,IAAI,CAAC6C,UAAD,IAAeE,qBAAf,IAAwCC,QAA5C,EAAsD;QACpDA,QAAQ,CAACE,SAAD,EAAY,KAAKC,QAAL,CAAcnC,OAAd,GAAwB,KAAKmC,QAAL,CAAcnC,OAAd,CAAsBgB,KAA9C,GAAsD,EAAlE,CAAR;MACD;;MACD,IAAIa,UAAU,IAAI/B,eAAlB,EAAmC;QACjC,KAAK8B,QAAL,CAAc;UACZjD,gBAAgB,EAAE;QADN,CAAd;MAGD;;MACDsD,QAAQ,CAACJ,UAAD,EAAaC,CAAb,CAAR;IACD,CAXD;;IAaA,eAAU,MAAK;MACb,MAAM;QAAEM;MAAF,IAA6B,KAAKpD,KAAxC;MAEA,KAAK4C,QAAL,CAAaS;QACX1D,gBAAgB,EAAE,KADP;QAEXC,mBAAmB,EAAE;MAFV,GAGP,CAACwD,sBAAD,IAA2B;QAC7BvD,yBAAyB,EAAEzC,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuB,KAAKC,KAAL,CAAWC,QAAlC;MADE,CAHpB,GAKT;QACFE,kBAAkB,EAAE,CAAC,CADnB;QAEFG,uBAAuB,EAAE,KAFvB;QAGFI,iBAAiB,EAAE,CAAC;MAHlB,CALS,CAAb;IAUD,CAbD;;IAeA,gBAAYoC,CAAD,IAA2C;MACpD,IAAIA,CAAC,CAACQ,MAAF,CAAStB,KAAT,CAAeuB,QAAf,OAA8B,EAA9B,IAAoC,CAAC,KAAKvD,KAAL,CAAWwD,MAApD,EAA4D;QAC1D,KAAKP,QAAL,CAAc,IAAd,EAAoBH,CAApB;MACD;;MAED,IAAI,KAAK9C,KAAL,CAAWyD,uBAAf,EAAwC;QACtC,KAAKzD,KAAL,CAAWyD,uBAAX,CAAmCX,CAAC,CAACQ,MAAF,CAAStB,KAAT,CAAeuB,QAAf,EAAnC;MACD;;MAED,KAAKX,QAAL,CAAc;QACZzC,kBAAkB,EAAE,CAAC,CADT;QAEZP,mBAAmB,EAAEkD,CAAC,CAACQ,MAAF,CAAStB,KAFlB;QAGZ3B,cAAc,EAAEyC,CAAC,CAACQ,MAAF,CAAStB;MAHb,CAAd;MAKA,KAAKI,+BAAL,CAAqCU,CAAC,CAACQ,MAAF,CAAStB,KAAT,CAAeuB,QAAf,EAArC,EAAgET,CAAhE;MACA,KAAKnC,aAAL,GAAqB,CAAC,EAAD,CAArB;IACD,CAhBD;;IAkBA,uCAAkC,CAACf,mBAAD,EAA8BkD,CAA9B,KAA+E;MAC/G,IAAIjD,yBAAJ;MAEA,MAAM;QACJ6D,QADI;QAEJC,WAFI;QAGJC,cAHI;QAIJC,UAJI;QAKJC,kBALI;QAMJ7D,QANI;QAOJwC,SAPI;QAQJsB,0BARI;QASJvC;MATI,IAUF,KAAKxB,KAVT;;MAYA,IAAI0D,QAAJ,EAAc;QACZ;;;QAGA7D,yBAAyB,GAAG6D,QAAQ,CAACZ,CAAD,EAAIA,CAAC,GAAGA,CAAC,CAACQ,MAAF,CAAStB,KAAZ,GAAoBpC,mBAAzB,CAAR,IAAyDK,QAArF;MACD,CALD,MAKO;QACL,IAAI+D,KAAJ;;QACA,IAAI;UACFA,KAAK,GAAG,IAAIC,MAAJ,CAAWrE,mBAAmB,CAAC2D,QAApB,EAAX,EAA2C,GAA3C,CAAR;QACD,CAFD,CAEE,OAAOW,GAAP,EAAY;UACZF,KAAK,GAAG,IAAIC,MAAJ,CAAWrE,mBAAmB,CAAC2D,QAApB,GAA+BY,OAA/B,CAAuC,qBAAvC,EAA8D,MAA9D,CAAX,EAAkF,GAAlF,CAAR;QACD;;QACD,MAAMC,aAAa,GAAGhH,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuBE,QAAvB,CAAtB;;QACA,IAAIwC,SAAJ,EAAe;UACb,MAAM4B,WAAW,GAAIC,KAAD,IAClBA,KAAK,CAACtE,KAAN,CAAYgC,KAAZ,IACAsC,KAAK,CAACtE,KAAN,CAAYgC,KAAZ,CAAkBuB,QADlB,IAEA,KAAKgB,UAAL,CAAgBD,KAAK,CAACtE,KAAN,CAAYgC,KAAZ,CAAkBuB,QAAlB,EAAhB,EAA8C,MAA9C,EAAsDiB,MAAtD,CAA6DR,KAA7D,MAAwE,CAH1E;;UAIAnE,yBAAyB,GACvBD,mBAAmB,CAAC2D,QAApB,OAAmC,EAAnC,GACInG,KAAK,CAAC0C,QAAN,CAAe2E,GAAf,CAAmBxE,QAAnB,EAA6ByE,KAAK,IAAG;YACnC,IAAItH,KAAK,CAACuH,cAAN,CAAqBD,KAArB,KAA+BA,KAAK,CAACE,IAAN,KAAe5G,WAAlD,EAA+D;cAC7D,MAAM6G,qBAAqB,GAAIzH,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuB2E,KAAK,CAAC1E,KAAN,CAAYC,QAAnC,EAE1B6E,MAF0B,CAEnBT,WAFmB,CAA/B;;cAGA,IAAIQ,qBAAqB,CAACtD,MAAtB,GAA+B,CAAnC,EAAsC;gBACpC,OAAOnE,KAAK,CAAC2H,YAAN,CAAmBL,KAAnB,EAA0B;kBAC/BM,OAAO,EAAEN,KAAK,CAAC1E,KAAN,CAAYiC,KAAZ,IAAqByC,KAAK,CAAC1E,KAAN,CAAYiC,KAAZ,CAAkBkC,OAAlB,CAA0B,KAA1B,EAAiC,GAAjC,CADC;kBAE/BlE,QAAQ,EAAE4E;gBAFqB,CAA1B,CAAP;cAID;YACF,CAVD,MAUO;cACL,OAAQzH,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuB2E,KAAvB,EAAyEI,MAAzE,CAAgFT,WAAhF,CAAR;YACD;UACF,CAdD,CADJ,GAgBID,aAjBN;QAkBD,CAvBD,MAuBO;UACLvE,yBAAyB,GACvBD,mBAAmB,CAAC2D,QAApB,OAAmC,EAAnC,GACIa,aAAa,CAACU,MAAd,CAAqBR,KAAK,IAAG;YAC3B,MAAMW,YAAY,GAAGX,KAAK,CAACtE,KAAN,CAAYgC,KAAjC,CAD2B,CAE3B;;YACA,IAAI,CAACiD,YAAL,EAAmB;cACjB,OAAO,IAAP;YACD;;YAED,MAAMC,oBAAoB,GACxB,OAAOD,YAAP,KAAwB,QAAxB,IACCA,YAAmC,CAAC1B,QADrC,IAEC0B,YAAmC,CAACE,SAHvC,CAP2B,CAY3B;;YACA,IAAI3D,cAAc,KAAK,SAAnB,IAAgC,eAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAE4D,IAAhB,MAAyBH,YAA7D,EAA2E;cACzE,OAAO,IAAP;YACD,CAf0B,CAiB3B;;;YACA,IAAIzD,cAAc,KAAK,SAAnB,IAAgCyD,YAAY,KAAK,SAArD,EAAgE;cAC9D,OAAO,IAAP;YACD;;YAED,IAAIC,oBAAJ,EAA0B;cACxB,OAAQD,YAAmC,CAACE,SAApC,CAA8CvF,mBAA9C,CAAR;YACD,CAFD,MAEO;cACL,OAAO,KAAK2E,UAAL,CAAgBD,KAAK,CAACtE,KAAN,CAAYgC,KAAZ,CAAkBuB,QAAlB,EAAhB,EAA8C,MAA9C,EAAsDiB,MAAtD,CAA6DR,KAA7D,MAAwE,CAA/E;YACD;UACF,CA3BD,CADJ,GA6BII,aA9BN;QA+BD;MACF;;MACD,IAAI,CAACvE,yBAAL,EAAgC;QAC9BA,yBAAyB,GAAG,EAA5B;MACD;;MACD,IAAIA,yBAAyB,CAAC0B,MAA1B,KAAqC,CAAzC,EAA4C;QAC1C,CAACoC,WAAD,IACE9D,yBAAyB,CAACwF,IAA1B,CACEjI,oBAACW,YAAD,EAAa;UAACmE,UAAU,MAAX;UAAYQ,GAAG,EAAC,YAAhB;UAA6BV,KAAK,EAAE8B,kBAApC;UAAwDwB,iBAAiB;QAAzE,CAAb,CADF,CADF;MAID;;MACD,IAAI3B,WAAW,IAAI/D,mBAAmB,KAAK,EAA3C,EAA+C;QAC7C,MAAM2F,QAAQ,GAAG3F,mBAAjB;;QACA,IACE,CAACC,yBAAyB,CAACuB,IAA1B,CACEoE,CAAD,IACEA,CAAC,CAACxF,KAAF,CAAQgC,KAAR,IAAiBwD,CAAC,CAACxF,KAAF,CAAQgC,KAAR,CAAcuB,QAAd,GAAyBkC,WAAzB,OAA2CF,QAAQ,CAAChC,QAAT,GAAoBkC,WAApB,EAF/D,CADH,EAKE;UACA,MAAMC,cAAc,GAAG3B,0BAA0B,GAC5C;YACCR,QAAQ,EAAE,MAAMgC,QADjB;YAECJ,SAAS,EAAEnD,KAAK,IACd,KAAKuB,QAAL,GACGkC,WADH,GAEGE,QAFH,CAEY3D,KAAK,CAACuB,QAAN,GAAiBkC,WAAjB,EAFZ;UAHH,CAD4C,GAQ7CF,QARJ;UAUA1F,yBAAyB,CAACwF,IAA1B,CACEjI,oBAACW,YAAD,EAAa;YACX2E,GAAG,EAAE,UAAU6C,QAAQ,EADZ;YAEXvD,KAAK,EAAE0D,cAFI;YAGXE,OAAO,EAAE,MAAMhC,cAAc,IAAIA,cAAc,CAAC2B,QAAD;UAHpC,CAAb,EAKG1B,UALH,SAKiB0B,QALjB,OADF;QASD;MACF;;MAED,KAAK3C,QAAL,CAAc;QACZ/C;MADY,CAAd;IAGD,CA/HD;;IAiIA,eAAWiD,CAAD,IAAwB;MAChC,IAAI,CAAC,KAAK9C,KAAL,CAAWwD,MAAhB,EAAwB;QACtB,KAAKP,QAAL,CAAc,IAAd,EAAoBH,CAApB;MACD;IACF,CAJD;;IAMA,sBAAkB+C,EAAD,IAAyB;MACxC,KAAKjD,QAAL,CAAc;QACZhD,mBAAmB,EAAE,IADT;QAEZC,yBAAyB,EAAEzC,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuB,KAAKC,KAAL,CAAWC,QAAlC,CAFf;QAGZE,kBAAkB,EAAE,CAAC;MAHT,CAAd;IAKD,CAND;;IAmFA,eAAU,CACR2F,SADQ,EAERC,WAFQ,EAGRC,kBAHQ,EAIRpE,KAJQ,KAKN;MACF,KAAKjB,aAAL,CAAmBiB,KAAnB,IAA4B,CAACkE,SAAD,EAA2BC,WAA3B,CAA5B;MACA,KAAKE,4BAAL,CAAkCrE,KAAlC,IAA2CoE,kBAA3C;IACD,CARD;;IAUA,sBAAiB,CAACpE,KAAD,EAAgBsE,UAAhB,EAAoCC,QAApC,KAAwD;MACvEzH,UAAU,CAACkD,KAAD,EAAQsE,UAAR,EAAoBC,QAApB,EAA8B,KAAKxF,aAAnC,EAAkD,KAAKA,aAAvD,CAAV;;MACA,IAAI,KAAKX,KAAL,CAAWS,OAAX,KAAuBtC,aAAa,CAACiI,SAArC,IAAkD,KAAKpG,KAAL,CAAWS,OAAX,KAAuBtC,aAAa,CAACkI,cAA3F,EAA2G;QACzG,IAAIF,QAAQ,KAAK,KAAjB,EAAwB;UACtB,KAAKG,mBAAL,CAAyBH,QAAzB;QACD;MACF;IACF,CAPD;;IASA,iBAAY,UAACI,SAAD,EAA0D;MAAA,IAAtCC,kBAAsC,uEAAR,IAAQ;MACpE,MAAM;QAAE7C,WAAF;QAAeE;MAAf,IAA8B,KAAI,CAAC7D,KAAzC;MAEA,MAAMyG,iBAAiB,GAAGC,OAAO,CAC/B,KAAI,CAAC/F,aAAL,CAAmB4F,SAAnB,EAA8B,CAA9B,KAAoC,KAAI,CAAC5F,aAAL,CAAmB4F,SAAnB,EAA8B,CAA9B,EAAiCI,SAAjC,CAA2CC,QAA3C,CAAoD,kBAApD,CADL,CAAjC;MAGA,MAAMC,MAAM,GAAGH,OAAO,CACpB,KAAI,CAAC/F,aAAL,CAAmB4F,SAAnB,EAA8B,CAA9B,KAAoC,KAAI,CAAC5F,aAAL,CAAmB4F,SAAnB,EAA8B,CAA9B,EAAiCI,SAAjC,CAA2CC,QAA3C,CAAoD,WAApD,CADhB,CAAtB;MAGA,MAAME,aAAa,GAAGL,iBAAiB,GAClC,KAAI,CAAC9F,aAAL,CAAmB4F,SAAnB,EAA8B,CAA9B,EAAiCQ,iBADC,GAEnC,KAAI,CAACpG,aAAL,CAAmB4F,SAAnB,EAA8B,CAA9B,CAFJ;MAIA,IAAI3G,mBAAmB,GAAG,EAA1B;;MACA,IAAI+D,WAAW,IAAImD,aAAa,CAACE,SAAd,CAAwBrB,QAAxB,CAAiC9B,UAAjC,CAAnB,EAAiE;QAC/DjE,mBAAmB,GAAG,KAAI,CAACqB,KAAL,CAAWZ,cAAjC;MACD,CAFD,MAEO,IAAIyG,aAAa,IAAI,CAACD,MAAtB,EAA8B;QACnC;QACAjH,mBAAmB,GAAGkH,aAAa,CAACE,SAApC;MACD;;MACD,KAAI,CAACpE,QAAL,CAAc/B,SAAS,KAAK;QAC1BV,kBAAkB,EAAEqG,kBAAkB,GAAGD,SAAH,GAAe1F,SAAS,CAACV,kBADrC;QAE1BC,oBAAoB,EAAEmG,SAFI;QAG1B3G;MAH0B,CAAL,CAAvB;IAKD,CAzBD;;IA2BA,iCAA4B,MAAK;MAC/B,MAAM;QAAEO,kBAAF;QAAsBC;MAAtB,IAA+C,KAAKa,KAA1D;MACA,IAAIgG,aAAa,GAAG,CAApB;;MAEA,IAAI9G,kBAAkB,KAAK,CAAC,CAA5B,EAA+B;QAC7B8G,aAAa,GAAG9G,kBAAhB;MACD,CAFD,MAEO,IAAIC,oBAAoB,KAAK,CAAC,CAA9B,EAAiC;QACtC6G,aAAa,GAAG7G,oBAAhB;MACD;;MAED,IAAI,KAAKO,aAAL,CAAmBsG,aAAnB,MAAsC,IAAtC,IAA8C,KAAKtG,aAAL,CAAmBsG,aAAnB,EAAkC,CAAlC,MAAyC,IAA3F,EAAiG;QAC/F,KAAKtG,aAAL,CAAmBsG,aAAnB,EAAkC,CAAlC,EAAqC3F,KAArC;MACD,CAFD,MAEO;QACL,KAAK4F,QAAL,CAAclG,OAAd,CAAsBM,KAAtB;MACD;;MAED,KAAKsB,QAAL,CAAc;QACZtC,uBAAuB,EAAE,IADb;QAEZH,kBAAkB,EAAE,CAAC;MAFT,CAAd;IAID,CApBD;;IAsBA,+BAA0B,MAAK;MAC7B,MAAMgH,gBAAgB,GAAG,KAAKxG,aAAL,CAAmBY,MAA5C;;MACA,IACE4F,gBAAgB,GAAG,CAAnB,IACA,KAAKxG,aAAL,CAAmBwG,gBAAgB,GAAG,CAAtC,MAA6C,IAD7C,IAEA,KAAKxG,aAAL,CAAmBwG,gBAAgB,GAAG,CAAtC,EAAyC,CAAzC,MAAgD,IAHlD,EAIE;QACA,KAAKxG,aAAL,CAAmBwG,gBAAgB,GAAG,CAAtC,EAAyC,CAAzC,EAA4C7F,KAA5C;MACD;IACF,CATD;;IAWA,2BAAsB,UAAC6E,QAAD,EAAgD;MAAA,IAA7BiB,QAA6B,uEAAT,KAAS;MACpE,MAAM;QAAE5D,MAAF;QAAUnB,UAAV;QAAsBsB;MAAtB,IAAsC,KAAI,CAAC3D,KAAjD;MACA,MAAM;QAAEG,kBAAF;QAAsBG;MAAtB,IAAkD,KAAI,CAACW,KAA7D;;MACA,MAAMoG,oBAAoB,GAAG,KAAI,CAACC,uBAAL,CAA6BnH,kBAA7B,CAA7B;;MACA,IAAIqD,MAAJ,EAAY;QACV,IAAI2C,QAAQ,KAAK,OAAjB,EAA0B;UACxB,IACE,CAAChG,kBAAkB,KAAK,CAAC,CAAxB,IAA8BwD,WAAW,IAAI,KAAI,CAAChD,aAAL,CAAmBY,MAAnB,KAA8B,CAA5E,OAAmF;UAClF8F,oBAAoB,IAAK,KAAI,CAAC1G,aAAL,CAAmB,CAAnB,KAAyB,KAAI,CAACA,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,CADnD,CADF,EAGE;YACA,IAAI0G,oBAAJ,EAA0B;cACxB,IAAI,CAACA,oBAAoB,CAACV,SAArB,CAA+BC,QAA/B,CAAwC,WAAxC,CAAL,EAA2D;gBACzD,MAAMH,iBAAiB,GAAGY,oBAAoB,CAACE,iBAArB,GAAyC,CAAnE;gBACA,MAAMC,wBAAwB,GAAGf,iBAAiB,GAC7CY,oBAAoB,CAACI,UAArB,CAAgDT,SADH,GAE9CK,oBAAoB,CAACL,SAFzB;;gBAGA,KAAI,CAACpE,QAAL,CAAc;kBACZhD,mBAAmB,EAAE4H;gBADT,CAAd;cAGD;YACF,CAVD,MAUO,IAAI,KAAI,CAAC7G,aAAL,CAAmB,CAAnB,KAAyB,KAAI,CAACA,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,CAA7B,EAAuD;cAC5D,KAAI,CAACiC,QAAL,CAAc;gBACZhD,mBAAmB,EAAE,KAAI,CAACe,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBqG;cADlC,CAAd;YAGD;;YACD,IAAIK,oBAAJ,EAA0B;cACxBA,oBAAoB,CAACK,KAArB;YACD,CAFD,MAEO;cACL,KAAI,CAAC/G,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB+G,KAAzB;YACD;UACF;QACF,CA1BD,MA0BO,IAAIvB,QAAQ,KAAK,KAAjB,EAAwB;UAC7B,IAAI9D,UAAJ,EAAgB;YACd;YACA,IAAI,KAAI,CAACc,QAAL,CAAcnC,OAAd,KAA0B2G,QAAQ,CAACC,aAAvC,EAAsD;cACpD;cACA,IAAI,KAAI,CAAC5H,KAAL,CAAW6H,MAAX,IAAqBT,QAAzB,EAAmC;gBACjC,MAAMU,aAAa,GAAGzI,oBAAoB,CAAC,KAAI,CAAC0I,SAAN,EAAiBzJ,yBAAjB,CAA1C;;gBACA,IAAIwJ,aAAa,CAACvG,MAAd,GAAuB,CAA3B,EAA8B;kBAC5B,IAAIuG,aAAa,CAACA,aAAa,CAACvG,MAAd,GAAuB,CAAxB,CAAjB,EAA6C;oBAC3CuG,aAAa,CAACA,aAAa,CAACvG,MAAd,GAAuB,CAAxB,CAAb,CAAwCD,KAAxC;kBACD;gBACF;cACF,CAPD,MAOO;gBACL,KAAI,CAAC0G,yBAAL;cACD;YACF,CAZD,MAYO;cACL;cACA,IAAI,KAAI,CAAChI,KAAL,CAAW6H,MAAf,EAAuB;gBACrB,IAAII,cAAc,GAAG,KAArB;gBACA,MAAMH,aAAa,GAAGzI,oBAAoB,CAAC,KAAI,CAAC0I,SAAN,EAAiBzJ,yBAAjB,CAA1C;;gBACA,IAAIwJ,aAAa,CAACvG,MAAd,GAAuB,CAA3B,EAA8B;kBAC5B;kBACA;kBACA,MAAM2G,mBAAmB,GAAGJ,aAAa,CAACK,SAAd,CAAyBC,IAAD,IAAeA,IAAI,KAAKT,QAAQ,CAACC,aAAzD,CAA5B;;kBACA,IAAIM,mBAAmB,KAAK,CAAC,CAA7B,EAAgC;oBAC9B,IAAId,QAAJ,EAAc;sBACZ;sBACA,KAAI,CAACjE,QAAL,CAAcnC,OAAd,CAAsBM,KAAtB;oBACD,CAHD,MAGO;sBACL;sBACAwG,aAAa,CAAC,CAAD,CAAb,CAAiBxG,KAAjB;oBACD;kBACF,CARD,MAQO;oBACL;oBACA,IAAI8F,QAAJ,EAAc;sBACZ;sBACA,IAAIc,mBAAmB,KAAK,CAA5B,EAA+B;wBAC7B;wBACA,KAAI,CAACF,yBAAL;;wBACAC,cAAc,GAAG,IAAjB;sBACD,CAJD,MAIO;wBACL;wBACAH,aAAa,CAACI,mBAAmB,GAAG,CAAvB,CAAb,CAAuC5G,KAAvC;sBACD;oBACF,CAVD,MAUO;sBACL;sBACA,IAAIwG,aAAa,CAACI,mBAAmB,GAAG,CAAvB,CAAjB,EAA4C;wBAC1CJ,aAAa,CAACI,mBAAmB,GAAG,CAAvB,CAAb,CAAuC5G,KAAvC;sBACD,CAFD,MAEO;wBACL,KAAI,CAAC6B,QAAL,CAAcnC,OAAd,CAAsBM,KAAtB;sBACD;oBACF;kBACF;gBACF,CAjCD,MAiCO;kBACL;kBACA,KAAI,CAAC6B,QAAL,CAAcnC,OAAd,CAAsBM,KAAtB;;kBACA2G,cAAc,GAAG,KAAjB;gBACD;;gBACD,KAAI,CAACrF,QAAL,CAAc;kBAAEtC,uBAAuB,EAAE2H;gBAA3B,CAAd;cACD,CA1CD,MA0CO;gBACL,KAAI,CAAC9E,QAAL,CAAcnC,OAAd,CAAsBM,KAAtB;;gBACA,KAAI,CAACsB,QAAL,CAAc;kBAAEtC,uBAAuB,EAAE;gBAA3B,CAAd;cACD;YACF;UACF,CA/DD,MA+DO;YACL;YACA,IAAI,CAAC,KAAI,CAACN,KAAL,CAAW6H,MAAhB,EAAwB;cACtB,KAAI,CAAC5E,QAAL,CAAc,KAAd,EAAqB,IAArB;;cACA,KAAI,CAACoF,OAAL;YACD,CAHD,MAGO;cACL;cACA,MAAMP,aAAa,GAAGzI,oBAAoB,CAAC,KAAI,CAAC0I,SAAN,EAAiBzJ,yBAAjB,CAA1C;cACA,MAAM4J,mBAAmB,GAAGJ,aAAa,CAACK,SAAd,CAAyBC,IAAD,IAAeA,IAAI,KAAKT,QAAQ,CAACC,aAAzD,CAA5B;;cACA,IAAI,KAAI,CAACzE,QAAL,CAAcnC,OAAd,KAA0B2G,QAAQ,CAACC,aAAvC,EAAsD;gBACpD,IAAIR,QAAJ,EAAc;kBACZ;kBACA,KAAI,CAACnE,QAAL,CAAc,KAAd,EAAqB,IAArB;;kBACA,KAAI,CAACoF,OAAL;gBACD,CAJD,MAIO;kBACL;kBACA,IAAIP,aAAa,CAAC,CAAD,CAAjB,EAAsB;oBACpBA,aAAa,CAAC,CAAD,CAAb,CAAiBxG,KAAjB;kBACD,CAFD,MAEO;oBACL,KAAI,CAAC2B,QAAL,CAAc,KAAd,EAAqB,IAArB;;oBACA,KAAI,CAACoF,OAAL;kBACD;gBACF;cACF,CAdD,MAcO;gBACL;gBACA,IAAIjB,QAAJ,EAAc;kBACZ,IAAIc,mBAAmB,KAAK,CAA5B,EAA+B;oBAC7B;oBACA,KAAI,CAAC/E,QAAL,CAAcnC,OAAd,CAAsBM,KAAtB;kBACD,CAHD,MAGO;oBACL;oBACAwG,aAAa,CAACI,mBAAmB,GAAG,CAAvB,CAAb,CAAuC5G,KAAvC;kBACD;gBACF,CARD,MAQO;kBACL;kBACA,IAAIwG,aAAa,CAACI,mBAAmB,GAAG,CAAvB,CAAjB,EAA4C;oBAC1CJ,aAAa,CAACI,mBAAmB,GAAG,CAAvB,CAAb,CAAuC5G,KAAvC;kBACD,CAFD,MAEO;oBACL;oBACA,KAAI,CAAC2B,QAAL,CAAc,KAAd,EAAqB,IAArB;;oBACA,KAAI,CAACE,QAAL,CAAcnC,OAAd,CAAsBM,KAAtB;;oBACA,KAAI,CAAC+G,OAAL;kBACD;gBACF;cACF;YACF;UACF;QACF,CA/GM,MA+GA,IAAI,CAAC/H,uBAAL,EAA8B;UACnC,IAAI,KAAI,CAACK,aAAL,CAAmB,CAAnB,EAAsB,CAAtB,MAA6B,IAAjC,EAAuC;YACrC;UACD;;UACD,IAAI4F,SAAJ;;UACA,IAAIpG,kBAAkB,KAAK,CAAC,CAAxB,IAA6BgG,QAAQ,KAAK,MAA9C,EAAsD;YACpDI,SAAS,GAAG,CAAZ;UACD,CAFD,MAEO,IAAIpG,kBAAkB,KAAK,CAAC,CAAxB,IAA6BgG,QAAQ,KAAK,IAA9C,EAAoD;YACzDI,SAAS,GAAG,KAAI,CAAC5F,aAAL,CAAmBY,MAAnB,GAA4B,CAAxC;UACD,CAFM,MAEA,IAAI4E,QAAQ,KAAK,MAAb,IAAuBA,QAAQ,KAAK,OAAxC,EAAiD;YACtDI,SAAS,GAAG5H,YAAY,CAACwB,kBAAD,EAAqBgG,QAArB,EAA+B,KAAI,CAACxF,aAApC,CAAxB;UACD,CAFM,MAEA;YACL4F,SAAS,GAAGpG,kBAAZ;UACD;;UACD,IAAI,KAAI,CAACQ,aAAL,CAAmB4F,SAAnB,MAAkC,IAAtC,EAA4C;YAC1C;UACD;;UACD,KAAI,CAAC+B,SAAL,CAAe/B,SAAf;QACD,CAlBM,MAkBA;UACL,MAAMA,SAAS,GAAG,KAAI,CAAC5F,aAAL,CAAmBwH,SAAnB,CAChB9G,GAAG,IAAIA,GAAG,KAAK6B,SAAR,KAAsB7B,GAAG,CAAC,CAAD,CAAH,KAAWsG,QAAQ,CAACC,aAApB,IAAqCvG,GAAG,CAAC,CAAD,CAAH,KAAWsG,QAAQ,CAACC,aAA/E,CADS,CAAlB;;UAGA,KAAI,CAACU,SAAL,CAAe/B,SAAf;QACD;MACF;IACF,CAvKD;;IAyKA,oCAA+B,MAAK;MAClC,IAAI,KAAKpD,QAAL,IAAiB,KAAKA,QAAL,CAAcnC,OAAnC,EAA4C;QAC1C,KAAKmC,QAAL,CAAcnC,OAAd,CAAsBM,KAAtB;MACD;IACF,CAJD;;IAMA,kBAAa,UAACU,KAAD,EAAuE;MAAA,IAAlC4C,IAAkC,uEAAV,MAAU;;MAClF,IAAI,CAAC5C,KAAL,EAAY;QACV;MACD;;MACD,MAAMoG,IAAI,GAAG,KAAI,CAACpI,KAAL,CAAWyC,SAAX,GACRrF,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuB,KAAI,CAACC,KAAL,CAAWC,QAAlC,EACEsI,MADF,CACS,CAACC,GAAD,EAAMC,IAAN,KAAe,CAAC,GAAGD,GAAJ,EAAS,GAAGpL,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuB0I,IAAI,CAACzI,KAAL,CAAWC,QAAlC,CAAZ,CADxB,EACkF,EADlF,EAEEmB,IAFF,CAEOkD,KAAK,IAAIA,KAAK,CAACtE,KAAN,CAAYgC,KAAZ,CAAkBuB,QAAlB,OAAiCvB,KAAK,CAACuB,QAAN,EAFjD,CADQ,GAITnG,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuB,KAAI,CAACC,KAAL,CAAWC,QAAlC,EAA4CmB,IAA5C,CACEkD,KAAK,IACFA,KAA4B,CAACtE,KAA7B,CAAmCgC,KAAnC,IACAsC,KAA4B,CAACtE,KAA7B,CAAmCgC,KAAnC,CAAyCuB,QAAzC,OAAwDvB,KAAK,CAACuB,QAAN,EAH7D,CAJJ;;MASA,IAAI6E,IAAJ,EAAU;QACR,IAAIA,IAAI,IAAIA,IAAI,CAACpI,KAAL,CAAWC,QAAvB,EAAiC;UAC/B,IAAI2E,IAAI,KAAK,MAAb,EAAqB;YACnB,OAAOwD,IAAI,CAACpI,KAAL,CAAWC,QAAlB;UACD;;UACD,OAAO,KAAI,CAACyI,QAAL,CAAcN,IAAd,CAAP;QACD;;QACD,OAAOA,IAAI,CAACpI,KAAL,CAAWgC,KAAX,CAAiBuB,QAAjB,EAAP;MACD;;MACD,OAAOvB,KAAK,CAACuB,QAAN,EAAP;IACD,CAvBD;;IAyBA,gBAAY6E,IAAD,IAA0B;MACnC,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;QAC5B,OAAOA,IAAP;MACD,CAFD,MAEO,IAAI,CAAChL,KAAK,CAACuH,cAAN,CAAqByD,IAArB,CAAL,EAAiC;QACtC,OAAO,EAAP;MACD,CAFM,MAEA;QACL,MAAMO,KAAK,GAAa,EAAxB;QACAvL,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuBqI,IAAI,CAACpI,KAAL,CAAWC,QAAlC,EAA4C2I,OAA5C,CAAoDtE,KAAK,IAAIqE,KAAK,CAACtD,IAAN,CAAW,KAAKqD,QAAL,CAAcpE,KAAd,CAAX,CAA7D;QACA,OAAOqE,KAAK,CAACE,IAAN,CAAW,EAAX,CAAP;MACD;IACF,CAVD;;IAYA,6BAAwB,MAAK;MAC3B,MAAM;QAAEC,eAAF;QAAmBC;MAAnB,IAAkC,KAAK/I,KAA7C;;MACA,IAAI8I,eAAe,KAAK,IAAxB,EAA8B;QAC5B,OAAOA,eAAP;MACD;;MACD,IAAIE,KAAK,CAACC,OAAN,CAAcF,UAAd,KAA6BA,UAAU,CAACxH,MAAX,GAAoB,CAArD,EAAwD;QACtD,OAAOwH,UAAU,CAACxH,MAAlB;MACD;;MACD,OAAO,IAAP;IACD,CATD;;IAWA,2BAAsB,MAAK;MACzB,KAAKqB,QAAL,CAAc;QAAElC,iBAAiB,EAAE,KAAKC,aAAL,CAAmBY,MAAnB,GAA4B;MAAjD,CAAd;IACD,CAFD;;IAIA,gCAA4BK,KAAD,IACzB,KAAK5B,KAAL,CAAW6H,MAAX,IAAqBjG,KAAK,KAAK,KAAKjB,aAAL,CAAmBY,MAAnB,GAA4B,CAA3D,GAA+D,IAA/D,GAAsE,KADxE;EAsgBD;;EAn4BC2H,uBAAuB,CAAC/I,kBAAD,EAA6BD,cAA7B,EAA+D;IACpF,MAAM;MAAEuC,SAAF;MAAaJ;IAAb,IAA4B,KAAKrC,KAAvC;IACA,MAAMmJ,iBAAiB,GAAGjJ,cAAc,GACpCA,cAAc,CAACkJ,MAAf,CAAsB,KAAKnI,KAAL,CAAWpB,yBAAjC,CADoC,GAEpC,KAAKoB,KAAL,CAAWpB,yBAFf;IAGA,MAAM+H,aAAa,GAAG,KAAK3B,4BAAL,CAAkC9F,kBAAlC,CAAtB;IAEA,IAAIkH,oBAAoB,GAAG,KAAKC,uBAAL,CAA6BnH,kBAA7B,CAA3B;;IACA,IAAIkH,oBAAoB,IAAIA,oBAAoB,CAACV,SAArB,CAA+BC,QAA/B,CAAwC,kBAAxC,CAA5B,EAAyF;MACvFS,oBAAoB,GAAGA,oBAAoB,CAACN,iBAA5C;IACD;;IAED,KAAKpG,aAAL,GAAqB,CAAC,EAAD,CAArB;IACA,KAAKsF,4BAAL,GAAoC,EAApC;;IACA,IAAIxD,SAAJ,EAAe;MACb,OAAOrF,KAAK,CAAC0C,QAAN,CAAe2E,GAAf,CAAmB0E,iBAAnB,EAA+DzE,KAAD,IAA8B;QACjG,IAAIA,KAAK,CAACE,IAAN,KAAe5F,OAAnB,EAA4B;UAC1B,OAAO0F,KAAP;QACD,CAFD,MAEO,IAAIA,KAAK,CAACE,IAAN,KAAe5G,WAAf,IAA8BqE,UAAlC,EAA8C;UACnD,OAAOjF,KAAK,CAAC2H,YAAN,CAAmBL,KAAnB,EAA0B;YAC/BM,OAAO,EAAEN,KAAK,CAAC1E,KAAN,CAAYiC,KAAZ,IAAqByC,KAAK,CAAC1E,KAAN,CAAYiC,KAAZ,CAAkBkC,OAAlB,CAA0B,KAA1B,EAAiC,GAAjC,CADC;YAE/BlE,QAAQ,EAAE7C,KAAK,CAAC0C,QAAN,CAAe2E,GAAf,CAAmBC,KAAK,CAAC1E,KAAN,CAAYC,QAA/B,EAA0CqE,KAAD,IACjDA,KAAK,CAACM,IAAN,KAAe5F,OAAf,GACIsF,KADJ,GAEIlH,KAAK,CAAC2H,YAAN,CAAmBT,KAAnB,EAAgD;cAC9C+E,SAAS,EACPzB,aAAa,KACZA,aAAa,CAAC0B,EAAd,KAAsBhF,KAA4B,CAACtE,KAA7B,CAAmCsJ,EAAzD,IACE,KAAKtJ,KAAL,CAAW2D,WAAX,IACC0D,oBAAoB,CAACL,SAArB,KACE,iBAAkBtC,KAA4B,CAAC1E,KAA7B,CAAmCgC,KAAK,GAJnD;YAF+B,CAAhD,CAHI;UAFqB,CAA1B,CAAP;QAeD,CAhBM,MAgBA,IAAI0C,KAAK,CAACE,IAAN,KAAe5G,WAAnB,EAAgC;UACrC,OAAOZ,KAAK,CAAC2H,YAAN,CAAmBL,KAAnB,EAA0B;YAC/BM,OAAO,EAAEN,KAAK,CAAC1E,KAAN,CAAYiC,KAAZ,IAAqByC,KAAK,CAAC1E,KAAN,CAAYiC,KAAZ,CAAkBkC,OAAlB,CAA0B,KAA1B,EAAiC,GAAjC,CADC;YAE/BlE,QAAQ,EAAE7C,KAAK,CAAC0C,QAAN,CAAe2E,GAAf,CAAmBC,KAAK,CAAC1E,KAAN,CAAYC,QAA/B,EAA0CqE,KAAD,IACjDA,KAAK,CAACM,IAAN,KAAe5F,OAAf,GACIsF,KADJ,GAEIlH,KAAK,CAAC2H,YAAN,CAAmBT,KAAnB,EAAgD;cAC9C+E,SAAS,EACPhC,oBAAoB,KACnBA,oBAAoB,CAACL,SAArB,KAAoC1C,KAA4B,CAACtE,KAA7B,CAAmCgC,KAAnC,CAAyCuB,QAAzC,EAApC,IACE,KAAKvD,KAAL,CAAW2D,WAAX,IACC0D,oBAAoB,CAACL,SAArB,KACE,iBAAkB1C,KAA4B,CAACtE,KAA7B,CAAmCgC,KAAK,GAJ5C;YAFwB,CAAhD,CAHI;UAFqB,CAA1B,CAAP;QAeD,CAhBM,MAgBA;UACL;UACA,OAAO5E,KAAK,CAAC2H,YAAN,CAAmBL,KAAnB,EAAgD;YACrD2E,SAAS,EACPhC,oBAAoB,KACnBA,oBAAoB,CAACL,SAArB,KAAmCtC,KAAK,CAAC1E,KAAN,CAAYgC,KAAZ,CAAkBuB,QAAlB,EAAnC,IACE,KAAKvD,KAAL,CAAW2D,WAAX,IAA0B0D,oBAAoB,CAACL,SAArB,KAAmC,iBAAiBtC,KAAK,CAAC1E,KAAN,CAAYgC,KAAK,GAF9E;UAF+B,CAAhD,CAAP;QAMD;MACF,CA5CM,CAAP;IA6CD;;IACD,OAAOmH,iBAAiB,CAAC1E,GAAlB,CAAsB,CAACH,KAAD,EAAyB1C,KAAzB,KAAkC;MAC7D,MAAM2H,YAAY,GAAGjF,KAArB;MACA,OAAOiF,YAAY,CAAC3E,IAAb,CAAkBpE,WAAlB,KAAkC,SAAlC,GACH8D,KADG,GAEHlH,KAAK,CAAC2H,YAAN,CAAmBT,KAAnB,EAAgD;QAC9C+E,SAAS,EAAEhC,oBAAoB,GAC3BA,oBAAoB,CAACL,SAArB,KAAoC1C,KAA4B,CAACtE,KAA7B,CAAmCgC,KAAnC,CAAyCuB,QAAzC,EAApC,IACC,KAAKvD,KAAL,CAAW2D,WAAX,IACC0D,oBAAoB,CAACL,SAArB,KAAmC,iBAAkB1C,KAA4B,CAACtE,KAA7B,CAAmCgC,KAAK,GAHpE,GAI3BJ,KAAK,KAAKzB,kBALgC,CAKb;;MALa,CAAhD,CAFJ;IASD,CAXM,CAAP;EAYD;;EAuTDqJ,MAAM;IACJ,MAAMC,KAgEF,KAAKzJ,KAhET;IAAA,MAAM;MACJC,QADI;MAEJyJ,cAFI;MAGJC,kBAHI;MAIJC,SAJI;MAKJ1I,aALI;MAMJT,OANI;MAOJoJ,SAPI;MAQJ7G,QARI;MASJ8G,OATI;MAUJC,MAVI;MAWJC,QAXI;MAYJxG,MAZI;MAaJf,SAbI;MAcJwH,OAdI;MAeJ/H,UAfI;MAgBJgI,mBAhBI;MAiBJC,SAjBI;MAkBJpB,UAAU,EAAEqB,cAlBR;MAmBJC,kBAnBI;MAoBJC,wBApBI;MAqBJC,wBArBI;MAsBJC,eAtBI;MAuBJC,wBAvBI;MAwBJ,cAAcC,SAxBV;MAyBJ,mBAAmBC,cAzBf;MA0BJ,oBAAoBC,eA1BhB;MA2BJ,gBAAgBC,WA3BZ;MA4BJC,eA5BI;MA6BJC,KA7BI;MA8BJC,SA9BI;MA+BJC,UA/BI;MAgCJC,MAhCI;MAiCJC,QAjCI;MAkCJrK,eAlCI;MAmCJsK,8BAnCI;MAoCJC,2BApCI;;MAqCJ;MACA3H,QAtCI;;MAuCJ;MACAD,uBAxCI;MAyCJG,cAzCI;MA0CJD,WA1CI;MA2CJV,QA3CI;MA4CJY,UA5CI;MA6CJC,kBA7CI;MA8CJgF,eA9CI;MA+CJwC,aA/CI;MAgDJC,iBAhDI;;MAiDJ;MACAxI,qBAlDI;MAmDJK,sBAnDI;;MAoDJ;MACAoI,YArDI;MAsDJlJ,SAtDI;MAuDJD,UAvDI;;MAwDJ;MACAM,cAzDI;MA0DJkF,MA1DI;MA2DJrG,cA3DI;MA4DJuC,0BA5DI;MA6DJ0H,mBA7DI;MA8DJC;IA9DI,IA8DSjC,EA9Df;IAAA,MA+DKzJ,KAAK,cA/DJ,+9BA+DI,CA/DV;;IAiEA,MAAM;MACJL,gBAAgB,EAAEgM,aADd;MAEJxL,kBAFI;MAGJP,mBAHI;MAIJC,yBAJI;MAKJK;IALI,IAMF,KAAKe,KANT;IAOA,MAAM2K,cAAc,GAAG5B,QAAQ,IAAI,uBAAuB1K,SAAS,EAAE,EAArE;IACA,MAAMyJ,UAAU,GAAGC,KAAK,CAACC,OAAN,CAAcmB,cAAd,IAAgCA,cAAhC,GAAiD,CAACA,cAAD,CAApE,CA1EI,CA2EJ;;IACA,MAAMyB,cAAc,GAAGzO,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuBE,QAAvB,EAAiCmB,IAAjC,CACpB0K,MAAD,IAAiBA,MAAM,CAAC9L,KAAP,CAAagC,KAAb,KAAuB+G,UAAU,CAAC,CAAD,CAD7B,CAAvB;IAGA,MAAMgD,qBAAqB,GAAGF,cAAc,IAAIA,cAAc,CAAC7L,KAAf,CAAqBmC,aAArE;IACA,MAAM6J,gBAAgB,GAAGtF,OAAO,CAACqC,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,KAAkB,EAApC,CAAhC;IACA,MAAM1B,oBAAoB,GAAG,KAAKC,uBAAL,CAA6BnH,kBAA7B,CAA7B;IACA,IAAI8L,oBAAoB,GAAG,IAA3B,CAlFI,CAoFJ;;IACA,IAAIC,eAAe,GAAsB,EAAzC;;IACA,IAAI7J,UAAJ,EAAgB;MACd;MACA,IAAI8J,oBAAoB,GAAkDlM,QAA1E;;MACA,IAAIQ,OAAO,KAAK,WAAZ,IAA2BA,OAAO,KAAK,gBAA3C,EAA6D;QAC3D0L,oBAAoB,GAAG,KAAKjD,uBAAL,CAA6B/I,kBAA7B,EAAiDD,cAAjD,CAAvB;MACD,CAFD,MAEO,IAAImC,UAAJ,EAAgB;QACrB8J,oBAAoB,GAAGjM,cAAc,CAACkJ,MAAf,CAAsBnJ,QAAtB,CAAvB;MACD,CAPa,CAQd;;;MACAiM,eAAe,GAAG/M,uBAAuB,CAACgN,oBAAD,EAAuB1J,SAAvB,EAAkCH,SAAlC,CAAzC;IACD,CAVD,MAUO;MACL4J,eAAe,GAAGjM,QAAlB;IACD;;IAED,IAAI,CAACiB,aAAL,EAAoB;MAClB,IAAI,CAAC8K,gBAAD,IAAqB,CAAClB,eAA1B,EAA2C;QACzC,MAAMsB,gBAAgB,GAAGhP,KAAK,CAAC0C,QAAN,CAAeC,OAAf,CAAuBE,QAAvB,EAAiC6E,MAAjC,CACtBR,KAAD,IAA6BA,KAA4B,CAACtE,KAA7B,CAAmCmC,aAAnC,KAAqD,IAD3D,CAAzB;QAGA8J,oBAAoB,GACjBG,gBAAgB,CAAC,CAAD,CAAhB,IAAuB,KAAK7H,UAAL,CAAiB6H,gBAAgB,CAAC,CAAD,CAAhB,CAA2CpM,KAA3C,CAAiDgC,KAAlE,EAAyE,MAAzE,CAAxB,IACC/B,QAAQ,CAAC,CAAD,CAAR,IAAe,KAAKsE,UAAL,CAAgBtE,QAAQ,CAAC,CAAD,CAAR,CAAYD,KAAZ,CAAkBgC,KAAlC,EAAyC,MAAzC,CAFlB;MAGD;IACF;;IAED,IAAIwB,MAAJ,EAAY;MACV,IAAI0I,eAAe,CAAC9K,IAAhB,CAAqBgH,IAAI,IAAG;QAAA;;QAAC,cAACA,IAAD,MAAa,IAAb,IAAaqB,aAAb,GAAa,MAAb,GAAaA,GAAE/G,GAAf,MAAuB,SAAvB;MAAgC,CAA7D,MAAmEQ,SAAvE,EAAkF;QAChF,IAAI1B,cAAc,KAAK,SAAvB,EAAkC;UAChC0K,eAAe,CAAC7G,IAAhB,CACEjI,oBAACW,YAAD,EAAa;YAACsO,SAAS,MAAV;YAAW3J,GAAG,EAAC,SAAf;YAAyBV,KAAK,EAAC;UAA/B,CAAb,EACE5E,oBAACqB,OAAD,EAAQ;YAAC6N,IAAI,EAAC;UAAN,CAAR,CADF,CADF;QAKD,CAND,MAMO,IAAI9K,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAE4D,IAApB,EAA0B;UAC/B8G,eAAe,CAAC7G,IAAhB,CACEjI,oBAACW,YAAD,EAAa;YACX8I,MAAM,MADK;YAEXnE,GAAG,EAAC,SAFO;YAGXV,KAAK,EAAER,cAAc,CAAC4D,IAHX;YAIXmH,oBAAoB,EAAE,KAAKC,mBAJhB;YAKX5G,OAAO,EAAEpE,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEoE;UALd,CAAb,CADF;QASD;MACF;IACF;;IAED,MAAM6G,UAAU,GAAG3C,OAAO,KAAKvK,MAAM,CAACmN,YAAP,CAAoB5C,OAAnD;IACA,MAAM6C,QAAQ,GACZvP;MACEwM,SAAS,EAAEnM,GAAG,CAACD,YAAY,CAACoP,MAAd,EAAsBpP,YAAY,CAACqP,SAAb,CAAuBC,KAA7C,EAAoDzP,MAAM,CAAC0P,iBAA3D,CADhB;MAEEnH,OAAO,EAAE9C,CAAC,IAAG;QACX,KAAKkK,cAAL,CAAoBlK,CAApB;QACAgH,OAAO,CAAChH,CAAD,CAAP;QACAA,CAAC,CAACmK,eAAF;MACD,CANH;MAMG,cACW1C,wBAPd;MAQE3F,IAAI,EAAC,QARP;MASEsI,QAAQ,EAAEhL,UATZ;MAUEb,GAAG,EAAE,KAAK6F,QAVZ;MAWEiG,SAAS,EAAEC,KAAK,IAAG;QACjB,IAAIA,KAAK,CAAC1K,GAAN,KAAc3D,QAAQ,CAACsO,KAA3B,EAAkC;UAChC,KAAKnG,QAAL,CAAclG,OAAd,CAAsB0G,KAAtB;QACD;MACF;IAfH,GAiBEtK,oBAACM,eAAD,EAAgB;MAAA;IAAA,CAAhB,CAjBF,CADF;IAsBA,IAAI4P,aAAa,GAAG,IAApB;;IACA,IAAI7M,OAAO,KAAKtC,aAAa,CAACkI,cAA9B,EAA8C;MAC5CiH,aAAa,GAAG3D,kBAAkB,GAChCA,kBADgC,GAGhCvM,oBAACmB,SAAD,EAAU8E,kBAAKqG,cAAL,CAAV,EACGX,UAAU,IACRA,UAAuB,CAACtE,GAAxB,CAA4B2D,IAAI,IAC/BhL,oBAACoB,IAAD,EAAK;QACHkE,GAAG,EAAE0F,IADF;QAEHxC,OAAO,EAAG9C,CAAD,IAAyBE,QAAQ,CAACF,CAAD,EAAIsF,IAAJ,CAFvC;QAGHmF,iBAAiB,EAAE9C;MAHhB,CAAL,EAKG,KAAKlG,UAAL,CAAgB6D,IAAhB,EAAsB,MAAtB,CALH,CADD,CAFL,CAHF;IAgBD;;IAED,IAAItH,eAAJ,EAAqB;MACnB,MAAM0M,SAAS,GACbpQ,oBAACA,KAAK,CAACqQ,QAAP,EAAe,IAAf,EACErQ;QAAKsF,GAAG,EAAC,eAAT;QAAyBkH,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACqQ,gBAAR;MAAvC,GACEtQ;QACEsF,GAAG,EAAC,qBADN;QAEEkC,IAAI,EAAC,QAFP;QAGEgF,SAAS,EAAEnM,GAAG,CAACF,UAAU,CAACoQ,WAAZ,EAAyBpQ,UAAU,CAACsP,SAAX,CAAqBrI,MAA9C,CAHhB;QAIEoJ,QAAQ,EAAE,KAAKA,QAJjB;QAKEC,WAAW,EAAExC,2BALf;QAME8B,SAAS,EAAEC,KAAK,IAAG;UACjB,IAAIA,KAAK,CAAC1K,GAAN,KAAc3D,QAAQ,CAAC+O,OAA3B,EAAoC;YAClC,KAAKC,cAAL,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,IAA1B;YACAX,KAAK,CAACY,cAAN;UACD,CAHD,MAGO,IAAIZ,KAAK,CAAC1K,GAAN,KAAc3D,QAAQ,CAACkP,SAA3B,EAAsC;YAC3C,KAAKF,cAAL,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,MAA1B;YACAX,KAAK,CAACY,cAAN;UACD,CAHM,MAGA,IAAIZ,KAAK,CAAC1K,GAAN,KAAc3D,QAAQ,CAACmP,SAA3B,EAAsC;YAC3C,KAAKH,cAAL,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,MAA1B;YACAX,KAAK,CAACY,cAAN;UACD,CAHM,MAGA,IAAIZ,KAAK,CAAC1K,GAAN,KAAc3D,QAAQ,CAACoP,UAA3B,EAAuC;YAC5C,KAAKJ,cAAL,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,OAA1B;YACAX,KAAK,CAACY,cAAN;UACD,CAHM,MAGA,IAAIZ,KAAK,CAAC1K,GAAN,KAAc3D,QAAQ,CAACqP,GAAvB,IAA8B3N,OAAO,KAAKtC,aAAa,CAACkQ,QAAxD,IAAoE,KAAKrO,KAAL,CAAW6H,MAAnF,EAA2F;YAChG;YACA,IAAIuF,KAAK,CAAChG,QAAV,EAAoB;cAClB,KAAKnE,QAAL,CAAc,KAAd,EAAqBmK,KAArB;YACD,CAFD,MAEO;cACL,MAAMtF,aAAa,GAAGzI,oBAAoB,CAAC,KAAK0I,SAAN,EAAiBzJ,yBAAjB,CAA1C;;cACA,IAAIwJ,aAAa,CAACvG,MAAd,GAAuB,CAA3B,EAA8B;gBAC5BuG,aAAa,CAAC,CAAD,CAAb,CAAiBxG,KAAjB;gBACA8L,KAAK,CAACH,eAAN;gBACAG,KAAK,CAACY,cAAN;cACD,CAJD,MAIO;gBACL,KAAK/K,QAAL,CAAc,KAAd,EAAqBmK,KAArB;cACD;YACF;UACF,CAdM,MAcA,IAAIA,KAAK,CAAC1K,GAAN,KAAc3D,QAAQ,CAACqP,GAAvB,IAA8B3N,OAAO,KAAKtC,aAAa,CAACkQ,QAA5D,EAAsE;YAC3E;YACA;YACA,IAAIjB,KAAK,CAAChG,QAAV,EAAoB;cAClB,KAAK2G,cAAL,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,IAA1B;YACD,CAFD,MAEO;cACL,KAAKA,cAAL,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,MAA1B;YACD;;YACDX,KAAK,CAACH,eAAN;YACAG,KAAK,CAACY,cAAN;UACD;QACF,CA5CH;QA6CE3M,GAAG,EAAE,KAAKN,SA7CZ;QA8CEuN,YAAY,EAAE/C;MA9ChB,EADF,CADF,EAmDEnO,oBAAC4B,OAAD,EAAQ;QAAC0D,GAAG,EAAC;MAAL,CAAR,CAnDF,CADF;MAuDAwJ,eAAe,GAAG,CAACsB,SAAD,EAAY,GAAI3N,yBAAhB,EAAoE4E,GAApE,CAAwE,CAACqH,MAAD,EAASlK,KAAT,KACxFxE,KAAK,CAAC2H,YAAN,CAAmB+G,MAAnB,EAA2B;QAAEpJ,GAAG,EAAEd;MAAP,CAA3B,CADgB,CAAlB;IAGD;;IAED,IAAI2M,YAAJ;IACA,IAAIC,eAAJ;;IACA,IAAItN,aAAJ,EAAmB;MACjBqN,YAAY,GAAG;QACbE,QAAQ,EAAE1F,UADG;QAEb4C,aAFa;QAGb+C,eAAe,EAAE;MAHJ,CAAf;MAKAF,eAAe,GAAGtN,aAAlB;IACD,CAPD,MAOO;MACL,QAAQT,OAAR;QACE,KAAK,QAAL;UACE8N,YAAY,GAAG;YACbE,QAAQ,EAAE1F,UAAU,CAAC,CAAD,CADP;YAEbjI,eAFa;YAGb6K;UAHa,CAAf;UAKA6C,eAAe,GAAGtC,eAAlB;UACA;;QACF,KAAK,UAAL;UACEqC,YAAY,GAAG;YACbI,OAAO,EAAE5F,UADI;YAEbtG,SAFa;YAGb3B,eAHa;YAIb6K;UAJa,CAAf;UAMA6C,eAAe,GAAGtC,eAAlB;UACA;;QACF,KAAK,WAAL;UACEqC,YAAY,GAAG;YACbE,QAAQ,EAAE1F,UAAU,CAAC,CAAD,CADP;YAEb4C;UAFa,CAAf;UAIA6C,eAAe,GAAGnM,UAAU,GAAG6J,eAAH,GAAqB,KAAKhD,uBAAL,CAA6B/I,kBAA7B,CAAjD;;UACA,IAAIqO,eAAe,CAACjN,MAAhB,KAA2B,CAA/B,EAAkC;YAChCiN,eAAe,CAACnJ,IAAhB,CAAqBjI,oBAACW,YAAD,EAAa;cAACmE,UAAU,MAAX;cAAYQ,GAAG,EAAE,CAAjB;cAAoBV,KAAK,EAAE8B,kBAA3B;cAA+CwB,iBAAiB;YAAhE,CAAb,CAArB;UACD;;UACD;;QACF,KAAK,gBAAL;UACEiJ,YAAY,GAAG;YACbE,QAAQ,EAAE1F,UADG;YAEb4C;UAFa,CAAf;UAIA6C,eAAe,GAAGnM,UAAU,GAAG6J,eAAH,GAAqB,KAAKhD,uBAAL,CAA6B/I,kBAA7B,CAAjD;;UACA,IAAIqO,eAAe,CAACjN,MAAhB,KAA2B,CAA/B,EAAkC;YAChCiN,eAAe,CAACnJ,IAAhB,CAAqBjI,oBAACW,YAAD,EAAa;cAACmE,UAAU,MAAX;cAAYQ,GAAG,EAAE,CAAjB;cAAoBV,KAAK,EAAE8B,kBAA3B;cAA+CwB,iBAAiB;YAAhE,CAAb,CAArB;UACD;;UACD;MArCJ;IAuCD;;IAED,MAAMsJ,SAAS,GACbxR,oBAACU,UAAD,CACE;IACA;IAFF,oBAGO4N,aAAa,IAAI;MAAEmD,KAAK,EAAE;QAAE1I,QAAQ,EAAE;MAAZ;IAAT,GAClBnG,OAAK;MACTyC,SAAS,EAAEA,SADF;MAETgM,QAAQ,EAAE1F;IAFD,GAGLwF,cAAY;MAChB5C,aAAa,EAAEA,aADC;MACY,cAChBjB,SAFI;MAEK,mBACJC,cAHD;MAIhBmE,OAAO,EAAE,KAAKA,OAJE;MAKhBpQ,UAAU,EAAE,KAAKqP,cALD;MAMhB/C,SAAS,EAAEA,SANK;MAOhB3J,GAAG,EAAE,KAAK0N,gBAPM;MAQhBlH,MAAM,EAAEA,MARQ;MAShBE,SAAS,EAAE,KAAKA,SATA;MAUhBiH,wBAAwB,EAAE,KAAKA;IAVf,EAPlB,EAmBGR,eAnBH,CADF;IAwBA,MAAMS,aAAa,GAAGpH,MAAM,GAAGzK;MAAKwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAAC6R,UAAR;IAAnB,QAA0CN,SAA1C,MAAH,GAAiEA,SAA7F;IAEA,MAAMO,eAAe,GACnB/R;MACEwM,SAAS,EAAEnM,GAAG,CACZJ,MAAM,CAAC+R,MADK,EAEZ5L,MAAM,IAAInG,MAAM,CAACwP,SAAP,CAAiBwC,QAFf,EAGZlF,SAAS,KAAK/K,gBAAgB,CAACkQ,OAA/B,IAA0CjS,MAAM,CAACwP,SAAP,CAAiByC,OAH/C,EAIZnF,SAAS,KAAK/K,gBAAgB,CAACmQ,OAA/B,IAA0ClS,MAAM,CAACwP,SAAP,CAAiB0C,OAJ/C,EAKZpF,SAAS,KAAK/K,gBAAgB,CAACoQ,KAA/B,IAAwCnS,MAAM,CAACwP,SAAP,CAAiB4C,OAL7C,EAMZ5F,SAAS,KAAKxL,eAAe,CAACqR,EAA9B,IAAoCrS,MAAM,CAACwP,SAAP,CAAiB8C,GANzC,EAOZ/F,SAPY;IADhB,GAUOmB,KAAK,IAAI;MAAE8D,KAAK,EAAE;QAAE9D;MAAF;IAAT,CAVhB,EAWOH,eAAe,IAAI;MAAE,oBAAoBA;IAAtB,CAX1B,EAYOT,SAAS,KAAK/K,gBAAgB,CAACwQ,OAA/B,IAA0C;MAAE,gBAAgB/E;IAAlB,CAZjD,GAcGrH,MAAM,IAAIyL,aAdb,CADF;IAmBA,MAAMY,aAAa,GACjBzS;MACEwM,SAAS,EAAEnM,GAAG,CACZJ,MAAM,CAAC+R,MADK,EAEZ5L,MAAM,IAAInG,MAAM,CAACwP,SAAP,CAAiBwC,QAFf,EAGZlF,SAAS,KAAK/K,gBAAgB,CAACkQ,OAA/B,IAA0CjS,MAAM,CAACwP,SAAP,CAAiByC,OAH/C,EAIZnF,SAAS,KAAK/K,gBAAgB,CAACmQ,OAA/B,IAA0ClS,MAAM,CAACwP,SAAP,CAAiB0C,OAJ/C,EAKZpF,SAAS,KAAK/K,gBAAgB,CAACoQ,KAA/B,IAAwCnS,MAAM,CAACwP,SAAP,CAAiB4C,OAL7C,EAMZ5F,SAAS,KAAKxL,eAAe,CAACqR,EAA9B,IAAoCrS,MAAM,CAACwP,SAAP,CAAiB8C,GANzC,EAOZ/F,SAPY,CADhB;MAUEvI,GAAG,EAAE,KAAKyO;IAVZ,GAWMlR,YAAY,CAACW,MAAM,CAACiB,WAAR,EAAqB0K,MAAM,KAAKhI,SAAX,GAAuBgI,MAAvB,GAAgC,KAAKjK,KAAL,CAAWV,WAAhE,EAA6E4K,QAA7E,CAXlB,EAYOJ,KAAK,IAAI;MAAE8D,KAAK,EAAE;QAAE9D;MAAF;IAAT,CAZhB,EAaOH,eAAe,IAAI;MAAE,oBAAoBA;IAAtB,CAb1B,EAcOT,SAAS,KAAK/K,gBAAgB,CAACwQ,OAA/B,IAA0C;MAAE,gBAAgB/E;IAAlB,CAdjD,GAgBEzN,oBAACa,YAAD,EAAaoF;MACXiG,EAAE,EAAEsC,cADO;MAEXkE,SAAS,EAAE,KAAKA,SAFL;MAGXC,OAAO,EAAE,KAAKhB;IAHH,GAINlH,MAAM,IAAI;MAAEE,SAAS,EAAE,KAAKA;IAAlB,CAJJ,EAIkC;MAC7CvE,MAAM,EAAEA,MADqC;MAE7CyG,OAAO,EAAEA,OAFoC;MAG7CC,mBAAmB,EACjBA,mBAAmB,KAAK,CAACnB,UAAU,CAACxH,MAAZ,IAAsBwH,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAxC,IAAgDgD,qBAArD,CAJwB;MAM7C9I,QAAQ,EAAE,KAAKA,QAN8B;MAO7C+M,OAAO,EAAE,KAAKA,OAP+B;MAQ7C3H,OAAO,EAAE,KAAKA,OAR+B;MAS7C0B,MAAM,EAAEA,MATqC;MAU7CtJ,OAAO,EAAEA,OAVoC;MAU7B,mBACC,GAAGkK,cAAc,IAAI,EAAE,IAAIiB,cAAc,EAXb;MAWe,cAChDpB,eAZiC;MAa7ClE,mBAAmB,EAAE,KAAKA,mBAbmB;MAc7C2J,uBAAuB,EAAE,KAAKA,uBAde;MAe7C/N,UAAU,EAAEA,UAfiC;MAgB7CgO,cAAc,EAAEzD,UAhB6B;MAiB7C0D,SAAS,EAAEtI,MAAM,KAAK3E,SAjBuB;MAkB7CkN,4BAA4B,EAAE,KAAKA;IAlBU,CAJlC,CAAb,EAwBGlP,aAAa,IACZ9D;MAAKwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACgT,mBAAR;IAAnB,GACGpF,UAAU,IAAI7N;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACiT,gBAAR;IAApB,GAAgDrF,UAAhD,CADjB,EAEE7N;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACkT,gBAAR;IAApB,GAAgDzF,eAAhD,CAFF,CAzBJ,EA8BGrK,OAAO,KAAKtC,aAAa,CAACqS,MAA1B,IAAoC,CAACtP,aAArC,IACC9D,oBAACA,KAAK,CAACqQ,QAAP,EAAe,IAAf,EACErQ;MAAKwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACgT,mBAAR;IAAnB,GACGpF,UAAU,IAAI7N;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACiT,gBAAR;IAApB,GAAgDrF,UAAhD,CADjB,EAEE7N;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACkT,gBAAR;IAApB,GACG,KAAKhM,UAAL,CAAgBwE,UAAU,CAAC,CAAD,CAA1B,EAAyC,MAAzC,KAAoD+B,eAApD,IAAuEmB,oBAD1E,CAFF,CADF,EAOGQ,UAAU,IAAIT,gBAAd,IAAkCW,QAPrC,CA/BJ,EAyCGlM,OAAO,KAAKtC,aAAa,CAACkQ,QAA1B,IAAsC,CAACnN,aAAvC,IACC9D,oBAACA,KAAK,CAACqQ,QAAP,EAAe,IAAf,EACErQ;MAAKwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACgT,mBAAR;IAAnB,GACGpF,UAAU,IAAI7N;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACiT,gBAAR;IAApB,GAAgDrF,UAAhD,CADjB,EAEE7N;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACkT,gBAAR;IAApB,GAAgDzF,eAAhD,CAFF,EAGG,CAACM,8BAAD,IAAmCY,gBAAnC,IACC5O;MAAKwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACoT,iBAAR;IAAnB,GACErT;MAAMwM,SAAS,EAAEnM,GAAG,CAACH,WAAW,CAACoT,KAAb,EAAoBpT,WAAW,CAACuP,SAAZ,CAAsB8D,IAA1C;IAApB,GACG,KAAKC,qBAAL,EADH,CADF,CAJJ,CADF,EAYGnE,UAAU,IAAIT,gBAAd,IAAkCW,QAZrC,CA1CJ,EAyDGlM,OAAO,KAAKtC,aAAa,CAACiI,SAA1B,IAAuC,CAAClF,aAAxC,IACC9D,oBAACA,KAAK,CAACqQ,QAAP,EAAe,IAAf,EACErQ;MAAKwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACgT,mBAAR;IAAnB,GACGpF,UAAU,IAAI7N;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACiT,gBAAR;IAApB,GAAgDrF,UAAhD,CADjB,EAEE7N;MACEwM,SAAS,EAAEnM,GAAG,CAACF,UAAU,CAACoQ,WAAZ,EAAyBtQ,MAAM,CAACwT,qBAAhC,CADhB;MACsE,yBAC7CxJ,oBAAoB,IAAIA,oBAAoB,CAACiC,EAFtE;MAGEA,EAAE,EAAE,GAAGsC,cAAc,mBAHvB;MAG0C,cAC5BvB;IAJd,GAKOC,wBAAwB,IAAI;MAAE,oBAAoBA;IAAtB,CALnC,EAKoF;MAClFuD,WAAW,EAAE/C,eADqE;MAElF9I,KAAK,EACHpC,mBAAmB,KAAK,IAAxB,GACIA,mBADJ,GAEI,KAAK2E,UAAL,CAAgBwE,UAAU,CAAC,CAAD,CAA1B,EAAyC,MAAzC,KAAoD,EALwB;MAOlFnE,IAAI,EAAC,MAP6E;MAQlFgB,OAAO,EAAE,KAAKA,OARoE;MASlFgI,QAAQ,EAAE,KAAKA,QATmE;MAUlFU,YAAY,EAAE/C,iBAVoE;MAWlF2B,QAAQ,EAAEhL,UAXwE;MAYlFb,GAAG,EAAE,KAAK8B;IAZwE,CALpF,EAFF,CADF,EAuBGsJ,UAAU,KAAK1D,UAAU,CAAC,CAAD,CAAV,IAAiBnJ,mBAAtB,CAAV,IAAwD+M,QAvB3D,CA1DJ,EAoFGlM,OAAO,KAAKtC,aAAa,CAACkI,cAA1B,IAA4C,CAACnF,aAA7C,IACC9D,oBAACA,KAAK,CAACqQ,QAAP,EAAe,IAAf,EACErQ;MAAKwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACgT,mBAAR;IAAnB,GACGpF,UAAU,IAAI7N;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACiT,gBAAR;IAApB,GAAgDrF,UAAhD,CADjB,EAEGlC,UAAU,IAAIC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAd,IAA2CA,UAAU,CAACxH,MAAX,GAAoB,CAA/D,IAAoE+L,aAFvE,EAGElQ;MACEwM,SAAS,EAAEnM,GAAG,CAACF,UAAU,CAACoQ,WAAZ,EAAyBtQ,MAAM,CAACwT,qBAAhC,CADhB;MACsE,yBAC7CxJ,oBAAoB,IAAIA,oBAAoB,CAACiC,EAFtE;MAGEA,EAAE,EAAE,GAAGsC,cAAc,mCAHvB;MAG0D,cAC5CvB,kBAJd;MAIgC,gBAChBF,SAAS,KAAK/K,gBAAgB,CAACoQ;IAL/C,GAMOlF,wBAAwB,IAAI;MAAE,oBAAoBA;IAAtB,CANnC,EAMoF;MAClFuD,WAAW,EAAE/C,eADqE;MAElF9I,KAAK,EAAEpC,mBAAmB,KAAK,IAAxB,GAA+BA,mBAA/B,GAAqD,EAFsB;MAGlFgF,IAAI,EAAC,MAH6E;MAIlFgJ,QAAQ,EAAE,KAAKA,QAJmE;MAKlFhI,OAAO,EAAE,KAAKA,OALoE;MAMlF0I,YAAY,EAAE/C,iBANoE;MAOlF2B,QAAQ,EAAEhL,UAPwE;MAQlFb,GAAG,EAAE,KAAK8B;IARwE,CANpF,EAHF,CADF,EAqBGsJ,UAAU,KAAM1D,UAAU,IAAIA,UAAU,CAACxH,MAAX,GAAoB,CAAnC,IAAyC3B,mBAA9C,CAAV,IAAgF+M,QArBnF,CArFJ,EA6GGxC,SAAS,KAAK/K,gBAAgB,CAACkQ,OAA/B,IACClS;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACyT,sBAAR;IAApB,GACE1T,oBAACO,eAAD,EAAgB;MAAA,eAAa;IAAb,CAAhB,CADF,CA9GJ,EAkHGwM,SAAS,KAAK/K,gBAAgB,CAACoQ,KAA/B,IACCpS;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACyT,sBAAR;IAApB,GACE1T,oBAACS,qBAAD,EAAsB;MAAA,eAAa;IAAb,CAAtB,CADF,CAnHJ,EAuHGsM,SAAS,KAAK/K,gBAAgB,CAACmQ,OAA/B,IACCnS;MAAMwM,SAAS,EAAEnM,GAAG,CAACJ,MAAM,CAACyT,sBAAR;IAApB,GACE1T,oBAACQ,uBAAD,EAAwB;MAAA,eAAa;IAAb,CAAxB,CADF,CAxHJ,CAhBF,EA6IG4F,MAAM,IAAIgI,YAAY,KAAK,QAA3B,IAAuCyD,aA7I1C,CADF;;IAkJA,MAAM8B,gBAAgB,GAAG,MAAK;MAC5B,IAAI,KAAKjB,SAAL,IAAkB,KAAKA,SAAL,CAAe9O,OAArC,EAA8C;QAC5C,OAAO,KAAK8O,SAAL,CAAe9O,OAAf,CAAuBgQ,aAA9B;MACD;;MACD,OAAO,IAAP;IACD,CALD;;IAOA,OACE5T,oBAAC0B,UAAD,EAAW,IAAX,EACGmS,QAAQ,IACP7T,oBAACc,aAAa,CAACgT,QAAf,EAAuB;MACrBlP,KAAK,EAAE;QACLgB,QADK;QAELX,UAFK;QAGLgG,OAAO,EAAE,KAAKA,OAHT;QAIL5H,OAJK;QAKL6K,aAAa,EAAEA,aAAa,IAAI2F,QAL3B;QAMLxF;MANK;IADc,CAAvB,EAUGD,YAAY,KAAK,QAAjB,GACCqE,aADD,GAGCzS,oBAAC6B,MAAD,EAAO;MACLkS,OAAO,EAAEtB,aADJ;MAELuB,MAAM,EAAEjC,eAFH;MAGLtF,SAAS,EAAEA,SAHN;MAILwH,QAAQ,EAAE7F,YAAY,KAAK,QAAjB,GAA4BuF,gBAAgB,EAA5C,GAAiDvF,YAJtD;MAKL8F,SAAS,EAAE9N;IALN,CAAP,CAbJ,CAFJ,CADF;EA4BD;;AA5tC8E;AACxEjE,qBAAc,QAAd;AAUAA,sBAA0C;EAC/CU,QAAQ,EAAE,EADqC;EAE/C2J,SAAS,EAAE,EAFoC;EAG/CzD,QAAQ,EAAE/H,cAAc,CAACmT,IAHsB;EAI/C1H,SAAS,EAAExL,eAAe,CAACmT,IAJoB;EAK/CxH,QAAQ,EAAE,IALqC;EAM/CxG,MAAM,EAAE,KANuC;EAO/Cf,SAAS,EAAE,KAPoC;EAQ/CwH,OAAO,EAAE,KARsC;EAS/C/H,UAAU,EAAE,KATmC;EAU/CgI,mBAAmB,EAAE,KAV0B;EAW/CvG,WAAW,EAAE,KAXkC;EAY/CwG,SAAS,EAAE,SAZoC;EAa/C,cAAc,EAbiC;EAc/C,mBAAmB,EAd4B;EAe/C,oBAAoB,EAf2B;EAgB/C,gBAAgB,KAhB+B;EAiB/CE,kBAAkB,EAAE,EAjB2B;EAkB/CC,wBAAwB,EAAE,EAlBqB;EAmB/CC,wBAAwB,EAAE,WAnBqB;EAoB/CC,eAAe,EAAE,cApB8B;EAqB/CC,wBAAwB,EAAE,QArBqB;EAsB/C1B,UAAU,EAAE,EAtBmC;EAuB/ClF,UAAU,EAAE,QAvBmC;EAwB/CiH,eAAe,EAAE,EAxB8B;EAyB/ChH,kBAAkB,EAAE,kBAzB2B;EA0B/CrD,OAAO,EAAEtC,aAAa,CAACqS,MA1BwB;EA2B/CzF,KAAK,EAAE,EA3BwC;EA4B/CjB,OAAO,EAAE,MAAM5G,SA5BgC;EA6B/CU,cAAc,EAAE,MAAMV,SA7ByB;EA8B/C+H,UAAU,EAAE,IA9BmC;EA+B/CvH,QAAQ,EAAE,IA/BqC;EAgC/CD,uBAAuB,EAAE,IAhCsB;EAiC/CvC,aAAa,EAAE,IAjCgC;EAkC/CJ,eAAe,EAAE,KAlC8B;EAmC/CuK,2BAA2B,EAAE,IAnCkB;EAoC/CvC,eAAe,EAAE,IApC8B;EAqC/CwC,aAAa,EAAE,EArCgC;EAsC/CC,iBAAiB,EAAE,KAtC4B;EAuC/CC,YAAY,EAAE,QAvCiC;EAwC/ClJ,SAAS,EAAE,EAxCoC;EAyC/CK,cAAc,EAAE,WAzC+B;EA0C/CwI,QAAQ,EAAE,IA1CqC;EA2C/CxB,kBAAkB,EAAE,IA3C2B;EA4C/C5G,qBAAqB,EAAE,KA5CwB;EA6C/CK,sBAAsB,EAAE,KA7CuB;EA8C/CW,0BAA0B,EAAE,KA9CmB;EA+C/C0H,mBAAmB,EAAE,IA/C0B;EAgD/CC,aAAa,EAAE;AAhDgC,CAA1C","names":["React","styles","badgeStyles","formStyles","buttonStyles","css","TimesCircleIcon","CheckCircleIcon","ExclamationTriangleIcon","ExclamationCircleIcon","SelectMenu","SelectOption","SelectGroup","SelectToggle","SelectContext","SelectVariant","SelectPosition","SelectDirection","SelectFooterTabbableItems","ChipGroup","Chip","Spinner","keyHandler","getNextIndex","getOUIAProps","getDefaultOUIAId","GenerateId","KeyTypes","Divider","Popper","createRenderableFavorites","extendItemsWithFavorite","ValidatedOptions","findTabbableElements","currentId","Select","Component","constructor","createRef","focusFirstOption","typeaheadInputValue","typeaheadFilteredChildren","Children","toArray","props","children","favoritesGroup","typeaheadCurrIndex","typeaheadStoredIndex","creatableValue","tabbedIntoFavoritesMenu","ouiaStateId","displayName","variant","viewMoreNextIndex","refCollection","prevProps","prevState","hasInlineFilter","filterRef","current","state","customContent","firstRef","find","ref","focus","length","loadingVariant","hasUpdatedChildren","some","prevChild","index","prevChildProps","currChild","currChildProps","value","label","isDisabled","isPlaceholder","updateTypeAheadFilteredChildren","onFavorite","favorites","tempRenderableChildren","renderableFavorites","isGrouped","key","favoritesLabel","setState","isExpanded","e","isInputValuePersisted","onSelect","onToggle","undefined","inputRef","isInputFilterPersisted","Object","target","toString","isOpen","onTypeaheadInputChanged","onFilter","isCreatable","onCreateOption","createText","noResultsFoundText","isCreateSelectOptionObject","input","RegExp","err","replace","childrenArray","childFilter","child","getDisplay","search","map","group","isValidElement","type","filteredGroupChildren","filter","cloneElement","titleId","valueToCheck","isSelectOptionObject","compareTo","text","push","isNoResultsOption","newValue","i","toLowerCase","newOptionValue","includes","onClick","_e","optionRef","favoriteRef","optionContainerRef","optionContainerRefCollection","innerIndex","position","typeahead","typeaheadMulti","handleTypeaheadKeys","nextIndex","updateCurrentIndex","hasDescriptionElm","Boolean","classList","contains","isLoad","optionTextElm","firstElementChild","innerText","indexForFocus","clearRef","refCollectionLen","shiftKey","typeaheadActiveChild","getTypeaheadActiveChild","childElementCount","typeaheadActiveChildText","firstChild","click","document","activeElement","footer","tabbableItems","footerRef","switchFocusToFavoriteMenu","tabbedIntoMenu","currentElementIndex","findIndex","item","onClose","moveFocus","reduce","acc","curr","findText","multi","forEach","join","customBadgeText","selections","Array","isArray","extendTypeaheadChildren","typeaheadChildren","concat","isFocused","id","childElement","render","_a","chipGroupProps","chipGroupComponent","className","direction","onClear","onBlur","toggleId","isPlain","hasPlaceholderStyle","validated","selectionsProp","typeAheadAriaLabel","typeAheadAriaDescribedby","clearSelectionsAriaLabel","toggleAriaLabel","removeSelectionAriaLabel","ariaLabel","ariaLabelledBy","ariaDescribedby","ariaInvalid","placeholderText","width","maxHeight","toggleIcon","ouiaId","ouiaSafe","isCheckboxSelectionBadgeHidden","inlineFilterPlaceholderText","inputIdPrefix","inputAutoComplete","menuAppendTo","shouldResetOnSelect","isFlipEnabled","openedOnEnter","selectToggleId","selectedOption","option","isSelectedPlaceholder","hasAnySelections","childPlaceholderText","renderableItems","tempExtendedChildren","childPlaceholder","isLoading","size","setViewMoreNextIndex","setVieMoreNextIndex","hasOnClear","defaultProps","clearBtn","button","modifiers","plain","selectToggleClear","clearSelection","stopPropagation","disabled","onKeyDown","event","Enter","selectedChips","closeBtnAriaLabel","filterBox","Fragment","selectMenuSearch","formControl","onChange","placeholder","ArrowUp","handleMenuKeys","preventDefault","ArrowDown","ArrowLeft","ArrowRight","Tab","checkbox","autoComplete","variantProps","variantChildren","selected","isCustomContent","checked","innerMenu","style","sendRef","menuComponentRef","isLastOptionBeforeFooter","menuContainer","selectMenu","popperContainer","select","expanded","success","warning","error","invalid","up","top","default","mainContainer","parentRef","menuRef","onEnter","moveFocusToLastMenuItem","hasClearButton","hasFooter","onClickTypeaheadToggleButton","selectToggleWrapper","selectToggleIcon","selectToggleText","single","selectToggleBadge","badge","read","generateSelectedBadge","selectToggleTypeahead","selectToggleStatusIcon","getParentElement","parentElement","randomId","Provider","trigger","popper","appendTo","isVisible","left","down"],"sources":["/home/pkorytar/Projects/RedHat/pnc-web-ui-react/node_modules/@patternfly/react-core/src/components/Select/Select.tsx"],"sourcesContent":["import * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Select/select';\nimport badgeStyles from '@patternfly/react-styles/css/components/Badge/badge';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport buttonStyles from '@patternfly/react-styles/css/components/Button/button';\nimport { css } from '@patternfly/react-styles';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/esm/icons/times-circle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { SelectMenu } from './SelectMenu';\nimport { SelectOption, SelectOptionObject } from './SelectOption';\nimport { SelectGroup, SelectGroupProps } from './SelectGroup';\nimport { SelectToggle } from './SelectToggle';\nimport {\n  SelectContext,\n  SelectVariant,\n  SelectPosition,\n  SelectDirection,\n  SelectFooterTabbableItems\n} from './selectConstants';\nimport { ChipGroup, ChipGroupProps } from '../ChipGroup';\nimport { Chip } from '../Chip';\nimport { Spinner } from '../Spinner';\nimport {\n  keyHandler,\n  getNextIndex,\n  getOUIAProps,\n  OUIAProps,\n  getDefaultOUIAId,\n  PickOptional,\n  GenerateId\n} from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nimport { Divider } from '../Divider';\nimport { ToggleMenuBaseProps, Popper } from '../../helpers/Popper/Popper';\nimport { createRenderableFavorites, extendItemsWithFavorite } from '../../helpers/favorites';\nimport { ValidatedOptions } from '../../helpers/constants';\nimport { findTabbableElements } from '../../helpers/util';\n\n// seed for the aria-labelledby ID\nlet currentId = 0;\n\nexport interface SelectViewMoreObject {\n  /** View more text */\n  text: string;\n  /** Callback for when the view more button is clicked */\n  onClick: (event: React.MouseEvent | React.ChangeEvent) => void;\n}\nexport interface SelectProps\n  extends Omit<ToggleMenuBaseProps, 'menuAppendTo'>,\n    Omit<React.HTMLProps<HTMLDivElement>, 'onSelect' | 'ref' | 'checked' | 'selected'>,\n    OUIAProps {\n  /** Content rendered inside the Select. Must be React.ReactElement<SelectGroupProps>[] */\n  children?: React.ReactElement[];\n  /** Classes applied to the root of the Select */\n  className?: string;\n  /** Indicates where menu will be aligned horizontally */\n  position?: SelectPosition | 'right' | 'left';\n  /** Flag specifying which direction the Select menu expands */\n  direction?: 'up' | 'down';\n  /** Flag to indicate if select is open */\n  isOpen?: boolean;\n  /** Flag to indicate if select options are grouped */\n  isGrouped?: boolean;\n  /** Display the toggle with no border or background */\n  isPlain?: boolean;\n  /** Flag to indicate if select is disabled */\n  isDisabled?: boolean;\n  /** Flag to indicate if the typeahead select allows new items */\n  isCreatable?: boolean;\n  /** Flag indicating if placeholder styles should be applied */\n  hasPlaceholderStyle?: boolean;\n  /** @beta Flag indicating if the creatable option should set its value as a SelectOptionObject */\n  isCreateSelectOptionObject?: boolean;\n  /** Value to indicate if the select is modified to show that validation state.\n   * If set to success, select will be modified to indicate valid state.\n   * If set to error, select will be modified to indicate error state.\n   * If set to warning, select will be modified to indicate warning state.\n   */\n  validated?: 'success' | 'warning' | 'error' | 'default';\n  /** @beta Loading variant to display either the spinner or the view more text button */\n  loadingVariant?: 'spinner' | SelectViewMoreObject;\n  /** Text displayed in typeahead select to prompt the user to create an item */\n  createText?: string;\n  /** Title text of Select */\n  placeholderText?: string | React.ReactNode;\n  /** Text to display in typeahead select when no results are found */\n  noResultsFoundText?: string;\n  /** Array of selected items for multi select variants. */\n  selections?: string | SelectOptionObject | (string | SelectOptionObject)[];\n  /** Flag indicating if selection badge should be hidden for checkbox variant,default false */\n  isCheckboxSelectionBadgeHidden?: boolean;\n  /** Id for select toggle element */\n  toggleId?: string;\n  /** Adds accessible text to Select */\n  'aria-label'?: string;\n  /** Id of label for the Select aria-labelledby */\n  'aria-labelledby'?: string;\n  /** Id of div for the select aria-labelledby */\n  'aria-describedby'?: string;\n  /** Flag indicating if the select is an invalid state */\n  'aria-invalid'?: boolean;\n  /** Label for input field of type ahead select variants */\n  typeAheadAriaLabel?: string;\n  /** Id of div for input field of type ahead select variants */\n  typeAheadAriaDescribedby?: string;\n  /** Label for clear selection button of type ahead select variants */\n  clearSelectionsAriaLabel?: string;\n  /** Label for toggle of type ahead select variants */\n  toggleAriaLabel?: string;\n  /** Label for remove chip button of multiple type ahead select variant */\n  removeSelectionAriaLabel?: string;\n  /** ID list of favorited select items */\n  favorites?: string[];\n  /** Label for the favorites group */\n  favoritesLabel?: string;\n  /** Enables favorites. Callback called when a select options's favorite button is clicked */\n  onFavorite?: (itemId: string, isFavorite: boolean) => void;\n  /** Callback for selection behavior */\n  onSelect?: (\n    event: React.MouseEvent | React.ChangeEvent,\n    value: string | SelectOptionObject,\n    isPlaceholder?: boolean\n  ) => void;\n  /** Callback for toggle button behavior */\n  onToggle: (isExpanded: boolean, event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent | Event) => void;\n  /** Callback for toggle blur */\n  onBlur?: (event?: any) => void;\n  /** Callback for typeahead clear button */\n  onClear?: (event: React.MouseEvent) => void;\n  /** Optional callback for custom filtering */\n  onFilter?: (e: React.ChangeEvent<HTMLInputElement> | null, value: string) => React.ReactElement[] | undefined;\n  /** Optional callback for newly created options */\n  onCreateOption?: (newOptionValue: string) => void;\n  /** Optional event handler called each time the value in the typeahead input changes. */\n  onTypeaheadInputChanged?: (value: string) => void;\n  /** Variant of rendered Select */\n  variant?: 'single' | 'checkbox' | 'typeahead' | 'typeaheadmulti';\n  /** Width of the select container as a number of px or string percentage */\n  width?: string | number;\n  /** Max height of the select container as a number of px or string percentage */\n  maxHeight?: string | number;\n  /** Icon element to render inside the select toggle */\n  toggleIcon?: React.ReactElement;\n  /** Custom content to render in the select menu.  If this prop is defined, the variant prop will be ignored and the select will render with a single select toggle */\n  customContent?: React.ReactNode;\n  /** Flag indicating if select should have an inline text input for filtering */\n  hasInlineFilter?: boolean;\n  /** Placeholder text for inline filter */\n  inlineFilterPlaceholderText?: string;\n  /** Custom text for select badge */\n  customBadgeText?: string | number;\n  /** Prefix for the id of the input in the checkbox select variant*/\n  inputIdPrefix?: string;\n  /** Value for the typeahead and inline filtering input autocomplete attribute. When targeting Chrome this property should be a random string. */\n  inputAutoComplete?: string;\n  /** Optional props to pass to the chip group in the typeaheadmulti variant */\n  chipGroupProps?: Omit<ChipGroupProps, 'children' | 'ref'>;\n  /** Optional props to render custom chip group in the typeaheadmulti variant */\n  chipGroupComponent?: React.ReactNode;\n  /** Flag for retaining keyboard-entered value in typeahead text field when focus leaves input away */\n  isInputValuePersisted?: boolean;\n  /** @beta Flag for retaining filter results on blur from keyboard-entered typeahead text */\n  isInputFilterPersisted?: boolean;\n  /** Flag indicating the typeahead input value should reset upon selection */\n  shouldResetOnSelect?: boolean;\n  /** Content rendered in the footer of the select menu */\n  footer?: React.ReactNode;\n  /** The container to append the menu to. Defaults to 'inline'.\n   * If your menu is being cut off you can append it to an element higher up the DOM tree.\n   * Some examples:\n   * menuAppendTo=\"parent\"\n   * menuAppendTo={() => document.body}\n   * menuAppendTo={document.getElementById('target')}\n   */\n  menuAppendTo?: HTMLElement | (() => HTMLElement) | 'inline' | 'parent';\n  /** Flag for indicating that the select menu should automatically flip vertically when\n   * it reaches the boundary. This prop can only be used when the select component is not\n   * appended inline, e.g. `menuAppendTo=\"parent\"`\n   */\n  isFlipEnabled?: boolean;\n}\n\nexport interface SelectState {\n  focusFirstOption: boolean;\n  typeaheadInputValue: string | null;\n  typeaheadFilteredChildren: React.ReactNode[];\n  favoritesGroup: React.ReactNode[];\n  typeaheadCurrIndex: number;\n  creatableValue: string;\n  tabbedIntoFavoritesMenu: boolean;\n  typeaheadStoredIndex: number;\n  ouiaStateId: string;\n  viewMoreNextIndex: number;\n}\n\nexport class Select extends React.Component<SelectProps & OUIAProps, SelectState> {\n  static displayName = 'Select';\n  private parentRef = React.createRef<HTMLDivElement>();\n  private menuComponentRef = React.createRef<HTMLElement>();\n  private filterRef = React.createRef<HTMLInputElement>();\n  private clearRef = React.createRef<HTMLButtonElement>();\n  private inputRef = React.createRef<HTMLInputElement>();\n  private refCollection: HTMLElement[][] = [[]];\n  private optionContainerRefCollection: HTMLElement[] = [];\n  private footerRef = React.createRef<HTMLDivElement>();\n\n  static defaultProps: PickOptional<SelectProps> = {\n    children: [] as React.ReactElement[],\n    className: '',\n    position: SelectPosition.left,\n    direction: SelectDirection.down,\n    toggleId: null as string,\n    isOpen: false,\n    isGrouped: false,\n    isPlain: false,\n    isDisabled: false,\n    hasPlaceholderStyle: false,\n    isCreatable: false,\n    validated: 'default',\n    'aria-label': '',\n    'aria-labelledby': '',\n    'aria-describedby': '',\n    'aria-invalid': false,\n    typeAheadAriaLabel: '',\n    typeAheadAriaDescribedby: '',\n    clearSelectionsAriaLabel: 'Clear all',\n    toggleAriaLabel: 'Options menu',\n    removeSelectionAriaLabel: 'Remove',\n    selections: [],\n    createText: 'Create',\n    placeholderText: '',\n    noResultsFoundText: 'No results found',\n    variant: SelectVariant.single,\n    width: '',\n    onClear: () => undefined as void,\n    onCreateOption: () => undefined as void,\n    toggleIcon: null as React.ReactElement,\n    onFilter: null,\n    onTypeaheadInputChanged: null,\n    customContent: null,\n    hasInlineFilter: false,\n    inlineFilterPlaceholderText: null,\n    customBadgeText: null,\n    inputIdPrefix: '',\n    inputAutoComplete: 'off',\n    menuAppendTo: 'inline',\n    favorites: [] as string[],\n    favoritesLabel: 'Favorites',\n    ouiaSafe: true,\n    chipGroupComponent: null,\n    isInputValuePersisted: false,\n    isInputFilterPersisted: false,\n    isCreateSelectOptionObject: false,\n    shouldResetOnSelect: true,\n    isFlipEnabled: false\n  };\n\n  state: SelectState = {\n    focusFirstOption: false,\n    typeaheadInputValue: null,\n    typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n    favoritesGroup: [] as React.ReactNode[],\n    typeaheadCurrIndex: -1,\n    typeaheadStoredIndex: -1,\n    creatableValue: '',\n    tabbedIntoFavoritesMenu: false,\n    ouiaStateId: getDefaultOUIAId(Select.displayName, this.props.variant),\n    viewMoreNextIndex: -1\n  };\n\n  getTypeaheadActiveChild = (typeaheadCurrIndex: number) =>\n    this.refCollection[typeaheadCurrIndex] ? this.refCollection[typeaheadCurrIndex][0] : null;\n\n  componentDidUpdate = (prevProps: SelectProps, prevState: SelectState) => {\n    if (this.props.hasInlineFilter) {\n      this.refCollection[0][0] = this.filterRef.current;\n    }\n\n    // Move focus to top of the menu if state.focusFirstOption was updated to true and the menu does not have custom content\n    if (!prevState.focusFirstOption && this.state.focusFirstOption && !this.props.customContent) {\n      const firstRef = this.refCollection.find(ref => ref !== null);\n      if (firstRef && firstRef[0]) {\n        firstRef[0].focus();\n      }\n    } else if (\n      // if viewMoreNextIndex is not -1, view more was clicked, set focus on first newly loaded item\n      this.state.viewMoreNextIndex !== -1 &&\n      this.refCollection.length > this.state.viewMoreNextIndex &&\n      this.props.loadingVariant !== 'spinner' &&\n      this.refCollection[this.state.viewMoreNextIndex][0] &&\n      this.props.variant !== 'typeahead' && // do not hard focus newly added items for typeahead variants\n      this.props.variant !== 'typeaheadmulti'\n    ) {\n      this.refCollection[this.state.viewMoreNextIndex][0].focus();\n    }\n\n    const hasUpdatedChildren =\n      prevProps.children.length !== this.props.children.length ||\n      prevProps.children.some((prevChild: React.ReactElement, index: number) => {\n        const prevChildProps = prevChild.props;\n        const currChild = this.props.children[index];\n        const { props: currChildProps } = currChild;\n\n        if (prevChildProps && currChildProps) {\n          return (\n            prevChildProps.value !== currChildProps.value ||\n            prevChildProps.label !== currChildProps.label ||\n            prevChildProps.isDisabled !== currChildProps.isDisabled ||\n            prevChildProps.isPlaceholder !== currChildProps.isPlaceholder\n          );\n        } else {\n          return prevChild !== currChild;\n        }\n      });\n\n    if (hasUpdatedChildren) {\n      this.updateTypeAheadFilteredChildren(prevState.typeaheadInputValue || '', null);\n    }\n\n    // for menus with favorites,\n    // if the number of favorites or typeahead filtered children has changed, the generated\n    // list of favorites needs to be updated\n    if (\n      this.props.onFavorite &&\n      (this.props.favorites.length !== prevProps.favorites.length ||\n        this.state.typeaheadFilteredChildren !== prevState.typeaheadFilteredChildren)\n    ) {\n      const tempRenderableChildren =\n        this.props.variant === 'typeahead' || this.props.variant === 'typeaheadmulti'\n          ? this.state.typeaheadFilteredChildren\n          : this.props.children;\n      const renderableFavorites = createRenderableFavorites(\n        tempRenderableChildren,\n        this.props.isGrouped,\n        this.props.favorites\n      );\n      const favoritesGroup = renderableFavorites.length\n        ? [\n            <SelectGroup key=\"favorites\" label={this.props.favoritesLabel}>\n              {renderableFavorites}\n            </SelectGroup>,\n            <Divider key=\"favorites-group-divider\" />\n          ]\n        : [];\n      this.setState({ favoritesGroup });\n    }\n  };\n\n  onEnter = () => {\n    this.setState({ focusFirstOption: true });\n  };\n\n  onToggle = (isExpanded: boolean, e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent | Event) => {\n    const { isInputValuePersisted, onSelect, onToggle, hasInlineFilter } = this.props;\n    if (!isExpanded && isInputValuePersisted && onSelect) {\n      onSelect(undefined, this.inputRef.current ? this.inputRef.current.value : '');\n    }\n    if (isExpanded && hasInlineFilter) {\n      this.setState({\n        focusFirstOption: true\n      });\n    }\n    onToggle(isExpanded, e);\n  };\n\n  onClose = () => {\n    const { isInputFilterPersisted } = this.props;\n\n    this.setState({\n      focusFirstOption: false,\n      typeaheadInputValue: null,\n      ...(!isInputFilterPersisted && {\n        typeaheadFilteredChildren: React.Children.toArray(this.props.children)\n      }),\n      typeaheadCurrIndex: -1,\n      tabbedIntoFavoritesMenu: false,\n      viewMoreNextIndex: -1\n    });\n  };\n\n  onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value.toString() !== '' && !this.props.isOpen) {\n      this.onToggle(true, e);\n    }\n\n    if (this.props.onTypeaheadInputChanged) {\n      this.props.onTypeaheadInputChanged(e.target.value.toString());\n    }\n\n    this.setState({\n      typeaheadCurrIndex: -1,\n      typeaheadInputValue: e.target.value,\n      creatableValue: e.target.value\n    });\n    this.updateTypeAheadFilteredChildren(e.target.value.toString(), e);\n    this.refCollection = [[]];\n  };\n\n  updateTypeAheadFilteredChildren = (typeaheadInputValue: string, e: React.ChangeEvent<HTMLInputElement> | null) => {\n    let typeaheadFilteredChildren: any;\n\n    const {\n      onFilter,\n      isCreatable,\n      onCreateOption,\n      createText,\n      noResultsFoundText,\n      children,\n      isGrouped,\n      isCreateSelectOptionObject,\n      loadingVariant\n    } = this.props;\n\n    if (onFilter) {\n      /* The updateTypeAheadFilteredChildren callback is not only called on input changes but also when the children change.\n       * In this case the e is null but we can get the typeaheadInputValue from the state.\n       */\n      typeaheadFilteredChildren = onFilter(e, e ? e.target.value : typeaheadInputValue) || children;\n    } else {\n      let input: RegExp;\n      try {\n        input = new RegExp(typeaheadInputValue.toString(), 'i');\n      } catch (err) {\n        input = new RegExp(typeaheadInputValue.toString().replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n      }\n      const childrenArray = React.Children.toArray(children) as React.ReactElement<SelectGroupProps>[];\n      if (isGrouped) {\n        const childFilter = (child: React.ReactElement<SelectGroupProps>) =>\n          child.props.value &&\n          child.props.value.toString &&\n          this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n        typeaheadFilteredChildren =\n          typeaheadInputValue.toString() !== ''\n            ? React.Children.map(children, group => {\n                if (React.isValidElement(group) && group.type === SelectGroup) {\n                  const filteredGroupChildren = (React.Children.toArray(group.props.children) as React.ReactElement<\n                    SelectGroupProps\n                  >[]).filter(childFilter);\n                  if (filteredGroupChildren.length > 0) {\n                    return React.cloneElement(group, {\n                      titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n                      children: filteredGroupChildren as any\n                    });\n                  }\n                } else {\n                  return (React.Children.toArray(group) as React.ReactElement<SelectGroupProps>[]).filter(childFilter);\n                }\n              })\n            : childrenArray;\n      } else {\n        typeaheadFilteredChildren =\n          typeaheadInputValue.toString() !== ''\n            ? childrenArray.filter(child => {\n                const valueToCheck = child.props.value;\n                // Dividers don't have value and should not be filtered\n                if (!valueToCheck) {\n                  return true;\n                }\n\n                const isSelectOptionObject =\n                  typeof valueToCheck !== 'string' &&\n                  (valueToCheck as SelectOptionObject).toString &&\n                  (valueToCheck as SelectOptionObject).compareTo;\n\n                // View more option should be returned as not a match\n                if (loadingVariant !== 'spinner' && loadingVariant?.text === valueToCheck) {\n                  return true;\n                }\n\n                // spinner should be returned as not a match\n                if (loadingVariant === 'spinner' && valueToCheck === 'loading') {\n                  return true;\n                }\n\n                if (isSelectOptionObject) {\n                  return (valueToCheck as SelectOptionObject).compareTo(typeaheadInputValue);\n                } else {\n                  return this.getDisplay(child.props.value.toString(), 'text').search(input) === 0;\n                }\n              })\n            : childrenArray;\n      }\n    }\n    if (!typeaheadFilteredChildren) {\n      typeaheadFilteredChildren = [];\n    }\n    if (typeaheadFilteredChildren.length === 0) {\n      !isCreatable &&\n        typeaheadFilteredChildren.push(\n          <SelectOption isDisabled key=\"no-results\" value={noResultsFoundText} isNoResultsOption />\n        );\n    }\n    if (isCreatable && typeaheadInputValue !== '') {\n      const newValue = typeaheadInputValue;\n      if (\n        !typeaheadFilteredChildren.find(\n          (i: React.ReactElement) =>\n            i.props.value && i.props.value.toString().toLowerCase() === newValue.toString().toLowerCase()\n        )\n      ) {\n        const newOptionValue = isCreateSelectOptionObject\n          ? ({\n              toString: () => newValue,\n              compareTo: value =>\n                this.toString()\n                  .toLowerCase()\n                  .includes(value.toString().toLowerCase())\n            } as SelectOptionObject)\n          : newValue;\n\n        typeaheadFilteredChildren.push(\n          <SelectOption\n            key={`create ${newValue}`}\n            value={newOptionValue}\n            onClick={() => onCreateOption && onCreateOption(newValue)}\n          >\n            {createText} \"{newValue}\"\n          </SelectOption>\n        );\n      }\n    }\n\n    this.setState({\n      typeaheadFilteredChildren\n    });\n  };\n\n  onClick = (e: React.MouseEvent) => {\n    if (!this.props.isOpen) {\n      this.onToggle(true, e);\n    }\n  };\n\n  clearSelection = (_e: React.MouseEvent) => {\n    this.setState({\n      typeaheadInputValue: null,\n      typeaheadFilteredChildren: React.Children.toArray(this.props.children),\n      typeaheadCurrIndex: -1\n    });\n  };\n\n  extendTypeaheadChildren(typeaheadCurrIndex: number, favoritesGroup?: React.ReactNode[]) {\n    const { isGrouped, onFavorite } = this.props;\n    const typeaheadChildren = favoritesGroup\n      ? favoritesGroup.concat(this.state.typeaheadFilteredChildren)\n      : this.state.typeaheadFilteredChildren;\n    const activeElement = this.optionContainerRefCollection[typeaheadCurrIndex];\n\n    let typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    if (typeaheadActiveChild && typeaheadActiveChild.classList.contains('pf-m-description')) {\n      typeaheadActiveChild = typeaheadActiveChild.firstElementChild as HTMLElement;\n    }\n\n    this.refCollection = [[]];\n    this.optionContainerRefCollection = [];\n    if (isGrouped) {\n      return React.Children.map(typeaheadChildren as React.ReactElement[], (group: React.ReactElement) => {\n        if (group.type === Divider) {\n          return group;\n        } else if (group.type === SelectGroup && onFavorite) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, (child: React.ReactElement) =>\n              child.type === Divider\n                ? child\n                : React.cloneElement(child as React.ReactElement, {\n                    isFocused:\n                      activeElement &&\n                      (activeElement.id === (child as React.ReactElement).props.id ||\n                        (this.props.isCreatable &&\n                          typeaheadActiveChild.innerText ===\n                            `{createText} \"${(group as React.ReactElement).props.value}\"`))\n                  })\n            )\n          });\n        } else if (group.type === SelectGroup) {\n          return React.cloneElement(group, {\n            titleId: group.props.label && group.props.label.replace(/\\W/g, '-'),\n            children: React.Children.map(group.props.children, (child: React.ReactElement) =>\n              child.type === Divider\n                ? child\n                : React.cloneElement(child as React.ReactElement, {\n                    isFocused:\n                      typeaheadActiveChild &&\n                      (typeaheadActiveChild.innerText === (child as React.ReactElement).props.value.toString() ||\n                        (this.props.isCreatable &&\n                          typeaheadActiveChild.innerText ===\n                            `{createText} \"${(child as React.ReactElement).props.value}\"`))\n                  })\n            )\n          });\n        } else {\n          // group has been filtered down to SelectOption\n          return React.cloneElement(group as React.ReactElement, {\n            isFocused:\n              typeaheadActiveChild &&\n              (typeaheadActiveChild.innerText === group.props.value.toString() ||\n                (this.props.isCreatable && typeaheadActiveChild.innerText === `{createText} \"${group.props.value}\"`))\n          });\n        }\n      });\n    }\n    return typeaheadChildren.map((child: React.ReactNode, index) => {\n      const childElement = child as any;\n      return childElement.type.displayName === 'Divider'\n        ? child\n        : React.cloneElement(child as React.ReactElement, {\n            isFocused: typeaheadActiveChild\n              ? typeaheadActiveChild.innerText === (child as React.ReactElement).props.value.toString() ||\n                (this.props.isCreatable &&\n                  typeaheadActiveChild.innerText === `{createText} \"${(child as React.ReactElement).props.value}\"`)\n              : index === typeaheadCurrIndex // fallback for view more + typeahead use cases, when the new expanded list is loaded and refCollection hasn't be updated yet\n          });\n    });\n  }\n\n  sendRef = (\n    optionRef: React.ReactNode,\n    favoriteRef: React.ReactNode,\n    optionContainerRef: React.ReactNode,\n    index: number\n  ) => {\n    this.refCollection[index] = [optionRef as HTMLElement, favoriteRef as HTMLElement];\n    this.optionContainerRefCollection[index] = optionContainerRef as HTMLElement;\n  };\n\n  handleMenuKeys = (index: number, innerIndex: number, position: string) => {\n    keyHandler(index, innerIndex, position, this.refCollection, this.refCollection);\n    if (this.props.variant === SelectVariant.typeahead || this.props.variant === SelectVariant.typeaheadMulti) {\n      if (position !== 'tab') {\n        this.handleTypeaheadKeys(position);\n      }\n    }\n  };\n\n  moveFocus = (nextIndex: number, updateCurrentIndex: boolean = true) => {\n    const { isCreatable, createText } = this.props;\n\n    const hasDescriptionElm = Boolean(\n      this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-description')\n    );\n    const isLoad = Boolean(\n      this.refCollection[nextIndex][0] && this.refCollection[nextIndex][0].classList.contains('pf-m-load')\n    );\n    const optionTextElm = hasDescriptionElm\n      ? (this.refCollection[nextIndex][0].firstElementChild as HTMLElement)\n      : this.refCollection[nextIndex][0];\n\n    let typeaheadInputValue = '';\n    if (isCreatable && optionTextElm.innerText.includes(createText)) {\n      typeaheadInputValue = this.state.creatableValue;\n    } else if (optionTextElm && !isLoad) {\n      // !isLoad prevents the view more button text from appearing the typeahead input\n      typeaheadInputValue = optionTextElm.innerText;\n    }\n    this.setState(prevState => ({\n      typeaheadCurrIndex: updateCurrentIndex ? nextIndex : prevState.typeaheadCurrIndex,\n      typeaheadStoredIndex: nextIndex,\n      typeaheadInputValue\n    }));\n  };\n\n  switchFocusToFavoriteMenu = () => {\n    const { typeaheadCurrIndex, typeaheadStoredIndex } = this.state;\n    let indexForFocus = 0;\n\n    if (typeaheadCurrIndex !== -1) {\n      indexForFocus = typeaheadCurrIndex;\n    } else if (typeaheadStoredIndex !== -1) {\n      indexForFocus = typeaheadStoredIndex;\n    }\n\n    if (this.refCollection[indexForFocus] !== null && this.refCollection[indexForFocus][0] !== null) {\n      this.refCollection[indexForFocus][0].focus();\n    } else {\n      this.clearRef.current.focus();\n    }\n\n    this.setState({\n      tabbedIntoFavoritesMenu: true,\n      typeaheadCurrIndex: -1\n    });\n  };\n\n  moveFocusToLastMenuItem = () => {\n    const refCollectionLen = this.refCollection.length;\n    if (\n      refCollectionLen > 0 &&\n      this.refCollection[refCollectionLen - 1] !== null &&\n      this.refCollection[refCollectionLen - 1][0] !== null\n    ) {\n      this.refCollection[refCollectionLen - 1][0].focus();\n    }\n  };\n\n  handleTypeaheadKeys = (position: string, shiftKey: boolean = false) => {\n    const { isOpen, onFavorite, isCreatable } = this.props;\n    const { typeaheadCurrIndex, tabbedIntoFavoritesMenu } = this.state;\n    const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    if (isOpen) {\n      if (position === 'enter') {\n        if (\n          (typeaheadCurrIndex !== -1 || (isCreatable && this.refCollection.length === 1)) && // do not allow selection without moving to an initial option unless it is a single create option\n          (typeaheadActiveChild || (this.refCollection[0] && this.refCollection[0][0]))\n        ) {\n          if (typeaheadActiveChild) {\n            if (!typeaheadActiveChild.classList.contains('pf-m-load')) {\n              const hasDescriptionElm = typeaheadActiveChild.childElementCount > 1;\n              const typeaheadActiveChildText = hasDescriptionElm\n                ? (typeaheadActiveChild.firstChild as HTMLElement).innerText\n                : typeaheadActiveChild.innerText;\n              this.setState({\n                typeaheadInputValue: typeaheadActiveChildText\n              });\n            }\n          } else if (this.refCollection[0] && this.refCollection[0][0]) {\n            this.setState({\n              typeaheadInputValue: this.refCollection[0][0].innerText\n            });\n          }\n          if (typeaheadActiveChild) {\n            typeaheadActiveChild.click();\n          } else {\n            this.refCollection[0][0].click();\n          }\n        }\n      } else if (position === 'tab') {\n        if (onFavorite) {\n          // if the input has focus, tab to the first item or the last item that was previously focused.\n          if (this.inputRef.current === document.activeElement) {\n            // If shift is also clicked and there is a footer, tab to the last item in tabbable footer\n            if (this.props.footer && shiftKey) {\n              const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n              if (tabbableItems.length > 0) {\n                if (tabbableItems[tabbableItems.length - 1]) {\n                  tabbableItems[tabbableItems.length - 1].focus();\n                }\n              }\n            } else {\n              this.switchFocusToFavoriteMenu();\n            }\n          } else {\n            // focus is on menu or footer\n            if (this.props.footer) {\n              let tabbedIntoMenu = false;\n              const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n              if (tabbableItems.length > 0) {\n                // if current element is not in footer, tab to first tabbable element in footer,\n                // if shift was clicked, tab to input since focus is on menu\n                const currentElementIndex = tabbableItems.findIndex((item: any) => item === document.activeElement);\n                if (currentElementIndex === -1) {\n                  if (shiftKey) {\n                    // currently in menu, shift back to input\n                    this.inputRef.current.focus();\n                  } else {\n                    // currently in menu, tab to first tabbable item in footer\n                    tabbableItems[0].focus();\n                  }\n                } else {\n                  // already in footer\n                  if (shiftKey) {\n                    // shift to previous item\n                    if (currentElementIndex === 0) {\n                      // on first footer item, shift back to menu\n                      this.switchFocusToFavoriteMenu();\n                      tabbedIntoMenu = true;\n                    } else {\n                      // shift to previous footer item\n                      tabbableItems[currentElementIndex - 1].focus();\n                    }\n                  } else {\n                    // tab to next tabbable item in footer or to input.\n                    if (tabbableItems[currentElementIndex + 1]) {\n                      tabbableItems[currentElementIndex + 1].focus();\n                    } else {\n                      this.inputRef.current.focus();\n                    }\n                  }\n                }\n              } else {\n                // no tabbable items in footer, tab to input\n                this.inputRef.current.focus();\n                tabbedIntoMenu = false;\n              }\n              this.setState({ tabbedIntoFavoritesMenu: tabbedIntoMenu });\n            } else {\n              this.inputRef.current.focus();\n              this.setState({ tabbedIntoFavoritesMenu: false });\n            }\n          }\n        } else {\n          // Close if there is no footer\n          if (!this.props.footer) {\n            this.onToggle(false, null);\n            this.onClose();\n          } else {\n            // has footer\n            const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n            const currentElementIndex = tabbableItems.findIndex((item: any) => item === document.activeElement);\n            if (this.inputRef.current === document.activeElement) {\n              if (shiftKey) {\n                // close toggle if shift key and tab on input\n                this.onToggle(false, null);\n                this.onClose();\n              } else {\n                // tab to first tabbable item in footer\n                if (tabbableItems[0]) {\n                  tabbableItems[0].focus();\n                } else {\n                  this.onToggle(false, null);\n                  this.onClose();\n                }\n              }\n            } else {\n              // focus is in footer\n              if (shiftKey) {\n                if (currentElementIndex === 0) {\n                  // shift tab back to input\n                  this.inputRef.current.focus();\n                } else {\n                  // shift to previous footer item\n                  tabbableItems[currentElementIndex - 1].focus();\n                }\n              } else {\n                // tab to next footer item or close tab if last item\n                if (tabbableItems[currentElementIndex + 1]) {\n                  tabbableItems[currentElementIndex + 1].focus();\n                } else {\n                  // no next item, close toggle\n                  this.onToggle(false, null);\n                  this.inputRef.current.focus();\n                  this.onClose();\n                }\n              }\n            }\n          }\n        }\n      } else if (!tabbedIntoFavoritesMenu) {\n        if (this.refCollection[0][0] === null) {\n          return;\n        }\n        let nextIndex;\n        if (typeaheadCurrIndex === -1 && position === 'down') {\n          nextIndex = 0;\n        } else if (typeaheadCurrIndex === -1 && position === 'up') {\n          nextIndex = this.refCollection.length - 1;\n        } else if (position !== 'left' && position !== 'right') {\n          nextIndex = getNextIndex(typeaheadCurrIndex, position, this.refCollection);\n        } else {\n          nextIndex = typeaheadCurrIndex;\n        }\n        if (this.refCollection[nextIndex] === null) {\n          return;\n        }\n        this.moveFocus(nextIndex);\n      } else {\n        const nextIndex = this.refCollection.findIndex(\n          ref => ref !== undefined && (ref[0] === document.activeElement || ref[1] === document.activeElement)\n        );\n        this.moveFocus(nextIndex);\n      }\n    }\n  };\n\n  onClickTypeaheadToggleButton = () => {\n    if (this.inputRef && this.inputRef.current) {\n      this.inputRef.current.focus();\n    }\n  };\n\n  getDisplay = (value: string | SelectOptionObject, type: 'node' | 'text' = 'node') => {\n    if (!value) {\n      return;\n    }\n    const item = this.props.isGrouped\n      ? (React.Children.toArray(this.props.children) as React.ReactElement[])\n          .reduce((acc, curr) => [...acc, ...React.Children.toArray(curr.props.children)], [])\n          .find(child => child.props.value.toString() === value.toString())\n      : React.Children.toArray(this.props.children).find(\n          child =>\n            (child as React.ReactElement).props.value &&\n            (child as React.ReactElement).props.value.toString() === value.toString()\n        );\n    if (item) {\n      if (item && item.props.children) {\n        if (type === 'node') {\n          return item.props.children;\n        }\n        return this.findText(item);\n      }\n      return item.props.value.toString();\n    }\n    return value.toString();\n  };\n\n  findText = (item: React.ReactNode) => {\n    if (typeof item === 'string') {\n      return item;\n    } else if (!React.isValidElement(item)) {\n      return '';\n    } else {\n      const multi: string[] = [];\n      React.Children.toArray(item.props.children).forEach(child => multi.push(this.findText(child)));\n      return multi.join('');\n    }\n  };\n\n  generateSelectedBadge = () => {\n    const { customBadgeText, selections } = this.props;\n    if (customBadgeText !== null) {\n      return customBadgeText;\n    }\n    if (Array.isArray(selections) && selections.length > 0) {\n      return selections.length;\n    }\n    return null;\n  };\n\n  setVieMoreNextIndex = () => {\n    this.setState({ viewMoreNextIndex: this.refCollection.length - 1 });\n  };\n\n  isLastOptionBeforeFooter = (index: any) =>\n    this.props.footer && index === this.refCollection.length - 1 ? true : false;\n\n  render() {\n    const {\n      children,\n      chipGroupProps,\n      chipGroupComponent,\n      className,\n      customContent,\n      variant,\n      direction,\n      onSelect,\n      onClear,\n      onBlur,\n      toggleId,\n      isOpen,\n      isGrouped,\n      isPlain,\n      isDisabled,\n      hasPlaceholderStyle,\n      validated,\n      selections: selectionsProp,\n      typeAheadAriaLabel,\n      typeAheadAriaDescribedby,\n      clearSelectionsAriaLabel,\n      toggleAriaLabel,\n      removeSelectionAriaLabel,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledBy,\n      'aria-describedby': ariaDescribedby,\n      'aria-invalid': ariaInvalid,\n      placeholderText,\n      width,\n      maxHeight,\n      toggleIcon,\n      ouiaId,\n      ouiaSafe,\n      hasInlineFilter,\n      isCheckboxSelectionBadgeHidden,\n      inlineFilterPlaceholderText,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onFilter,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      onTypeaheadInputChanged,\n      onCreateOption,\n      isCreatable,\n      onToggle,\n      createText,\n      noResultsFoundText,\n      customBadgeText,\n      inputIdPrefix,\n      inputAutoComplete,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      isInputValuePersisted,\n      isInputFilterPersisted,\n      /* eslint-enable @typescript-eslint/no-unused-vars */\n      menuAppendTo,\n      favorites,\n      onFavorite,\n      /* eslint-disable @typescript-eslint/no-unused-vars */\n      favoritesLabel,\n      footer,\n      loadingVariant,\n      isCreateSelectOptionObject,\n      shouldResetOnSelect,\n      isFlipEnabled,\n      ...props\n    } = this.props;\n    const {\n      focusFirstOption: openedOnEnter,\n      typeaheadCurrIndex,\n      typeaheadInputValue,\n      typeaheadFilteredChildren,\n      favoritesGroup\n    } = this.state;\n    const selectToggleId = toggleId || `pf-select-toggle-id-${currentId++}`;\n    const selections = Array.isArray(selectionsProp) ? selectionsProp : [selectionsProp];\n    // Find out if the selected option is a placeholder\n    const selectedOption = React.Children.toArray(children).find(\n      (option: any) => option.props.value === selections[0]\n    ) as any;\n    const isSelectedPlaceholder = selectedOption && selectedOption.props.isPlaceholder;\n    const hasAnySelections = Boolean(selections[0] && selections[0] !== '');\n    const typeaheadActiveChild = this.getTypeaheadActiveChild(typeaheadCurrIndex);\n    let childPlaceholderText = null as string;\n\n    // If onFavorites is set,  add isFavorite prop to children and add a Favorites group to the SelectMenu\n    let renderableItems: React.ReactNode[] = [];\n    if (onFavorite) {\n      // if variant is type-ahead call the extendTypeaheadChildren before adding favorites\n      let tempExtendedChildren: (React.ReactElement | React.ReactNode | {})[] = children;\n      if (variant === 'typeahead' || variant === 'typeaheadmulti') {\n        tempExtendedChildren = this.extendTypeaheadChildren(typeaheadCurrIndex, favoritesGroup);\n      } else if (onFavorite) {\n        tempExtendedChildren = favoritesGroup.concat(children);\n      }\n      // mark items that are favorited with isFavorite\n      renderableItems = extendItemsWithFavorite(tempExtendedChildren, isGrouped, favorites);\n    } else {\n      renderableItems = children;\n    }\n\n    if (!customContent) {\n      if (!hasAnySelections && !placeholderText) {\n        const childPlaceholder = React.Children.toArray(children).filter(\n          (child: React.ReactNode) => (child as React.ReactElement).props.isPlaceholder === true\n        );\n        childPlaceholderText =\n          (childPlaceholder[0] && this.getDisplay((childPlaceholder[0] as React.ReactElement).props.value, 'node')) ||\n          (children[0] && this.getDisplay(children[0].props.value, 'node'));\n      }\n    }\n\n    if (isOpen) {\n      if (renderableItems.find(item => (item as any)?.key === 'loading') === undefined) {\n        if (loadingVariant === 'spinner') {\n          renderableItems.push(\n            <SelectOption isLoading key=\"loading\" value=\"loading\">\n              <Spinner size=\"lg\" />\n            </SelectOption>\n          );\n        } else if (loadingVariant?.text) {\n          renderableItems.push(\n            <SelectOption\n              isLoad\n              key=\"loading\"\n              value={loadingVariant.text}\n              setViewMoreNextIndex={this.setVieMoreNextIndex}\n              onClick={loadingVariant?.onClick}\n            />\n          );\n        }\n      }\n    }\n\n    const hasOnClear = onClear !== Select.defaultProps.onClear;\n    const clearBtn = (\n      <button\n        className={css(buttonStyles.button, buttonStyles.modifiers.plain, styles.selectToggleClear)}\n        onClick={e => {\n          this.clearSelection(e);\n          onClear(e);\n          e.stopPropagation();\n        }}\n        aria-label={clearSelectionsAriaLabel}\n        type=\"button\"\n        disabled={isDisabled}\n        ref={this.clearRef}\n        onKeyDown={event => {\n          if (event.key === KeyTypes.Enter) {\n            this.clearRef.current.click();\n          }\n        }}\n      >\n        <TimesCircleIcon aria-hidden />\n      </button>\n    );\n\n    let selectedChips = null as any;\n    if (variant === SelectVariant.typeaheadMulti) {\n      selectedChips = chipGroupComponent ? (\n        chipGroupComponent\n      ) : (\n        <ChipGroup {...chipGroupProps}>\n          {selections &&\n            (selections as string[]).map(item => (\n              <Chip\n                key={item}\n                onClick={(e: React.MouseEvent) => onSelect(e, item)}\n                closeBtnAriaLabel={removeSelectionAriaLabel}\n              >\n                {this.getDisplay(item, 'node')}\n              </Chip>\n            ))}\n        </ChipGroup>\n      );\n    }\n\n    if (hasInlineFilter) {\n      const filterBox = (\n        <React.Fragment>\n          <div key=\"inline-filter\" className={css(styles.selectMenuSearch)}>\n            <input\n              key=\"inline-filter-input\"\n              type=\"search\"\n              className={css(formStyles.formControl, formStyles.modifiers.search)}\n              onChange={this.onChange}\n              placeholder={inlineFilterPlaceholderText}\n              onKeyDown={event => {\n                if (event.key === KeyTypes.ArrowUp) {\n                  this.handleMenuKeys(0, 0, 'up');\n                  event.preventDefault();\n                } else if (event.key === KeyTypes.ArrowDown) {\n                  this.handleMenuKeys(0, 0, 'down');\n                  event.preventDefault();\n                } else if (event.key === KeyTypes.ArrowLeft) {\n                  this.handleMenuKeys(0, 0, 'left');\n                  event.preventDefault();\n                } else if (event.key === KeyTypes.ArrowRight) {\n                  this.handleMenuKeys(0, 0, 'right');\n                  event.preventDefault();\n                } else if (event.key === KeyTypes.Tab && variant !== SelectVariant.checkbox && this.props.footer) {\n                  // tab to footer or close menu if shift key\n                  if (event.shiftKey) {\n                    this.onToggle(false, event);\n                  } else {\n                    const tabbableItems = findTabbableElements(this.footerRef, SelectFooterTabbableItems);\n                    if (tabbableItems.length > 0) {\n                      tabbableItems[0].focus();\n                      event.stopPropagation();\n                      event.preventDefault();\n                    } else {\n                      this.onToggle(false, event);\n                    }\n                  }\n                } else if (event.key === KeyTypes.Tab && variant === SelectVariant.checkbox) {\n                  // More modal-like experience for checkboxes\n                  // Let SelectOption handle this\n                  if (event.shiftKey) {\n                    this.handleMenuKeys(0, 0, 'up');\n                  } else {\n                    this.handleMenuKeys(0, 0, 'down');\n                  }\n                  event.stopPropagation();\n                  event.preventDefault();\n                }\n              }}\n              ref={this.filterRef}\n              autoComplete={inputAutoComplete}\n            />\n          </div>\n          <Divider key=\"inline-filter-divider\" />\n        </React.Fragment>\n      );\n      renderableItems = [filterBox, ...(typeaheadFilteredChildren as React.ReactElement[])].map((option, index) =>\n        React.cloneElement(option, { key: index })\n      );\n    }\n\n    let variantProps: any;\n    let variantChildren: any;\n    if (customContent) {\n      variantProps = {\n        selected: selections,\n        openedOnEnter,\n        isCustomContent: true\n      };\n      variantChildren = customContent;\n    } else {\n      switch (variant) {\n        case 'single':\n          variantProps = {\n            selected: selections[0],\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n        case 'checkbox':\n          variantProps = {\n            checked: selections,\n            isGrouped,\n            hasInlineFilter,\n            openedOnEnter\n          };\n          variantChildren = renderableItems;\n          break;\n        case 'typeahead':\n          variantProps = {\n            selected: selections[0],\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n          if (variantChildren.length === 0) {\n            variantChildren.push(<SelectOption isDisabled key={0} value={noResultsFoundText} isNoResultsOption />);\n          }\n          break;\n        case 'typeaheadmulti':\n          variantProps = {\n            selected: selections,\n            openedOnEnter\n          };\n          variantChildren = onFavorite ? renderableItems : this.extendTypeaheadChildren(typeaheadCurrIndex);\n          if (variantChildren.length === 0) {\n            variantChildren.push(<SelectOption isDisabled key={0} value={noResultsFoundText} isNoResultsOption />);\n          }\n          break;\n      }\n    }\n\n    const innerMenu = (\n      <SelectMenu\n        // This removes the `position: absolute` styling from the `.pf-c-select__menu`\n        // allowing the menu to flip correctly\n        {...(isFlipEnabled && { style: { position: 'revert' } })}\n        {...props}\n        isGrouped={isGrouped}\n        selected={selections}\n        {...variantProps}\n        openedOnEnter={openedOnEnter}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        sendRef={this.sendRef}\n        keyHandler={this.handleMenuKeys}\n        maxHeight={maxHeight}\n        ref={this.menuComponentRef}\n        footer={footer}\n        footerRef={this.footerRef}\n        isLastOptionBeforeFooter={this.isLastOptionBeforeFooter}\n      >\n        {variantChildren}\n      </SelectMenu>\n    );\n\n    const menuContainer = footer ? <div className={css(styles.selectMenu)}> {innerMenu} </div> : innerMenu;\n\n    const popperContainer = (\n      <div\n        className={css(\n          styles.select,\n          isOpen && styles.modifiers.expanded,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning,\n          validated === ValidatedOptions.error && styles.modifiers.invalid,\n          direction === SelectDirection.up && styles.modifiers.top,\n          className\n        )}\n        {...(width && { style: { width } })}\n        {...(ariaDescribedby && { 'aria-describedby': ariaDescribedby })}\n        {...(validated !== ValidatedOptions.default && { 'aria-invalid': ariaInvalid })}\n      >\n        {isOpen && menuContainer}\n      </div>\n    );\n\n    const mainContainer = (\n      <div\n        className={css(\n          styles.select,\n          isOpen && styles.modifiers.expanded,\n          validated === ValidatedOptions.success && styles.modifiers.success,\n          validated === ValidatedOptions.warning && styles.modifiers.warning,\n          validated === ValidatedOptions.error && styles.modifiers.invalid,\n          direction === SelectDirection.up && styles.modifiers.top,\n          className\n        )}\n        ref={this.parentRef}\n        {...getOUIAProps(Select.displayName, ouiaId !== undefined ? ouiaId : this.state.ouiaStateId, ouiaSafe)}\n        {...(width && { style: { width } })}\n        {...(ariaDescribedby && { 'aria-describedby': ariaDescribedby })}\n        {...(validated !== ValidatedOptions.default && { 'aria-invalid': ariaInvalid })}\n      >\n        <SelectToggle\n          id={selectToggleId}\n          parentRef={this.parentRef}\n          menuRef={this.menuComponentRef}\n          {...(footer && { footerRef: this.footerRef })}\n          isOpen={isOpen}\n          isPlain={isPlain}\n          hasPlaceholderStyle={\n            hasPlaceholderStyle && (!selections.length || selections[0] === null || isSelectedPlaceholder)\n          }\n          onToggle={this.onToggle}\n          onEnter={this.onEnter}\n          onClose={this.onClose}\n          onBlur={onBlur}\n          variant={variant}\n          aria-labelledby={`${ariaLabelledBy || ''} ${selectToggleId}`}\n          aria-label={toggleAriaLabel}\n          handleTypeaheadKeys={this.handleTypeaheadKeys}\n          moveFocusToLastMenuItem={this.moveFocusToLastMenuItem}\n          isDisabled={isDisabled}\n          hasClearButton={hasOnClear}\n          hasFooter={footer !== undefined}\n          onClickTypeaheadToggleButton={this.onClickTypeaheadToggleButton}\n        >\n          {customContent && (\n            <div className={css(styles.selectToggleWrapper)}>\n              {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n              <span className={css(styles.selectToggleText)}>{placeholderText}</span>\n            </div>\n          )}\n          {variant === SelectVariant.single && !customContent && (\n            <React.Fragment>\n              <div className={css(styles.selectToggleWrapper)}>\n                {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                <span className={css(styles.selectToggleText)}>\n                  {this.getDisplay(selections[0] as string, 'node') || placeholderText || childPlaceholderText}\n                </span>\n              </div>\n              {hasOnClear && hasAnySelections && clearBtn}\n            </React.Fragment>\n          )}\n          {variant === SelectVariant.checkbox && !customContent && (\n            <React.Fragment>\n              <div className={css(styles.selectToggleWrapper)}>\n                {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                <span className={css(styles.selectToggleText)}>{placeholderText}</span>\n                {!isCheckboxSelectionBadgeHidden && hasAnySelections && (\n                  <div className={css(styles.selectToggleBadge)}>\n                    <span className={css(badgeStyles.badge, badgeStyles.modifiers.read)}>\n                      {this.generateSelectedBadge()}\n                    </span>\n                  </div>\n                )}\n              </div>\n              {hasOnClear && hasAnySelections && clearBtn}\n            </React.Fragment>\n          )}\n          {variant === SelectVariant.typeahead && !customContent && (\n            <React.Fragment>\n              <div className={css(styles.selectToggleWrapper)}>\n                {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                <input\n                  className={css(formStyles.formControl, styles.selectToggleTypeahead)}\n                  aria-activedescendant={typeaheadActiveChild && typeaheadActiveChild.id}\n                  id={`${selectToggleId}-select-typeahead`}\n                  aria-label={typeAheadAriaLabel}\n                  {...(typeAheadAriaDescribedby && { 'aria-describedby': typeAheadAriaDescribedby })}\n                  placeholder={placeholderText as string}\n                  value={\n                    typeaheadInputValue !== null\n                      ? typeaheadInputValue\n                      : this.getDisplay(selections[0] as string, 'text') || ''\n                  }\n                  type=\"text\"\n                  onClick={this.onClick}\n                  onChange={this.onChange}\n                  autoComplete={inputAutoComplete}\n                  disabled={isDisabled}\n                  ref={this.inputRef}\n                />\n              </div>\n              {hasOnClear && (selections[0] || typeaheadInputValue) && clearBtn}\n            </React.Fragment>\n          )}\n          {variant === SelectVariant.typeaheadMulti && !customContent && (\n            <React.Fragment>\n              <div className={css(styles.selectToggleWrapper)}>\n                {toggleIcon && <span className={css(styles.selectToggleIcon)}>{toggleIcon}</span>}\n                {selections && Array.isArray(selections) && selections.length > 0 && selectedChips}\n                <input\n                  className={css(formStyles.formControl, styles.selectToggleTypeahead)}\n                  aria-activedescendant={typeaheadActiveChild && typeaheadActiveChild.id}\n                  id={`${selectToggleId}-select-multi-typeahead-typeahead`}\n                  aria-label={typeAheadAriaLabel}\n                  aria-invalid={validated === ValidatedOptions.error}\n                  {...(typeAheadAriaDescribedby && { 'aria-describedby': typeAheadAriaDescribedby })}\n                  placeholder={placeholderText as string}\n                  value={typeaheadInputValue !== null ? typeaheadInputValue : ''}\n                  type=\"text\"\n                  onChange={this.onChange}\n                  onClick={this.onClick}\n                  autoComplete={inputAutoComplete}\n                  disabled={isDisabled}\n                  ref={this.inputRef}\n                />\n              </div>\n              {hasOnClear && ((selections && selections.length > 0) || typeaheadInputValue) && clearBtn}\n            </React.Fragment>\n          )}\n          {validated === ValidatedOptions.success && (\n            <span className={css(styles.selectToggleStatusIcon)}>\n              <CheckCircleIcon aria-hidden=\"true\" />\n            </span>\n          )}\n          {validated === ValidatedOptions.error && (\n            <span className={css(styles.selectToggleStatusIcon)}>\n              <ExclamationCircleIcon aria-hidden=\"true\" />\n            </span>\n          )}\n          {validated === ValidatedOptions.warning && (\n            <span className={css(styles.selectToggleStatusIcon)}>\n              <ExclamationTriangleIcon aria-hidden=\"true\" />\n            </span>\n          )}\n        </SelectToggle>\n        {isOpen && menuAppendTo === 'inline' && menuContainer}\n      </div>\n    );\n\n    const getParentElement = () => {\n      if (this.parentRef && this.parentRef.current) {\n        return this.parentRef.current.parentElement;\n      }\n      return null;\n    };\n\n    return (\n      <GenerateId>\n        {randomId => (\n          <SelectContext.Provider\n            value={{\n              onSelect,\n              onFavorite,\n              onClose: this.onClose,\n              variant,\n              inputIdPrefix: inputIdPrefix || randomId,\n              shouldResetOnSelect\n            }}\n          >\n            {menuAppendTo === 'inline' ? (\n              mainContainer\n            ) : (\n              <Popper\n                trigger={mainContainer}\n                popper={popperContainer}\n                direction={direction}\n                appendTo={menuAppendTo === 'parent' ? getParentElement() : menuAppendTo}\n                isVisible={isOpen}\n              />\n            )}\n          </SelectContext.Provider>\n        )}\n      </GenerateId>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}